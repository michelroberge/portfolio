openapi: 3.0.0
info:
  title: Portfolio API
  description: API for managing blogs, projects, AI chat, embeddings, search, and career timeline.
  version: 1.4.0

servers:
  - url: http://localhost:5000/api
    description: Local Development Server
  - url: https://yourdomain.com/api
    description: Production Server

tags:
  - name: Authentication
    description: User authentication and session management
  - name: Blogs
    description: Blog creation, retrieval, updates, and deletion
  - name: Projects
    description: Project portfolio management
  - name: AI Chat
    description: AI-powered chatbot using local LLM
  - name: Search
    description: Semantic search and source code search
  - name: Embeddings
    description: Vector embeddings for AI-powered search
  - name: Career Timeline
    description: Interactive career timeline and skills mapping
  - name: System
    description: Setup, settings, and configuration

paths:
  /auth/login:
    post:
      tags: [Authentication]
      summary: Login a user (session-based auth)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Login successful
        "401":
          description: Invalid credentials

  /auth/logout:
    get:
      tags: [Authentication]
      summary: Logout user (clears session)
      responses:
        "200":
          description: User logged out successfully

  /blogs:
    get:
      tags: [Blogs]
      summary: Retrieve all blog posts
      responses:
        "200":
          description: List of blog posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Blog"
    post:
      tags: [Blogs]
      summary: Create a new blog post
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BlogRequest"
      responses:
        "201":
          description: Blog created
        "400":
          description: Validation error

  /blogs/{id}:
    get:
      tags: [Blogs]
      summary: Get a specific blog post
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Blog entry retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Blog"
        "404":
          description: Blog not found
    put:
      tags: [Blogs]
      summary: Update a blog post
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BlogRequest"
      responses:
        "200":
          description: Blog updated
        "404":
          description: Blog not found
    delete:
      tags: [Blogs]
      summary: Delete a blog post
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Blog deleted
        "404":
          description: Blog not found

  /projects:
    get:
      tags: [Projects]
      summary: Retrieve all projects
      responses:
        "200":
          description: List of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Project"
    post:
      tags: [Projects]
      summary: Create a new project
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectRequest"
      responses:
        "201":
          description: Project created
        "400":
          description: Validation error

  /projects/{id}:
    put:
      tags: [Projects]
      summary: Update a project
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectRequest"
      responses:
        "200":
          description: Project updated
        "404":
          description: Project not found
    delete:
      tags: [Projects]
      summary: Delete a project
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Project deleted
        "404":
          description: Project not found

  /career/timeline:
    get:
      tags: [Career Timeline]
      summary: Retrieve career timeline
      responses:
        "200":
          description: Career timeline retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CareerEntry"
    post:
      tags: [Career Timeline]
      summary: Create a career timeline entry
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CareerEntry"
      responses:
        "201":
          description: Career timeline entry created
    delete:
      tags: [Career Timeline]
      summary: Delete a career timeline entry
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Career timeline entry deleted
  /chat:
    post:
      tags: [AI Chat]
      summary: Process user query with LLM chatbot
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChatRequest"
      responses:
        "200":
          description: Chat response from LLM
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatResponse"
    get:
      tags: [AI Chat]
      summary: Retrieve chat history for a session
      parameters:
        - name: sessionId
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Chat history retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ChatMessage"

  /search/semantic:
    post:
      tags: [Search]
      summary: Perform AI-powered semantic search
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SemanticSearchRequest"
      responses:
        "200":
          description: Search results retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SearchResult"

  /search/codebase:
    post:
      tags: [Search]
      summary: Search within indexed source code
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CodeSearchRequest"
      responses:
        "200":
          description: Code search results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CodeSearchResult"

  /embeddings/generate:
    post:
      tags: [Embeddings]
      summary: Generate embeddings for blogs and projects
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Embeddings generated successfully

  /embeddings/refresh:
    post:
      tags: [Embeddings]
      summary: Refresh embeddings from the database
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Embeddings refreshed successfully

  /embeddings/status:
    get:
      tags: [Embeddings]
      summary: Retrieve embedding sync status
      responses:
        "200":
          description: Embedding sync status retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmbeddingStatus"


components:
  schemas:
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password

    Blog:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        excerpt:
          type: string
        body:
          type: string
        isDraft:
          type: boolean
        publishAt:
          type: string
          format: date-time

    BlogRequest:
      type: object
      properties:
        title:
          type: string
        excerpt:
          type: string
        body:
          type: string
        isDraft:
          type: boolean
        publishAt:
          type: string
          format: date-time

    Project:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        image:
          type: string
        link:
          type: string

    ProjectRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        image:
          type: string
        link:
          type: string

    CareerEntry:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        company:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
          nullable: true
        technologies:
          type: array
          items:
            type: string
            
    ChatRequest:
      type: object
      properties:
        query:
          type: string
        sessionId:
          type: string
      required:
        - query

    ChatResponse:
      type: object
      properties:
        response:
          type: string
        sources:
          type: array
          items:
            type: string

    ChatMessage:
      type: object
      properties:
        query:
          type: string
        response:
          type: string
        timestamp:
          type: string
          format: date-time

    SemanticSearchRequest:
      type: object
      properties:
        query:
          type: string
        top_k:
          type: integer
          default: 5
      required:
        - query

    SearchResult:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        excerpt:
          type: string
        sourceType:
          type: string
          enum: [blog, project]

    CodeSearchRequest:
      type: object
      properties:
        query:
          type: string
      required:
        - query

    CodeSearchResult:
      type: object
      properties:
        file:
          type: string
        snippet:
          type: string
        lineNumber:
          type: integer

    EmbeddingStatus:
      type: object
      properties:
        lastUpdated:
          type: string
          format: date-time
        totalEmbeddings:
          type: integer

securitySchemes:
  cookieAuth:
    type: apiKey
    in: cookie
    name: auth-token
