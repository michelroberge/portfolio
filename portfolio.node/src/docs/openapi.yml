openapi: 3.1.0
info:
  title: Portfolio Backend API
  description: |
    Backend API for the portfolio application following Domain Driven Design principles.
    - Frontend project: portfolio.next
    - Backend project: portfolio.node
    - Backend is supported by MongoDB, Qdrant and Ollama
  version: 1.5.0

tags:
  - name: Public
    description: Public endpoints that don't require authentication
  - name: Auth
    description: Authentication and admin setup endpoints
  - name: Blogs
    description: Blog management endpoints
  - name: Projects
    description: Project management endpoints
  - name: Career
    description: Career timeline management endpoints
  - name: Pages
    description: Static page management endpoints
  - name: Comments
    description: Comment management endpoints
  - name: Files
    description: File management endpoints
  - name: Provider Config
    description: External provider configuration endpoints
  - name: Admin
    description: Admin-only endpoints
  - name: Chat
    description: Chat endpoints
  - name: Search
    description: Search endpoints

servers:
  - url: /api
    description: API base URL

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: auth-token
    bearerAuth:
      type: http
      scheme: bearer

  responses:
    DomainError:
      description: Domain-specific error
      content:
        application/json:
          schema:
            type: object
            required:
              - error
            properties:
              error:
                type: string
                description: Domain-specific error message

    UnauthorizedError:
      description: Authentication required
      content:
        application/json:
          schema:
            type: object
            required:
              - error
            properties:
              error:
                type: string
                example: "Authentication required"

    ForbiddenError:
      description: Admin access required
      content:
        application/json:
          schema:
            type: object
            required:
              - error
            properties:
              error:
                type: string
                example: "Admin access required"

    ValidationError:
      description: Invalid request data
      content:
        application/json:
          schema:
            type: object
            required:
              - error
            properties:
              error:
                type: string
                example: "Invalid request data"

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            required:
              - error
            properties:
              error:
                type: string
                example: "Resource not found"

  schemas:
    Blog:
      type: object
      description: Blog entry model representing a blog post
      required:
        - title
        - excerpt
        - body
      properties:
        id:
          type: string
          description: Unique identifier for the blog entry
        title:
          type: string
          description: Blog title
          minLength: 1
          maxLength: 200
        excerpt:
          type: string
          description: Short summary of the blog content
          minLength: 1
          maxLength: 500
        body:
          type: string
          description: Main content of the blog in markdown format
          minLength: 1
        isDraft:
          type: boolean
          description: Whether the blog is in draft status
          default: true
        publishAt:
          type: string
          format: date-time
          description: When to publish the blog
        createdAt:
          type: string
          format: date-time
          description: When the blog was created
        updatedAt:
          type: string
          format: date-time
          description: When the blog was last updated
        tags:
          type: array
          description: List of tags associated with the blog
          items:
            type: string
        slug:
          type: string
          description: URL-friendly version of the title
          pattern: '^[a-z0-9]+(?:-[a-z0-9]+)*$'

    Project:
      type: object
      description: Project model representing a portfolio project
      required:
        - title
        - excerpt
        - description
      properties:
        id:
          type: string
          description: Unique identifier for the project
        title:
          type: string
          description: Project title
          minLength: 1
          maxLength: 200
        excerpt:
          type: string
          description: Short summary of the project
          minLength: 1
          maxLength: 500
        description:
          type: string
          description: Detailed project description in markdown format
          minLength: 1
        isDraft:
          type: boolean
          description: Whether the project is in draft status
          default: true
        publishAt:
          type: string
          format: date-time
          description: When to publish the project
        createdAt:
          type: string
          format: date-time
          description: When the project was created
        updatedAt:
          type: string
          format: date-time
          description: When the project was last updated
        tags:
          type: array
          description: List of technologies used in the project
          items:
            type: string
        links:
          type: object
          description: External links related to the project
          properties:
            github:
              type: string
              format: uri
            demo:
              type: string
              format: uri
        slug:
          type: string
          description: URL-friendly version of the title
          pattern: '^[a-z0-9]+(?:-[a-z0-9]+)*$'

    CareerTimeline:
      type: object
      description: Career timeline entry model representing a work experience
      required:
        - title
        - company
        - startDate
      properties:
        id:
          type: string
          description: Unique identifier for the career entry
        title:
          type: string
          description: Job title
          minLength: 1
          maxLength: 200
        company:
          type: string
          description: Company name
          minLength: 1
          maxLength: 200
        startDate:
          type: string
          format: date
          description: When the position started
        endDate:
          type: string
          format: date
          description: When the position ended (null if current)
        description:
          type: string
          description: Job description in markdown format
        location:
          type: string
          description: Job location
          maxLength: 200
        skills:
          type: array
          description: Skills used in this position
          items:
            type: string
        order:
          type: integer
          description: Display order in the timeline (lower numbers first)
          minimum: 0
        isDraft:
          type: boolean
          description: Whether the entry is in draft status
          default: true

    Comment:
      type: object
      description: Comment model for blog posts and projects
      required:
        - parentType
        - parentId
        - content
      properties:
        id:
          type: string
          description: Unique identifier for the comment
        parentType:
          type: string
          enum: [blog, project]
          description: Type of content being commented on
        parentId:
          type: string
          description: ID of the blog or project
        content:
          type: string
          description: Comment content
          minLength: 1
          maxLength: 1000
        name:
          type: string
          description: Commenter's name
          maxLength: 100
        email:
          type: string
          description: Commenter's email
          format: email
          maxLength: 255
        approved:
          type: boolean
          description: Whether the comment is approved and visible
          default: false
        createdAt:
          type: string
          format: date-time
          description: When the comment was created
        updatedAt:
          type: string
          format: date-time
          description: When the comment was last updated

    Page:
      type: object
      description: Static page model for custom content pages
      required:
        - title
        - content
        - slug
      properties:
        id:
          type: string
          description: Unique identifier for the page
        title:
          type: string
          description: Page title
          minLength: 1
          maxLength: 200
        content:
          type: string
          description: Page content in markdown format
          minLength: 1
        slug:
          type: string
          description: URL-friendly identifier for the page
          pattern: '^[a-z0-9]+(?:-[a-z0-9]+)*$'
        isDraft:
          type: boolean
          description: Whether the page is in draft status
          default: true
        createdAt:
          type: string
          format: date-time
          description: When the page was created
        updatedAt:
          type: string
          format: date-time
          description: When the page was last updated

    ProviderConfig:
      type: object
      description: Configuration model for external service providers
      required:
        - provider
        - config
      properties:
        id:
          type: string
          description: Unique identifier for the provider configuration
        provider:
          type: string
          description: Name of the provider (e.g., 'ollama', 'qdrant')
          enum: [ollama, qdrant]
        config:
          type: object
          description: Provider-specific configuration
          additionalProperties: true
        createdAt:
          type: string
          format: date-time
          description: When the configuration was created
        updatedAt:
          type: string
          format: date-time
          description: When the configuration was last updated

    ChatMessage:
      type: object
      description: Chat message model for AI assistant conversations
      required:
        - content
      properties:
        content:
          type: string
          description: Message content
          minLength: 1
          maxLength: 2000
        sessionId:
          type: string
          description: Chat session identifier for maintaining conversation context
        role:
          type: string
          description: Role of the message sender
          enum: [user, assistant]
        timestamp:
          type: string
          format: date-time
          description: When the message was sent

    AuthCredentials:
      type: object
      description: Authentication credentials for user login and registration
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: Username for authentication
          minLength: 3
          maxLength: 50
          pattern: '^[a-zA-Z0-9_-]+$'
        password:
          type: string
          description: Password for authentication
          format: password
          minLength: 8
          maxLength: 100

paths:
  /auth/register:
    post:
      tags: [Public, Auth]
      summary: Register a new user
      description: Create a new user account with provided credentials
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthCredentials'
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User registered successfully"
                  setupRequired:
                    type: boolean
                    description: "True if this is the first user (admin setup required)"
        400:
          $ref: '#/components/responses/ValidationError'
        409:
          description: Username already exists
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DomainError'

  /auth/login:
    post:
      tags: [Auth]
      summary: Login to admin panel
      description: |
        Authenticate as an admin user.
        Returns authentication tokens on success.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthCredentials'
      responses:
        200:
          description: Login successful
          headers:
            Set-Cookie:
              schema:
                type: string
                example: auth-token=<token>
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Login successful"
                  user:
                    type: object
                    properties:
                      username:
                        type: string
                      isAdmin:
                        type: boolean
        400:
          $ref: '#/components/responses/ValidationError'
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /auth/logout:
    post:
      tags: [Auth]
      summary: Logout from admin panel
      description: |
        Invalidate the current authentication session.
      responses:
        200:
          description: Logged out successfully
          headers:
            Set-Cookie:
              schema:
                type: string
                example: auth-token=; expires=Thu, 01 Jan 1970 00:00:00 GMT
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logged out successfully"

  /auth/status:
    get:
      tags: [Auth]
      summary: Check authentication status
      description: |
        Check if the current session is authenticated and valid.
      responses:
        200:
          description: Authentication status
          content:
            application/json:
              schema:
                type: object
                properties:
                  authenticated:
                    type: boolean
                    description: "True if user is authenticated"
                  setupRequired:
                    type: boolean
                    description: "True if admin setup is required"
                  user:
                    type: object
                    description: "User details if authenticated"
                    properties:
                      username:
                        type: string
                      isAdmin:
                        type: boolean

  /blogs:
    get:
      tags: [Public]
      summary: Get published blogs
      description: Get all published blog entries
      responses:
        200:
          description: List of published blogs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Blog'
        404:
          $ref: '#/components/responses/NotFoundError'

  /blogs/{slug}:
    parameters:
      - name: slug
        in: path
        required: true
        schema:
          type: string
    get:
      tags: [Public]
      summary: Get published blog by slug
      description: Get a specific published blog entry by its slug
      responses:
        200:
          description: Blog details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
        404:
          $ref: '#/components/responses/NotFoundError'

  /blogs/search:
    get:
      tags: [Public]
      summary: Search published blogs
      description: Search through published blog entries
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: minScore
          in: query
          schema:
            type: number
            default: 0.7
      responses:
        200:
          description: Search results
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    score:
                      type: number
                    document:
                      $ref: '#/components/schemas/Blog'
        400:
          $ref: '#/components/responses/ValidationError'

  /projects:
    get:
      tags: [Public]
      summary: Get all published projects
      description: Get a list of all published, non-draft projects
      responses:
        200:
          description: List of published projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        404:
          $ref: '#/components/responses/NotFoundError'

  /projects/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags: [Public]
      summary: Get published project by ID
      description: Get a specific published project by its ID
      responses:
        200:
          description: Project details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        404:
          $ref: '#/components/responses/NotFoundError'

  /projects/search:
    post:
      tags: [Public]
      summary: Search projects
      description: Search through published projects
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - query
              properties:
                query:
                  type: string
                limit:
                  type: integer
                  default: 10
                minScore:
                  type: number
                  default: 0.7
      responses:
        200:
          description: Search results
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    score:
                      type: number
                    document:
                      $ref: '#/components/schemas/Project'
        400:
          $ref: '#/components/responses/ValidationError'

  /chat:
    post:
      tags: [Public, Chat]
      summary: Process chat message
      description: Send a message to the AI assistant and get a response
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatMessage'
      responses:
        200:
          description: Chat response
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
                    description: AI assistant's response
        400:
          $ref: '#/components/responses/ValidationError'
        503:
          description: AI service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DomainError'

  /chat/greeting:
    get:
      tags: [Public, Chat]
      summary: Get random AI greeting
      description: Get a randomly generated greeting from the AI assistant
      responses:
        200:
          description: Random greeting
          content:
            application/json:
              schema:
                type: object
                properties:
                  greeting:
                    type: string
        503:
          description: AI service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DomainError'

  /chat/warmup-status:
    get:
      tags: [Public, Chat]
      summary: Check AI warmup status
      description: Check if the AI model is ready to process requests
      responses:
        200:
          description: Warmup status
          content:
            application/json:
              schema:
                type: object
                properties:
                  warmupComplete:
                    type: boolean
        503:
          description: AI service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DomainError'

  /career:
    get:
      tags: [Public]
      summary: Get published career timeline entries
      description: Get a list of all published career timeline entries
      responses:
        200:
          description: List of published career entries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CareerTimeline'
        404:
          $ref: '#/components/responses/NotFoundError'

  /pages/{slug}:
    parameters:
      - name: slug
        in: path
        required: true
        schema:
          type: string
          description: URL-friendly identifier for the page
    get:
      tags: [Public]
      summary: Get published page
      description: Get a specific published page by its slug
      responses:
        200:
          description: Page content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
        400:
          $ref: '#/components/responses/ValidationError'
        404:
          $ref: '#/components/responses/NotFoundError'

  /files/{filename}:
    parameters:
      - name: filename
        in: path
        required: true
        schema:
          type: string
    get:
      tags: [Public, Files]
      summary: Get public file by filename
      description: Get a specific public file by its filename
      responses:
        200:
          description: File content
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        404:
          $ref: '#/components/responses/NotFoundError'

  /search:
    post:
      tags: [Public, Search]
      summary: Global search across all entities
      description: Search across all published content (blogs, projects, pages)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - query
              properties:
                query:
                  type: string
                limit:
                  type: integer
                  default: 10
                minScore:
                  type: number
                  default: 0.7
      responses:
        200:
          description: Search results
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    score:
                      type: number
                    document:
                      type: object
        400:
          $ref: '#/components/responses/ValidationError'

  /comments/{parentType}/{parentId}:
    parameters:
      - name: parentType
        in: path
        required: true
        schema:
          type: string
          enum: [blog, project]
          description: Type of content being commented on
      - name: parentId
        in: path
        required: true
        schema:
          type: string
          description: ID of the blog or project
    get:
      tags: [Public]
      summary: Get approved comments
      description: |
        Get all approved comments for a specific content item.
        This endpoint is public and returns only approved comments.
      responses:
        200:
          description: List of approved comments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        400:
          $ref: '#/components/responses/ValidationError'
        404:
          description: Parent content not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DomainError'
    post:
      tags: [Public]
      summary: Submit new comment
      description: |
        Submit a new comment for a specific content item.
        The comment will be pending admin approval before being publicly visible.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
                - name
                - email
              properties:
                content:
                  type: string
                  minLength: 1
                  maxLength: 1000
                  description: Comment content
                name:
                  type: string
                  minLength: 1
                  maxLength: 100
                  description: Commenter's name
                email:
                  type: string
                  format: email
                  maxLength: 255
                  description: Commenter's email (will not be publicly displayed)
      responses:
        201:
          description: Comment submitted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Comment submitted and pending approval"
                  id:
                    type: string
                    description: ID of the created comment
        400:
          $ref: '#/components/responses/ValidationError'
        404:
          description: Parent content not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DomainError'

  /admin/comments:
    get:
      tags: [Comments]
      summary: Get all comments
      description: |
        Get all comments regardless of approval status.
        Supports filtering by content type, content ID, and approval status.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      parameters:
        - name: parentType
          in: query
          schema:
            type: string
            enum: [blog, project]
            description: Optional filter by content type
        - name: parentId
          in: query
          schema:
            type: string
            description: Optional filter by content ID
        - name: approved
          in: query
          schema:
            type: boolean
            description: Optional filter by approval status
      responses:
        200:
          description: List of comments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'

  /admin/comments/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          description: Comment identifier
    put:
      tags: [Comments]
      summary: Update comment status
      description: |
        Approve or reject a comment.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - approved
              properties:
                approved:
                  type: boolean
                  description: Whether to approve or reject the comment
      responses:
        200:
          description: Comment updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        400:
          $ref: '#/components/responses/ValidationError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          description: Comment not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DomainError'
    delete:
      tags: [Comments]
      summary: Delete comment
      description: |
        Permanently delete a comment.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        204:
          description: Comment deleted successfully
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          description: Comment not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DomainError'

  /admin/setup:
    post:
      tags: [Auth]
      summary: Initial admin setup
      description: |
        Create the first admin user.
        This endpoint is only available when no admin users exist.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthCredentials'
      responses:
        201:
          description: Admin user created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Admin setup completed"
        400:
          $ref: '#/components/responses/ValidationError'
        409:
          description: Admin already exists
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DomainError'

  /admin/blogs:
    get:
      tags: [Blogs]
      summary: Get all blogs
      description: |
        Get all blogs regardless of draft status.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        200:
          description: List of all blogs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Blog'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
    post:
      tags: [Blogs]
      summary: Create new blog
      description: |
        Create a new blog entry.
        Defaults to draft status.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Blog'
      responses:
        201:
          description: Blog created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
        400:
          $ref: '#/components/responses/ValidationError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'

  /admin/projects:
    get:
      tags: [Projects]
      summary: Get all projects
      description: |
        Get all projects regardless of draft status.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        200:
          description: List of all projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
    post:
      tags: [Projects]
      summary: Create new project
      description: |
        Create a new project entry.
        Defaults to draft status.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        201:
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        400:
          $ref: '#/components/responses/ValidationError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'

  /admin/career:
    get:
      tags: [Career]
      summary: Get all career entries
      description: |
        Get all career timeline entries regardless of draft status.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        200:
          description: List of all career entries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CareerTimeline'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
    post:
      tags: [Career]
      summary: Create new career entry
      description: |
        Create a new career timeline entry.
        Defaults to draft status.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CareerTimeline'
      responses:
        201:
          description: Career entry created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CareerTimeline'
        400:
          $ref: '#/components/responses/ValidationError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'

  /admin/pages:
    get:
      tags: [Pages]
      summary: Get all pages
      description: |
        Get all pages regardless of draft status.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        200:
          description: List of all pages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Page'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
    post:
      tags: [Pages]
      summary: Create new page
      description: |
        Create a new static page.
        Defaults to draft status.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Page'
      responses:
        201:
          description: Page created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
        400:
          $ref: '#/components/responses/ValidationError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'

  /admin/provider-config:
    get:
      tags: [Provider Config]
      summary: Get provider configuration
      description: Get the current configuration for external providers. Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        200:
          description: List of provider configurations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProviderConfig'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
    post:
      tags: [Provider Config]
      summary: Update provider configuration
      description: Update the configuration for external providers. Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProviderConfig'
      responses:
        201:
          description: Provider configuration created/updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderConfig'
        400:
          $ref: '#/components/responses/ValidationError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'

  /admin/files:
    get:
      tags: [Files]
      summary: List all files
      description: Get a list of all uploaded files. Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        200:
          description: List of files
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    filename:
                      type: string
                    size:
                      type: integer
                    lastModified:
                      type: string
                      format: date-time
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
    post:
      tags: [Files]
      summary: Upload file
      description: Upload a new file to the server. Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
      responses:
        201:
          description: File uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  filename:
                    type: string
                  url:
                    type: string
                    format: uri
        400:
          $ref: '#/components/responses/ValidationError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'

  /admin/blogs/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          description: Blog identifier
    get:
      tags: [Blogs]
      summary: Get blog by ID
      description: |
        Get a specific blog entry regardless of draft status.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        200:
          description: Blog details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          description: Blog not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DomainError'
    put:
      tags: [Blogs]
      summary: Update blog
      description: |
        Update a blog entry.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Blog'
      responses:
        200:
          description: Blog updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
        400:
          $ref: '#/components/responses/ValidationError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          description: Blog not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DomainError'
    delete:
      tags: [Blogs]
      summary: Delete blog
      description: |
        Permanently delete a blog entry.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        204:
          description: Blog deleted successfully
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          description: Blog not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DomainError'

  /admin/projects/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          description: Project identifier
    get:
      tags: [Projects]
      summary: Get project by ID
      description: |
        Get a specific project regardless of draft status.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        200:
          description: Project details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DomainError'
    put:
      tags: [Projects]
      summary: Update project
      description: |
        Update a project.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        200:
          description: Project updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        400:
          $ref: '#/components/responses/ValidationError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DomainError'
    delete:
      tags: [Projects]
      summary: Delete project
      description: |
        Permanently delete a project.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        204:
          description: Project deleted successfully
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DomainError'

  /admin/pages/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          description: Page identifier
    get:
      tags: [Pages]
      summary: Get page by ID
      description: |
        Get a specific page regardless of draft status.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        200:
          description: Page details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          description: Page not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DomainError'
    put:
      tags: [Pages]
      summary: Update page
      description: |
        Update a page.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Page'
      responses:
        200:
          description: Page updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
        400:
          $ref: '#/components/responses/ValidationError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          description: Page not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DomainError'
    delete:
      tags: [Pages]
      summary: Delete page
      description: |
        Permanently delete a page.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        204:
          description: Page deleted successfully
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          description: Page not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DomainError'

  /admin/files/{filename}:
    parameters:
      - name: filename
        in: path
        required: true
        schema:
          type: string
          description: Name of the file including extension
    get:
      tags: [Files]
      summary: Get file details
      description: |
        Get details about a specific file.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        200:
          description: File details
          content:
            application/json:
              schema:
                type: object
                properties:
                  filename:
                    type: string
                  size:
                    type: integer
                  lastModified:
                    type: string
                    format: date-time
                  url:
                    type: string
                    format: uri
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DomainError'
    delete:
      tags: [Files]
      summary: Delete file
      description: |
        Permanently delete a file.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        204:
          description: File deleted successfully
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DomainError'

  /admin/career/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          description: Career timeline entry identifier
    get:
      tags: [Career]
      summary: Get career entry by ID
      description: |
        Get a specific career timeline entry regardless of draft status.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        200:
          description: Career timeline entry details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CareerTimeline'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          description: Career timeline entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DomainError'
    put:
      tags: [Career]
      summary: Update career entry
      description: |
        Update a career timeline entry.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CareerTimeline'
      responses:
        200:
          description: Career timeline entry updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CareerTimeline'
        400:
          $ref: '#/components/responses/ValidationError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          description: Career timeline entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DomainError'
    delete:
      tags: [Career]
      summary: Delete career entry
      description: |
        Permanently delete a career timeline entry.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        204:
          description: Career timeline entry deleted successfully
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          description: Career timeline entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DomainError'
