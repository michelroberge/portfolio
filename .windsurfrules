1. Use Domain Driven Design.
2. Model source of truth is backend.
3. Use Next with TypeScript for Frontend
4. Aim for reusability and scalability
5. Use SOLID principles
6. Use Clean Architecture
7. Do not over-engineer
8. Be consistent from a feature to another (i.e. apply same patterns)
9. Develop for testability (Jest)
10. Models / entities / interfaces should be in their own scripts, never in a page implementation or in a service implementation.

Frontend Specifics
11. The correct page initialization for SSR is promise params with await.
Good Example:
```
import { notFound } from "next/navigation";
import { fetchBlogEntry } from "@/services/blogService";
import BlogView from "@/components/blog/BlogView";

export default async function BlogPage({ params }: { params: Promise<{ slug: string }> }) {
  const { slug } = await params;
  if (!slug) return notFound();

  const id = slug.split("-").pop(); // Extract the last part as the ID
  if (!id) return notFound();

  try {
    const blog = await fetchBlogEntry(id);
    return <BlogView blog={blog} />;
  } catch (err) {
    console.error('Failed to fetch blog:', err);
    return notFound();
  }
}

```
12. All catch(err) should be followed by a console.error(err)
13. Use tailwindcss for formatting
14. Optimize Frontend for SSR
15. Use Qdrant for vector search
16. Use Ollama for AI
