This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.vs/Portfolio/config/applicationhost.config
.vs/Portfolio/v17/DocumentLayout.backup.json
.vs/Portfolio/v17/DocumentLayout.json
Portfolio.sln
src/Portfolio.Application/bin/Debug/net8.0/Portfolio.Application.deps.json
src/Portfolio.Application/Common/Behaviors/LoggingBehavior.cs
src/Portfolio.Application/Common/Behaviors/PerformanceBehavior.cs
src/Portfolio.Application/Common/Behaviors/TransactionBehavior.cs
src/Portfolio.Application/Common/Behaviors/ValidationBehavior.cs
src/Portfolio.Application/Common/CQRS/ICommand.cs
src/Portfolio.Application/Common/CQRS/IQuery.cs
src/Portfolio.Application/Common/DTOs/BaseDto.cs
src/Portfolio.Application/Common/DTOs/BlogDto.cs
src/Portfolio.Application/Common/DTOs/PageDto.cs
src/Portfolio.Application/Common/DTOs/ProjectDto.cs
src/Portfolio.Application/Common/DTOs/UserDto.cs
src/Portfolio.Application/Common/Exceptions/ApplicationException.cs
src/Portfolio.Application/Common/Exceptions/NotFoundException.cs
src/Portfolio.Application/Common/Exceptions/ValidationException.cs
src/Portfolio.Application/Common/Mappings/MappingProfile.cs
src/Portfolio.Application/Common/Models/PaginatedList.cs
src/Portfolio.Application/Common/Models/Result.cs
src/Portfolio.Application/DependencyInjection.cs
src/Portfolio.Application/Interfaces/Persistence/IBlogRepository.cs
src/Portfolio.Application/Interfaces/Persistence/IPageRepository.cs
src/Portfolio.Application/Interfaces/Persistence/IProjectRepository.cs
src/Portfolio.Application/Interfaces/Persistence/IRepository.cs
src/Portfolio.Application/Interfaces/Persistence/IUnitOfWork.cs
src/Portfolio.Application/Interfaces/Persistence/IUserRepository.cs
src/Portfolio.Application/Interfaces/Services/IAiService.cs
src/Portfolio.Application/Interfaces/Services/ICacheService.cs
src/Portfolio.Application/Interfaces/Services/ICurrentUserService.cs
src/Portfolio.Application/Interfaces/Services/IFileStorageService.cs
src/Portfolio.Application/Interfaces/Services/IVectorSearchService.cs
src/Portfolio.Application/obj/Debug/net8.0/.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
src/Portfolio.Application/obj/Debug/net8.0/Portfolio.Application.AssemblyInfo.cs
src/Portfolio.Application/obj/Debug/net8.0/Portfolio.Application.AssemblyInfoInputs.cache
src/Portfolio.Application/obj/Debug/net8.0/Portfolio.Application.csproj.CoreCompileInputs.cache
src/Portfolio.Application/obj/Debug/net8.0/Portfolio.Application.csproj.FileListAbsolute.txt
src/Portfolio.Application/obj/Debug/net8.0/Portfolio.Application.GeneratedMSBuildEditorConfig.editorconfig
src/Portfolio.Application/obj/Debug/net8.0/Portfolio.Application.GlobalUsings.g.cs
src/Portfolio.Application/obj/Debug/net8.0/Portfolio.Application.sourcelink.json
src/Portfolio.Application/obj/Portfolio.Application.csproj.nuget.dgspec.json
src/Portfolio.Application/obj/Portfolio.Application.csproj.nuget.g.props
src/Portfolio.Application/obj/Portfolio.Application.csproj.nuget.g.targets
src/Portfolio.Application/obj/project.assets.json
src/Portfolio.Application/obj/project.nuget.cache
src/Portfolio.Application/Portfolio.Application.csproj
src/Portfolio.Application/UseCases/Blogs/Commands/CreateBlog/CreateBlogCommand.cs
src/Portfolio.Application/UseCases/Blogs/Commands/CreateBlog/CreateBlogCommandHandler.cs
src/Portfolio.Application/UseCases/Blogs/Commands/CreateBlog/CreateBlogCommandValidator.cs
src/Portfolio.Application/UseCases/Blogs/Commands/DeleteBlog/DeleteBlogCommand.cs
src/Portfolio.Application/UseCases/Blogs/Commands/DeleteBlog/DeleteBlogCommandHandler.cs
src/Portfolio.Application/UseCases/Blogs/Commands/UpdateBlog/UpdateBlogCommand.cs
src/Portfolio.Application/UseCases/Blogs/Commands/UpdateBlog/UpdateBlogCommandHandler.cs
src/Portfolio.Application/UseCases/Blogs/Queries/GetAllBlogs/GetAllBlogsQuery.cs
src/Portfolio.Application/UseCases/Blogs/Queries/GetAllBlogs/GetAllBlogsQueryHandler.cs
src/Portfolio.Application/UseCases/Blogs/Queries/GetBlogById/GetBlogByIdQuery.cs
src/Portfolio.Application/UseCases/Blogs/Queries/GetBlogById/GetBlogByIdQueryHandler.cs
src/Portfolio.Application/UseCases/Blogs/Queries/GetBlogByLink/GetBlogByLinkQuery.cs
src/Portfolio.Application/UseCases/Blogs/Queries/GetBlogByLink/GetBlogByLinkQueryHandler.cs
src/Portfolio.Application/UseCases/Blogs/Queries/GetBlogBySlug/GetBlogBySlugQuery.cs
src/Portfolio.Application/UseCases/Blogs/Queries/GetBlogBySlug/GetBlogBySlugQueryHandler.cs
src/Portfolio.Application/UseCases/Blogs/Queries/GetPublishedBlogs/GetPublishedBlogsQuery.cs
src/Portfolio.Application/UseCases/Blogs/Queries/GetPublishedBlogs/GetPublishedBlogsQueryHandler.cs
src/Portfolio.Application/UseCases/Pages/Commands/CreatePage/CreatePageCommand.cs
src/Portfolio.Application/UseCases/Pages/Commands/CreatePage/CreatePageCommandHandler.cs
src/Portfolio.Application/UseCases/Pages/Commands/DeletePage/DeletePageCommand.cs
src/Portfolio.Application/UseCases/Pages/Commands/DeletePage/DeletePageCommandHandler.cs
src/Portfolio.Application/UseCases/Pages/Commands/UpdatePage/UpdatePageCommand.cs
src/Portfolio.Application/UseCases/Pages/Commands/UpdatePage/UpdatePageCommandHandler.cs
src/Portfolio.Application/UseCases/Pages/Queries/GetAllPages/GetAllPagesQuery.cs
src/Portfolio.Application/UseCases/Pages/Queries/GetAllPages/GetAllPagesQueryHandler.cs
src/Portfolio.Application/UseCases/Pages/Queries/GetPageById/GetPageByIdQuery.cs
src/Portfolio.Application/UseCases/Pages/Queries/GetPageById/GetPageByIdQueryHandler.cs
src/Portfolio.Application/UseCases/Pages/Queries/GetPageBySlug/GetPageBySlugQuery.cs
src/Portfolio.Application/UseCases/Pages/Queries/GetPageBySlug/GetPageBySlugQueryHandler.cs
src/Portfolio.Application/UseCases/Projects/Commands/CreateProject/CreateProjectCommand.cs
src/Portfolio.Application/UseCases/Projects/Commands/CreateProject/CreateProjectCommandHandler.cs
src/Portfolio.Application/UseCases/Projects/Commands/CreateProject/CreateProjectCommandValidator.cs
src/Portfolio.Application/UseCases/Projects/Commands/DeleteProject/DeleteProjectCommand.cs
src/Portfolio.Application/UseCases/Projects/Commands/DeleteProject/DeleteProjectCommandHandler.cs
src/Portfolio.Application/UseCases/Projects/Commands/UpdateProject/UpdateProjectCommand.cs
src/Portfolio.Application/UseCases/Projects/Commands/UpdateProject/UpdateProjectCommandHandler.cs
src/Portfolio.Application/UseCases/Projects/Queries/GetAllProjects/GetAllProjectsQuery.cs
src/Portfolio.Application/UseCases/Projects/Queries/GetAllProjects/GetAllProjectsQueryHandler.cs
src/Portfolio.Application/UseCases/Projects/Queries/GetProjectById/GetProjectByIdQuery.cs
src/Portfolio.Application/UseCases/Projects/Queries/GetProjectById/GetProjectByIdQueryHandler.cs
src/Portfolio.Application/UseCases/Projects/Queries/GetProjectByLink/GetProjectByLinkQuery.cs
src/Portfolio.Application/UseCases/Projects/Queries/GetProjectByLink/GetProjectByLinkQueryHandler.cs
src/Portfolio.Application/UseCases/Users/Commands/CreateUser/CreateUserCommand.cs
src/Portfolio.Application/UseCases/Users/Commands/CreateUser/CreateUserCommandHandler.cs
src/Portfolio.Application/UseCases/Users/Commands/CreateUser/CreateUserCommandValidator.cs
src/Portfolio.Application/UseCases/Users/Commands/DeleteUser/DeleteUserCommand.cs
src/Portfolio.Application/UseCases/Users/Commands/DeleteUser/DeleteUserCommandHandler.cs
src/Portfolio.Application/UseCases/Users/Commands/UpdateUser/UpdateUserCommand.cs
src/Portfolio.Application/UseCases/Users/Commands/UpdateUser/UpdateUserCommandHandler.cs
src/Portfolio.Application/UseCases/Users/Queries/GetAllUsers/GetAllUsersQuery.cs
src/Portfolio.Application/UseCases/Users/Queries/GetAllUsers/GetAllUsersQueryHandler.cs
src/Portfolio.Application/UseCases/Users/Queries/GetUserById/GetUserByIdQuery.cs
src/Portfolio.Application/UseCases/Users/Queries/GetUserById/GetUserByIdQueryHandler.cs
src/Portfolio.Application/UseCases/Users/Queries/GetUserByUsername/GetUserByUsernameQuery.cs
src/Portfolio.Application/UseCases/Users/Queries/GetUserByUsername/GetUserByUsernameQueryHandler.cs
src/Portfolio.Domain/bin/Debug/net8.0/Portfolio.Domain.deps.json
src/Portfolio.Domain/bin/Debug/net9.0/Portfolio.Domain.deps.json
src/Portfolio.Domain/Common/DuplicateSlugException.cs
src/Portfolio.Domain/Common/Entity.cs
src/Portfolio.Domain/Common/IEntity.cs
src/Portfolio.Domain/Common/IPublishable.cs
src/Portfolio.Domain/Common/NotFoundException.cs
src/Portfolio.Domain/Common/PublishableEntity.cs
src/Portfolio.Domain/Common/ValueObject.cs
src/Portfolio.Domain/Entities/Blog.cs
src/Portfolio.Domain/Entities/Page.cs
src/Portfolio.Domain/Entities/Project.cs
src/Portfolio.Domain/Entities/User.cs
src/Portfolio.Domain/Exceptions/DomainValidationException.cs
src/Portfolio.Domain/obj/Debug/net8.0/.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
src/Portfolio.Domain/obj/Debug/net8.0/Portfolio.Domain.AssemblyInfo.cs
src/Portfolio.Domain/obj/Debug/net8.0/Portfolio.Domain.AssemblyInfoInputs.cache
src/Portfolio.Domain/obj/Debug/net8.0/Portfolio.Domain.csproj.CoreCompileInputs.cache
src/Portfolio.Domain/obj/Debug/net8.0/Portfolio.Domain.csproj.FileListAbsolute.txt
src/Portfolio.Domain/obj/Debug/net8.0/Portfolio.Domain.GeneratedMSBuildEditorConfig.editorconfig
src/Portfolio.Domain/obj/Debug/net8.0/Portfolio.Domain.GlobalUsings.g.cs
src/Portfolio.Domain/obj/Debug/net8.0/Portfolio.Domain.sourcelink.json
src/Portfolio.Domain/obj/Debug/net9.0/.NETCoreApp,Version=v9.0.AssemblyAttributes.cs
src/Portfolio.Domain/obj/Debug/net9.0/Portfolio.Domain.AssemblyInfo.cs
src/Portfolio.Domain/obj/Debug/net9.0/Portfolio.Domain.AssemblyInfoInputs.cache
src/Portfolio.Domain/obj/Debug/net9.0/Portfolio.Domain.csproj.CoreCompileInputs.cache
src/Portfolio.Domain/obj/Debug/net9.0/Portfolio.Domain.csproj.FileListAbsolute.txt
src/Portfolio.Domain/obj/Debug/net9.0/Portfolio.Domain.GeneratedMSBuildEditorConfig.editorconfig
src/Portfolio.Domain/obj/Debug/net9.0/Portfolio.Domain.GlobalUsings.g.cs
src/Portfolio.Domain/obj/Debug/net9.0/Portfolio.Domain.sourcelink.json
src/Portfolio.Domain/obj/Portfolio.Domain.csproj.nuget.dgspec.json
src/Portfolio.Domain/obj/Portfolio.Domain.csproj.nuget.g.props
src/Portfolio.Domain/obj/Portfolio.Domain.csproj.nuget.g.targets
src/Portfolio.Domain/obj/project.assets.json
src/Portfolio.Domain/obj/project.nuget.cache
src/Portfolio.Domain/Portfolio.Domain.csproj
src/Portfolio.Domain/ValueObjects/Email.cs
src/Portfolio.Domain/ValueObjects/Slug.cs
src/Portfolio.Infrastructure/bin/Debug/net8.0/Portfolio.Infrastructure.deps.json
src/Portfolio.Infrastructure/bin/Debug/net8.0/Portfolio.Infrastructure.runtimeconfig.json
src/Portfolio.Infrastructure/DependencyInjection.cs
src/Portfolio.Infrastructure/DependencyInjection/InfrastructureServiceExtensions.cs
src/Portfolio.Infrastructure/obj/Debug/net8.0/.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
src/Portfolio.Infrastructure/obj/Debug/net8.0/Portfolio.Infrastructure.AssemblyInfo.cs
src/Portfolio.Infrastructure/obj/Debug/net8.0/Portfolio.Infrastructure.AssemblyInfoInputs.cache
src/Portfolio.Infrastructure/obj/Debug/net8.0/Portfolio.Infrastructure.csproj.CoreCompileInputs.cache
src/Portfolio.Infrastructure/obj/Debug/net8.0/Portfolio.Infrastructure.csproj.FileListAbsolute.txt
src/Portfolio.Infrastructure/obj/Debug/net8.0/Portfolio.Infrastructure.GeneratedMSBuildEditorConfig.editorconfig
src/Portfolio.Infrastructure/obj/Debug/net8.0/Portfolio.Infrastructure.genruntimeconfig.cache
src/Portfolio.Infrastructure/obj/Debug/net8.0/Portfolio.Infrastructure.GlobalUsings.g.cs
src/Portfolio.Infrastructure/obj/Debug/net8.0/Portfolio.Infrastructure.sourcelink.json
src/Portfolio.Infrastructure/obj/Portfolio.Infrastructure.csproj.nuget.dgspec.json
src/Portfolio.Infrastructure/obj/Portfolio.Infrastructure.csproj.nuget.g.props
src/Portfolio.Infrastructure/obj/Portfolio.Infrastructure.csproj.nuget.g.targets
src/Portfolio.Infrastructure/obj/project.assets.json
src/Portfolio.Infrastructure/obj/project.nuget.cache
src/Portfolio.Infrastructure/Persistence/ApplicationDbContext.cs
src/Portfolio.Infrastructure/Persistence/Configurations/BaseConfiguration.cs
src/Portfolio.Infrastructure/Persistence/Configurations/BlogConfiguration.cs
src/Portfolio.Infrastructure/Persistence/Configurations/PageConfiguration.cs
src/Portfolio.Infrastructure/Persistence/Configurations/ProjectConfiguration.cs
src/Portfolio.Infrastructure/Persistence/Configurations/UserConfiguration.cs
src/Portfolio.Infrastructure/Persistence/Repositories/BaseRepository.cs
src/Portfolio.Infrastructure/Persistence/Repositories/BlogRepository.cs
src/Portfolio.Infrastructure/Persistence/Repositories/PageRepository.cs
src/Portfolio.Infrastructure/Persistence/Repositories/ProjectRepository.cs
src/Portfolio.Infrastructure/Persistence/Repositories/UserRepository.cs
src/Portfolio.Infrastructure/Persistence/UnitOfWork.cs
src/Portfolio.Infrastructure/Portfolio.Infrastructure.csproj
src/Portfolio.WebApi/appsettings.Development.json
src/Portfolio.WebApi/appsettings.json
src/Portfolio.WebApi/bin/Debug/net8.0/appsettings.Development.json
src/Portfolio.WebApi/bin/Debug/net8.0/appsettings.json
src/Portfolio.WebApi/bin/Debug/net8.0/Portfolio.WebApi.deps.json
src/Portfolio.WebApi/bin/Debug/net8.0/Portfolio.WebApi.runtimeconfig.json
src/Portfolio.WebApi/bin/Debug/net8.0/Portfolio.WebApi.staticwebassets.endpoints.json
src/Portfolio.WebApi/bin/Debug/net9.0/appsettings.Development.json
src/Portfolio.WebApi/bin/Debug/net9.0/appsettings.json
src/Portfolio.WebApi/bin/Debug/net9.0/Portfolio.WebApi.deps.json
src/Portfolio.WebApi/bin/Debug/net9.0/Portfolio.WebApi.runtimeconfig.json
src/Portfolio.WebApi/bin/Debug/net9.0/Portfolio.WebApi.staticwebassets.endpoints.json
src/Portfolio.WebApi/Extensions/ApplicationBuilderExtensions.cs
src/Portfolio.WebApi/Extensions/EndpointExtensions.cs
src/Portfolio.WebApi/Extensions/Endpoints/BaseEndpoints.cs
src/Portfolio.WebApi/Extensions/Endpoints/BlogEndpoints.cs
src/Portfolio.WebApi/Extensions/Endpoints/EndpointBase.cs
src/Portfolio.WebApi/Extensions/Endpoints/PageEndpoints.cs
src/Portfolio.WebApi/Extensions/Endpoints/ProjectEndpoints.cs
src/Portfolio.WebApi/Extensions/Endpoints/UserEndpoints.cs
src/Portfolio.WebApi/Extensions/WebApiServiceExtensions.cs
src/Portfolio.WebApi/obj/Debug/net8.0/.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
src/Portfolio.WebApi/obj/Debug/net8.0/ApiEndpoints.json
src/Portfolio.WebApi/obj/Debug/net8.0/EndpointInfo/Portfolio.WebApi.json
src/Portfolio.WebApi/obj/Debug/net8.0/EndpointInfo/Portfolio.WebApi.OpenApiFiles.cache
src/Portfolio.WebApi/obj/Debug/net8.0/Portfolio.WebApi.AssemblyInfo.cs
src/Portfolio.WebApi/obj/Debug/net8.0/Portfolio.WebApi.AssemblyInfoInputs.cache
src/Portfolio.WebApi/obj/Debug/net8.0/Portfolio.WebApi.csproj.CoreCompileInputs.cache
src/Portfolio.WebApi/obj/Debug/net8.0/Portfolio.WebApi.csproj.FileListAbsolute.txt
src/Portfolio.WebApi/obj/Debug/net8.0/Portfolio.WebApi.GeneratedMSBuildEditorConfig.editorconfig
src/Portfolio.WebApi/obj/Debug/net8.0/Portfolio.WebApi.genruntimeconfig.cache
src/Portfolio.WebApi/obj/Debug/net8.0/Portfolio.WebApi.GlobalUsings.g.cs
src/Portfolio.WebApi/obj/Debug/net8.0/Portfolio.WebApi.MvcApplicationPartsAssemblyInfo.cs
src/Portfolio.WebApi/obj/Debug/net8.0/Portfolio.WebApi.sourcelink.json
src/Portfolio.WebApi/obj/Debug/net8.0/project.razor.json
src/Portfolio.WebApi/obj/Debug/net8.0/staticwebassets.build.endpoints.json
src/Portfolio.WebApi/obj/Debug/net8.0/staticwebassets.build.json
src/Portfolio.WebApi/obj/Debug/net8.0/staticwebassets/msbuild.build.Portfolio.WebApi.props
src/Portfolio.WebApi/obj/Debug/net8.0/staticwebassets/msbuild.buildMultiTargeting.Portfolio.WebApi.props
src/Portfolio.WebApi/obj/Debug/net8.0/staticwebassets/msbuild.buildTransitive.Portfolio.WebApi.props
src/Portfolio.WebApi/obj/Debug/net9.0/.NETCoreApp,Version=v9.0.AssemblyAttributes.cs
src/Portfolio.WebApi/obj/Debug/net9.0/Portfolio.WebApi.AssemblyInfo.cs
src/Portfolio.WebApi/obj/Debug/net9.0/Portfolio.WebApi.AssemblyInfoInputs.cache
src/Portfolio.WebApi/obj/Debug/net9.0/Portfolio.WebApi.csproj.CoreCompileInputs.cache
src/Portfolio.WebApi/obj/Debug/net9.0/Portfolio.WebApi.csproj.FileListAbsolute.txt
src/Portfolio.WebApi/obj/Debug/net9.0/Portfolio.WebApi.GeneratedMSBuildEditorConfig.editorconfig
src/Portfolio.WebApi/obj/Debug/net9.0/Portfolio.WebApi.genruntimeconfig.cache
src/Portfolio.WebApi/obj/Debug/net9.0/Portfolio.WebApi.GlobalUsings.g.cs
src/Portfolio.WebApi/obj/Debug/net9.0/Portfolio.WebApi.MvcApplicationPartsAssemblyInfo.cs
src/Portfolio.WebApi/obj/Debug/net9.0/Portfolio.WebApi.sourcelink.json
src/Portfolio.WebApi/obj/Debug/net9.0/project.razor.json
src/Portfolio.WebApi/obj/Debug/net9.0/staticwebassets.build.endpoints.json
src/Portfolio.WebApi/obj/Debug/net9.0/staticwebassets.build.json
src/Portfolio.WebApi/obj/Debug/net9.0/staticwebassets/msbuild.build.Portfolio.WebApi.props
src/Portfolio.WebApi/obj/Debug/net9.0/staticwebassets/msbuild.buildMultiTargeting.Portfolio.WebApi.props
src/Portfolio.WebApi/obj/Debug/net9.0/staticwebassets/msbuild.buildTransitive.Portfolio.WebApi.props
src/Portfolio.WebApi/obj/Portfolio.WebApi.csproj.nuget.dgspec.json
src/Portfolio.WebApi/obj/Portfolio.WebApi.csproj.nuget.g.props
src/Portfolio.WebApi/obj/Portfolio.WebApi.csproj.nuget.g.targets
src/Portfolio.WebApi/obj/project.assets.json
src/Portfolio.WebApi/obj/project.nuget.cache
src/Portfolio.WebApi/Portfolio.WebApi.csproj
src/Portfolio.WebApi/Portfolio.WebApi.csproj.user
src/Portfolio.WebApi/Portfolio.WebApi.http
src/Portfolio.WebApi/Program.cs
src/Portfolio.WebApi/Properties/launchSettings.json
tests/Portfolio.UnitTests/bin/Debug/net8.0/Portfolio.UnitTests.deps.json
tests/Portfolio.UnitTests/bin/Debug/net8.0/Portfolio.UnitTests.runtimeconfig.json
tests/Portfolio.UnitTests/obj/Debug/net8.0/.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
tests/Portfolio.UnitTests/obj/Debug/net8.0/Portfolio.UnitTests.AssemblyInfo.cs
tests/Portfolio.UnitTests/obj/Debug/net8.0/Portfolio.UnitTests.AssemblyInfoInputs.cache
tests/Portfolio.UnitTests/obj/Debug/net8.0/Portfolio.UnitTests.csproj.CoreCompileInputs.cache
tests/Portfolio.UnitTests/obj/Debug/net8.0/Portfolio.UnitTests.csproj.FileListAbsolute.txt
tests/Portfolio.UnitTests/obj/Debug/net8.0/Portfolio.UnitTests.GeneratedMSBuildEditorConfig.editorconfig
tests/Portfolio.UnitTests/obj/Debug/net8.0/Portfolio.UnitTests.genruntimeconfig.cache
tests/Portfolio.UnitTests/obj/Debug/net8.0/Portfolio.UnitTests.GlobalUsings.g.cs
tests/Portfolio.UnitTests/obj/Debug/net8.0/Portfolio.UnitTests.sourcelink.json
tests/Portfolio.UnitTests/obj/Portfolio.UnitTests.csproj.nuget.dgspec.json
tests/Portfolio.UnitTests/obj/Portfolio.UnitTests.csproj.nuget.g.props
tests/Portfolio.UnitTests/obj/Portfolio.UnitTests.csproj.nuget.g.targets
tests/Portfolio.UnitTests/obj/project.assets.json
tests/Portfolio.UnitTests/obj/project.nuget.cache
tests/Portfolio.UnitTests/Portfolio.UnitTests.csproj
tests/Portfolio.UnitTests/Repositories/UserRepositoryTests.cs

================================================================
Files
================================================================

================
File: .vs/Portfolio/config/applicationhost.config
================
<?xml version="1.0" encoding="UTF-8"?>
<!--

    IIS configuration sections.

    For schema documentation, see
    %IIS_BIN%\config\schema\IIS_schema.xml.
    
    Please make a backup of this file before making any changes to it.

    NOTE: The following environment variables are available to be used
          within this file and are understood by the IIS Express.

          %IIS_USER_HOME% - The IIS Express home directory for the user
          %IIS_SITES_HOME% - The default home directory for sites
          %IIS_BIN% - The location of the IIS Express binaries
          %SYSTEMDRIVE% - The drive letter of %IIS_BIN%

-->
<configuration>

    <!--

        The <configSections> section controls the registration of sections.
        Section is the basic unit of deployment, locking, searching and
        containment for configuration settings.
        
        Every section belongs to one section group.
        A section group is a container of logically-related sections.
        
        Sections cannot be nested.
        Section groups may be nested.
        
        <section
            name=""  [Required, Collection Key] [XML name of the section]
            allowDefinition="Everywhere" [MachineOnly|MachineToApplication|AppHostOnly|Everywhere] [Level where it can be set]
            overrideModeDefault="Allow"  [Allow|Deny] [Default delegation mode]
            allowLocation="true"  [true|false] [Allowed in location tags]
        />
        
        The recommended way to unlock sections is by using a location tag:
        <location path="Default Web Site" overrideMode="Allow">
            <system.webServer>
                <asp />
            </system.webServer>
        </location>

    -->
    <configSections>
        <sectionGroup name="system.applicationHost">
            <section name="applicationPools" allowDefinition="AppHostOnly" overrideModeDefault="Deny" />
            <section name="configHistory" allowDefinition="AppHostOnly" overrideModeDefault="Deny" />
            <section name="customMetadata" allowDefinition="AppHostOnly" overrideModeDefault="Deny" />
            <section name="listenerAdapters" allowDefinition="AppHostOnly" overrideModeDefault="Deny" />
            <section name="log" allowDefinition="AppHostOnly" overrideModeDefault="Deny" />
            <section name="serviceAutoStartProviders" allowDefinition="AppHostOnly" overrideModeDefault="Deny" />
            <section name="sites" allowDefinition="AppHostOnly" overrideModeDefault="Deny" />
            <section name="webLimits" allowDefinition="AppHostOnly" overrideModeDefault="Deny" />
        </sectionGroup>

        <sectionGroup name="system.webServer">
            <section name="asp" overrideModeDefault="Deny" />
            <section name="caching" overrideModeDefault="Allow" />
            <section name="cgi" overrideModeDefault="Deny" />
            <section name="defaultDocument" overrideModeDefault="Allow" />
            <section name="directoryBrowse" overrideModeDefault="Allow" />
            <section name="fastCgi" allowDefinition="AppHostOnly" overrideModeDefault="Deny" />
            <section name="globalModules" allowDefinition="AppHostOnly" overrideModeDefault="Deny" />
            <section name="handlers" overrideModeDefault="Deny" />
            <section name="httpCompression" overrideModeDefault="Allow" allowDefinition="Everywhere" />
            <section name="httpErrors" overrideModeDefault="Allow" />
            <section name="httpLogging" overrideModeDefault="Deny" />
            <section name="httpProtocol" overrideModeDefault="Allow" />
            <section name="httpRedirect" overrideModeDefault="Allow" />
            <section name="httpTracing" overrideModeDefault="Deny" />
            <section name="isapiFilters" allowDefinition="MachineToApplication" overrideModeDefault="Deny" />
            <section name="modules" allowDefinition="MachineToApplication" overrideModeDefault="Deny" />
            <section name="applicationInitialization" allowDefinition="MachineToApplication" overrideModeDefault="Allow" />
            <section name="odbcLogging" overrideModeDefault="Deny" />
            <sectionGroup name="security">
                <section name="access" overrideModeDefault="Deny" />
                <section name="applicationDependencies" overrideModeDefault="Deny" />
                <sectionGroup name="authentication">
                    <section name="anonymousAuthentication" overrideModeDefault="Deny" />
                    <section name="basicAuthentication" overrideModeDefault="Deny" />
                    <section name="clientCertificateMappingAuthentication" overrideModeDefault="Deny" />
                    <section name="digestAuthentication" overrideModeDefault="Deny" />
                    <section name="iisClientCertificateMappingAuthentication" overrideModeDefault="Deny" />
                    <section name="windowsAuthentication" overrideModeDefault="Deny" />
                </sectionGroup>
                <section name="authorization" overrideModeDefault="Allow" />
                <section name="ipSecurity" overrideModeDefault="Deny" />
                <section name="dynamicIpSecurity" overrideModeDefault="Deny" />
                <section name="isapiCgiRestriction" allowDefinition="AppHostOnly" overrideModeDefault="Deny" />
                <section name="requestFiltering" overrideModeDefault="Allow" />
            </sectionGroup>
            <section name="serverRuntime" overrideModeDefault="Deny" />
            <section name="serverSideInclude" overrideModeDefault="Deny" />
            <section name="staticContent" overrideModeDefault="Allow" />
            <sectionGroup name="tracing">
                <section name="traceFailedRequests" overrideModeDefault="Allow" />
                <section name="traceProviderDefinitions" overrideModeDefault="Deny" />
            </sectionGroup>
            <section name="urlCompression" overrideModeDefault="Allow" />
            <section name="validation" overrideModeDefault="Allow" />
            <sectionGroup name="webdav">
                <section name="globalSettings" overrideModeDefault="Deny" />
                <section name="authoring" overrideModeDefault="Deny" />
                <section name="authoringRules" overrideModeDefault="Deny" />
            </sectionGroup>
            <sectionGroup name="rewrite">
                <section name="allowedServerVariables" overrideModeDefault="Deny" />
                <section name="rules" overrideModeDefault="Allow" />
                <section name="outboundRules" overrideModeDefault="Allow" />
                <section name="globalRules" overrideModeDefault="Deny" allowDefinition="AppHostOnly" />
                <section name="providers" overrideModeDefault="Allow" />
                <section name="rewriteMaps" overrideModeDefault="Allow" />
            </sectionGroup>
            <section name="webSocket" overrideModeDefault="Deny" />
        <section name="aspNetCore" overrideModeDefault="Allow" /></sectionGroup>
    </configSections>

    <configProtectedData>
        <providers>
            <add name="IISWASOnlyRsaProvider" type="" description="Uses RsaCryptoServiceProvider to encrypt and decrypt" keyContainerName="iisWasKey" cspProviderName="" useMachineContainer="true" useOAEP="false" />
            <add name="AesProvider" type="Microsoft.ApplicationHost.AesProtectedConfigurationProvider" description="Uses an AES session key to encrypt and decrypt" keyContainerName="iisConfigurationKey" cspProviderName="" useOAEP="false" useMachineContainer="true" sessionKey="AQIAAA5mAAAApAAA/HKxkz6alrlAPez0IUgujj/6k3WxCDriHp6jvpv3yEZmo7h6SMzGLxo4mTrIQVHSkB7tmElHKfUFTzE2BWF7nFWHY6Z6qmGBauFzwJMwESjril7Gjz69RBFH259HQ6aRDq9Xfx7U7H4HtdmnKNqGjgl/hwPQBGeIlWiDh+sYv3vKB0QU971tjX6H2B+9armlnC8UOuA6JYMDMI/VLLL16sng0fWAy5JYe0YVABVjiAWDW264RZW9Tr1Oax4qHZKg+SdjULxeOc2YmpX+d0yeITo1HkPF1hN1gHpIPIUDo05ilHUNfR3OkjVCIQK4cFKCq1s8NH+y+13MxUC4Fn1AlQ==" />
            <add name="IISWASOnlyAesProvider" type="Microsoft.ApplicationHost.AesProtectedConfigurationProvider" description="Uses an AES session key to encrypt and decrypt" keyContainerName="iisWasKey" cspProviderName="" useOAEP="false" useMachineContainer="true" sessionKey="AQIAAA5mAAAApAAALmU8lTC+v2qtfQiiiquvvLpUQqKLEXs+jSKoWCM/uPhyB++k4dwug19mGidNK5FYiWK2KYE1yhjVJcbp12E98Q0R2nT7eBiCMY2JairxQ591rqABK7keGaIjwH7PwGzSpILl3RJ4YFvJ/7ZXEJxeDZIjW8ZxWVXx+/VyHs9U3WguLEkgMUX3jrxJi8LouxaIVPJAv/YQ1ZCWs8zImitxX/C/7o7yaIxznfsN5nGQzQfpUDPeby99aw2zPVTtZI2LaWIBON8guABvZ6JtJVDWmfdK6sodbnwdZkr6/Z2rfvamT1dC1SpQrGG7ulR/f9/GXvCaW10ZVKxekBF/CYlNMg==" />
        </providers>
    </configProtectedData>

    <system.applicationHost>

        <applicationPools>
            <add name="Clr4IntegratedAppPool" managedRuntimeVersion="v4.0" managedPipelineMode="Integrated" CLRConfigFile="%IIS_USER_HOME%\config\aspnet.config" autoStart="true" />
            <add name="Clr4ClassicAppPool" managedRuntimeVersion="v4.0" managedPipelineMode="Classic" CLRConfigFile="%IIS_USER_HOME%\config\aspnet.config" autoStart="true" />
            <add name="Clr2IntegratedAppPool" managedRuntimeVersion="v2.0" managedPipelineMode="Integrated" CLRConfigFile="%IIS_USER_HOME%\config\aspnet.config" autoStart="true" />
            <add name="Clr2ClassicAppPool" managedRuntimeVersion="v2.0" managedPipelineMode="Classic" CLRConfigFile="%IIS_USER_HOME%\config\aspnet.config" autoStart="true" />
            <add name="UnmanagedClassicAppPool" managedRuntimeVersion="" managedPipelineMode="Classic" autoStart="true" />
            <applicationPoolDefaults managedRuntimeVersion="v4.0">
                <processModel loadUserProfile="true" setProfileEnvironment="false" />
            </applicationPoolDefaults>
        </applicationPools>

        <!--

          The <listenerAdapters> section defines the protocols with which the
          Windows Process Activation Service (WAS) binds.

        -->
        <listenerAdapters>
            <add name="http" />
        </listenerAdapters>

        <sites>
            <site name="WebSite1" id="1" serverAutoStart="true">
                <application path="/">
                    <virtualDirectory path="/" physicalPath="%IIS_SITES_HOME%\WebSite1" />
                </application>
                <bindings>
                    <binding protocol="http" bindingInformation=":8080:localhost" />
                </bindings>
            </site>
            <siteDefaults>
                <!-- To enable logging, please change the below attribute "enabled" to "true" -->
                <logFile logFormat="W3C" directory="%AppData%\Microsoft\IISExpressLogs" enabled="false" />
                <traceFailedRequestsLogging directory="%AppData%\Microsoft" enabled="false" maxLogFileSizeKB="1024" />
            </siteDefaults>
            <applicationDefaults applicationPool="Clr4IntegratedAppPool" />
            <virtualDirectoryDefaults allowSubDirConfig="true" />
        </sites>

        <webLimits />

    </system.applicationHost>

    <system.webServer>

        <serverRuntime />

        <asp scriptErrorSentToBrowser="true">
            <cache diskTemplateCacheDirectory="%TEMP%\iisexpress\ASP Compiled Templates" />
            <limits />
        </asp>

        <caching enabled="true" enableKernelCache="true">
        </caching>

        <cgi />

        <defaultDocument enabled="true">
            <files>
                <add value="Default.htm" />
                <add value="Default.asp" />
                <add value="index.htm" />
                <add value="index.html" />
                <add value="iisstart.htm" />
                <add value="default.aspx" />
            </files>
        </defaultDocument>

        <directoryBrowse enabled="false" />

        <fastCgi />

        <!--

          The <globalModules> section defines all native-code modules.
          To enable a module, specify it in the <modules> section.

        -->
        <globalModules>
            <add name="HttpLoggingModule" image="%IIS_BIN%\loghttp.dll" />
            <add name="UriCacheModule" image="%IIS_BIN%\cachuri.dll" />
            <add name="TokenCacheModule" image="%IIS_BIN%\cachtokn.dll" />
            <add name="DynamicCompressionModule" image="%IIS_BIN%\compdyn.dll" />
            <add name="StaticCompressionModule" image="%IIS_BIN%\compstat.dll" />
            <add name="DefaultDocumentModule" image="%IIS_BIN%\defdoc.dll" />
            <add name="DirectoryListingModule" image="%IIS_BIN%\dirlist.dll" />
            <add name="ProtocolSupportModule" image="%IIS_BIN%\protsup.dll" />
            <add name="HttpRedirectionModule" image="%IIS_BIN%\redirect.dll" />
            <add name="ServerSideIncludeModule" image="%IIS_BIN%\iis_ssi.dll" />
            <add name="StaticFileModule" image="%IIS_BIN%\static.dll" />
            <add name="AnonymousAuthenticationModule" image="%IIS_BIN%\authanon.dll" />
            <add name="CertificateMappingAuthenticationModule" image="%IIS_BIN%\authcert.dll" />
            <add name="UrlAuthorizationModule" image="%IIS_BIN%\urlauthz.dll" />
            <add name="BasicAuthenticationModule" image="%IIS_BIN%\authbas.dll" />
            <add name="WindowsAuthenticationModule" image="%IIS_BIN%\authsspi.dll" />
            <add name="IISCertificateMappingAuthenticationModule" image="%IIS_BIN%\authmap.dll" />
            <add name="IpRestrictionModule" image="%IIS_BIN%\iprestr.dll" />
            <add name="DynamicIpRestrictionModule" image="%IIS_BIN%\diprestr.dll" />
            <add name="RequestFilteringModule" image="%IIS_BIN%\modrqflt.dll" />
            <add name="CustomLoggingModule" image="%IIS_BIN%\logcust.dll" />
            <add name="CustomErrorModule" image="%IIS_BIN%\custerr.dll" />
            <add name="FailedRequestsTracingModule" image="%IIS_BIN%\iisfreb.dll" />
            <add name="RequestMonitorModule" image="%IIS_BIN%\iisreqs.dll" />
            <add name="IsapiModule" image="%IIS_BIN%\isapi.dll" />
            <add name="IsapiFilterModule" image="%IIS_BIN%\filter.dll" />
            <add name="CgiModule" image="%IIS_BIN%\cgi.dll" />
            <add name="FastCgiModule" image="%IIS_BIN%\iisfcgi.dll" />
<!--            <add name="WebDAVModule" image="%IIS_BIN%\webdav.dll" /> -->
            <add name="RewriteModule" image="%IIS_BIN%\rewrite.dll" />
            <add name="ConfigurationValidationModule" image="%IIS_BIN%\validcfg.dll" />
            <add name="WebSocketModule" image="%IIS_BIN%\iiswsock.dll" />
            <add name="WebMatrixSupportModule" image="%IIS_BIN%\webmatrixsup.dll" />
            <add name="ManagedEngine" image="%windir%\Microsoft.NET\Framework\v2.0.50727\webengine.dll" preCondition="integratedMode,runtimeVersionv2.0,bitness32" />
            <add name="ManagedEngine64" image="%windir%\Microsoft.NET\Framework64\v2.0.50727\webengine.dll" preCondition="integratedMode,runtimeVersionv2.0,bitness64" />
            <add name="ManagedEngineV4.0_32bit" image="%windir%\Microsoft.NET\Framework\v4.0.30319\webengine4.dll" preCondition="integratedMode,runtimeVersionv4.0,bitness32" />
            <add name="ManagedEngineV4.0_64bit" image="%windir%\Microsoft.NET\Framework64\v4.0.30319\webengine4.dll" preCondition="integratedMode,runtimeVersionv4.0,bitness64" />
            <add name="ApplicationInitializationModule" image="%IIS_BIN%\warmup.dll" />
            <add name="AspNetCoreModule" image="%IIS_BIN%\aspnetcore.dll" />
            <add name="AspNetCoreModuleV2" image="%IIS_BIN%\Asp.Net Core Module\V2\aspnetcorev2.dll" />
        </globalModules>

        <httpCompression directory="%TEMP%">
            <scheme name="gzip" dll="%IIS_BIN%\gzip.dll" />
            <dynamicTypes>
                <add mimeType="text/*" enabled="true" />
                <add mimeType="message/*" enabled="true" />
                <add mimeType="application/x-javascript" enabled="true" />
                <add mimeType="application/javascript" enabled="true" />
                <add mimeType="*/*" enabled="false" />
                <add mimeType="text/event-stream" enabled="false" />
            </dynamicTypes>
            <staticTypes>
                <add mimeType="text/*" enabled="true" />
                <add mimeType="message/*" enabled="true" />
                <add mimeType="application/javascript" enabled="true" />
                <add mimeType="application/atom+xml" enabled="true" />
                <add mimeType="application/xaml+xml" enabled="true" />
                <add mimeType="image/svg+xml" enabled="true" />
                <add mimeType="*/*" enabled="false" />
            </staticTypes>
        </httpCompression>

        <httpErrors lockAttributes="allowAbsolutePathsWhenDelegated,defaultPath">
            <error statusCode="401" prefixLanguageFilePath="%IIS_BIN%\custerr" path="401.htm" />
            <error statusCode="403" prefixLanguageFilePath="%IIS_BIN%\custerr" path="403.htm" />
            <error statusCode="404" prefixLanguageFilePath="%IIS_BIN%\custerr" path="404.htm" />
            <error statusCode="405" prefixLanguageFilePath="%IIS_BIN%\custerr" path="405.htm" />
            <error statusCode="406" prefixLanguageFilePath="%IIS_BIN%\custerr" path="406.htm" />
            <error statusCode="412" prefixLanguageFilePath="%IIS_BIN%\custerr" path="412.htm" />
            <error statusCode="500" prefixLanguageFilePath="%IIS_BIN%\custerr" path="500.htm" />
            <error statusCode="501" prefixLanguageFilePath="%IIS_BIN%\custerr" path="501.htm" />
            <error statusCode="502" prefixLanguageFilePath="%IIS_BIN%\custerr" path="502.htm" />
        </httpErrors>

        <httpLogging dontLog="false" />

        <httpProtocol>
            <customHeaders>
                <clear />
                <add name="X-Powered-By" value="ASP.NET" />
            </customHeaders>
            <redirectHeaders>
                <clear />
            </redirectHeaders>
        </httpProtocol>

        <httpRedirect enabled="false" />

        <httpTracing />

        <isapiFilters>
            <filter name="ASP.Net_2.0.50727-64" path="%windir%\Microsoft.NET\Framework64\v2.0.50727\aspnet_filter.dll" enableCache="true" preCondition="bitness64,runtimeVersionv2.0" />
            <filter name="ASP.Net_2.0.50727.0" path="%windir%\Microsoft.NET\Framework\v2.0.50727\aspnet_filter.dll" enableCache="true" preCondition="bitness32,runtimeVersionv2.0" />
            <filter name="ASP.Net_2.0_for_v1.1" path="%windir%\Microsoft.NET\Framework\v2.0.50727\aspnet_filter.dll" enableCache="true" preCondition="runtimeVersionv1.1" />
            <filter name="ASP.Net_4.0_32bit" path="%windir%\Microsoft.NET\Framework\v4.0.30319\aspnet_filter.dll" enableCache="true" preCondition="bitness32,runtimeVersionv4.0" />
            <filter name="ASP.Net_4.0_64bit" path="%windir%\Microsoft.NET\Framework64\v4.0.30319\aspnet_filter.dll" enableCache="true" preCondition="bitness64,runtimeVersionv4.0" />
        </isapiFilters>

        <odbcLogging />

        <security>

            <access sslFlags="None" />

            <applicationDependencies>
                <application name="Active Server Pages" groupId="ASP" />
            </applicationDependencies>

            <authentication>

                <anonymousAuthentication enabled="true" userName="" />

                <basicAuthentication enabled="false" />

                <clientCertificateMappingAuthentication enabled="false" />

                <digestAuthentication enabled="false" />

                <iisClientCertificateMappingAuthentication enabled="false">
                </iisClientCertificateMappingAuthentication>

                <windowsAuthentication enabled="false">
                    <providers>
                        <add value="Negotiate" />
                        <add value="NTLM" />
                    </providers>
                </windowsAuthentication>

            </authentication>

            <authorization>
                <add accessType="Allow" users="*" />
            </authorization>

            <ipSecurity allowUnlisted="true" />

            <isapiCgiRestriction notListedIsapisAllowed="true" notListedCgisAllowed="true">
                <add path="%windir%\Microsoft.NET\Framework64\v4.0.30319\webengine4.dll" allowed="true" groupId="ASP.NET_v4.0" description="ASP.NET_v4.0" />
                <add path="%windir%\Microsoft.NET\Framework\v4.0.30319\webengine4.dll" allowed="true" groupId="ASP.NET_v4.0" description="ASP.NET_v4.0" />
                <add path="%windir%\Microsoft.NET\Framework64\v2.0.50727\aspnet_isapi.dll" allowed="true" groupId="ASP.NET v2.0.50727" description="ASP.NET v2.0.50727" />
                <add path="%windir%\Microsoft.NET\Framework\v2.0.50727\aspnet_isapi.dll" allowed="true" groupId="ASP.NET v2.0.50727" description="ASP.NET v2.0.50727" />
            </isapiCgiRestriction>

            <requestFiltering>
                <fileExtensions allowUnlisted="true" applyToWebDAV="true">
                    <add fileExtension=".asa" allowed="false" />
                    <add fileExtension=".asax" allowed="false" />
                    <add fileExtension=".ascx" allowed="false" />
                    <add fileExtension=".master" allowed="false" />
                    <add fileExtension=".skin" allowed="false" />
                    <add fileExtension=".browser" allowed="false" />
                    <add fileExtension=".sitemap" allowed="false" />
                    <add fileExtension=".config" allowed="false" />
                    <add fileExtension=".cs" allowed="false" />
                    <add fileExtension=".csproj" allowed="false" />
                    <add fileExtension=".vb" allowed="false" />
                    <add fileExtension=".vbproj" allowed="false" />
                    <add fileExtension=".webinfo" allowed="false" />
                    <add fileExtension=".licx" allowed="false" />
                    <add fileExtension=".resx" allowed="false" />
                    <add fileExtension=".resources" allowed="false" />
                    <add fileExtension=".mdb" allowed="false" />
                    <add fileExtension=".vjsproj" allowed="false" />
                    <add fileExtension=".java" allowed="false" />
                    <add fileExtension=".jsl" allowed="false" />
                    <add fileExtension=".ldb" allowed="false" />
                    <add fileExtension=".dsdgm" allowed="false" />
                    <add fileExtension=".ssdgm" allowed="false" />
                    <add fileExtension=".lsad" allowed="false" />
                    <add fileExtension=".ssmap" allowed="false" />
                    <add fileExtension=".cd" allowed="false" />
                    <add fileExtension=".dsprototype" allowed="false" />
                    <add fileExtension=".lsaprototype" allowed="false" />
                    <add fileExtension=".sdm" allowed="false" />
                    <add fileExtension=".sdmDocument" allowed="false" />
                    <add fileExtension=".mdf" allowed="false" />
                    <add fileExtension=".ldf" allowed="false" />
                    <add fileExtension=".ad" allowed="false" />
                    <add fileExtension=".dd" allowed="false" />
                    <add fileExtension=".ldd" allowed="false" />
                    <add fileExtension=".sd" allowed="false" />
                    <add fileExtension=".adprototype" allowed="false" />
                    <add fileExtension=".lddprototype" allowed="false" />
                    <add fileExtension=".exclude" allowed="false" />
                    <add fileExtension=".refresh" allowed="false" />
                    <add fileExtension=".compiled" allowed="false" />
                    <add fileExtension=".msgx" allowed="false" />
                    <add fileExtension=".vsdisco" allowed="false" />
                    <add fileExtension=".rules" allowed="false" />
                </fileExtensions>
                <verbs allowUnlisted="true" applyToWebDAV="true" />
                <hiddenSegments applyToWebDAV="true">
                    <add segment="web.config" />
                    <add segment="bin" />
                    <add segment="App_code" />
                    <add segment="App_GlobalResources" />
                    <add segment="App_LocalResources" />
                    <add segment="App_WebReferences" />
                    <add segment="App_Data" />
                    <add segment="App_Browsers" />
                </hiddenSegments>
            </requestFiltering>

        </security>

        <serverSideInclude ssiExecDisable="false" />

        <staticContent lockAttributes="isDocFooterFileName">
            <mimeMap fileExtension=".323" mimeType="text/h323" />
            <mimeMap fileExtension=".3g2" mimeType="video/3gpp2" />
            <mimeMap fileExtension=".3gp2" mimeType="video/3gpp2" />
            <mimeMap fileExtension=".3gp" mimeType="video/3gpp" />
            <mimeMap fileExtension=".3gpp" mimeType="video/3gpp" />
            <mimeMap fileExtension=".aac" mimeType="audio/aac" />
            <mimeMap fileExtension=".aaf" mimeType="application/octet-stream" />
            <mimeMap fileExtension=".aca" mimeType="application/octet-stream" />
            <mimeMap fileExtension=".accdb" mimeType="application/msaccess" />
            <mimeMap fileExtension=".accde" mimeType="application/msaccess" />
            <mimeMap fileExtension=".accdt" mimeType="application/msaccess" />
            <mimeMap fileExtension=".acx" mimeType="application/internet-property-stream" />
            <mimeMap fileExtension=".adt" mimeType="audio/vnd.dlna.adts" />
            <mimeMap fileExtension=".adts" mimeType="audio/vnd.dlna.adts" />
            <mimeMap fileExtension=".afm" mimeType="application/octet-stream" />
            <mimeMap fileExtension=".ai" mimeType="application/postscript" />
            <mimeMap fileExtension=".aif" mimeType="audio/x-aiff" />
            <mimeMap fileExtension=".aifc" mimeType="audio/aiff" />
            <mimeMap fileExtension=".aiff" mimeType="audio/aiff" />
            <mimeMap fileExtension=".appcache" mimeType="text/cache-manifest" />
            <mimeMap fileExtension=".application" mimeType="application/x-ms-application" />
            <mimeMap fileExtension=".art" mimeType="image/x-jg" />
            <mimeMap fileExtension=".asd" mimeType="application/octet-stream" />
            <mimeMap fileExtension=".asf" mimeType="video/x-ms-asf" />
            <mimeMap fileExtension=".asi" mimeType="application/octet-stream" />
            <mimeMap fileExtension=".asm" mimeType="text/plain" />
            <mimeMap fileExtension=".asr" mimeType="video/x-ms-asf" />
            <mimeMap fileExtension=".asx" mimeType="video/x-ms-asf" />
            <mimeMap fileExtension=".atom" mimeType="application/atom+xml" />
            <mimeMap fileExtension=".au" mimeType="audio/basic" />
            <mimeMap fileExtension=".avi" mimeType="video/avi" />
            <mimeMap fileExtension=".axs" mimeType="application/olescript" />
            <mimeMap fileExtension=".bas" mimeType="text/plain" />
            <mimeMap fileExtension=".bcpio" mimeType="application/x-bcpio" />
            <mimeMap fileExtension=".bin" mimeType="application/octet-stream" />
            <mimeMap fileExtension=".bmp" mimeType="image/bmp" />
            <mimeMap fileExtension=".c" mimeType="text/plain" />
            <mimeMap fileExtension=".cab" mimeType="application/vnd.ms-cab-compressed" />
            <mimeMap fileExtension=".calx" mimeType="application/vnd.ms-office.calx" />
            <mimeMap fileExtension=".cat" mimeType="application/vnd.ms-pki.seccat" />
            <mimeMap fileExtension=".cdf" mimeType="application/x-cdf" />
            <mimeMap fileExtension=".chm" mimeType="application/octet-stream" />
            <mimeMap fileExtension=".class" mimeType="application/x-java-applet" />
            <mimeMap fileExtension=".clp" mimeType="application/x-msclip" />
            <mimeMap fileExtension=".cmx" mimeType="image/x-cmx" />
            <mimeMap fileExtension=".cnf" mimeType="text/plain" />
            <mimeMap fileExtension=".cod" mimeType="image/cis-cod" />
            <mimeMap fileExtension=".cpio" mimeType="application/x-cpio" />
            <mimeMap fileExtension=".cpp" mimeType="text/plain" />
            <mimeMap fileExtension=".crd" mimeType="application/x-mscardfile" />
            <mimeMap fileExtension=".crl" mimeType="application/pkix-crl" />
            <mimeMap fileExtension=".crt" mimeType="application/x-x509-ca-cert" />
            <mimeMap fileExtension=".csh" mimeType="application/x-csh" />
            <mimeMap fileExtension=".css" mimeType="text/css" />
            <mimeMap fileExtension=".csv" mimeType="application/octet-stream" />
            <mimeMap fileExtension=".cur" mimeType="application/octet-stream" />
            <mimeMap fileExtension=".dcr" mimeType="application/x-director" />
            <mimeMap fileExtension=".deploy" mimeType="application/octet-stream" />
            <mimeMap fileExtension=".der" mimeType="application/x-x509-ca-cert" />
            <mimeMap fileExtension=".dib" mimeType="image/bmp" />
            <mimeMap fileExtension=".dir" mimeType="application/x-director" />
            <mimeMap fileExtension=".disco" mimeType="text/xml" />
            <mimeMap fileExtension=".dll" mimeType="application/x-msdownload" />
            <mimeMap fileExtension=".dll.config" mimeType="text/xml" />
            <mimeMap fileExtension=".dlm" mimeType="text/dlm" />
            <mimeMap fileExtension=".doc" mimeType="application/msword" />
            <mimeMap fileExtension=".docm" mimeType="application/vnd.ms-word.document.macroEnabled.12" />
            <mimeMap fileExtension=".docx" mimeType="application/vnd.openxmlformats-officedocument.wordprocessingml.document" />
            <mimeMap fileExtension=".dot" mimeType="application/msword" />
            <mimeMap fileExtension=".dotm" mimeType="application/vnd.ms-word.template.macroEnabled.12" />
            <mimeMap fileExtension=".dotx" mimeType="application/vnd.openxmlformats-officedocument.wordprocessingml.template" />
            <mimeMap fileExtension=".dsp" mimeType="application/octet-stream" />
            <mimeMap fileExtension=".dtd" mimeType="text/xml" />
            <mimeMap fileExtension=".dvi" mimeType="application/x-dvi" />
            <mimeMap fileExtension=".dvr-ms" mimeType="video/x-ms-dvr" />
            <mimeMap fileExtension=".dwf" mimeType="drawing/x-dwf" />
            <mimeMap fileExtension=".dwp" mimeType="application/octet-stream" />
            <mimeMap fileExtension=".dxr" mimeType="application/x-director" />
            <mimeMap fileExtension=".eml" mimeType="message/rfc822" />
            <mimeMap fileExtension=".emz" mimeType="application/octet-stream" />
            <mimeMap fileExtension=".eot" mimeType="application/vnd.ms-fontobject" />
            <mimeMap fileExtension=".eps" mimeType="application/postscript" />
            <mimeMap fileExtension=".esd" mimeType="application/vnd.ms-cab-compressed" />
            <mimeMap fileExtension=".etx" mimeType="text/x-setext" />
            <mimeMap fileExtension=".evy" mimeType="application/envoy" />
            <mimeMap fileExtension=".exe" mimeType="application/octet-stream" />
            <mimeMap fileExtension=".exe.config" mimeType="text/xml" />
            <mimeMap fileExtension=".fdf" mimeType="application/vnd.fdf" />
            <mimeMap fileExtension=".fif" mimeType="application/fractals" />
            <mimeMap fileExtension=".fla" mimeType="application/octet-stream" />
            <mimeMap fileExtension=".flr" mimeType="x-world/x-vrml" />
            <mimeMap fileExtension=".flv" mimeType="video/x-flv" />
            <mimeMap fileExtension=".gif" mimeType="image/gif" />
            <mimeMap fileExtension=".glb" mimeType="model/gltf-binary" />
            <mimeMap fileExtension=".gtar" mimeType="application/x-gtar" />
            <mimeMap fileExtension=".gz" mimeType="application/x-gzip" />
            <mimeMap fileExtension=".h" mimeType="text/plain" />
            <mimeMap fileExtension=".hdf" mimeType="application/x-hdf" />
            <mimeMap fileExtension=".hdml" mimeType="text/x-hdml" />
            <mimeMap fileExtension=".hhc" mimeType="application/x-oleobject" />
            <mimeMap fileExtension=".hhk" mimeType="application/octet-stream" />
            <mimeMap fileExtension=".hhp" mimeType="application/octet-stream" />
            <mimeMap fileExtension=".hlp" mimeType="application/winhlp" />
            <mimeMap fileExtension=".hqx" mimeType="application/mac-binhex40" />
            <mimeMap fileExtension=".hta" mimeType="application/hta" />
            <mimeMap fileExtension=".htc" mimeType="text/x-component" />
            <mimeMap fileExtension=".htm" mimeType="text/html" />
            <mimeMap fileExtension=".html" mimeType="text/html" />
            <mimeMap fileExtension=".htt" mimeType="text/webviewhtml" />
            <mimeMap fileExtension=".hxt" mimeType="text/html" />
            <mimeMap fileExtension=".ico" mimeType="image/x-icon" />
            <mimeMap fileExtension=".ics" mimeType="text/calendar" />
            <mimeMap fileExtension=".ief" mimeType="image/ief" />
            <mimeMap fileExtension=".iii" mimeType="application/x-iphone" />
            <mimeMap fileExtension=".inf" mimeType="application/octet-stream" />
            <mimeMap fileExtension=".ins" mimeType="application/x-internet-signup" />
            <mimeMap fileExtension=".isp" mimeType="application/x-internet-signup" />
            <mimeMap fileExtension=".IVF" mimeType="video/x-ivf" />
            <mimeMap fileExtension=".jar" mimeType="application/java-archive" />
            <mimeMap fileExtension=".java" mimeType="application/octet-stream" />
            <mimeMap fileExtension=".jck" mimeType="application/liquidmotion" />
            <mimeMap fileExtension=".jcz" mimeType="application/liquidmotion" />
            <mimeMap fileExtension=".jfif" mimeType="image/pjpeg" />
            <mimeMap fileExtension=".jpb" mimeType="application/octet-stream" />
            <mimeMap fileExtension=".jpe" mimeType="image/jpeg" />
            <mimeMap fileExtension=".jpeg" mimeType="image/jpeg" />
            <mimeMap fileExtension=".jpg" mimeType="image/jpeg" />
            <mimeMap fileExtension=".js" mimeType="application/javascript" />
            <mimeMap fileExtension=".json" mimeType="application/json" />
            <mimeMap fileExtension=".jsonld" mimeType="application/ld+json" />
            <mimeMap fileExtension=".jsx" mimeType="text/jscript" />
            <mimeMap fileExtension=".latex" mimeType="application/x-latex" />
            <mimeMap fileExtension=".less" mimeType="text/css" />
            <mimeMap fileExtension=".lit" mimeType="application/x-ms-reader" />
            <mimeMap fileExtension=".lpk" mimeType="application/octet-stream" />
            <mimeMap fileExtension=".lsf" mimeType="video/x-la-asf" />
            <mimeMap fileExtension=".lsx" mimeType="video/x-la-asf" />
            <mimeMap fileExtension=".lzh" mimeType="application/octet-stream" />
            <mimeMap fileExtension=".m13" mimeType="application/x-msmediaview" />
            <mimeMap fileExtension=".m14" mimeType="application/x-msmediaview" />
            <mimeMap fileExtension=".m1v" mimeType="video/mpeg" />
            <mimeMap fileExtension=".m2ts" mimeType="video/vnd.dlna.mpeg-tts" />
            <mimeMap fileExtension=".m3u" mimeType="audio/x-mpegurl" />
            <mimeMap fileExtension=".m4a" mimeType="audio/mp4" />
            <mimeMap fileExtension=".m4v" mimeType="video/mp4" />
            <mimeMap fileExtension=".man" mimeType="application/x-troff-man" />
            <mimeMap fileExtension=".manifest" mimeType="application/x-ms-manifest" />
            <mimeMap fileExtension=".map" mimeType="text/plain" />
            <mimeMap fileExtension=".mdb" mimeType="application/x-msaccess" />
            <mimeMap fileExtension=".mdp" mimeType="application/octet-stream" />
            <mimeMap fileExtension=".me" mimeType="application/x-troff-me" />
            <mimeMap fileExtension=".mht" mimeType="message/rfc822" />
            <mimeMap fileExtension=".mhtml" mimeType="message/rfc822" />
            <mimeMap fileExtension=".mid" mimeType="audio/mid" />
            <mimeMap fileExtension=".midi" mimeType="audio/mid" />
            <mimeMap fileExtension=".mix" mimeType="application/octet-stream" />
            <mimeMap fileExtension=".mmf" mimeType="application/x-smaf" />
            <mimeMap fileExtension=".mno" mimeType="text/xml" />
            <mimeMap fileExtension=".mny" mimeType="application/x-msmoney" />
            <mimeMap fileExtension=".mov" mimeType="video/quicktime" />
            <mimeMap fileExtension=".movie" mimeType="video/x-sgi-movie" />
            <mimeMap fileExtension=".mp2" mimeType="video/mpeg" />
            <mimeMap fileExtension=".mp3" mimeType="audio/mpeg" />
            <mimeMap fileExtension=".mp4" mimeType="video/mp4" />
            <mimeMap fileExtension=".mp4v" mimeType="video/mp4" />
            <mimeMap fileExtension=".mpa" mimeType="video/mpeg" />
            <mimeMap fileExtension=".mpe" mimeType="video/mpeg" />
            <mimeMap fileExtension=".mpeg" mimeType="video/mpeg" />
            <mimeMap fileExtension=".mpg" mimeType="video/mpeg" />
            <mimeMap fileExtension=".mpp" mimeType="application/vnd.ms-project" />
            <mimeMap fileExtension=".mpv2" mimeType="video/mpeg" />
            <mimeMap fileExtension=".ms" mimeType="application/x-troff-ms" />
            <mimeMap fileExtension=".msi" mimeType="application/octet-stream" />
            <mimeMap fileExtension=".mso" mimeType="application/octet-stream" />
            <mimeMap fileExtension=".mvb" mimeType="application/x-msmediaview" />
            <mimeMap fileExtension=".mvc" mimeType="application/x-miva-compiled" />
            <mimeMap fileExtension=".nc" mimeType="application/x-netcdf" />
            <mimeMap fileExtension=".nsc" mimeType="video/x-ms-asf" />
            <mimeMap fileExtension=".nws" mimeType="message/rfc822" />
            <mimeMap fileExtension=".ocx" mimeType="application/octet-stream" />
            <mimeMap fileExtension=".oda" mimeType="application/oda" />
            <mimeMap fileExtension=".odc" mimeType="text/x-ms-odc" />
            <mimeMap fileExtension=".ods" mimeType="application/oleobject" />
            <mimeMap fileExtension=".oga" mimeType="audio/ogg" />
            <mimeMap fileExtension=".ogg" mimeType="video/ogg" />
            <mimeMap fileExtension=".ogv" mimeType="video/ogg" />
            <mimeMap fileExtension=".one" mimeType="application/onenote" />
            <mimeMap fileExtension=".onea" mimeType="application/onenote" />
            <mimeMap fileExtension=".onetoc" mimeType="application/onenote" />
            <mimeMap fileExtension=".onetoc2" mimeType="application/onenote" />
            <mimeMap fileExtension=".onetmp" mimeType="application/onenote" />
            <mimeMap fileExtension=".onepkg" mimeType="application/onenote" />
            <mimeMap fileExtension=".osdx" mimeType="application/opensearchdescription+xml" />
            <mimeMap fileExtension=".otf" mimeType="font/otf" />
            <mimeMap fileExtension=".p10" mimeType="application/pkcs10" />
            <mimeMap fileExtension=".p12" mimeType="application/x-pkcs12" />
            <mimeMap fileExtension=".p7b" mimeType="application/x-pkcs7-certificates" />
            <mimeMap fileExtension=".p7c" mimeType="application/pkcs7-mime" />
            <mimeMap fileExtension=".p7m" mimeType="application/pkcs7-mime" />
            <mimeMap fileExtension=".p7r" mimeType="application/x-pkcs7-certreqresp" />
            <mimeMap fileExtension=".p7s" mimeType="application/pkcs7-signature" />
            <mimeMap fileExtension=".pbm" mimeType="image/x-portable-bitmap" />
            <mimeMap fileExtension=".pcx" mimeType="application/octet-stream" />
            <mimeMap fileExtension=".pcz" mimeType="application/octet-stream" />
            <mimeMap fileExtension=".pdf" mimeType="application/pdf" />
            <mimeMap fileExtension=".pfb" mimeType="application/octet-stream" />
            <mimeMap fileExtension=".pfm" mimeType="application/octet-stream" />
            <mimeMap fileExtension=".pfx" mimeType="application/x-pkcs12" />
            <mimeMap fileExtension=".pgm" mimeType="image/x-portable-graymap" />
            <mimeMap fileExtension=".pko" mimeType="application/vnd.ms-pki.pko" />
            <mimeMap fileExtension=".pma" mimeType="application/x-perfmon" />
            <mimeMap fileExtension=".pmc" mimeType="application/x-perfmon" />
            <mimeMap fileExtension=".pml" mimeType="application/x-perfmon" />
            <mimeMap fileExtension=".pmr" mimeType="application/x-perfmon" />
            <mimeMap fileExtension=".pmw" mimeType="application/x-perfmon" />
            <mimeMap fileExtension=".png" mimeType="image/png" />
            <mimeMap fileExtension=".pnm" mimeType="image/x-portable-anymap" />
            <mimeMap fileExtension=".pnz" mimeType="image/png" />
            <mimeMap fileExtension=".pot" mimeType="application/vnd.ms-powerpoint" />
            <mimeMap fileExtension=".potm" mimeType="application/vnd.ms-powerpoint.template.macroEnabled.12" />
            <mimeMap fileExtension=".potx" mimeType="application/vnd.openxmlformats-officedocument.presentationml.template" />
            <mimeMap fileExtension=".ppam" mimeType="application/vnd.ms-powerpoint.addin.macroEnabled.12" />
            <mimeMap fileExtension=".ppm" mimeType="image/x-portable-pixmap" />
            <mimeMap fileExtension=".pps" mimeType="application/vnd.ms-powerpoint" />
            <mimeMap fileExtension=".ppsm" mimeType="application/vnd.ms-powerpoint.slideshow.macroEnabled.12" />
            <mimeMap fileExtension=".ppsx" mimeType="application/vnd.openxmlformats-officedocument.presentationml.slideshow" />
            <mimeMap fileExtension=".ppt" mimeType="application/vnd.ms-powerpoint" />
            <mimeMap fileExtension=".pptm" mimeType="application/vnd.ms-powerpoint.presentation.macroEnabled.12" />
            <mimeMap fileExtension=".pptx" mimeType="application/vnd.openxmlformats-officedocument.presentationml.presentation" />
            <mimeMap fileExtension=".prf" mimeType="application/pics-rules" />
            <mimeMap fileExtension=".prm" mimeType="application/octet-stream" />
            <mimeMap fileExtension=".prx" mimeType="application/octet-stream" />
            <mimeMap fileExtension=".ps" mimeType="application/postscript" />
            <mimeMap fileExtension=".psd" mimeType="application/octet-stream" />
            <mimeMap fileExtension=".psm" mimeType="application/octet-stream" />
            <mimeMap fileExtension=".psp" mimeType="application/octet-stream" />
            <mimeMap fileExtension=".pub" mimeType="application/x-mspublisher" />
            <mimeMap fileExtension=".qt" mimeType="video/quicktime" />
            <mimeMap fileExtension=".qtl" mimeType="application/x-quicktimeplayer" />
            <mimeMap fileExtension=".qxd" mimeType="application/octet-stream" />
            <mimeMap fileExtension=".ra" mimeType="audio/x-pn-realaudio" />
            <mimeMap fileExtension=".ram" mimeType="audio/x-pn-realaudio" />
            <mimeMap fileExtension=".rar" mimeType="application/octet-stream" />
            <mimeMap fileExtension=".ras" mimeType="image/x-cmu-raster" />
            <mimeMap fileExtension=".rf" mimeType="image/vnd.rn-realflash" />
            <mimeMap fileExtension=".rgb" mimeType="image/x-rgb" />
            <mimeMap fileExtension=".rm" mimeType="application/vnd.rn-realmedia" />
            <mimeMap fileExtension=".rmi" mimeType="audio/mid" />
            <mimeMap fileExtension=".roff" mimeType="application/x-troff" />
            <mimeMap fileExtension=".rpm" mimeType="audio/x-pn-realaudio-plugin" />
            <mimeMap fileExtension=".rtf" mimeType="application/rtf" />
            <mimeMap fileExtension=".rtx" mimeType="text/richtext" />
            <mimeMap fileExtension=".scd" mimeType="application/x-msschedule" />
            <mimeMap fileExtension=".sct" mimeType="text/scriptlet" />
            <mimeMap fileExtension=".sea" mimeType="application/octet-stream" />
            <mimeMap fileExtension=".setpay" mimeType="application/set-payment-initiation" />
            <mimeMap fileExtension=".setreg" mimeType="application/set-registration-initiation" />
            <mimeMap fileExtension=".sgml" mimeType="text/sgml" />
            <mimeMap fileExtension=".sh" mimeType="application/x-sh" />
            <mimeMap fileExtension=".shar" mimeType="application/x-shar" />
            <mimeMap fileExtension=".sit" mimeType="application/x-stuffit" />
            <mimeMap fileExtension=".sldm" mimeType="application/vnd.ms-powerpoint.slide.macroEnabled.12" />
            <mimeMap fileExtension=".sldx" mimeType="application/vnd.openxmlformats-officedocument.presentationml.slide" />
            <mimeMap fileExtension=".smd" mimeType="audio/x-smd" />
            <mimeMap fileExtension=".smi" mimeType="application/octet-stream" />
            <mimeMap fileExtension=".smx" mimeType="audio/x-smd" />
            <mimeMap fileExtension=".smz" mimeType="audio/x-smd" />
            <mimeMap fileExtension=".snd" mimeType="audio/basic" />
            <mimeMap fileExtension=".snp" mimeType="application/octet-stream" />
            <mimeMap fileExtension=".spc" mimeType="application/x-pkcs7-certificates" />
            <mimeMap fileExtension=".spl" mimeType="application/futuresplash" />
            <mimeMap fileExtension=".spx" mimeType="audio/ogg" />
            <mimeMap fileExtension=".src" mimeType="application/x-wais-source" />
            <mimeMap fileExtension=".ssm" mimeType="application/streamingmedia" />
            <mimeMap fileExtension=".sst" mimeType="application/vnd.ms-pki.certstore" />
            <mimeMap fileExtension=".stl" mimeType="application/vnd.ms-pki.stl" />
            <mimeMap fileExtension=".sv4cpio" mimeType="application/x-sv4cpio" />
            <mimeMap fileExtension=".sv4crc" mimeType="application/x-sv4crc" />
            <mimeMap fileExtension=".svg" mimeType="image/svg+xml" />
            <mimeMap fileExtension=".svgz" mimeType="image/svg+xml" />
            <mimeMap fileExtension=".swf" mimeType="application/x-shockwave-flash" />
            <mimeMap fileExtension=".t" mimeType="application/x-troff" />
            <mimeMap fileExtension=".tar" mimeType="application/x-tar" />
            <mimeMap fileExtension=".tcl" mimeType="application/x-tcl" />
            <mimeMap fileExtension=".tex" mimeType="application/x-tex" />
            <mimeMap fileExtension=".texi" mimeType="application/x-texinfo" />
            <mimeMap fileExtension=".texinfo" mimeType="application/x-texinfo" />
            <mimeMap fileExtension=".tgz" mimeType="application/x-compressed" />
            <mimeMap fileExtension=".thmx" mimeType="application/vnd.ms-officetheme" />
            <mimeMap fileExtension=".thn" mimeType="application/octet-stream" />
            <mimeMap fileExtension=".tif" mimeType="image/tiff" />
            <mimeMap fileExtension=".tiff" mimeType="image/tiff" />
            <mimeMap fileExtension=".toc" mimeType="application/octet-stream" />
            <mimeMap fileExtension=".tr" mimeType="application/x-troff" />
            <mimeMap fileExtension=".trm" mimeType="application/x-msterminal" />
            <mimeMap fileExtension=".ts" mimeType="video/vnd.dlna.mpeg-tts" />
            <mimeMap fileExtension=".tsv" mimeType="text/tab-separated-values" />
            <mimeMap fileExtension=".ttf" mimeType="application/octet-stream" />
            <mimeMap fileExtension=".tts" mimeType="video/vnd.dlna.mpeg-tts" />
            <mimeMap fileExtension=".txt" mimeType="text/plain" />
            <mimeMap fileExtension=".u32" mimeType="application/octet-stream" />
            <mimeMap fileExtension=".uls" mimeType="text/iuls" />
            <mimeMap fileExtension=".ustar" mimeType="application/x-ustar" />
            <mimeMap fileExtension=".vbs" mimeType="text/vbscript" />
            <mimeMap fileExtension=".vcf" mimeType="text/x-vcard" />
            <mimeMap fileExtension=".vcs" mimeType="text/plain" />
            <mimeMap fileExtension=".vdx" mimeType="application/vnd.ms-visio.viewer" />
            <mimeMap fileExtension=".vml" mimeType="text/xml" />
            <mimeMap fileExtension=".vsd" mimeType="application/vnd.visio" />
            <mimeMap fileExtension=".vss" mimeType="application/vnd.visio" />
            <mimeMap fileExtension=".vst" mimeType="application/vnd.visio" />
            <mimeMap fileExtension=".vsto" mimeType="application/x-ms-vsto" />
            <mimeMap fileExtension=".vsw" mimeType="application/vnd.visio" />
            <mimeMap fileExtension=".vsx" mimeType="application/vnd.visio" />
            <mimeMap fileExtension=".vtx" mimeType="application/vnd.visio" />
            <mimeMap fileExtension=".wasm" mimeType="application/wasm" />
            <mimeMap fileExtension=".wav" mimeType="audio/wav" />
            <mimeMap fileExtension=".wax" mimeType="audio/x-ms-wax" />
            <mimeMap fileExtension=".wbmp" mimeType="image/vnd.wap.wbmp" />
            <mimeMap fileExtension=".wcm" mimeType="application/vnd.ms-works" />
            <mimeMap fileExtension=".wdb" mimeType="application/vnd.ms-works" />
            <mimeMap fileExtension=".webm" mimeType="video/webm" />
            <mimeMap fileExtension=".wks" mimeType="application/vnd.ms-works" />
            <mimeMap fileExtension=".wm" mimeType="video/x-ms-wm" />
            <mimeMap fileExtension=".wma" mimeType="audio/x-ms-wma" />
            <mimeMap fileExtension=".wmd" mimeType="application/x-ms-wmd" />
            <mimeMap fileExtension=".wmf" mimeType="application/x-msmetafile" />
            <mimeMap fileExtension=".wml" mimeType="text/vnd.wap.wml" />
            <mimeMap fileExtension=".wmlc" mimeType="application/vnd.wap.wmlc" />
            <mimeMap fileExtension=".wmls" mimeType="text/vnd.wap.wmlscript" />
            <mimeMap fileExtension=".wmlsc" mimeType="application/vnd.wap.wmlscriptc" />
            <mimeMap fileExtension=".wmp" mimeType="video/x-ms-wmp" />
            <mimeMap fileExtension=".wmv" mimeType="video/x-ms-wmv" />
            <mimeMap fileExtension=".wmx" mimeType="video/x-ms-wmx" />
            <mimeMap fileExtension=".wmz" mimeType="application/x-ms-wmz" />
            <mimeMap fileExtension=".woff" mimeType="font/x-woff" />
            <mimeMap fileExtension=".woff2" mimeType="application/font-woff2" />
            <mimeMap fileExtension=".wps" mimeType="application/vnd.ms-works" />
            <mimeMap fileExtension=".wri" mimeType="application/x-mswrite" />
            <mimeMap fileExtension=".wrl" mimeType="x-world/x-vrml" />
            <mimeMap fileExtension=".wrz" mimeType="x-world/x-vrml" />
            <mimeMap fileExtension=".wsdl" mimeType="text/xml" />
            <mimeMap fileExtension=".wtv" mimeType="video/x-ms-wtv" />
            <mimeMap fileExtension=".wvx" mimeType="video/x-ms-wvx" />
            <mimeMap fileExtension=".x" mimeType="application/directx" />
            <mimeMap fileExtension=".xaf" mimeType="x-world/x-vrml" />
            <mimeMap fileExtension=".xaml" mimeType="application/xaml+xml" />
            <mimeMap fileExtension=".xap" mimeType="application/x-silverlight-app" />
            <mimeMap fileExtension=".xbap" mimeType="application/x-ms-xbap" />
            <mimeMap fileExtension=".xbm" mimeType="image/x-xbitmap" />
            <mimeMap fileExtension=".xdr" mimeType="text/plain" />
            <mimeMap fileExtension=".xht" mimeType="application/xhtml+xml" />
            <mimeMap fileExtension=".xhtml" mimeType="application/xhtml+xml" />
            <mimeMap fileExtension=".xla" mimeType="application/vnd.ms-excel" />
            <mimeMap fileExtension=".xlam" mimeType="application/vnd.ms-excel.addin.macroEnabled.12" />
            <mimeMap fileExtension=".xlc" mimeType="application/vnd.ms-excel" />
            <mimeMap fileExtension=".xlm" mimeType="application/vnd.ms-excel" />
            <mimeMap fileExtension=".xls" mimeType="application/vnd.ms-excel" />
            <mimeMap fileExtension=".xlsb" mimeType="application/vnd.ms-excel.sheet.binary.macroEnabled.12" />
            <mimeMap fileExtension=".xlsm" mimeType="application/vnd.ms-excel.sheet.macroEnabled.12" />
            <mimeMap fileExtension=".xlsx" mimeType="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" />
            <mimeMap fileExtension=".xlt" mimeType="application/vnd.ms-excel" />
            <mimeMap fileExtension=".xltm" mimeType="application/vnd.ms-excel.template.macroEnabled.12" />
            <mimeMap fileExtension=".xltx" mimeType="application/vnd.openxmlformats-officedocument.spreadsheetml.template" />
            <mimeMap fileExtension=".xlw" mimeType="application/vnd.ms-excel" />
            <mimeMap fileExtension=".xml" mimeType="text/xml" />
            <mimeMap fileExtension=".xof" mimeType="x-world/x-vrml" />
            <mimeMap fileExtension=".xpm" mimeType="image/x-xpixmap" />
            <mimeMap fileExtension=".xps" mimeType="application/vnd.ms-xpsdocument" />
            <mimeMap fileExtension=".xsd" mimeType="text/xml" />
            <mimeMap fileExtension=".xsf" mimeType="text/xml" />
            <mimeMap fileExtension=".xsl" mimeType="text/xml" />
            <mimeMap fileExtension=".xslt" mimeType="text/xml" />
            <mimeMap fileExtension=".xsn" mimeType="application/octet-stream" />
            <mimeMap fileExtension=".xtp" mimeType="application/octet-stream" />
            <mimeMap fileExtension=".xwd" mimeType="image/x-xwindowdump" />
            <mimeMap fileExtension=".z" mimeType="application/x-compress" />
            <mimeMap fileExtension=".zip" mimeType="application/x-zip-compressed" />
        </staticContent>

        <tracing>

            <traceFailedRequests>
                <add path="*">
                    <traceAreas>
                        <add provider="ASP" verbosity="Verbose" />
                        <add provider="ASPNET" areas="Infrastructure,Module,Page,AppServices" verbosity="Verbose" />
                        <add provider="ISAPI Extension" verbosity="Verbose" />
                        <add provider="WWW Server" areas="Authentication,Security,Filter,StaticFile,CGI,Compression,Cache,RequestNotifications,Module,Rewrite,WebSocket" verbosity="Verbose" />
                    </traceAreas>
                    <failureDefinitions statusCodes="200-999" />
                </add>
            </traceFailedRequests>

            <traceProviderDefinitions>
                <add name="WWW Server" guid="{3a2a4e84-4c21-4981-ae10-3fda0d9b0f83}">
                    <areas>
                        <clear />
                        <add name="Authentication" value="2" />
                        <add name="Security" value="4" />
                        <add name="Filter" value="8" />
                        <add name="StaticFile" value="16" />
                        <add name="CGI" value="32" />
                        <add name="Compression" value="64" />
                        <add name="Cache" value="128" />
                        <add name="RequestNotifications" value="256" />
                        <add name="Module" value="512" />
                        <add name="Rewrite" value="1024" />
                        <add name="FastCGI" value="4096" />
                        <add name="WebSocket" value="16384" />
                        <add name="ANCM" value="65536" />
                    </areas>
                </add>
                <add name="ASP" guid="{06b94d9a-b15e-456e-a4ef-37c984a2cb4b}">
                    <areas>
                        <clear />
                    </areas>
                </add>
                <add name="ISAPI Extension" guid="{a1c2040e-8840-4c31-ba11-9871031a19ea}">
                    <areas>
                        <clear />
                    </areas>
                </add>
                <add name="ASPNET" guid="{AFF081FE-0247-4275-9C4E-021F3DC1DA35}">
                    <areas>
                        <add name="Infrastructure" value="1" />
                        <add name="Module" value="2" />
                        <add name="Page" value="4" />
                        <add name="AppServices" value="8" />
                    </areas>
                </add>
            </traceProviderDefinitions>

        </tracing>

        <urlCompression />

        <validation />
        <webdav>
            <globalSettings>
                <propertyStores>
                    <add name="webdav_simple_prop" image="%IIS_BIN%\webdav_simple_prop.dll" image32="%IIS_BIN%\webdav_simple_prop.dll" />
                </propertyStores>
                <lockStores>
                    <add name="webdav_simple_lock" image="%IIS_BIN%\webdav_simple_lock.dll" image32="%IIS_BIN%\webdav_simple_lock.dll" />
                </lockStores>

            </globalSettings>
            <authoring>
                <locks enabled="true" lockStore="webdav_simple_lock" />
            </authoring>
            <authoringRules />
        </webdav>
        <webSocket />
        <applicationInitialization />

    </system.webServer>
    <location path="" overrideMode="Allow">
        <system.webServer>
            <modules>
                <add name="IsapiFilterModule" lockItem="true" />
                <add name="BasicAuthenticationModule" lockItem="true" />
                <add name="IsapiModule" lockItem="true" />
                <add name="HttpLoggingModule" lockItem="true" />
                <add name="DynamicCompressionModule" lockItem="true" />
                <add name="StaticCompressionModule" lockItem="true" />
                <add name="DefaultDocumentModule" lockItem="true" />
                <add name="DirectoryListingModule" lockItem="true" />
                <add name="ProtocolSupportModule" lockItem="true" />
                <add name="HttpRedirectionModule" lockItem="true" />
                <add name="ServerSideIncludeModule" lockItem="true" />
                <add name="StaticFileModule" lockItem="true" />
                <add name="AnonymousAuthenticationModule" lockItem="true" />
                <add name="CertificateMappingAuthenticationModule" lockItem="true" />
                <add name="UrlAuthorizationModule" lockItem="true" />
                <add name="WindowsAuthenticationModule" lockItem="true" />
                <add name="IISCertificateMappingAuthenticationModule" lockItem="true" />
                <add name="WebMatrixSupportModule" lockItem="true" />
                <add name="IpRestrictionModule" lockItem="true" />
                <add name="DynamicIpRestrictionModule" lockItem="true" />
                <add name="RequestFilteringModule" lockItem="true" />
                <add name="CustomLoggingModule" lockItem="true" />
                <add name="CustomErrorModule" lockItem="true" />
                <add name="FailedRequestsTracingModule" lockItem="true" />
                <add name="CgiModule" lockItem="true" />
                <add name="FastCgiModule" lockItem="true" />
<!--                <add name="WebDAVModule" /> -->
                <add name="RewriteModule" />
                <add name="OutputCache" type="System.Web.Caching.OutputCacheModule" preCondition="managedHandler" />
                <add name="Session" type="System.Web.SessionState.SessionStateModule" preCondition="managedHandler" />
                <add name="WindowsAuthentication" type="System.Web.Security.WindowsAuthenticationModule" preCondition="managedHandler" />
                <add name="FormsAuthentication" type="System.Web.Security.FormsAuthenticationModule" preCondition="managedHandler" />
                <add name="DefaultAuthentication" type="System.Web.Security.DefaultAuthenticationModule" preCondition="managedHandler" />
                <add name="RoleManager" type="System.Web.Security.RoleManagerModule" preCondition="managedHandler" />
                <add name="UrlAuthorization" type="System.Web.Security.UrlAuthorizationModule" preCondition="managedHandler" />
                <add name="FileAuthorization" type="System.Web.Security.FileAuthorizationModule" preCondition="managedHandler" />
                <add name="AnonymousIdentification" type="System.Web.Security.AnonymousIdentificationModule" preCondition="managedHandler" />
                <add name="Profile" type="System.Web.Profile.ProfileModule" preCondition="managedHandler" />
                <add name="UrlMappingsModule" type="System.Web.UrlMappingsModule" preCondition="managedHandler" />
                <add name="ApplicationInitializationModule" lockItem="true" />
                <add name="WebSocketModule" lockItem="true" />
                <add name="ServiceModel-4.0" type="System.ServiceModel.Activation.ServiceHttpModule,System.ServiceModel.Activation,Version=4.0.0.0,Culture=neutral,PublicKeyToken=31bf3856ad364e35" preCondition="managedHandler,runtimeVersionv4.0" />
                <add name="ConfigurationValidationModule" lockItem="true" />
                <add name="UrlRoutingModule-4.0" type="System.Web.Routing.UrlRoutingModule" preCondition="managedHandler,runtimeVersionv4.0" />
                <add name="ScriptModule-4.0" type="System.Web.Handlers.ScriptModule, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" preCondition="managedHandler,runtimeVersionv4.0" />
                <add name="ServiceModel" type="System.ServiceModel.Activation.HttpModule, System.ServiceModel, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" preCondition="managedHandler,runtimeVersionv2.0" />
                <add name="AspNetCoreModule" lockItem="true" />
                <add name="AspNetCoreModuleV2" lockItem="true" />
            </modules>
            <handlers accessPolicy="Read, Script">
<!--                <add name="WebDAV" path="*" verb="PROPFIND,PROPPATCH,MKCOL,PUT,COPY,DELETE,MOVE,LOCK,UNLOCK" modules="WebDAVModule" resourceType="Unspecified" requireAccess="None" /> -->
                <add name="AXD-ISAPI-4.0_64bit" path="*.axd" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness64" responseBufferLimit="0" />
                <add name="PageHandlerFactory-ISAPI-4.0_64bit" path="*.aspx" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness64" responseBufferLimit="0" />
                <add name="SimpleHandlerFactory-ISAPI-4.0_64bit" path="*.ashx" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness64" responseBufferLimit="0" />
                <add name="WebServiceHandlerFactory-ISAPI-4.0_64bit" path="*.asmx" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness64" responseBufferLimit="0" />
                <add name="HttpRemotingHandlerFactory-rem-ISAPI-4.0_64bit" path="*.rem" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness64" responseBufferLimit="0" />
                <add name="HttpRemotingHandlerFactory-soap-ISAPI-4.0_64bit" path="*.soap" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness64" responseBufferLimit="0" />
                <add name="svc-ISAPI-4.0_64bit" path="*.svc" verb="*" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness64" />
                <add name="rules-ISAPI-4.0_64bit" path="*.rules" verb="*" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness64" />
                <add name="xoml-ISAPI-4.0_64bit" path="*.xoml" verb="*" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness64" />
                <add name="xamlx-ISAPI-4.0_64bit" path="*.xamlx" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness64" />
                <add name="aspq-ISAPI-4.0_64bit" path="*.aspq" verb="*" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness64" responseBufferLimit="0" />
                <add name="cshtm-ISAPI-4.0_64bit" path="*.cshtm" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness64" responseBufferLimit="0" />
                <add name="cshtml-ISAPI-4.0_64bit" path="*.cshtml" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness64" responseBufferLimit="0" />
                <add name="vbhtm-ISAPI-4.0_64bit" path="*.vbhtm" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness64" responseBufferLimit="0" />
                <add name="vbhtml-ISAPI-4.0_64bit" path="*.vbhtml" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness64" responseBufferLimit="0" />
                <add name="svc-Integrated" path="*.svc" verb="*" type="System.ServiceModel.Activation.HttpHandler, System.ServiceModel, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" preCondition="integratedMode,runtimeVersionv2.0" />
                <add name="svc-ISAPI-2.0" path="*.svc" verb="*" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v2.0.50727\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv2.0,bitness32" />
                <add name="xoml-Integrated" path="*.xoml" verb="*" type="System.ServiceModel.Activation.HttpHandler, System.ServiceModel, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" preCondition="integratedMode,runtimeVersionv2.0" />
                <add name="xoml-ISAPI-2.0" path="*.xoml" verb="*" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v2.0.50727\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv2.0,bitness32" />
                <add name="rules-Integrated" path="*.rules" verb="*" type="System.ServiceModel.Activation.HttpHandler, System.ServiceModel, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" preCondition="integratedMode,runtimeVersionv2.0" />
                <add name="rules-ISAPI-2.0" path="*.rules" verb="*" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v2.0.50727\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv2.0,bitness32" />
                <add name="AXD-ISAPI-4.0_32bit" path="*.axd" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness32" responseBufferLimit="0" />
                <add name="PageHandlerFactory-ISAPI-4.0_32bit" path="*.aspx" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness32" responseBufferLimit="0" />
                <add name="SimpleHandlerFactory-ISAPI-4.0_32bit" path="*.ashx" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness32" responseBufferLimit="0" />
                <add name="WebServiceHandlerFactory-ISAPI-4.0_32bit" path="*.asmx" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness32" responseBufferLimit="0" />
                <add name="HttpRemotingHandlerFactory-rem-ISAPI-4.0_32bit" path="*.rem" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness32" responseBufferLimit="0" />
                <add name="HttpRemotingHandlerFactory-soap-ISAPI-4.0_32bit" path="*.soap" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness32" responseBufferLimit="0" />
                <add name="svc-ISAPI-4.0_32bit" path="*.svc" verb="*" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness32" />
                <add name="rules-ISAPI-4.0_32bit" path="*.rules" verb="*" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness32" />
                <add name="xoml-ISAPI-4.0_32bit" path="*.xoml" verb="*" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness32" />
                <add name="xamlx-ISAPI-4.0_32bit" path="*.xamlx" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness32" />
                <add name="aspq-ISAPI-4.0_32bit" path="*.aspq" verb="*" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness32" responseBufferLimit="0" />
                <add name="cshtm-ISAPI-4.0_32bit" path="*.cshtm" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness32" responseBufferLimit="0" />
                <add name="cshtml-ISAPI-4.0_32bit" path="*.cshtml" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness32" responseBufferLimit="0" />
                <add name="vbhtm-ISAPI-4.0_32bit" path="*.vbhtm" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness32" responseBufferLimit="0" />
                <add name="vbhtml-ISAPI-4.0_32bit" path="*.vbhtml" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness32" responseBufferLimit="0" />
                <add name="TraceHandler-Integrated-4.0" path="trace.axd" verb="GET,HEAD,POST,DEBUG" type="System.Web.Handlers.TraceHandler" preCondition="integratedMode,runtimeVersionv4.0" />
                <add name="WebAdminHandler-Integrated-4.0" path="WebAdmin.axd" verb="GET,DEBUG" type="System.Web.Handlers.WebAdminHandler" preCondition="integratedMode,runtimeVersionv4.0" />
                <add name="AssemblyResourceLoader-Integrated-4.0" path="WebResource.axd" verb="GET,DEBUG" type="System.Web.Handlers.AssemblyResourceLoader" preCondition="integratedMode,runtimeVersionv4.0" />
                <add name="PageHandlerFactory-Integrated-4.0" path="*.aspx" verb="GET,HEAD,POST,DEBUG" type="System.Web.UI.PageHandlerFactory" preCondition="integratedMode,runtimeVersionv4.0" />
                <add name="SimpleHandlerFactory-Integrated-4.0" path="*.ashx" verb="GET,HEAD,POST,DEBUG" type="System.Web.UI.SimpleHandlerFactory" preCondition="integratedMode,runtimeVersionv4.0" />
                <add name="WebServiceHandlerFactory-Integrated-4.0" path="*.asmx" verb="GET,HEAD,POST,DEBUG" type="System.Web.Script.Services.ScriptHandlerFactory, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" preCondition="integratedMode,runtimeVersionv4.0" />
                <add name="HttpRemotingHandlerFactory-rem-Integrated-4.0" path="*.rem" verb="GET,HEAD,POST,DEBUG" type="System.Runtime.Remoting.Channels.Http.HttpRemotingHandlerFactory, System.Runtime.Remoting, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" preCondition="integratedMode,runtimeVersionv4.0" />
                <add name="HttpRemotingHandlerFactory-soap-Integrated-4.0" path="*.soap" verb="GET,HEAD,POST,DEBUG" type="System.Runtime.Remoting.Channels.Http.HttpRemotingHandlerFactory, System.Runtime.Remoting, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" preCondition="integratedMode,runtimeVersionv4.0" />
                <add name="svc-Integrated-4.0" path="*.svc" verb="*" type="System.ServiceModel.Activation.ServiceHttpHandlerFactory, System.ServiceModel.Activation, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" preCondition="integratedMode,runtimeVersionv4.0" />
                <add name="rules-Integrated-4.0" path="*.rules" verb="*" type="System.ServiceModel.Activation.ServiceHttpHandlerFactory, System.ServiceModel.Activation, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" preCondition="integratedMode,runtimeVersionv4.0" />
                <add name="xoml-Integrated-4.0" path="*.xoml" verb="*" type="System.ServiceModel.Activation.ServiceHttpHandlerFactory, System.ServiceModel.Activation, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" preCondition="integratedMode,runtimeVersionv4.0" />
                <add name="xamlx-Integrated-4.0" path="*.xamlx" verb="GET,HEAD,POST,DEBUG" type="System.Xaml.Hosting.XamlHttpHandlerFactory, System.Xaml.Hosting, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" preCondition="integratedMode,runtimeVersionv4.0" />
                <add name="aspq-Integrated-4.0" path="*.aspq" verb="GET,HEAD,POST,DEBUG" type="System.Web.HttpForbiddenHandler" preCondition="integratedMode,runtimeVersionv4.0" />
                <add name="cshtm-Integrated-4.0" path="*.cshtm" verb="GET,HEAD,POST,DEBUG" type="System.Web.HttpForbiddenHandler" preCondition="integratedMode,runtimeVersionv4.0" />
                <add name="cshtml-Integrated-4.0" path="*.cshtml" verb="GET,HEAD,POST,DEBUG" type="System.Web.HttpForbiddenHandler" preCondition="integratedMode,runtimeVersionv4.0" />
                <add name="vbhtm-Integrated-4.0" path="*.vbhtm" verb="GET,HEAD,POST,DEBUG" type="System.Web.HttpForbiddenHandler" preCondition="integratedMode,runtimeVersionv4.0" />
                <add name="vbhtml-Integrated-4.0" path="*.vbhtml" verb="GET,HEAD,POST,DEBUG" type="System.Web.HttpForbiddenHandler" preCondition="integratedMode,runtimeVersionv4.0" />
                <add name="ScriptHandlerFactoryAppServices-Integrated-4.0" path="*_AppService.axd" verb="*" type="System.Web.Script.Services.ScriptHandlerFactory, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" preCondition="integratedMode,runtimeVersionv4.0" />
                <add name="ScriptResourceIntegrated-4.0" path="*ScriptResource.axd" verb="GET,HEAD" type="System.Web.Handlers.ScriptResourceHandler, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" preCondition="integratedMode,runtimeVersionv4.0" />
                <add name="ASPClassic" path="*.asp" verb="GET,HEAD,POST" modules="IsapiModule" scriptProcessor="%IIS_BIN%\asp.dll" resourceType="File" />
                <add name="SecurityCertificate" path="*.cer" verb="GET,HEAD,POST" modules="IsapiModule" scriptProcessor="%IIS_BIN%\asp.dll" resourceType="File" />
                <add name="ISAPI-dll" path="*.dll" verb="*" modules="IsapiModule" resourceType="File" requireAccess="Execute" allowPathInfo="true" />
                <add name="TraceHandler-Integrated" path="trace.axd" verb="GET,HEAD,POST,DEBUG" type="System.Web.Handlers.TraceHandler" preCondition="integratedMode,runtimeVersionv2.0" />
                <add name="WebAdminHandler-Integrated" path="WebAdmin.axd" verb="GET,DEBUG" type="System.Web.Handlers.WebAdminHandler" preCondition="integratedMode,runtimeVersionv2.0" />
                <add name="AssemblyResourceLoader-Integrated" path="WebResource.axd" verb="GET,DEBUG" type="System.Web.Handlers.AssemblyResourceLoader" preCondition="integratedMode,runtimeVersionv2.0" />
                <add name="PageHandlerFactory-Integrated" path="*.aspx" verb="GET,HEAD,POST,DEBUG" type="System.Web.UI.PageHandlerFactory" preCondition="integratedMode,runtimeVersionv2.0" />
                <add name="SimpleHandlerFactory-Integrated" path="*.ashx" verb="GET,HEAD,POST,DEBUG" type="System.Web.UI.SimpleHandlerFactory" preCondition="integratedMode,runtimeVersionv2.0" />
                <add name="WebServiceHandlerFactory-Integrated" path="*.asmx" verb="GET,HEAD,POST,DEBUG" type="System.Web.Services.Protocols.WebServiceHandlerFactory,System.Web.Services,Version=2.0.0.0,Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a" preCondition="integratedMode,runtimeVersionv2.0" />
                <add name="HttpRemotingHandlerFactory-rem-Integrated" path="*.rem" verb="GET,HEAD,POST,DEBUG" type="System.Runtime.Remoting.Channels.Http.HttpRemotingHandlerFactory,System.Runtime.Remoting,Version=2.0.0.0,Culture=neutral,PublicKeyToken=b77a5c561934e089" preCondition="integratedMode,runtimeVersionv2.0" />
                <add name="HttpRemotingHandlerFactory-soap-Integrated" path="*.soap" verb="GET,HEAD,POST,DEBUG" type="System.Runtime.Remoting.Channels.Http.HttpRemotingHandlerFactory,System.Runtime.Remoting,Version=2.0.0.0,Culture=neutral,PublicKeyToken=b77a5c561934e089" preCondition="integratedMode,runtimeVersionv2.0" />
                <add name="AXD-ISAPI-2.0" path="*.axd" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v2.0.50727\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv2.0,bitness32" responseBufferLimit="0" />
                <add name="PageHandlerFactory-ISAPI-2.0" path="*.aspx" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v2.0.50727\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv2.0,bitness32" responseBufferLimit="0" />
                <add name="SimpleHandlerFactory-ISAPI-2.0" path="*.ashx" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v2.0.50727\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv2.0,bitness32" responseBufferLimit="0" />
                <add name="WebServiceHandlerFactory-ISAPI-2.0" path="*.asmx" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v2.0.50727\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv2.0,bitness32" responseBufferLimit="0" />
                <add name="HttpRemotingHandlerFactory-rem-ISAPI-2.0" path="*.rem" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v2.0.50727\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv2.0,bitness32" responseBufferLimit="0" />
                <add name="HttpRemotingHandlerFactory-soap-ISAPI-2.0" path="*.soap" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v2.0.50727\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv2.0,bitness32" responseBufferLimit="0" />
                <add name="svc-ISAPI-2.0-64" path="*.svc" verb="*" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v2.0.50727\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv2.0,bitness64" />
                <add name="AXD-ISAPI-2.0-64" path="*.axd" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v2.0.50727\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv2.0,bitness64" responseBufferLimit="0" />
                <add name="PageHandlerFactory-ISAPI-2.0-64" path="*.aspx" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v2.0.50727\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv2.0,bitness64" responseBufferLimit="0" />
                <add name="SimpleHandlerFactory-ISAPI-2.0-64" path="*.ashx" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v2.0.50727\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv2.0,bitness64" responseBufferLimit="0" />
                <add name="WebServiceHandlerFactory-ISAPI-2.0-64" path="*.asmx" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v2.0.50727\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv2.0,bitness64" responseBufferLimit="0" />
                <add name="HttpRemotingHandlerFactory-rem-ISAPI-2.0-64" path="*.rem" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v2.0.50727\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv2.0,bitness64" responseBufferLimit="0" />
                <add name="HttpRemotingHandlerFactory-soap-ISAPI-2.0-64" path="*.soap" verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v2.0.50727\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv2.0,bitness64" responseBufferLimit="0" />
                <add name="rules-64-ISAPI-2.0" path="*.rules" verb="*" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v2.0.50727\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv2.0,bitness64" />
                <add name="xoml-64-ISAPI-2.0" path="*.xoml" verb="*" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v2.0.50727\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv2.0,bitness64" />
                <add name="CGI-exe" path="*.exe" verb="*" modules="CgiModule" resourceType="File" requireAccess="Execute" allowPathInfo="true" />
                <add name="SSINC-stm" path="*.stm" verb="GET,HEAD,POST" modules="ServerSideIncludeModule" resourceType="File" />
                <add name="SSINC-shtm" path="*.shtm" verb="GET,HEAD,POST" modules="ServerSideIncludeModule" resourceType="File" />
                <add name="SSINC-shtml" path="*.shtml" verb="GET,HEAD,POST" modules="ServerSideIncludeModule" resourceType="File" />
                <add name="TRACEVerbHandler" path="*" verb="TRACE" modules="ProtocolSupportModule" requireAccess="None" />
                <add name="OPTIONSVerbHandler" path="*" verb="OPTIONS" modules="ProtocolSupportModule" requireAccess="None" />
                <add name="ExtensionlessUrlHandler-ISAPI-4.0_32bit" path="*." verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness32" responseBufferLimit="0" />
                <add name="ExtensionlessUrlHandler-ISAPI-4.0_64bit" path="*." verb="GET,HEAD,POST,DEBUG" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness64" responseBufferLimit="0" />
                <add name="ExtensionlessUrlHandler-Integrated-4.0" path="*." verb="GET,HEAD,POST,DEBUG" type="System.Web.Handlers.TransferRequestHandler" preCondition="integratedMode,runtimeVersionv4.0" responseBufferLimit="0" />
                <add name="StaticFile" path="*" verb="*" modules="StaticFileModule,DefaultDocumentModule,DirectoryListingModule" resourceType="Either" requireAccess="Read" />
            </handlers>
        </system.webServer>
    </location>
</configuration>

================
File: .vs/Portfolio/v17/DocumentLayout.backup.json
================
{
  "Version": 1,
  "WorkspaceRootPath": "C:\\dev\\portfolio\\portfolio.net\\",
  "Documents": [
    {
      "AbsoluteMoniker": "D:0:0:{7A3B6C9F-D2D9-4149-BD8A-19D84BAEB8D2}|src\\Portfolio.WebApi\\Portfolio.WebApi.csproj|c:\\dev\\portfolio\\portfolio.net\\src\\portfolio.webapi\\program.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}",
      "RelativeMoniker": "D:0:0:{7A3B6C9F-D2D9-4149-BD8A-19D84BAEB8D2}|src\\Portfolio.WebApi\\Portfolio.WebApi.csproj|solutionrelative:src\\portfolio.webapi\\program.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}"
    },
    {
      "AbsoluteMoniker": "D:0:0:{7A3B6C9F-D2D9-4149-BD8A-19D84BAEB8D2}|src\\Portfolio.WebApi\\Portfolio.WebApi.csproj|c:\\dev\\portfolio\\portfolio.net\\src\\portfolio.webapi\\extensions\\endpoints\\userendpoints.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}",
      "RelativeMoniker": "D:0:0:{7A3B6C9F-D2D9-4149-BD8A-19D84BAEB8D2}|src\\Portfolio.WebApi\\Portfolio.WebApi.csproj|solutionrelative:src\\portfolio.webapi\\extensions\\endpoints\\userendpoints.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}"
    },
    {
      "AbsoluteMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|c:\\dev\\portfolio\\portfolio.net\\src\\portfolio.application\\usecases\\users\\queries\\getuserbyusername\\getuserbyusernamequery.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}",
      "RelativeMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|solutionrelative:src\\portfolio.application\\usecases\\users\\queries\\getuserbyusername\\getuserbyusernamequery.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}"
    },
    {
      "AbsoluteMoniker": "D:0:0:{7A3B6C9F-D2D9-4149-BD8A-19D84BAEB8D2}|src\\Portfolio.WebApi\\Portfolio.WebApi.csproj|c:\\dev\\portfolio\\portfolio.net\\src\\portfolio.webapi\\extensions\\applicationbuilderextensions.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}",
      "RelativeMoniker": "D:0:0:{7A3B6C9F-D2D9-4149-BD8A-19D84BAEB8D2}|src\\Portfolio.WebApi\\Portfolio.WebApi.csproj|solutionrelative:src\\portfolio.webapi\\extensions\\applicationbuilderextensions.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}"
    },
    {
      "AbsoluteMoniker": "D:0:0:{A18BA9AB-72F9-40CC-8D1E-675DD8658BC5}|src\\Portfolio.Domain\\Portfolio.Domain.csproj|c:\\dev\\portfolio\\portfolio.net\\src\\portfolio.domain\\entities\\blog.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}",
      "RelativeMoniker": "D:0:0:{A18BA9AB-72F9-40CC-8D1E-675DD8658BC5}|src\\Portfolio.Domain\\Portfolio.Domain.csproj|solutionrelative:src\\portfolio.domain\\entities\\blog.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}"
    },
    {
      "AbsoluteMoniker": "D:0:0:{7A3B6C9F-D2D9-4149-BD8A-19D84BAEB8D2}|src\\Portfolio.WebApi\\Portfolio.WebApi.csproj|c:\\dev\\portfolio\\portfolio.net\\src\\portfolio.webapi\\extensions\\endpoints\\projectendpoints.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}",
      "RelativeMoniker": "D:0:0:{7A3B6C9F-D2D9-4149-BD8A-19D84BAEB8D2}|src\\Portfolio.WebApi\\Portfolio.WebApi.csproj|solutionrelative:src\\portfolio.webapi\\extensions\\endpoints\\projectendpoints.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}"
    },
    {
      "AbsoluteMoniker": "D:0:0:{52F492E1-D924-4705-BE51-8CAE61414802}|src\\Portfolio.Infrastructure\\Portfolio.Infrastructure.csproj|c:\\dev\\portfolio\\portfolio.net\\src\\portfolio.infrastructure\\persistence\\repositories\\blogrepository.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}",
      "RelativeMoniker": "D:0:0:{52F492E1-D924-4705-BE51-8CAE61414802}|src\\Portfolio.Infrastructure\\Portfolio.Infrastructure.csproj|solutionrelative:src\\portfolio.infrastructure\\persistence\\repositories\\blogrepository.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}"
    },
    {
      "AbsoluteMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|c:\\dev\\portfolio\\portfolio.net\\src\\portfolio.application\\usecases\\blogs\\commands\\updateblog\\updateblogcommandhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}",
      "RelativeMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|solutionrelative:src\\portfolio.application\\usecases\\blogs\\commands\\updateblog\\updateblogcommandhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}"
    },
    {
      "AbsoluteMoniker": "D:0:0:{A18BA9AB-72F9-40CC-8D1E-675DD8658BC5}|src\\Portfolio.Domain\\Portfolio.Domain.csproj|c:\\dev\\portfolio\\portfolio.net\\src\\portfolio.domain\\valueobjects\\slug.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}",
      "RelativeMoniker": "D:0:0:{A18BA9AB-72F9-40CC-8D1E-675DD8658BC5}|src\\Portfolio.Domain\\Portfolio.Domain.csproj|solutionrelative:src\\portfolio.domain\\valueobjects\\slug.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}"
    },
    {
      "AbsoluteMoniker": "D:0:0:{A18BA9AB-72F9-40CC-8D1E-675DD8658BC5}|src\\Portfolio.Domain\\Portfolio.Domain.csproj|c:\\dev\\portfolio\\portfolio.net\\src\\portfolio.domain\\valueobjects\\email.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}",
      "RelativeMoniker": "D:0:0:{A18BA9AB-72F9-40CC-8D1E-675DD8658BC5}|src\\Portfolio.Domain\\Portfolio.Domain.csproj|solutionrelative:src\\portfolio.domain\\valueobjects\\email.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}"
    },
    {
      "AbsoluteMoniker": "D:0:0:{A18BA9AB-72F9-40CC-8D1E-675DD8658BC5}|src\\Portfolio.Domain\\Portfolio.Domain.csproj|c:\\dev\\portfolio\\portfolio.net\\src\\portfolio.domain\\entities\\project.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}",
      "RelativeMoniker": "D:0:0:{A18BA9AB-72F9-40CC-8D1E-675DD8658BC5}|src\\Portfolio.Domain\\Portfolio.Domain.csproj|solutionrelative:src\\portfolio.domain\\entities\\project.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}"
    },
    {
      "AbsoluteMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|c:\\dev\\portfolio\\portfolio.net\\src\\portfolio.application\\usecases\\users\\commands\\updateuser\\updateusercommandhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}",
      "RelativeMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|solutionrelative:src\\portfolio.application\\usecases\\users\\commands\\updateuser\\updateusercommandhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}"
    },
    {
      "AbsoluteMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|c:\\dev\\portfolio\\portfolio.net\\src\\portfolio.application\\usecases\\users\\commands\\deleteuser\\deleteusercommandhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}",
      "RelativeMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|solutionrelative:src\\portfolio.application\\usecases\\users\\commands\\deleteuser\\deleteusercommandhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}"
    },
    {
      "AbsoluteMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|c:\\dev\\portfolio\\portfolio.net\\src\\portfolio.application\\usecases\\projects\\commands\\updateproject\\updateprojectcommandhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}",
      "RelativeMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|solutionrelative:src\\portfolio.application\\usecases\\projects\\commands\\updateproject\\updateprojectcommandhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}"
    },
    {
      "AbsoluteMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|c:\\dev\\portfolio\\portfolio.net\\src\\portfolio.application\\usecases\\blogs\\commands\\deleteblog\\deleteblogcommandhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}",
      "RelativeMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|solutionrelative:src\\portfolio.application\\usecases\\blogs\\commands\\deleteblog\\deleteblogcommandhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}"
    },
    {
      "AbsoluteMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|c:\\dev\\portfolio\\portfolio.net\\src\\portfolio.application\\usecases\\users\\queries\\getuserbyid\\getuserbyidqueryhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}",
      "RelativeMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|solutionrelative:src\\portfolio.application\\usecases\\users\\queries\\getuserbyid\\getuserbyidqueryhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}"
    },
    {
      "AbsoluteMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|c:\\dev\\portfolio\\portfolio.net\\src\\portfolio.application\\usecases\\users\\queries\\getallusers\\getallusersqueryhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}",
      "RelativeMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|solutionrelative:src\\portfolio.application\\usecases\\users\\queries\\getallusers\\getallusersqueryhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}"
    },
    {
      "AbsoluteMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|c:\\dev\\portfolio\\portfolio.net\\src\\portfolio.application\\usecases\\projects\\queries\\getprojectbyid\\getprojectbyidqueryhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}",
      "RelativeMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|solutionrelative:src\\portfolio.application\\usecases\\projects\\queries\\getprojectbyid\\getprojectbyidqueryhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}"
    },
    {
      "AbsoluteMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|c:\\dev\\portfolio\\portfolio.net\\src\\portfolio.application\\usecases\\projects\\queries\\getallprojects\\getallprojectsqueryhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}",
      "RelativeMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|solutionrelative:src\\portfolio.application\\usecases\\projects\\queries\\getallprojects\\getallprojectsqueryhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}"
    },
    {
      "AbsoluteMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|c:\\dev\\portfolio\\portfolio.net\\src\\portfolio.application\\usecases\\projects\\commands\\deleteproject\\deleteprojectcommandhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}",
      "RelativeMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|solutionrelative:src\\portfolio.application\\usecases\\projects\\commands\\deleteproject\\deleteprojectcommandhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}"
    },
    {
      "AbsoluteMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|c:\\dev\\portfolio\\portfolio.net\\src\\portfolio.application\\usecases\\blogs\\queries\\getblogbyslug\\getblogbyslugqueryhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}",
      "RelativeMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|solutionrelative:src\\portfolio.application\\usecases\\blogs\\queries\\getblogbyslug\\getblogbyslugqueryhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}"
    },
    {
      "AbsoluteMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|c:\\dev\\portfolio\\portfolio.net\\src\\portfolio.application\\interfaces\\persistence\\iblogrepository.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}",
      "RelativeMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|solutionrelative:src\\portfolio.application\\interfaces\\persistence\\iblogrepository.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}"
    },
    {
      "AbsoluteMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|c:\\dev\\portfolio\\portfolio.net\\src\\portfolio.application\\usecases\\blogs\\queries\\getblogbyid\\getblogbyidqueryhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}",
      "RelativeMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|solutionrelative:src\\portfolio.application\\usecases\\blogs\\queries\\getblogbyid\\getblogbyidqueryhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}"
    },
    {
      "AbsoluteMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|c:\\dev\\portfolio\\portfolio.net\\src\\portfolio.application\\usecases\\blogs\\queries\\getallblogs\\getallblogsqueryhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}",
      "RelativeMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|solutionrelative:src\\portfolio.application\\usecases\\blogs\\queries\\getallblogs\\getallblogsqueryhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}"
    }
  ],
  "DocumentGroupContainers": [
    {
      "Orientation": 0,
      "VerticalTabListWidth": 256,
      "DocumentGroups": [
        {
          "DockedWidth": 200,
          "SelectedChildIndex": 0,
          "Children": [
            {
              "$type": "Document",
              "DocumentIndex": 0,
              "Title": "Program.cs",
              "DocumentMoniker": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.WebApi\\Program.cs",
              "RelativeDocumentMoniker": "src\\Portfolio.WebApi\\Program.cs",
              "ToolTip": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.WebApi\\Program.cs",
              "RelativeToolTip": "src\\Portfolio.WebApi\\Program.cs",
              "ViewState": "AgIAAAQAAAAAAAAAAAAAwBcAAAAUAAAAAAAAAA==",
              "Icon": "ae27a6b0-e345-4288-96df-5eaf394ee369.000738|",
              "WhenOpened": "2025-03-17T13:28:38.153Z",
              "EditorCaption": ""
            },
            {
              "$type": "Document",
              "DocumentIndex": 2,
              "Title": "GetUserByUsernameQuery.cs",
              "DocumentMoniker": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Users\\Queries\\GetUserByUsername\\GetUserByUsernameQuery.cs",
              "RelativeDocumentMoniker": "src\\Portfolio.Application\\UseCases\\Users\\Queries\\GetUserByUsername\\GetUserByUsernameQuery.cs",
              "ToolTip": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Users\\Queries\\GetUserByUsername\\GetUserByUsernameQuery.cs",
              "RelativeToolTip": "src\\Portfolio.Application\\UseCases\\Users\\Queries\\GetUserByUsername\\GetUserByUsernameQuery.cs",
              "ViewState": "AgIAAAAAAAAAAAAAAAAuwAcAAAABAAAAAAAAAA==",
              "Icon": "ae27a6b0-e345-4288-96df-5eaf394ee369.000738|",
              "WhenOpened": "2025-03-17T13:26:28.849Z",
              "EditorCaption": ""
            },
            {
              "$type": "Document",
              "DocumentIndex": 1,
              "Title": "UserEndpoints.cs",
              "DocumentMoniker": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.WebApi\\Extensions\\Endpoints\\UserEndpoints.cs",
              "RelativeDocumentMoniker": "src\\Portfolio.WebApi\\Extensions\\Endpoints\\UserEndpoints.cs",
              "ToolTip": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.WebApi\\Extensions\\Endpoints\\UserEndpoints.cs",
              "RelativeToolTip": "src\\Portfolio.WebApi\\Extensions\\Endpoints\\UserEndpoints.cs",
              "ViewState": "AgIAAFcAAAAAAAAAAAAAwGUAAAA1AAAAAAAAAA==",
              "Icon": "ae27a6b0-e345-4288-96df-5eaf394ee369.000738|",
              "WhenOpened": "2025-03-17T13:26:21.364Z",
              "EditorCaption": ""
            },
            {
              "$type": "Document",
              "DocumentIndex": 3,
              "Title": "ApplicationBuilderExtensions.cs",
              "DocumentMoniker": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.WebApi\\Extensions\\ApplicationBuilderExtensions.cs",
              "RelativeDocumentMoniker": "src\\Portfolio.WebApi\\Extensions\\ApplicationBuilderExtensions.cs",
              "ToolTip": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.WebApi\\Extensions\\ApplicationBuilderExtensions.cs",
              "RelativeToolTip": "src\\Portfolio.WebApi\\Extensions\\ApplicationBuilderExtensions.cs",
              "ViewState": "AgIAAAMAAAAAAAAAAAAAABMAAAAJAAAAAAAAAA==",
              "Icon": "ae27a6b0-e345-4288-96df-5eaf394ee369.000738|",
              "WhenOpened": "2025-03-17T13:25:20.937Z",
              "EditorCaption": ""
            },
            {
              "$type": "Document",
              "DocumentIndex": 5,
              "Title": "ProjectEndpoints.cs",
              "DocumentMoniker": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.WebApi\\Extensions\\Endpoints\\ProjectEndpoints.cs",
              "RelativeDocumentMoniker": "src\\Portfolio.WebApi\\Extensions\\Endpoints\\ProjectEndpoints.cs",
              "ToolTip": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.WebApi\\Extensions\\Endpoints\\ProjectEndpoints.cs",
              "RelativeToolTip": "src\\Portfolio.WebApi\\Extensions\\Endpoints\\ProjectEndpoints.cs",
              "ViewState": "AgIAAFwAAAAAAAAAAAAAwF8AAAAAAAAAAAAAAA==",
              "Icon": "ae27a6b0-e345-4288-96df-5eaf394ee369.000738|",
              "WhenOpened": "2025-03-17T13:22:30.832Z",
              "EditorCaption": ""
            },
            {
              "$type": "Document",
              "DocumentIndex": 8,
              "Title": "Slug.cs",
              "DocumentMoniker": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\ValueObjects\\Slug.cs",
              "RelativeDocumentMoniker": "src\\Portfolio.Domain\\ValueObjects\\Slug.cs",
              "ToolTip": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\ValueObjects\\Slug.cs",
              "RelativeToolTip": "src\\Portfolio.Domain\\ValueObjects\\Slug.cs",
              "ViewState": "AgIAAAMAAAAAAAAAAAAAAE0AAAAAAAAAAAAAAA==",
              "Icon": "ae27a6b0-e345-4288-96df-5eaf394ee369.000738|",
              "WhenOpened": "2025-03-17T13:13:53.097Z",
              "EditorCaption": ""
            },
            {
              "$type": "Document",
              "DocumentIndex": 9,
              "Title": "Email.cs",
              "DocumentMoniker": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\ValueObjects\\Email.cs",
              "RelativeDocumentMoniker": "src\\Portfolio.Domain\\ValueObjects\\Email.cs",
              "ToolTip": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\ValueObjects\\Email.cs",
              "RelativeToolTip": "src\\Portfolio.Domain\\ValueObjects\\Email.cs",
              "ViewState": "AgIAABoAAAAAAAAAAAAgwCsAAAAvAAAAAAAAAA==",
              "Icon": "ae27a6b0-e345-4288-96df-5eaf394ee369.000738|",
              "WhenOpened": "2025-03-17T13:13:36.243Z",
              "EditorCaption": ""
            },
            {
              "$type": "Document",
              "DocumentIndex": 10,
              "Title": "Project.cs",
              "DocumentMoniker": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\Entities\\Project.cs",
              "RelativeDocumentMoniker": "src\\Portfolio.Domain\\Entities\\Project.cs",
              "ToolTip": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\Entities\\Project.cs",
              "RelativeToolTip": "src\\Portfolio.Domain\\Entities\\Project.cs",
              "ViewState": "AgIAAH0AAAAAAAAAAAAmwAAAAAAAAAAAAAAAAA==",
              "Icon": "ae27a6b0-e345-4288-96df-5eaf394ee369.000738|",
              "WhenOpened": "2025-03-17T13:13:13.216Z",
              "EditorCaption": ""
            },
            {
              "$type": "Document",
              "DocumentIndex": 4,
              "Title": "Blog.cs",
              "DocumentMoniker": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\Entities\\Blog.cs",
              "RelativeDocumentMoniker": "src\\Portfolio.Domain\\Entities\\Blog.cs",
              "ToolTip": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\Entities\\Blog.cs",
              "RelativeToolTip": "src\\Portfolio.Domain\\Entities\\Blog.cs",
              "ViewState": "AgIAAAcAAAAAAAAAAAAywBkAAAAQAAAAAAAAAA==",
              "Icon": "ae27a6b0-e345-4288-96df-5eaf394ee369.000738|",
              "WhenOpened": "2025-03-17T13:11:57.747Z",
              "EditorCaption": ""
            },
            {
              "$type": "Document",
              "DocumentIndex": 6,
              "Title": "BlogRepository.cs",
              "DocumentMoniker": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Infrastructure\\Persistence\\Repositories\\BlogRepository.cs",
              "RelativeDocumentMoniker": "src\\Portfolio.Infrastructure\\Persistence\\Repositories\\BlogRepository.cs",
              "ToolTip": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Infrastructure\\Persistence\\Repositories\\BlogRepository.cs",
              "RelativeToolTip": "src\\Portfolio.Infrastructure\\Persistence\\Repositories\\BlogRepository.cs",
              "ViewState": "AgIAAAcAAAAAAAAAAAAqwBMAAAA3AAAAAAAAAA==",
              "Icon": "ae27a6b0-e345-4288-96df-5eaf394ee369.000738|",
              "WhenOpened": "2025-03-17T13:11:16.674Z",
              "EditorCaption": ""
            },
            {
              "$type": "Document",
              "DocumentIndex": 11,
              "Title": "UpdateUserCommandHandler.cs",
              "DocumentMoniker": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Users\\Commands\\UpdateUser\\UpdateUserCommandHandler.cs",
              "RelativeDocumentMoniker": "src\\Portfolio.Application\\UseCases\\Users\\Commands\\UpdateUser\\UpdateUserCommandHandler.cs",
              "ToolTip": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Users\\Commands\\UpdateUser\\UpdateUserCommandHandler.cs",
              "RelativeToolTip": "src\\Portfolio.Application\\UseCases\\Users\\Commands\\UpdateUser\\UpdateUserCommandHandler.cs",
              "ViewState": "AgIAAB8AAAAAAAAAAAAAwC4AAABZAAAAAAAAAA==",
              "Icon": "ae27a6b0-e345-4288-96df-5eaf394ee369.000738|",
              "WhenOpened": "2025-03-17T13:10:25.942Z",
              "EditorCaption": ""
            },
            {
              "$type": "Document",
              "DocumentIndex": 7,
              "Title": "UpdateBlogCommandHandler.cs",
              "DocumentMoniker": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Blogs\\Commands\\UpdateBlog\\UpdateBlogCommandHandler.cs",
              "RelativeDocumentMoniker": "src\\Portfolio.Application\\UseCases\\Blogs\\Commands\\UpdateBlog\\UpdateBlogCommandHandler.cs",
              "ToolTip": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Blogs\\Commands\\UpdateBlog\\UpdateBlogCommandHandler.cs",
              "RelativeToolTip": "src\\Portfolio.Application\\UseCases\\Blogs\\Commands\\UpdateBlog\\UpdateBlogCommandHandler.cs",
              "ViewState": "AgIAABcAAAAAAAAAAAAAACQAAAArAAAAAAAAAA==",
              "Icon": "ae27a6b0-e345-4288-96df-5eaf394ee369.000738|",
              "WhenOpened": "2025-03-17T13:04:31.887Z",
              "EditorCaption": ""
            },
            {
              "$type": "Document",
              "DocumentIndex": 12,
              "Title": "DeleteUserCommandHandler.cs",
              "DocumentMoniker": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Users\\Commands\\DeleteUser\\DeleteUserCommandHandler.cs",
              "RelativeDocumentMoniker": "src\\Portfolio.Application\\UseCases\\Users\\Commands\\DeleteUser\\DeleteUserCommandHandler.cs",
              "ToolTip": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Users\\Commands\\DeleteUser\\DeleteUserCommandHandler.cs",
              "RelativeToolTip": "src\\Portfolio.Application\\UseCases\\Users\\Commands\\DeleteUser\\DeleteUserCommandHandler.cs",
              "ViewState": "AgIAAA0AAAAAAAAAAAAAwB8AAAAAAAAAAAAAAA==",
              "Icon": "ae27a6b0-e345-4288-96df-5eaf394ee369.000738|",
              "WhenOpened": "2025-03-17T13:09:50.414Z",
              "EditorCaption": ""
            },
            {
              "$type": "Document",
              "DocumentIndex": 13,
              "Title": "UpdateProjectCommandHandler.cs",
              "DocumentMoniker": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Projects\\Commands\\UpdateProject\\UpdateProjectCommandHandler.cs",
              "RelativeDocumentMoniker": "src\\Portfolio.Application\\UseCases\\Projects\\Commands\\UpdateProject\\UpdateProjectCommandHandler.cs",
              "ToolTip": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Projects\\Commands\\UpdateProject\\UpdateProjectCommandHandler.cs",
              "RelativeToolTip": "src\\Portfolio.Application\\UseCases\\Projects\\Commands\\UpdateProject\\UpdateProjectCommandHandler.cs",
              "ViewState": "AgIAACIAAAAAAAAAAAAQwDEAAAAkAAAAAAAAAA==",
              "Icon": "ae27a6b0-e345-4288-96df-5eaf394ee369.000738|",
              "WhenOpened": "2025-03-17T13:08:41.579Z",
              "EditorCaption": ""
            },
            {
              "$type": "Document",
              "DocumentIndex": 14,
              "Title": "DeleteBlogCommandHandler.cs",
              "DocumentMoniker": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Blogs\\Commands\\DeleteBlog\\DeleteBlogCommandHandler.cs",
              "RelativeDocumentMoniker": "src\\Portfolio.Application\\UseCases\\Blogs\\Commands\\DeleteBlog\\DeleteBlogCommandHandler.cs",
              "ToolTip": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Blogs\\Commands\\DeleteBlog\\DeleteBlogCommandHandler.cs",
              "RelativeToolTip": "src\\Portfolio.Application\\UseCases\\Blogs\\Commands\\DeleteBlog\\DeleteBlogCommandHandler.cs",
              "ViewState": "AgIAAA8AAAAAAAAAAAAAwBwAAAAAAAAAAAAAAA==",
              "Icon": "ae27a6b0-e345-4288-96df-5eaf394ee369.000738|",
              "WhenOpened": "2025-03-17T13:04:10.267Z",
              "EditorCaption": ""
            },
            {
              "$type": "Document",
              "DocumentIndex": 15,
              "Title": "GetUserByIdQueryHandler.cs",
              "DocumentMoniker": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Users\\Queries\\GetUserById\\GetUserByIdQueryHandler.cs",
              "RelativeDocumentMoniker": "src\\Portfolio.Application\\UseCases\\Users\\Queries\\GetUserById\\GetUserByIdQueryHandler.cs",
              "ToolTip": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Users\\Queries\\GetUserById\\GetUserByIdQueryHandler.cs",
              "RelativeToolTip": "src\\Portfolio.Application\\UseCases\\Users\\Queries\\GetUserById\\GetUserByIdQueryHandler.cs",
              "ViewState": "AgIAAAAAAAAAAAAAAAAAABYAAABAAAAAAAAAAA==",
              "Icon": "ae27a6b0-e345-4288-96df-5eaf394ee369.000738|",
              "WhenOpened": "2025-03-17T13:02:37.414Z",
              "EditorCaption": ""
            },
            {
              "$type": "Document",
              "DocumentIndex": 16,
              "Title": "GetAllUsersQueryHandler.cs",
              "DocumentMoniker": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Users\\Queries\\GetAllUsers\\GetAllUsersQueryHandler.cs",
              "RelativeDocumentMoniker": "src\\Portfolio.Application\\UseCases\\Users\\Queries\\GetAllUsers\\GetAllUsersQueryHandler.cs",
              "ToolTip": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Users\\Queries\\GetAllUsers\\GetAllUsersQueryHandler.cs",
              "RelativeToolTip": "src\\Portfolio.Application\\UseCases\\Users\\Queries\\GetAllUsers\\GetAllUsersQueryHandler.cs",
              "ViewState": "AgIAAAAAAAAAAAAAAAAAAAgAAAAnAAAAAAAAAA==",
              "Icon": "ae27a6b0-e345-4288-96df-5eaf394ee369.000738|",
              "WhenOpened": "2025-03-17T13:02:24.137Z",
              "EditorCaption": ""
            },
            {
              "$type": "Document",
              "DocumentIndex": 17,
              "Title": "GetProjectByIdQueryHandler.cs",
              "DocumentMoniker": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Projects\\Queries\\GetProjectById\\GetProjectByIdQueryHandler.cs",
              "RelativeDocumentMoniker": "src\\Portfolio.Application\\UseCases\\Projects\\Queries\\GetProjectById\\GetProjectByIdQueryHandler.cs",
              "ToolTip": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Projects\\Queries\\GetProjectById\\GetProjectByIdQueryHandler.cs",
              "RelativeToolTip": "src\\Portfolio.Application\\UseCases\\Projects\\Queries\\GetProjectById\\GetProjectByIdQueryHandler.cs",
              "ViewState": "AgIAAAYAAAAAAAAAAAAAABYAAABBAAAAAAAAAA==",
              "Icon": "ae27a6b0-e345-4288-96df-5eaf394ee369.000738|",
              "WhenOpened": "2025-03-16T22:06:56.905Z",
              "EditorCaption": ""
            },
            {
              "$type": "Document",
              "DocumentIndex": 18,
              "Title": "GetAllProjectsQueryHandler.cs",
              "DocumentMoniker": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Projects\\Queries\\GetAllProjects\\GetAllProjectsQueryHandler.cs",
              "RelativeDocumentMoniker": "src\\Portfolio.Application\\UseCases\\Projects\\Queries\\GetAllProjects\\GetAllProjectsQueryHandler.cs",
              "ToolTip": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Projects\\Queries\\GetAllProjects\\GetAllProjectsQueryHandler.cs",
              "RelativeToolTip": "src\\Portfolio.Application\\UseCases\\Projects\\Queries\\GetAllProjects\\GetAllProjectsQueryHandler.cs",
              "ViewState": "AgIAAAAAAAAAAAAAAAAAAAMAAAAjAAAAAAAAAA==",
              "Icon": "ae27a6b0-e345-4288-96df-5eaf394ee369.000738|",
              "WhenOpened": "2025-03-16T22:06:41.659Z",
              "EditorCaption": ""
            },
            {
              "$type": "Document",
              "DocumentIndex": 19,
              "Title": "DeleteProjectCommandHandler.cs",
              "DocumentMoniker": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Projects\\Commands\\DeleteProject\\DeleteProjectCommandHandler.cs",
              "RelativeDocumentMoniker": "src\\Portfolio.Application\\UseCases\\Projects\\Commands\\DeleteProject\\DeleteProjectCommandHandler.cs",
              "ToolTip": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Projects\\Commands\\DeleteProject\\DeleteProjectCommandHandler.cs",
              "RelativeToolTip": "src\\Portfolio.Application\\UseCases\\Projects\\Commands\\DeleteProject\\DeleteProjectCommandHandler.cs",
              "ViewState": "AgIAAAYAAAAAAAAAAAAAABkAAAAAAAAAAAAAAA==",
              "Icon": "ae27a6b0-e345-4288-96df-5eaf394ee369.000738|",
              "WhenOpened": "2025-03-16T22:05:45.528Z",
              "EditorCaption": ""
            },
            {
              "$type": "Document",
              "DocumentIndex": 21,
              "Title": "IBlogRepository.cs",
              "DocumentMoniker": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\Interfaces\\Persistence\\IBlogRepository.cs",
              "RelativeDocumentMoniker": "src\\Portfolio.Application\\Interfaces\\Persistence\\IBlogRepository.cs",
              "ToolTip": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\Interfaces\\Persistence\\IBlogRepository.cs",
              "RelativeToolTip": "src\\Portfolio.Application\\Interfaces\\Persistence\\IBlogRepository.cs",
              "ViewState": "AgIAAAAAAAAAAAAAAAAAAAkAAAAVAAAAAAAAAA==",
              "Icon": "ae27a6b0-e345-4288-96df-5eaf394ee369.000738|",
              "WhenOpened": "2025-03-16T22:05:19.083Z",
              "EditorCaption": ""
            },
            {
              "$type": "Document",
              "DocumentIndex": 20,
              "Title": "GetBlogBySlugQueryHandler.cs",
              "DocumentMoniker": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Blogs\\Queries\\GetBlogBySlug\\GetBlogBySlugQueryHandler.cs",
              "RelativeDocumentMoniker": "src\\Portfolio.Application\\UseCases\\Blogs\\Queries\\GetBlogBySlug\\GetBlogBySlugQueryHandler.cs",
              "ToolTip": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Blogs\\Queries\\GetBlogBySlug\\GetBlogBySlugQueryHandler.cs",
              "RelativeToolTip": "src\\Portfolio.Application\\UseCases\\Blogs\\Queries\\GetBlogBySlug\\GetBlogBySlugQueryHandler.cs",
              "ViewState": "AgIAAAgAAAAAAAAAAAA+wBUAAAAxAAAAAAAAAA==",
              "Icon": "ae27a6b0-e345-4288-96df-5eaf394ee369.000738|",
              "WhenOpened": "2025-03-16T22:04:33.255Z",
              "EditorCaption": ""
            },
            {
              "$type": "Document",
              "DocumentIndex": 22,
              "Title": "GetBlogByIdQueryHandler.cs",
              "DocumentMoniker": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Blogs\\Queries\\GetBlogById\\GetBlogByIdQueryHandler.cs",
              "RelativeDocumentMoniker": "src\\Portfolio.Application\\UseCases\\Blogs\\Queries\\GetBlogById\\GetBlogByIdQueryHandler.cs",
              "ToolTip": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Blogs\\Queries\\GetBlogById\\GetBlogByIdQueryHandler.cs",
              "RelativeToolTip": "src\\Portfolio.Application\\UseCases\\Blogs\\Queries\\GetBlogById\\GetBlogByIdQueryHandler.cs",
              "ViewState": "AgIAAAAAAAAAAAAAAAAAAAQAAAAsAAAAAAAAAA==",
              "Icon": "ae27a6b0-e345-4288-96df-5eaf394ee369.000738|",
              "WhenOpened": "2025-03-16T22:04:25.4Z",
              "EditorCaption": ""
            },
            {
              "$type": "Document",
              "DocumentIndex": 23,
              "Title": "GetAllBlogsQueryHandler.cs",
              "DocumentMoniker": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Blogs\\Queries\\GetAllBlogs\\GetAllBlogsQueryHandler.cs",
              "RelativeDocumentMoniker": "src\\Portfolio.Application\\UseCases\\Blogs\\Queries\\GetAllBlogs\\GetAllBlogsQueryHandler.cs",
              "ToolTip": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Blogs\\Queries\\GetAllBlogs\\GetAllBlogsQueryHandler.cs",
              "RelativeToolTip": "src\\Portfolio.Application\\UseCases\\Blogs\\Queries\\GetAllBlogs\\GetAllBlogsQueryHandler.cs",
              "ViewState": "AgIAAAAAAAAAAAAAAAAAAAMAAAApAAAAAAAAAA==",
              "Icon": "ae27a6b0-e345-4288-96df-5eaf394ee369.000738|",
              "WhenOpened": "2025-03-16T22:04:16.112Z",
              "EditorCaption": ""
            }
          ]
        }
      ]
    }
  ]
}

================
File: .vs/Portfolio/v17/DocumentLayout.json
================
{
  "Version": 1,
  "WorkspaceRootPath": "C:\\dev\\portfolio\\portfolio.net\\",
  "Documents": [
    {
      "AbsoluteMoniker": "D:0:0:{7A3B6C9F-D2D9-4149-BD8A-19D84BAEB8D2}|src\\Portfolio.WebApi\\Portfolio.WebApi.csproj|c:\\dev\\portfolio\\portfolio.net\\src\\portfolio.webapi\\program.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}",
      "RelativeMoniker": "D:0:0:{7A3B6C9F-D2D9-4149-BD8A-19D84BAEB8D2}|src\\Portfolio.WebApi\\Portfolio.WebApi.csproj|solutionrelative:src\\portfolio.webapi\\program.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}"
    },
    {
      "AbsoluteMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|c:\\dev\\portfolio\\portfolio.net\\src\\portfolio.application\\dependencyinjection.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}",
      "RelativeMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|solutionrelative:src\\portfolio.application\\dependencyinjection.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}"
    },
    {
      "AbsoluteMoniker": "D:0:0:{7A3B6C9F-D2D9-4149-BD8A-19D84BAEB8D2}|src\\Portfolio.WebApi\\Portfolio.WebApi.csproj|c:\\dev\\portfolio\\portfolio.net\\src\\portfolio.webapi\\extensions\\endpoints\\userendpoints.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}",
      "RelativeMoniker": "D:0:0:{7A3B6C9F-D2D9-4149-BD8A-19D84BAEB8D2}|src\\Portfolio.WebApi\\Portfolio.WebApi.csproj|solutionrelative:src\\portfolio.webapi\\extensions\\endpoints\\userendpoints.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}"
    },
    {
      "AbsoluteMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|c:\\dev\\portfolio\\portfolio.net\\src\\portfolio.application\\usecases\\users\\queries\\getuserbyusername\\getuserbyusernamequery.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}",
      "RelativeMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|solutionrelative:src\\portfolio.application\\usecases\\users\\queries\\getuserbyusername\\getuserbyusernamequery.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}"
    },
    {
      "AbsoluteMoniker": "D:0:0:{7A3B6C9F-D2D9-4149-BD8A-19D84BAEB8D2}|src\\Portfolio.WebApi\\Portfolio.WebApi.csproj|c:\\dev\\portfolio\\portfolio.net\\src\\portfolio.webapi\\extensions\\applicationbuilderextensions.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}",
      "RelativeMoniker": "D:0:0:{7A3B6C9F-D2D9-4149-BD8A-19D84BAEB8D2}|src\\Portfolio.WebApi\\Portfolio.WebApi.csproj|solutionrelative:src\\portfolio.webapi\\extensions\\applicationbuilderextensions.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}"
    },
    {
      "AbsoluteMoniker": "D:0:0:{A18BA9AB-72F9-40CC-8D1E-675DD8658BC5}|src\\Portfolio.Domain\\Portfolio.Domain.csproj|c:\\dev\\portfolio\\portfolio.net\\src\\portfolio.domain\\entities\\blog.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}",
      "RelativeMoniker": "D:0:0:{A18BA9AB-72F9-40CC-8D1E-675DD8658BC5}|src\\Portfolio.Domain\\Portfolio.Domain.csproj|solutionrelative:src\\portfolio.domain\\entities\\blog.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}"
    },
    {
      "AbsoluteMoniker": "D:0:0:{7A3B6C9F-D2D9-4149-BD8A-19D84BAEB8D2}|src\\Portfolio.WebApi\\Portfolio.WebApi.csproj|c:\\dev\\portfolio\\portfolio.net\\src\\portfolio.webapi\\extensions\\endpoints\\projectendpoints.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}",
      "RelativeMoniker": "D:0:0:{7A3B6C9F-D2D9-4149-BD8A-19D84BAEB8D2}|src\\Portfolio.WebApi\\Portfolio.WebApi.csproj|solutionrelative:src\\portfolio.webapi\\extensions\\endpoints\\projectendpoints.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}"
    },
    {
      "AbsoluteMoniker": "D:0:0:{52F492E1-D924-4705-BE51-8CAE61414802}|src\\Portfolio.Infrastructure\\Portfolio.Infrastructure.csproj|c:\\dev\\portfolio\\portfolio.net\\src\\portfolio.infrastructure\\persistence\\repositories\\blogrepository.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}",
      "RelativeMoniker": "D:0:0:{52F492E1-D924-4705-BE51-8CAE61414802}|src\\Portfolio.Infrastructure\\Portfolio.Infrastructure.csproj|solutionrelative:src\\portfolio.infrastructure\\persistence\\repositories\\blogrepository.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}"
    },
    {
      "AbsoluteMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|c:\\dev\\portfolio\\portfolio.net\\src\\portfolio.application\\usecases\\blogs\\commands\\updateblog\\updateblogcommandhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}",
      "RelativeMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|solutionrelative:src\\portfolio.application\\usecases\\blogs\\commands\\updateblog\\updateblogcommandhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}"
    },
    {
      "AbsoluteMoniker": "D:0:0:{A18BA9AB-72F9-40CC-8D1E-675DD8658BC5}|src\\Portfolio.Domain\\Portfolio.Domain.csproj|c:\\dev\\portfolio\\portfolio.net\\src\\portfolio.domain\\valueobjects\\slug.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}",
      "RelativeMoniker": "D:0:0:{A18BA9AB-72F9-40CC-8D1E-675DD8658BC5}|src\\Portfolio.Domain\\Portfolio.Domain.csproj|solutionrelative:src\\portfolio.domain\\valueobjects\\slug.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}"
    },
    {
      "AbsoluteMoniker": "D:0:0:{A18BA9AB-72F9-40CC-8D1E-675DD8658BC5}|src\\Portfolio.Domain\\Portfolio.Domain.csproj|c:\\dev\\portfolio\\portfolio.net\\src\\portfolio.domain\\valueobjects\\email.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}",
      "RelativeMoniker": "D:0:0:{A18BA9AB-72F9-40CC-8D1E-675DD8658BC5}|src\\Portfolio.Domain\\Portfolio.Domain.csproj|solutionrelative:src\\portfolio.domain\\valueobjects\\email.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}"
    },
    {
      "AbsoluteMoniker": "D:0:0:{A18BA9AB-72F9-40CC-8D1E-675DD8658BC5}|src\\Portfolio.Domain\\Portfolio.Domain.csproj|c:\\dev\\portfolio\\portfolio.net\\src\\portfolio.domain\\entities\\project.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}",
      "RelativeMoniker": "D:0:0:{A18BA9AB-72F9-40CC-8D1E-675DD8658BC5}|src\\Portfolio.Domain\\Portfolio.Domain.csproj|solutionrelative:src\\portfolio.domain\\entities\\project.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}"
    },
    {
      "AbsoluteMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|c:\\dev\\portfolio\\portfolio.net\\src\\portfolio.application\\usecases\\users\\commands\\updateuser\\updateusercommandhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}",
      "RelativeMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|solutionrelative:src\\portfolio.application\\usecases\\users\\commands\\updateuser\\updateusercommandhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}"
    },
    {
      "AbsoluteMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|c:\\dev\\portfolio\\portfolio.net\\src\\portfolio.application\\usecases\\users\\commands\\deleteuser\\deleteusercommandhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}",
      "RelativeMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|solutionrelative:src\\portfolio.application\\usecases\\users\\commands\\deleteuser\\deleteusercommandhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}"
    },
    {
      "AbsoluteMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|c:\\dev\\portfolio\\portfolio.net\\src\\portfolio.application\\usecases\\projects\\commands\\updateproject\\updateprojectcommandhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}",
      "RelativeMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|solutionrelative:src\\portfolio.application\\usecases\\projects\\commands\\updateproject\\updateprojectcommandhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}"
    },
    {
      "AbsoluteMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|c:\\dev\\portfolio\\portfolio.net\\src\\portfolio.application\\usecases\\blogs\\commands\\deleteblog\\deleteblogcommandhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}",
      "RelativeMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|solutionrelative:src\\portfolio.application\\usecases\\blogs\\commands\\deleteblog\\deleteblogcommandhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}"
    },
    {
      "AbsoluteMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|c:\\dev\\portfolio\\portfolio.net\\src\\portfolio.application\\usecases\\users\\queries\\getuserbyid\\getuserbyidqueryhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}",
      "RelativeMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|solutionrelative:src\\portfolio.application\\usecases\\users\\queries\\getuserbyid\\getuserbyidqueryhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}"
    },
    {
      "AbsoluteMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|c:\\dev\\portfolio\\portfolio.net\\src\\portfolio.application\\usecases\\users\\queries\\getallusers\\getallusersqueryhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}",
      "RelativeMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|solutionrelative:src\\portfolio.application\\usecases\\users\\queries\\getallusers\\getallusersqueryhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}"
    },
    {
      "AbsoluteMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|c:\\dev\\portfolio\\portfolio.net\\src\\portfolio.application\\usecases\\projects\\queries\\getprojectbyid\\getprojectbyidqueryhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}",
      "RelativeMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|solutionrelative:src\\portfolio.application\\usecases\\projects\\queries\\getprojectbyid\\getprojectbyidqueryhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}"
    },
    {
      "AbsoluteMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|c:\\dev\\portfolio\\portfolio.net\\src\\portfolio.application\\usecases\\projects\\queries\\getallprojects\\getallprojectsqueryhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}",
      "RelativeMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|solutionrelative:src\\portfolio.application\\usecases\\projects\\queries\\getallprojects\\getallprojectsqueryhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}"
    },
    {
      "AbsoluteMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|c:\\dev\\portfolio\\portfolio.net\\src\\portfolio.application\\usecases\\projects\\commands\\deleteproject\\deleteprojectcommandhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}",
      "RelativeMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|solutionrelative:src\\portfolio.application\\usecases\\projects\\commands\\deleteproject\\deleteprojectcommandhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}"
    },
    {
      "AbsoluteMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|c:\\dev\\portfolio\\portfolio.net\\src\\portfolio.application\\usecases\\blogs\\queries\\getblogbyslug\\getblogbyslugqueryhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}",
      "RelativeMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|solutionrelative:src\\portfolio.application\\usecases\\blogs\\queries\\getblogbyslug\\getblogbyslugqueryhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}"
    },
    {
      "AbsoluteMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|c:\\dev\\portfolio\\portfolio.net\\src\\portfolio.application\\interfaces\\persistence\\iblogrepository.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}",
      "RelativeMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|solutionrelative:src\\portfolio.application\\interfaces\\persistence\\iblogrepository.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}"
    },
    {
      "AbsoluteMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|c:\\dev\\portfolio\\portfolio.net\\src\\portfolio.application\\usecases\\blogs\\queries\\getblogbyid\\getblogbyidqueryhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}",
      "RelativeMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|solutionrelative:src\\portfolio.application\\usecases\\blogs\\queries\\getblogbyid\\getblogbyidqueryhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}"
    },
    {
      "AbsoluteMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|c:\\dev\\portfolio\\portfolio.net\\src\\portfolio.application\\usecases\\blogs\\queries\\getallblogs\\getallblogsqueryhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}",
      "RelativeMoniker": "D:0:0:{9E09C48D-0A63-4639-99FB-66DDEC150635}|src\\Portfolio.Application\\Portfolio.Application.csproj|solutionrelative:src\\portfolio.application\\usecases\\blogs\\queries\\getallblogs\\getallblogsqueryhandler.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}"
    }
  ],
  "DocumentGroupContainers": [
    {
      "Orientation": 0,
      "VerticalTabListWidth": 256,
      "DocumentGroups": [
        {
          "DockedWidth": 200,
          "SelectedChildIndex": 1,
          "Children": [
            {
              "$type": "Document",
              "DocumentIndex": 1,
              "Title": "DependencyInjection.cs",
              "DocumentMoniker": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\DependencyInjection.cs",
              "RelativeDocumentMoniker": "src\\Portfolio.Application\\DependencyInjection.cs",
              "ToolTip": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\DependencyInjection.cs",
              "RelativeToolTip": "src\\Portfolio.Application\\DependencyInjection.cs",
              "ViewState": "AgIAABAAAAAAAAAAAAAQwCgAAAAYAAAAAAAAAA==",
              "Icon": "ae27a6b0-e345-4288-96df-5eaf394ee369.000738|",
              "WhenOpened": "2025-03-17T13:31:24.377Z",
              "EditorCaption": ""
            },
            {
              "$type": "Document",
              "DocumentIndex": 0,
              "Title": "Program.cs",
              "DocumentMoniker": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.WebApi\\Program.cs",
              "RelativeDocumentMoniker": "src\\Portfolio.WebApi\\Program.cs",
              "ToolTip": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.WebApi\\Program.cs",
              "RelativeToolTip": "src\\Portfolio.WebApi\\Program.cs",
              "ViewState": "AgIAAAQAAAAAAAAAAAAAwBAAAAAkAAAAAAAAAA==",
              "Icon": "ae27a6b0-e345-4288-96df-5eaf394ee369.000738|",
              "WhenOpened": "2025-03-17T13:28:38.153Z",
              "EditorCaption": ""
            },
            {
              "$type": "Document",
              "DocumentIndex": 3,
              "Title": "GetUserByUsernameQuery.cs",
              "DocumentMoniker": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Users\\Queries\\GetUserByUsername\\GetUserByUsernameQuery.cs",
              "RelativeDocumentMoniker": "src\\Portfolio.Application\\UseCases\\Users\\Queries\\GetUserByUsername\\GetUserByUsernameQuery.cs",
              "ToolTip": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Users\\Queries\\GetUserByUsername\\GetUserByUsernameQuery.cs",
              "RelativeToolTip": "src\\Portfolio.Application\\UseCases\\Users\\Queries\\GetUserByUsername\\GetUserByUsernameQuery.cs",
              "ViewState": "AgIAAAAAAAAAAAAAAAAuwAcAAAABAAAAAAAAAA==",
              "Icon": "ae27a6b0-e345-4288-96df-5eaf394ee369.000738|",
              "WhenOpened": "2025-03-17T13:26:28.849Z",
              "EditorCaption": ""
            },
            {
              "$type": "Document",
              "DocumentIndex": 2,
              "Title": "UserEndpoints.cs",
              "DocumentMoniker": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.WebApi\\Extensions\\Endpoints\\UserEndpoints.cs",
              "RelativeDocumentMoniker": "src\\Portfolio.WebApi\\Extensions\\Endpoints\\UserEndpoints.cs",
              "ToolTip": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.WebApi\\Extensions\\Endpoints\\UserEndpoints.cs",
              "RelativeToolTip": "src\\Portfolio.WebApi\\Extensions\\Endpoints\\UserEndpoints.cs",
              "ViewState": "AgIAAFcAAAAAAAAAAAAAwGUAAAA1AAAAAAAAAA==",
              "Icon": "ae27a6b0-e345-4288-96df-5eaf394ee369.000738|",
              "WhenOpened": "2025-03-17T13:26:21.364Z",
              "EditorCaption": ""
            },
            {
              "$type": "Document",
              "DocumentIndex": 4,
              "Title": "ApplicationBuilderExtensions.cs",
              "DocumentMoniker": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.WebApi\\Extensions\\ApplicationBuilderExtensions.cs",
              "RelativeDocumentMoniker": "src\\Portfolio.WebApi\\Extensions\\ApplicationBuilderExtensions.cs",
              "ToolTip": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.WebApi\\Extensions\\ApplicationBuilderExtensions.cs",
              "RelativeToolTip": "src\\Portfolio.WebApi\\Extensions\\ApplicationBuilderExtensions.cs",
              "ViewState": "AgIAAAMAAAAAAAAAAAAAABMAAAAJAAAAAAAAAA==",
              "Icon": "ae27a6b0-e345-4288-96df-5eaf394ee369.000738|",
              "WhenOpened": "2025-03-17T13:25:20.937Z",
              "EditorCaption": ""
            },
            {
              "$type": "Document",
              "DocumentIndex": 6,
              "Title": "ProjectEndpoints.cs",
              "DocumentMoniker": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.WebApi\\Extensions\\Endpoints\\ProjectEndpoints.cs",
              "RelativeDocumentMoniker": "src\\Portfolio.WebApi\\Extensions\\Endpoints\\ProjectEndpoints.cs",
              "ToolTip": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.WebApi\\Extensions\\Endpoints\\ProjectEndpoints.cs",
              "RelativeToolTip": "src\\Portfolio.WebApi\\Extensions\\Endpoints\\ProjectEndpoints.cs",
              "ViewState": "AgIAAFwAAAAAAAAAAAAAwF8AAAAAAAAAAAAAAA==",
              "Icon": "ae27a6b0-e345-4288-96df-5eaf394ee369.000738|",
              "WhenOpened": "2025-03-17T13:22:30.832Z",
              "EditorCaption": ""
            },
            {
              "$type": "Document",
              "DocumentIndex": 9,
              "Title": "Slug.cs",
              "DocumentMoniker": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\ValueObjects\\Slug.cs",
              "RelativeDocumentMoniker": "src\\Portfolio.Domain\\ValueObjects\\Slug.cs",
              "ToolTip": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\ValueObjects\\Slug.cs",
              "RelativeToolTip": "src\\Portfolio.Domain\\ValueObjects\\Slug.cs",
              "ViewState": "AgIAAAMAAAAAAAAAAAAAAE0AAAAAAAAAAAAAAA==",
              "Icon": "ae27a6b0-e345-4288-96df-5eaf394ee369.000738|",
              "WhenOpened": "2025-03-17T13:13:53.097Z",
              "EditorCaption": ""
            },
            {
              "$type": "Document",
              "DocumentIndex": 10,
              "Title": "Email.cs",
              "DocumentMoniker": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\ValueObjects\\Email.cs",
              "RelativeDocumentMoniker": "src\\Portfolio.Domain\\ValueObjects\\Email.cs",
              "ToolTip": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\ValueObjects\\Email.cs",
              "RelativeToolTip": "src\\Portfolio.Domain\\ValueObjects\\Email.cs",
              "ViewState": "AgIAABoAAAAAAAAAAAAgwCsAAAAvAAAAAAAAAA==",
              "Icon": "ae27a6b0-e345-4288-96df-5eaf394ee369.000738|",
              "WhenOpened": "2025-03-17T13:13:36.243Z",
              "EditorCaption": ""
            },
            {
              "$type": "Document",
              "DocumentIndex": 11,
              "Title": "Project.cs",
              "DocumentMoniker": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\Entities\\Project.cs",
              "RelativeDocumentMoniker": "src\\Portfolio.Domain\\Entities\\Project.cs",
              "ToolTip": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\Entities\\Project.cs",
              "RelativeToolTip": "src\\Portfolio.Domain\\Entities\\Project.cs",
              "ViewState": "AgIAAH0AAAAAAAAAAAAmwAAAAAAAAAAAAAAAAA==",
              "Icon": "ae27a6b0-e345-4288-96df-5eaf394ee369.000738|",
              "WhenOpened": "2025-03-17T13:13:13.216Z",
              "EditorCaption": ""
            },
            {
              "$type": "Document",
              "DocumentIndex": 5,
              "Title": "Blog.cs",
              "DocumentMoniker": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\Entities\\Blog.cs",
              "RelativeDocumentMoniker": "src\\Portfolio.Domain\\Entities\\Blog.cs",
              "ToolTip": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\Entities\\Blog.cs",
              "RelativeToolTip": "src\\Portfolio.Domain\\Entities\\Blog.cs",
              "ViewState": "AgIAAAcAAAAAAAAAAAAywBkAAAAQAAAAAAAAAA==",
              "Icon": "ae27a6b0-e345-4288-96df-5eaf394ee369.000738|",
              "WhenOpened": "2025-03-17T13:11:57.747Z",
              "EditorCaption": ""
            },
            {
              "$type": "Document",
              "DocumentIndex": 7,
              "Title": "BlogRepository.cs",
              "DocumentMoniker": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Infrastructure\\Persistence\\Repositories\\BlogRepository.cs",
              "RelativeDocumentMoniker": "src\\Portfolio.Infrastructure\\Persistence\\Repositories\\BlogRepository.cs",
              "ToolTip": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Infrastructure\\Persistence\\Repositories\\BlogRepository.cs",
              "RelativeToolTip": "src\\Portfolio.Infrastructure\\Persistence\\Repositories\\BlogRepository.cs",
              "ViewState": "AgIAAAcAAAAAAAAAAAAqwBMAAAA3AAAAAAAAAA==",
              "Icon": "ae27a6b0-e345-4288-96df-5eaf394ee369.000738|",
              "WhenOpened": "2025-03-17T13:11:16.674Z",
              "EditorCaption": ""
            },
            {
              "$type": "Document",
              "DocumentIndex": 12,
              "Title": "UpdateUserCommandHandler.cs",
              "DocumentMoniker": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Users\\Commands\\UpdateUser\\UpdateUserCommandHandler.cs",
              "RelativeDocumentMoniker": "src\\Portfolio.Application\\UseCases\\Users\\Commands\\UpdateUser\\UpdateUserCommandHandler.cs",
              "ToolTip": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Users\\Commands\\UpdateUser\\UpdateUserCommandHandler.cs",
              "RelativeToolTip": "src\\Portfolio.Application\\UseCases\\Users\\Commands\\UpdateUser\\UpdateUserCommandHandler.cs",
              "ViewState": "AgIAAB8AAAAAAAAAAAAAwC4AAABZAAAAAAAAAA==",
              "Icon": "ae27a6b0-e345-4288-96df-5eaf394ee369.000738|",
              "WhenOpened": "2025-03-17T13:10:25.942Z",
              "EditorCaption": ""
            },
            {
              "$type": "Document",
              "DocumentIndex": 8,
              "Title": "UpdateBlogCommandHandler.cs",
              "DocumentMoniker": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Blogs\\Commands\\UpdateBlog\\UpdateBlogCommandHandler.cs",
              "RelativeDocumentMoniker": "src\\Portfolio.Application\\UseCases\\Blogs\\Commands\\UpdateBlog\\UpdateBlogCommandHandler.cs",
              "ToolTip": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Blogs\\Commands\\UpdateBlog\\UpdateBlogCommandHandler.cs",
              "RelativeToolTip": "src\\Portfolio.Application\\UseCases\\Blogs\\Commands\\UpdateBlog\\UpdateBlogCommandHandler.cs",
              "ViewState": "AgIAABcAAAAAAAAAAAAAACQAAAArAAAAAAAAAA==",
              "Icon": "ae27a6b0-e345-4288-96df-5eaf394ee369.000738|",
              "WhenOpened": "2025-03-17T13:04:31.887Z",
              "EditorCaption": ""
            },
            {
              "$type": "Document",
              "DocumentIndex": 13,
              "Title": "DeleteUserCommandHandler.cs",
              "DocumentMoniker": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Users\\Commands\\DeleteUser\\DeleteUserCommandHandler.cs",
              "RelativeDocumentMoniker": "src\\Portfolio.Application\\UseCases\\Users\\Commands\\DeleteUser\\DeleteUserCommandHandler.cs",
              "ToolTip": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Users\\Commands\\DeleteUser\\DeleteUserCommandHandler.cs",
              "RelativeToolTip": "src\\Portfolio.Application\\UseCases\\Users\\Commands\\DeleteUser\\DeleteUserCommandHandler.cs",
              "ViewState": "AgIAAA0AAAAAAAAAAAAAwB8AAAAAAAAAAAAAAA==",
              "Icon": "ae27a6b0-e345-4288-96df-5eaf394ee369.000738|",
              "WhenOpened": "2025-03-17T13:09:50.414Z",
              "EditorCaption": ""
            },
            {
              "$type": "Document",
              "DocumentIndex": 14,
              "Title": "UpdateProjectCommandHandler.cs",
              "DocumentMoniker": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Projects\\Commands\\UpdateProject\\UpdateProjectCommandHandler.cs",
              "RelativeDocumentMoniker": "src\\Portfolio.Application\\UseCases\\Projects\\Commands\\UpdateProject\\UpdateProjectCommandHandler.cs",
              "ToolTip": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Projects\\Commands\\UpdateProject\\UpdateProjectCommandHandler.cs",
              "RelativeToolTip": "src\\Portfolio.Application\\UseCases\\Projects\\Commands\\UpdateProject\\UpdateProjectCommandHandler.cs",
              "ViewState": "AgIAACIAAAAAAAAAAAAQwDEAAAAkAAAAAAAAAA==",
              "Icon": "ae27a6b0-e345-4288-96df-5eaf394ee369.000738|",
              "WhenOpened": "2025-03-17T13:08:41.579Z",
              "EditorCaption": ""
            },
            {
              "$type": "Document",
              "DocumentIndex": 15,
              "Title": "DeleteBlogCommandHandler.cs",
              "DocumentMoniker": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Blogs\\Commands\\DeleteBlog\\DeleteBlogCommandHandler.cs",
              "RelativeDocumentMoniker": "src\\Portfolio.Application\\UseCases\\Blogs\\Commands\\DeleteBlog\\DeleteBlogCommandHandler.cs",
              "ToolTip": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Blogs\\Commands\\DeleteBlog\\DeleteBlogCommandHandler.cs",
              "RelativeToolTip": "src\\Portfolio.Application\\UseCases\\Blogs\\Commands\\DeleteBlog\\DeleteBlogCommandHandler.cs",
              "ViewState": "AgIAAA8AAAAAAAAAAAAAwBwAAAAAAAAAAAAAAA==",
              "Icon": "ae27a6b0-e345-4288-96df-5eaf394ee369.000738|",
              "WhenOpened": "2025-03-17T13:04:10.267Z",
              "EditorCaption": ""
            },
            {
              "$type": "Document",
              "DocumentIndex": 16,
              "Title": "GetUserByIdQueryHandler.cs",
              "DocumentMoniker": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Users\\Queries\\GetUserById\\GetUserByIdQueryHandler.cs",
              "RelativeDocumentMoniker": "src\\Portfolio.Application\\UseCases\\Users\\Queries\\GetUserById\\GetUserByIdQueryHandler.cs",
              "ToolTip": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Users\\Queries\\GetUserById\\GetUserByIdQueryHandler.cs",
              "RelativeToolTip": "src\\Portfolio.Application\\UseCases\\Users\\Queries\\GetUserById\\GetUserByIdQueryHandler.cs",
              "ViewState": "AgIAAAAAAAAAAAAAAAAAABYAAABAAAAAAAAAAA==",
              "Icon": "ae27a6b0-e345-4288-96df-5eaf394ee369.000738|",
              "WhenOpened": "2025-03-17T13:02:37.414Z",
              "EditorCaption": ""
            },
            {
              "$type": "Document",
              "DocumentIndex": 17,
              "Title": "GetAllUsersQueryHandler.cs",
              "DocumentMoniker": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Users\\Queries\\GetAllUsers\\GetAllUsersQueryHandler.cs",
              "RelativeDocumentMoniker": "src\\Portfolio.Application\\UseCases\\Users\\Queries\\GetAllUsers\\GetAllUsersQueryHandler.cs",
              "ToolTip": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Users\\Queries\\GetAllUsers\\GetAllUsersQueryHandler.cs",
              "RelativeToolTip": "src\\Portfolio.Application\\UseCases\\Users\\Queries\\GetAllUsers\\GetAllUsersQueryHandler.cs",
              "ViewState": "AgIAAAAAAAAAAAAAAAAAAAgAAAAnAAAAAAAAAA==",
              "Icon": "ae27a6b0-e345-4288-96df-5eaf394ee369.000738|",
              "WhenOpened": "2025-03-17T13:02:24.137Z",
              "EditorCaption": ""
            },
            {
              "$type": "Document",
              "DocumentIndex": 18,
              "Title": "GetProjectByIdQueryHandler.cs",
              "DocumentMoniker": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Projects\\Queries\\GetProjectById\\GetProjectByIdQueryHandler.cs",
              "RelativeDocumentMoniker": "src\\Portfolio.Application\\UseCases\\Projects\\Queries\\GetProjectById\\GetProjectByIdQueryHandler.cs",
              "ToolTip": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Projects\\Queries\\GetProjectById\\GetProjectByIdQueryHandler.cs",
              "RelativeToolTip": "src\\Portfolio.Application\\UseCases\\Projects\\Queries\\GetProjectById\\GetProjectByIdQueryHandler.cs",
              "ViewState": "AgIAAAYAAAAAAAAAAAAAABYAAABBAAAAAAAAAA==",
              "Icon": "ae27a6b0-e345-4288-96df-5eaf394ee369.000738|",
              "WhenOpened": "2025-03-16T22:06:56.905Z",
              "EditorCaption": ""
            },
            {
              "$type": "Document",
              "DocumentIndex": 19,
              "Title": "GetAllProjectsQueryHandler.cs",
              "DocumentMoniker": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Projects\\Queries\\GetAllProjects\\GetAllProjectsQueryHandler.cs",
              "RelativeDocumentMoniker": "src\\Portfolio.Application\\UseCases\\Projects\\Queries\\GetAllProjects\\GetAllProjectsQueryHandler.cs",
              "ToolTip": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Projects\\Queries\\GetAllProjects\\GetAllProjectsQueryHandler.cs",
              "RelativeToolTip": "src\\Portfolio.Application\\UseCases\\Projects\\Queries\\GetAllProjects\\GetAllProjectsQueryHandler.cs",
              "ViewState": "AgIAAAAAAAAAAAAAAAAAAAMAAAAjAAAAAAAAAA==",
              "Icon": "ae27a6b0-e345-4288-96df-5eaf394ee369.000738|",
              "WhenOpened": "2025-03-16T22:06:41.659Z",
              "EditorCaption": ""
            },
            {
              "$type": "Document",
              "DocumentIndex": 20,
              "Title": "DeleteProjectCommandHandler.cs",
              "DocumentMoniker": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Projects\\Commands\\DeleteProject\\DeleteProjectCommandHandler.cs",
              "RelativeDocumentMoniker": "src\\Portfolio.Application\\UseCases\\Projects\\Commands\\DeleteProject\\DeleteProjectCommandHandler.cs",
              "ToolTip": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Projects\\Commands\\DeleteProject\\DeleteProjectCommandHandler.cs",
              "RelativeToolTip": "src\\Portfolio.Application\\UseCases\\Projects\\Commands\\DeleteProject\\DeleteProjectCommandHandler.cs",
              "ViewState": "AgIAAAYAAAAAAAAAAAAAABkAAAAAAAAAAAAAAA==",
              "Icon": "ae27a6b0-e345-4288-96df-5eaf394ee369.000738|",
              "WhenOpened": "2025-03-16T22:05:45.528Z",
              "EditorCaption": ""
            },
            {
              "$type": "Document",
              "DocumentIndex": 22,
              "Title": "IBlogRepository.cs",
              "DocumentMoniker": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\Interfaces\\Persistence\\IBlogRepository.cs",
              "RelativeDocumentMoniker": "src\\Portfolio.Application\\Interfaces\\Persistence\\IBlogRepository.cs",
              "ToolTip": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\Interfaces\\Persistence\\IBlogRepository.cs",
              "RelativeToolTip": "src\\Portfolio.Application\\Interfaces\\Persistence\\IBlogRepository.cs",
              "ViewState": "AgIAAAAAAAAAAAAAAAAAAAkAAAAVAAAAAAAAAA==",
              "Icon": "ae27a6b0-e345-4288-96df-5eaf394ee369.000738|",
              "WhenOpened": "2025-03-16T22:05:19.083Z",
              "EditorCaption": ""
            },
            {
              "$type": "Document",
              "DocumentIndex": 21,
              "Title": "GetBlogBySlugQueryHandler.cs",
              "DocumentMoniker": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Blogs\\Queries\\GetBlogBySlug\\GetBlogBySlugQueryHandler.cs",
              "RelativeDocumentMoniker": "src\\Portfolio.Application\\UseCases\\Blogs\\Queries\\GetBlogBySlug\\GetBlogBySlugQueryHandler.cs",
              "ToolTip": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Blogs\\Queries\\GetBlogBySlug\\GetBlogBySlugQueryHandler.cs",
              "RelativeToolTip": "src\\Portfolio.Application\\UseCases\\Blogs\\Queries\\GetBlogBySlug\\GetBlogBySlugQueryHandler.cs",
              "ViewState": "AgIAAAgAAAAAAAAAAAA+wBUAAAAxAAAAAAAAAA==",
              "Icon": "ae27a6b0-e345-4288-96df-5eaf394ee369.000738|",
              "WhenOpened": "2025-03-16T22:04:33.255Z",
              "EditorCaption": ""
            },
            {
              "$type": "Document",
              "DocumentIndex": 23,
              "Title": "GetBlogByIdQueryHandler.cs",
              "DocumentMoniker": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Blogs\\Queries\\GetBlogById\\GetBlogByIdQueryHandler.cs",
              "RelativeDocumentMoniker": "src\\Portfolio.Application\\UseCases\\Blogs\\Queries\\GetBlogById\\GetBlogByIdQueryHandler.cs",
              "ToolTip": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Blogs\\Queries\\GetBlogById\\GetBlogByIdQueryHandler.cs",
              "RelativeToolTip": "src\\Portfolio.Application\\UseCases\\Blogs\\Queries\\GetBlogById\\GetBlogByIdQueryHandler.cs",
              "ViewState": "AgIAAAAAAAAAAAAAAAAAAAQAAAAsAAAAAAAAAA==",
              "Icon": "ae27a6b0-e345-4288-96df-5eaf394ee369.000738|",
              "WhenOpened": "2025-03-16T22:04:25.4Z",
              "EditorCaption": ""
            },
            {
              "$type": "Document",
              "DocumentIndex": 24,
              "Title": "GetAllBlogsQueryHandler.cs",
              "DocumentMoniker": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Blogs\\Queries\\GetAllBlogs\\GetAllBlogsQueryHandler.cs",
              "RelativeDocumentMoniker": "src\\Portfolio.Application\\UseCases\\Blogs\\Queries\\GetAllBlogs\\GetAllBlogsQueryHandler.cs",
              "ToolTip": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\UseCases\\Blogs\\Queries\\GetAllBlogs\\GetAllBlogsQueryHandler.cs",
              "RelativeToolTip": "src\\Portfolio.Application\\UseCases\\Blogs\\Queries\\GetAllBlogs\\GetAllBlogsQueryHandler.cs",
              "ViewState": "AgIAAAAAAAAAAAAAAAAAAAMAAAApAAAAAAAAAA==",
              "Icon": "ae27a6b0-e345-4288-96df-5eaf394ee369.000738|",
              "WhenOpened": "2025-03-16T22:04:16.112Z",
              "EditorCaption": ""
            }
          ]
        }
      ]
    }
  ]
}

================
File: Portfolio.sln
================
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 17
VisualStudioVersion = 17.0.31903.59
MinimumVisualStudioVersion = 10.0.40219.1
Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "src", "src", "{E3D05FE2-72F8-463C-8BE5-6F8D61144D63}"
EndProject
Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "tests", "tests", "{F8AE0ABB-6CE8-4E02-9234-7F733A3D4D3E}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Portfolio.Domain", "src\Portfolio.Domain\Portfolio.Domain.csproj", "{A18BA9AB-72F9-40CC-8D1E-675DD8658BC5}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Portfolio.Application", "src\Portfolio.Application\Portfolio.Application.csproj", "{9E09C48D-0A63-4639-99FB-66DDEC150635}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Portfolio.Infrastructure", "src\Portfolio.Infrastructure\Portfolio.Infrastructure.csproj", "{52F492E1-D924-4705-BE51-8CAE61414802}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Portfolio.UnitTests", "tests\Portfolio.UnitTests\Portfolio.UnitTests.csproj", "{B2A5C7C0-6273-4C5C-B705-C3A5D942E2BF}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Portfolio.WebApi", "src\Portfolio.WebApi\Portfolio.WebApi.csproj", "{7A3B6C9F-D2D9-4149-BD8A-19D84BAEB8D2}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{A18BA9AB-72F9-40CC-8D1E-675DD8658BC5}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{A18BA9AB-72F9-40CC-8D1E-675DD8658BC5}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{A18BA9AB-72F9-40CC-8D1E-675DD8658BC5}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{A18BA9AB-72F9-40CC-8D1E-675DD8658BC5}.Release|Any CPU.Build.0 = Release|Any CPU
		{9E09C48D-0A63-4639-99FB-66DDEC150635}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{9E09C48D-0A63-4639-99FB-66DDEC150635}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{9E09C48D-0A63-4639-99FB-66DDEC150635}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{9E09C48D-0A63-4639-99FB-66DDEC150635}.Release|Any CPU.Build.0 = Release|Any CPU
		{52F492E1-D924-4705-BE51-8CAE61414802}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{52F492E1-D924-4705-BE51-8CAE61414802}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{52F492E1-D924-4705-BE51-8CAE61414802}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{52F492E1-D924-4705-BE51-8CAE61414802}.Release|Any CPU.Build.0 = Release|Any CPU
		{B2A5C7C0-6273-4C5C-B705-C3A5D942E2BF}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{B2A5C7C0-6273-4C5C-B705-C3A5D942E2BF}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{B2A5C7C0-6273-4C5C-B705-C3A5D942E2BF}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{B2A5C7C0-6273-4C5C-B705-C3A5D942E2BF}.Release|Any CPU.Build.0 = Release|Any CPU
		{7A3B6C9F-D2D9-4149-BD8A-19D84BAEB8D2}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{7A3B6C9F-D2D9-4149-BD8A-19D84BAEB8D2}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{7A3B6C9F-D2D9-4149-BD8A-19D84BAEB8D2}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{7A3B6C9F-D2D9-4149-BD8A-19D84BAEB8D2}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(NestedProjects) = preSolution
		{A18BA9AB-72F9-40CC-8D1E-675DD8658BC5} = {E3D05FE2-72F8-463C-8BE5-6F8D61144D63}
		{9E09C48D-0A63-4639-99FB-66DDEC150635} = {E3D05FE2-72F8-463C-8BE5-6F8D61144D63}
		{52F492E1-D924-4705-BE51-8CAE61414802} = {E3D05FE2-72F8-463C-8BE5-6F8D61144D63}
		{B2A5C7C0-6273-4C5C-B705-C3A5D942E2BF} = {F8AE0ABB-6CE8-4E02-9234-7F733A3D4D3E}
		{7A3B6C9F-D2D9-4149-BD8A-19D84BAEB8D2} = {E3D05FE2-72F8-463C-8BE5-6F8D61144D63}
	EndGlobalSection
EndGlobal

================
File: src/Portfolio.Application/bin/Debug/net8.0/Portfolio.Application.deps.json
================
{
  "runtimeTarget": {
    "name": ".NETCoreApp,Version=v8.0",
    "signature": ""
  },
  "compilationOptions": {},
  "targets": {
    ".NETCoreApp,Version=v8.0": {
      "Portfolio.Application/1.0.0": {
        "dependencies": {
          "AutoMapper": "13.0.1",
          "FluentValidation": "11.9.0",
          "FluentValidation.DependencyInjectionExtensions": "11.9.0",
          "MediatR": "12.2.0",
          "Microsoft.Extensions.Logging.Abstractions": "8.0.0",
          "Portfolio.Domain": "1.0.0"
        },
        "runtime": {
          "Portfolio.Application.dll": {}
        }
      },
      "AutoMapper/13.0.1": {
        "dependencies": {
          "Microsoft.Extensions.Options": "6.0.0"
        },
        "runtime": {
          "lib/net6.0/AutoMapper.dll": {
            "assemblyVersion": "13.0.0.0",
            "fileVersion": "13.0.1.0"
          }
        }
      },
      "FluentValidation/11.9.0": {
        "runtime": {
          "lib/net8.0/FluentValidation.dll": {
            "assemblyVersion": "11.0.0.0",
            "fileVersion": "11.9.0.0"
          }
        }
      },
      "FluentValidation.DependencyInjectionExtensions/11.9.0": {
        "dependencies": {
          "FluentValidation": "11.9.0",
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0"
        },
        "runtime": {
          "lib/netstandard2.1/FluentValidation.DependencyInjectionExtensions.dll": {
            "assemblyVersion": "11.0.0.0",
            "fileVersion": "11.9.0.0"
          }
        }
      },
      "MediatR/12.2.0": {
        "dependencies": {
          "MediatR.Contracts": "2.0.1",
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0"
        },
        "runtime": {
          "lib/net6.0/MediatR.dll": {
            "assemblyVersion": "12.0.0.0",
            "fileVersion": "12.2.0.0"
          }
        }
      },
      "MediatR.Contracts/2.0.1": {
        "runtime": {
          "lib/netstandard2.0/MediatR.Contracts.dll": {
            "assemblyVersion": "2.0.1.0",
            "fileVersion": "2.0.1.0"
          }
        }
      },
      "Microsoft.Extensions.DependencyInjection.Abstractions/8.0.0": {
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.DependencyInjection.Abstractions.dll": {
            "assemblyVersion": "8.0.0.0",
            "fileVersion": "8.0.23.53103"
          }
        }
      },
      "Microsoft.Extensions.Logging.Abstractions/8.0.0": {
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Logging.Abstractions.dll": {
            "assemblyVersion": "8.0.0.0",
            "fileVersion": "8.0.23.53103"
          }
        }
      },
      "Microsoft.Extensions.Options/6.0.0": {
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0",
          "Microsoft.Extensions.Primitives": "6.0.0"
        },
        "runtime": {
          "lib/netstandard2.1/Microsoft.Extensions.Options.dll": {
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        }
      },
      "Microsoft.Extensions.Primitives/6.0.0": {
        "dependencies": {
          "System.Runtime.CompilerServices.Unsafe": "6.0.0"
        },
        "runtime": {
          "lib/net6.0/Microsoft.Extensions.Primitives.dll": {
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        }
      },
      "System.Runtime.CompilerServices.Unsafe/6.0.0": {},
      "Portfolio.Domain/1.0.0": {
        "runtime": {
          "Portfolio.Domain.dll": {
            "assemblyVersion": "1.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      }
    }
  },
  "libraries": {
    "Portfolio.Application/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "AutoMapper/13.0.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-/Fx1SbJ16qS7dU4i604Sle+U9VLX+WSNVJggk6MupKVkYvvBm4XqYaeFuf67diHefHKHs50uQIS2YEDFhPCakQ==",
      "path": "automapper/13.0.1",
      "hashPath": "automapper.13.0.1.nupkg.sha512"
    },
    "FluentValidation/11.9.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-VneVlTvwYDkfHV5av3QrQ0amALgrLX6LV94wlYyEsh0B/klJBW7C8y2eAtj5tOZ3jH6CAVpr4s1ZGgew/QWyig==",
      "path": "fluentvalidation/11.9.0",
      "hashPath": "fluentvalidation.11.9.0.nupkg.sha512"
    },
    "FluentValidation.DependencyInjectionExtensions/11.9.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-Ko++xvN7HUf4WlHJL6bhsybUj/uho8ApOYIdxGjpF8Ot7Fukz6LRfRJ06H0KXhWqmMHWEbu89hJbjKJHtg7b9g==",
      "path": "fluentvalidation.dependencyinjectionextensions/11.9.0",
      "hashPath": "fluentvalidation.dependencyinjectionextensions.11.9.0.nupkg.sha512"
    },
    "MediatR/12.2.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-8TUFrHapKi6D74PhnSNEguRsH91HNGyP3R4ZQdgDorJgl9Wac5Prh0vA33QfrniAaS6L2xNNhc6vxzg+5AIbwA==",
      "path": "mediatr/12.2.0",
      "hashPath": "mediatr.12.2.0.nupkg.sha512"
    },
    "MediatR.Contracts/2.0.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-FYv95bNT4UwcNA+G/J1oX5OpRiSUxteXaUt2BJbRSdRNiIUNbggJF69wy6mnk2wYToaanpdXZdCwVylt96MpwQ==",
      "path": "mediatr.contracts/2.0.1",
      "hashPath": "mediatr.contracts.2.0.1.nupkg.sha512"
    },
    "Microsoft.Extensions.DependencyInjection.Abstractions/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-cjWrLkJXK0rs4zofsK4bSdg+jhDLTaxrkXu4gS6Y7MAlCvRyNNgwY/lJi5RDlQOnSZweHqoyvgvbdvQsRIW+hg==",
      "path": "microsoft.extensions.dependencyinjection.abstractions/8.0.0",
      "hashPath": "microsoft.extensions.dependencyinjection.abstractions.8.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Logging.Abstractions/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-arDBqTgFCyS0EvRV7O3MZturChstm50OJ0y9bDJvAcmEPJm0FFpFyjU/JLYyStNGGey081DvnQYlncNX5SJJGA==",
      "path": "microsoft.extensions.logging.abstractions/8.0.0",
      "hashPath": "microsoft.extensions.logging.abstractions.8.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Options/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-dzXN0+V1AyjOe2xcJ86Qbo233KHuLEY0njf/P2Kw8SfJU+d45HNS2ctJdnEnrWbM9Ye2eFgaC5Mj9otRMU6IsQ==",
      "path": "microsoft.extensions.options/6.0.0",
      "hashPath": "microsoft.extensions.options.6.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Primitives/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-9+PnzmQFfEFNR9J2aDTfJGGupShHjOuGw4VUv+JB044biSHrnmCIMD+mJHmb2H7YryrfBEXDurxQ47gJZdCKNQ==",
      "path": "microsoft.extensions.primitives/6.0.0",
      "hashPath": "microsoft.extensions.primitives.6.0.0.nupkg.sha512"
    },
    "System.Runtime.CompilerServices.Unsafe/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-/iUeP3tq1S0XdNNoMz5C9twLSrM/TH+qElHkXWaPvuNOt+99G75NrV0OS2EqHx5wMN7popYjpc8oTjC1y16DLg==",
      "path": "system.runtime.compilerservices.unsafe/6.0.0",
      "hashPath": "system.runtime.compilerservices.unsafe.6.0.0.nupkg.sha512"
    },
    "Portfolio.Domain/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    }
  }
}

================
File: src/Portfolio.Application/Common/Behaviors/LoggingBehavior.cs
================
using System.Diagnostics;
using MediatR;
using Microsoft.Extensions.Logging;

namespace Portfolio.Application.Common.Behaviors;

public class LoggingBehavior<TRequest, TResponse> : IPipelineBehavior<TRequest, TResponse>
    where TRequest : IRequest<TResponse>
{
    private readonly ILogger<LoggingBehavior<TRequest, TResponse>> _logger;

    public LoggingBehavior(ILogger<LoggingBehavior<TRequest, TResponse>> logger)
    {
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    public async Task<TResponse> Handle(
        TRequest request,
        RequestHandlerDelegate<TResponse> next,
        CancellationToken cancellationToken)
    {
        var requestName = typeof(TRequest).Name;
        var requestId = Guid.NewGuid().ToString();

        _logger.LogInformation(
            "Beginning request {RequestName} [{RequestId}]",
            requestName,
            requestId);

        var timer = Stopwatch.StartNew();

        try
        {
            var response = await next();
            timer.Stop();

            _logger.LogInformation(
                "Completed request {RequestName} [{RequestId}] in {ElapsedMilliseconds}ms",
                requestName,
                requestId,
                timer.ElapsedMilliseconds);

            return response;
        }
        catch (Exception ex)
        {
            timer.Stop();

            _logger.LogError(
                ex,
                "Request {RequestName} [{RequestId}] failed after {ElapsedMilliseconds}ms",
                requestName,
                requestId,
                timer.ElapsedMilliseconds);

            throw;
        }
    }
}

================
File: src/Portfolio.Application/Common/Behaviors/PerformanceBehavior.cs
================
using System.Diagnostics;
using MediatR;
using Microsoft.Extensions.Logging;
using Portfolio.Application.Common.Interfaces;
using Portfolio.Application.Interfaces.Services;

namespace Portfolio.Application.Common.Behaviors;

public class PerformanceBehavior<TRequest, TResponse> : IPipelineBehavior<TRequest, TResponse>
    where TRequest : IRequest<TResponse>
{
    private readonly Stopwatch _timer;
    private readonly ILogger<PerformanceBehavior<TRequest, TResponse>> _logger;
    private readonly ICurrentUserService _currentUserService;

    public PerformanceBehavior(
        ILogger<PerformanceBehavior<TRequest, TResponse>> logger,
        ICurrentUserService currentUserService)
    {
        _timer = new Stopwatch();
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
        _currentUserService = currentUserService ?? throw new ArgumentNullException(nameof(currentUserService));
    }

    public async Task<TResponse> Handle(
        TRequest request,
        RequestHandlerDelegate<TResponse> next,
        CancellationToken cancellationToken)
    {
        _timer.Start();

        var response = await next();

        _timer.Stop();

        var elapsedMilliseconds = _timer.ElapsedMilliseconds;

        if (elapsedMilliseconds > 500) // Log warning for requests that take longer than 500ms
        {
            var requestName = typeof(TRequest).Name;
            var userId = _currentUserService.UserId ?? "Anonymous";
            var userName = _currentUserService.UserName ?? "Anonymous";

            _logger.LogWarning(
                "Long Running Request: {RequestName} ({ElapsedMilliseconds} milliseconds) {@UserId} {@UserName} {@Request}",
                requestName,
                elapsedMilliseconds,
                userId,
                userName,
                request);
        }

        return response;
    }
}

================
File: src/Portfolio.Application/Common/Behaviors/TransactionBehavior.cs
================
using MediatR;
using Microsoft.Extensions.Logging;
using Portfolio.Application.Common.Interfaces;
using Portfolio.Application.Interfaces.Services;
using Portfolio.Application.Interfaces.Persistence;
namespace Portfolio.Application.Common.Behaviors;

public class TransactionBehavior<TRequest, TResponse> : IPipelineBehavior<TRequest, TResponse>
    where TRequest : IRequest<TResponse>
{
    private readonly IUnitOfWork _unitOfWork;
    private readonly ILogger<TransactionBehavior<TRequest, TResponse>> _logger;

    public TransactionBehavior(
        IUnitOfWork unitOfWork,
        ILogger<TransactionBehavior<TRequest, TResponse>> logger)
    {
        _unitOfWork = unitOfWork ?? throw new ArgumentNullException(nameof(unitOfWork));
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    public async Task<TResponse> Handle(
        TRequest request,
        RequestHandlerDelegate<TResponse> next,
        CancellationToken cancellationToken)
    {
        // Don't create transaction for queries
        if (request is IQuery<TResponse>)
        {
            return await next();
        }

        var requestName = typeof(TRequest).Name;

        try
        {
            _logger.LogDebug("Beginning transaction for {RequestName}", requestName);
            await _unitOfWork.BeginTransactionAsync(cancellationToken);

            var response = await next();

            _logger.LogDebug("Committing transaction for {RequestName}", requestName);
            await _unitOfWork.CommitTransactionAsync(cancellationToken);

            return response;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error during transaction for {RequestName}. Rolling back...", requestName);
            await _unitOfWork.RollbackTransactionAsync(cancellationToken);
            throw;
        }
    }
}

================
File: src/Portfolio.Application/Common/Behaviors/ValidationBehavior.cs
================
using FluentValidation;
using MediatR;
using Microsoft.Extensions.Logging;
using Portfolio.Application.Common.Exceptions;

namespace Portfolio.Application.Common.Behaviors;

public class ValidationBehavior<TRequest, TResponse> : IPipelineBehavior<TRequest, TResponse>
    where TRequest : IRequest<TResponse>
{
    private readonly IEnumerable<IValidator<TRequest>> _validators;
    private readonly ILogger<ValidationBehavior<TRequest, TResponse>> _logger;

    public ValidationBehavior(
        IEnumerable<IValidator<TRequest>> validators,
        ILogger<ValidationBehavior<TRequest, TResponse>> logger)
    {
        _validators = validators;
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    public async Task<TResponse> Handle(
        TRequest request,
        RequestHandlerDelegate<TResponse> next,
        CancellationToken cancellationToken)
    {
        if (!_validators.Any())
        {
            return await next();
        }

        _logger.LogDebug("Validating request of type {RequestType}", typeof(TRequest).Name);

        var context = new ValidationContext<TRequest>(request);

        var validationResults = await Task.WhenAll(
            _validators.Select(v => v.ValidateAsync(context, cancellationToken)));

        var failures = validationResults
            .Where(r => r.Errors.Any())
            .SelectMany(r => r.Errors)
            .ToList();

        if (failures.Any())
        {
            _logger.LogWarning(
                "Validation failed for request of type {RequestType}. Errors: {Errors}",
                typeof(TRequest).Name,
                string.Join(", ", failures.Select(f => f.ErrorMessage)));

            throw new FluentValidation.ValidationException(failures);
        }

        _logger.LogDebug("Validation successful for request of type {RequestType}", typeof(TRequest).Name);
        return await next();
    }
}

================
File: src/Portfolio.Application/Common/CQRS/ICommand.cs
================
using MediatR;

namespace Portfolio.Application.Common.Interfaces;

/// <summary>
/// Base interface for commands in CQRS pattern
/// </summary>
public interface ICommand : IRequest
{
}

/// <summary>
/// Base interface for commands that return a result in CQRS pattern
/// </summary>
public interface ICommand<TResult> : IRequest<TResult>
{
}

================
File: src/Portfolio.Application/Common/CQRS/IQuery.cs
================
using MediatR;

namespace Portfolio.Application.Common.Interfaces;

/// <summary>
/// Base interface for queries in CQRS pattern
/// </summary>
public interface IQuery<TResult> : IRequest<TResult>
{
}

================
File: src/Portfolio.Application/Common/DTOs/BaseDto.cs
================
namespace Portfolio.Application.Common.DTOs;

/// <summary>
/// Base DTO for all entities following Clean Architecture principles
/// </summary>
public abstract record BaseDto
{
    public required string Id { get; init; }
    public required DateTime CreatedAt { get; init; }
    public required DateTime UpdatedAt { get; init; }
}

================
File: src/Portfolio.Application/Common/DTOs/BlogDto.cs
================
namespace Portfolio.Application.Common.DTOs;

/// <summary>
/// Data Transfer Object for Blog entity following Clean Architecture principles.
/// Provides a flat, serializable representation of the Blog aggregate.
/// </summary>
public record BlogDto : BaseDto
{
    public required string Title { get; init; }
    public required string Excerpt { get; init; }
    public required string Body { get; init; }
    public required bool IsDraft { get; init; }
    public DateTime? PublishAt { get; init; }
    public required int VectorId { get; init; }
    public string? Link { get; init; }
    public IReadOnlyCollection<string> Tags { get; init; } = Array.Empty<string>();
}

================
File: src/Portfolio.Application/Common/DTOs/PageDto.cs
================
namespace Portfolio.Application.Common.DTOs;

/// <summary>
/// Data Transfer Object for Page entity following Clean Architecture principles.
/// Provides a flat, serializable representation of the Page aggregate.
/// </summary>
public record PageDto : BaseDto
{
    public required string Title { get; init; }
    public required string Slug { get; init; }
    public required string Content { get; init; }
    public string? MetaDescription { get; init; }
    public IReadOnlyCollection<string> MetaKeywords { get; init; } = Array.Empty<string>();
    public string? OpenGraphImage { get; init; }
    public required bool IsDraft { get; init; }
    public required bool IsPublished { get; init; }
    public required int VectorId { get; init; }
}

================
File: src/Portfolio.Application/Common/DTOs/ProjectDto.cs
================
namespace Portfolio.Application.Common.DTOs;

/// <summary>
/// Data Transfer Object for Project entity following Clean Architecture principles.
/// Provides a flat, serializable representation of the Project aggregate.
/// </summary>
public record ProjectDto : BaseDto
{
    public required string Title { get; init; }
    public required string Description { get; init; }
    public string? GithubUrl { get; init; }
    public string? LiveUrl { get; init; }
    public string? ImageUrl { get; init; }
    public required int VectorId { get; init; }
    public string? Link { get; init; }
    public IReadOnlyCollection<string> Technologies { get; init; } = Array.Empty<string>();
}

================
File: src/Portfolio.Application/Common/DTOs/UserDto.cs
================
namespace Portfolio.Application.Common.DTOs;

/// <summary>
/// Data Transfer Object for User entity following Clean Architecture principles.
/// Provides a flat, serializable representation of the User aggregate.
/// </summary>
public record UserDto : BaseDto
{
    public required string Username { get; init; }
    public required string Email { get; init; }
    public string? DisplayName { get; init; }
    public string? AvatarUrl { get; init; }
    public string? Provider { get; init; }
    public string? ProviderId { get; init; }
    public required bool IsAdmin { get; init; }
}

================
File: src/Portfolio.Application/Common/Exceptions/ApplicationException.cs
================
namespace Portfolio.Application.Common.Exceptions;

public abstract class ApplicationException : Exception
{
    protected ApplicationException(string title, string message)
        : base(message)
    {
        Title = title;
    }

    public string Title { get; }
}

================
File: src/Portfolio.Application/Common/Exceptions/NotFoundException.cs
================
namespace Portfolio.Application.Common.Exceptions;

public class NotFoundException : ApplicationException
{
    public NotFoundException(string name, object key)
        : base("Not Found", $"Entity \"{name}\" ({key}) was not found.")
    {
        Name = name;
        Key = key;
    }

    public string Name { get; }
    public object Key { get; }
}

================
File: src/Portfolio.Application/Common/Exceptions/ValidationException.cs
================
using FluentValidation.Results;

namespace Portfolio.Application.Common.Exceptions;

/// <summary>
/// Exception thrown when validation fails in the application layer.
/// Part of the Application layer's error handling following Clean Architecture principles.
/// Used by ValidationBehavior and domain validation to ensure consistent error handling.
/// </summary>
public class ValidationException : Exception
{
    /// <summary>
    /// Creates a new validation exception with a default message
    /// </summary>
    public ValidationException()
        : base("One or more validation failures have occurred.")
    {
        Errors = new Dictionary<string, string[]>();
    }

    /// <summary>
    /// Creates a new validation exception with a specific message
    /// </summary>
    /// <param name="message">The error message</param>
    public ValidationException(string message)
        : base(message)
    {
        Errors = new Dictionary<string, string[]>
        {
            { "Error", new[] { message } }
        };
    }

    /// <summary>
    /// Creates a new validation exception from FluentValidation failures
    /// </summary>
    /// <param name="failures">Collection of validation failures from FluentValidation</param>
    public ValidationException(IEnumerable<ValidationFailure> failures)
        : this()
    {
        Errors = failures
            .GroupBy(e => e.PropertyName, e => e.ErrorMessage)
            .ToDictionary(failureGroup => failureGroup.Key, failureGroup => failureGroup.ToArray());
    }

    /// <summary>
    /// Dictionary of validation errors where the key is the property name
    /// and the value is an array of error messages
    /// </summary>
    public IDictionary<string, string[]> Errors { get; }
}

================
File: src/Portfolio.Application/Common/Mappings/MappingProfile.cs
================
using AutoMapper;
using Portfolio.Application.Common.DTOs;
using Portfolio.Domain.Entities;

namespace Portfolio.Application.Common.Mappings;

public class MappingProfile : Profile
{
    public MappingProfile()
    {
        CreateMap<Blog, BlogDto>()
            .ForMember(dest => dest.Tags, opt => opt.MapFrom(src => src.Tags));

        CreateMap<Project, ProjectDto>()
            .ForMember(dest => dest.Technologies, opt => opt.MapFrom(src => src.Technologies));

        CreateMap<User, UserDto>()
            .ForMember(dest => dest.Email, opt => opt.MapFrom(src => src.Email.Value));

        CreateMap<Page, PageDto>()
            .ForMember(dest => dest.MetaKeywords, opt => opt.MapFrom(src => src.MetaKeywords));
    }
}

================
File: src/Portfolio.Application/Common/Models/PaginatedList.cs
================
namespace Portfolio.Application.Common.Models;

/// <summary>
/// Generic class for handling paginated lists
/// </summary>
public class PaginatedList<T>
{
    public IReadOnlyCollection<T> Items { get; }
    public int PageNumber { get; }
    public int TotalPages { get; }
    public int TotalCount { get; }

    public PaginatedList(IEnumerable<T> items, int count, int pageNumber, int pageSize)
    {
        PageNumber = pageNumber;
        TotalPages = (int)Math.Ceiling(count / (double)pageSize);
        TotalCount = count;
        Items = items.ToList().AsReadOnly();
    }

    public bool HasPreviousPage => PageNumber > 1;
    public bool HasNextPage => PageNumber < TotalPages;

    public static async Task<PaginatedList<T>> CreateAsync(
        IQueryable<T> source, int pageNumber, int pageSize)
    {
        var count = await Task.FromResult(source.Count());
        var items = source.Skip((pageNumber - 1) * pageSize).Take(pageSize);
        return new PaginatedList<T>(items, count, pageNumber, pageSize);
    }
}

================
File: src/Portfolio.Application/Common/Models/Result.cs
================
namespace Portfolio.Application.Common.Models;

/// <summary>
/// Represents a result from a business operation
/// </summary>
public class Result<T>
{
    private Result(bool succeeded, T? data, IEnumerable<string> errors)
    {
        Succeeded = succeeded;
        Data = data;
        Errors = errors.ToArray();
    }

    public bool Succeeded { get; }
    public T? Data { get; }
    public string[] Errors { get; }

    public static Result<T> Success(T data) => new(true, data, Array.Empty<string>());
    public static Result<T> Failure(IEnumerable<string> errors) => new(false, default, errors);
    public static Result<T> Failure(string error) => new(false, default, new[] { error });
}

public class Result
{
    protected Result(bool succeeded, IEnumerable<string> errors)
    {
        Succeeded = succeeded;
        Errors = errors.ToArray();
    }

    public bool Succeeded { get; }
    public string[] Errors { get; }

    public static Result Success() => new(true, Array.Empty<string>());
    public static Result Failure(IEnumerable<string> errors) => new(false, errors);
    public static Result Failure(string error) => new(false, new[] { error });
}

================
File: src/Portfolio.Application/DependencyInjection.cs
================
using System.Reflection;
using FluentValidation;
using MediatR;
using Microsoft.Extensions.DependencyInjection;
using Portfolio.Application.Common.Behaviors;

namespace Portfolio.Application;

public static class DependencyInjection
{
    public static IServiceCollection AddApplication(this IServiceCollection services)
    {
        var assembly = Assembly.GetExecutingAssembly();

        // Add AutoMapper
        services.AddAutoMapper(assembly);

        // Add FluentValidation
        services.AddValidatorsFromAssembly(assembly);

        // Add MediatR with behaviors
        services.AddMediatR(config =>
        {
            config.RegisterServicesFromAssembly(assembly);

            // Add pipeline behaviors in the correct order
            // 1. Logging - Should be first to capture timing for the entire pipeline
            config.AddBehavior(typeof(IPipelineBehavior<,>), typeof(LoggingBehavior<,>));

            // 2. Performance - Should run after logging to track performance accurately
            config.AddBehavior(typeof(IPipelineBehavior<,>), typeof(PerformanceBehavior<,>));

            // 3. Validation - Should run after performance tracking but before transaction handling
            config.AddBehavior(typeof(IPipelineBehavior<,>), typeof(ValidationBehavior<,>));

            // 4. Transaction - Should run after validation but before the actual handler
            // This ensures we only start a transaction if validation passes
            config.AddBehavior(typeof(IPipelineBehavior<,>), typeof(TransactionBehavior<,>));
        });

        return services;
    }
}

================
File: src/Portfolio.Application/Interfaces/Persistence/IBlogRepository.cs
================
using Portfolio.Domain.Entities;

namespace Portfolio.Application.Interfaces.Persistence;

/// <summary>
/// Repository interface for Blog entity operations
/// </summary>
public interface IBlogRepository : IRepository<Blog>
{
    Task<Blog?> GetBySlugAsync(string slug, CancellationToken cancellationToken = default);
    Task<Blog?> GetByLinkAsync(string link, CancellationToken cancellationToken = default);
    Task<IEnumerable<Blog>> GetPublishedAsync(CancellationToken cancellationToken = default);
    Task<IEnumerable<Blog>> GetByTagAsync(string tag, CancellationToken cancellationToken = default);
    Task<int> GetNextVectorIdAsync(CancellationToken cancellationToken = default);
}

================
File: src/Portfolio.Application/Interfaces/Persistence/IPageRepository.cs
================
using Portfolio.Domain.Entities;

namespace Portfolio.Application.Interfaces.Persistence;

public interface IPageRepository: IRepository<Page>
{
    Task<Page> GetBySlugAsync(string slug, CancellationToken cancellationToken = default);
}

================
File: src/Portfolio.Application/Interfaces/Persistence/IProjectRepository.cs
================
using Portfolio.Domain.Entities;

namespace Portfolio.Application.Interfaces.Persistence;

/// <summary>
/// Repository interface for Project entity operations
/// </summary>
public interface IProjectRepository : IRepository<Project>
{
    Task<Project?> GetByLinkAsync(string link, CancellationToken cancellationToken = default);
    Task<IEnumerable<Project>> GetByTechnologyAsync(string technology, CancellationToken cancellationToken = default);
    Task<int> GetNextVectorIdAsync(CancellationToken cancellationToken = default);
}

================
File: src/Portfolio.Application/Interfaces/Persistence/IRepository.cs
================
using Portfolio.Domain.Common;

namespace Portfolio.Application.Interfaces.Persistence;

/// <summary>
/// Generic repository interface for basic CRUD operations.
/// Follows Clean Architecture principles and Domain-Driven Design patterns.
/// </summary>
public interface IRepository<TEntity> where TEntity : IEntity
{
    Task<TEntity> GetByIdAsync(string id, CancellationToken cancellationToken = default);
    Task<IEnumerable<TEntity>> GetAllAsync(CancellationToken cancellationToken = default);
    Task<TEntity> AddAsync(TEntity entity, CancellationToken cancellationToken = default);
    Task UpdateAsync(TEntity entity, CancellationToken cancellationToken = default);
    Task DeleteAsync(string id, CancellationToken cancellationToken = default);
}

================
File: src/Portfolio.Application/Interfaces/Persistence/IUnitOfWork.cs
================
namespace Portfolio.Application.Interfaces.Persistence;

/// <summary>
/// Interface for managing transactions and unit of work pattern
/// </summary>
public interface IUnitOfWork
{
    IBlogRepository Blogs { get; }
    IProjectRepository Projects { get; }
    IUserRepository Users { get; }

    Task BeginTransactionAsync(CancellationToken cancellationToken = default);
    Task CommitTransactionAsync(CancellationToken cancellationToken = default);
    Task RollbackTransactionAsync(CancellationToken cancellationToken = default);
    Task SaveChangesAsync(CancellationToken cancellationToken = default);
}

================
File: src/Portfolio.Application/Interfaces/Persistence/IUserRepository.cs
================
using Portfolio.Domain.Entities;

namespace Portfolio.Application.Interfaces.Persistence;

/// <summary>
/// Repository interface for User entity operations
/// </summary>
public interface IUserRepository : IRepository<User>
{
    Task<User?> GetByUsernameAsync(string username, CancellationToken cancellationToken = default);
    Task<User?> GetByEmailAsync(string email, CancellationToken cancellationToken = default);
    Task<User?> GetByProviderAsync(string provider, string providerId, CancellationToken cancellationToken = default);
    Task<bool> IsUsernameUniqueAsync(string username, CancellationToken cancellationToken = default);
    Task<bool> IsEmailUniqueAsync(string email, CancellationToken cancellationToken = default);
}

================
File: src/Portfolio.Application/Interfaces/Services/IAiService.cs
================
namespace Portfolio.Application.Interfaces.Services;

/// <summary>
/// Interface for AI operations using Ollama
/// </summary>
public interface IAiService
{
    Task<float[]> GenerateEmbeddingsAsync(string text, CancellationToken cancellationToken = default);
    Task<string> GenerateSummaryAsync(string text, CancellationToken cancellationToken = default);
    Task<string> GenerateExcerptAsync(string text, int maxLength = 500, CancellationToken cancellationToken = default);
    Task<IEnumerable<string>> GenerateTagsAsync(string text, int maxTags = 5, CancellationToken cancellationToken = default);
}

================
File: src/Portfolio.Application/Interfaces/Services/ICacheService.cs
================
namespace Portfolio.Application.Interfaces.Services;

/// <summary>
/// Interface for caching operations
/// </summary>
public interface ICacheService
{
    Task<T?> GetAsync<T>(string key, CancellationToken cancellationToken = default) where T : class;
    Task SetAsync<T>(string key, T value, TimeSpan? expiration = null, CancellationToken cancellationToken = default) where T : class;
    Task RemoveAsync(string key, CancellationToken cancellationToken = default);
    Task<bool> ExistsAsync(string key, CancellationToken cancellationToken = default);
    Task<T> GetOrSetAsync<T>(string key, Func<Task<T>> factory, TimeSpan? expiration = null, CancellationToken cancellationToken = default) where T : class;
}

================
File: src/Portfolio.Application/Interfaces/Services/ICurrentUserService.cs
================
namespace Portfolio.Application.Interfaces.Services;

/// <summary>
/// Interface for accessing current user information
/// </summary>
public interface ICurrentUserService
{
    string? UserId { get; }
    string? UserName { get; }
    bool IsAuthenticated { get; }
    bool IsAdmin { get; }
    IReadOnlyList<string> Roles { get; }
}

================
File: src/Portfolio.Application/Interfaces/Services/IFileStorageService.cs
================
namespace Portfolio.Application.Interfaces.Services;

/// <summary>
/// Interface for file storage operations
/// </summary>
public interface IFileStorageService
{
    Task<string> UploadFileAsync(Stream fileStream, string fileName, string contentType, CancellationToken cancellationToken = default);
    Task<bool> DeleteFileAsync(string fileUrl, CancellationToken cancellationToken = default);
    Task<Stream> GetFileAsync(string fileUrl, CancellationToken cancellationToken = default);
    Task<bool> FileExistsAsync(string fileUrl, CancellationToken cancellationToken = default);
    string GetPublicUrl(string fileUrl);
}

================
File: src/Portfolio.Application/Interfaces/Services/IVectorSearchService.cs
================
namespace Portfolio.Application.Interfaces.Services;

/// <summary>
/// Interface for vector search operations using Qdrant
/// </summary>
public interface IVectorSearchService
{
    Task<int> GetNextVectorIdAsync(string collectionName, CancellationToken cancellationToken = default);
    Task UpsertVectorAsync(string collectionName, int vectorId, float[] vector, Dictionary<string, object> payload, CancellationToken cancellationToken = default);
    Task DeleteVectorAsync(string collectionName, int vectorId, CancellationToken cancellationToken = default);
    Task<IEnumerable<(int VectorId, float Score, Dictionary<string, object> Payload)>> SearchAsync(
        string collectionName,
        float[] queryVector,
        int limit = 10,
        float scoreThreshold = 0.7f,
        CancellationToken cancellationToken = default);
}

================
File: src/Portfolio.Application/obj/Debug/net8.0/.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
================
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

================
File: src/Portfolio.Application/obj/Debug/net8.0/Portfolio.Application.AssemblyInfo.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Portfolio.Application")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+7c4cf518495f7b4351aa2e0be533baabd5237bff")]
[assembly: System.Reflection.AssemblyProductAttribute("Portfolio.Application")]
[assembly: System.Reflection.AssemblyTitleAttribute("Portfolio.Application")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.

================
File: src/Portfolio.Application/obj/Debug/net8.0/Portfolio.Application.AssemblyInfoInputs.cache
================
e0b48f41cb2e93c2310b3d5af7a6393a8f16bb20a77e7dba4adc94822e82331f

================
File: src/Portfolio.Application/obj/Debug/net8.0/Portfolio.Application.csproj.CoreCompileInputs.cache
================
f4ca1d518bf29295597c759e2d2662b8cf83e3362dccf476fc19f43d25696f65

================
File: src/Portfolio.Application/obj/Debug/net8.0/Portfolio.Application.csproj.FileListAbsolute.txt
================
C:\dev\portfolio\portfolio.net\src\Portfolio.Application\obj\Debug\net8.0\Portfolio.Application.csproj.AssemblyReference.cache
C:\dev\portfolio\portfolio.net\src\Portfolio.Application\obj\Debug\net8.0\Portfolio.Application.GeneratedMSBuildEditorConfig.editorconfig
C:\dev\portfolio\portfolio.net\src\Portfolio.Application\obj\Debug\net8.0\Portfolio.Application.AssemblyInfoInputs.cache
C:\dev\portfolio\portfolio.net\src\Portfolio.Application\obj\Debug\net8.0\Portfolio.Application.AssemblyInfo.cs
C:\dev\portfolio\portfolio.net\src\Portfolio.Application\obj\Debug\net8.0\Portfolio.Application.csproj.CoreCompileInputs.cache
C:\dev\portfolio\portfolio.net\src\Portfolio.Application\obj\Debug\net8.0\Portfolio.Application.sourcelink.json
C:\dev\portfolio\portfolio.net\src\Portfolio.Application\bin\Debug\net8.0\Portfolio.Application.deps.json
C:\dev\portfolio\portfolio.net\src\Portfolio.Application\bin\Debug\net8.0\Portfolio.Application.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.Application\bin\Debug\net8.0\Portfolio.Application.pdb
C:\dev\portfolio\portfolio.net\src\Portfolio.Application\bin\Debug\net8.0\Portfolio.Domain.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.Application\bin\Debug\net8.0\Portfolio.Domain.pdb
C:\dev\portfolio\portfolio.net\src\Portfolio.Application\obj\Debug\net8.0\Portfoli.B086831A.Up2Date
C:\dev\portfolio\portfolio.net\src\Portfolio.Application\obj\Debug\net8.0\Portfolio.Application.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.Application\obj\Debug\net8.0\refint\Portfolio.Application.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.Application\obj\Debug\net8.0\Portfolio.Application.pdb
C:\dev\portfolio\portfolio.net\src\Portfolio.Application\obj\Debug\net8.0\ref\Portfolio.Application.dll

================
File: src/Portfolio.Application/obj/Debug/net8.0/Portfolio.Application.GeneratedMSBuildEditorConfig.editorconfig
================
is_global = true
build_property.TargetFramework = net8.0
build_property.TargetPlatformMinVersion = 
build_property.UsingMicrosoftNETSdkWeb = 
build_property.ProjectTypeGuids = 
build_property.InvariantGlobalization = 
build_property.PlatformNeutralAssembly = 
build_property.EnforceExtendedAnalyzerRules = 
build_property._SupportedPlatformList = Linux,macOS,Windows
build_property.RootNamespace = Portfolio.Application
build_property.ProjectDir = c:\dev\portfolio\portfolio.net\src\Portfolio.Application\
build_property.EnableComHosting = 
build_property.EnableGeneratedComInterfaceComImportInterop = 
build_property.EffectiveAnalysisLevelStyle = 8.0
build_property.EnableCodeStyleSeverity =

================
File: src/Portfolio.Application/obj/Debug/net8.0/Portfolio.Application.GlobalUsings.g.cs
================
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

================
File: src/Portfolio.Application/obj/Debug/net8.0/Portfolio.Application.sourcelink.json
================
{"documents":{"C:\\dev\\portfolio\\*":"https://raw.githubusercontent.com/michelroberge/portfolio/104d91285c2777489c173d7e92482bc0071a9d92/*"}}

================
File: src/Portfolio.Application/obj/Portfolio.Application.csproj.nuget.dgspec.json
================
{
  "format": 1,
  "restore": {
    "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\Portfolio.Application.csproj": {}
  },
  "projects": {
    "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\Portfolio.Application.csproj": {
      "version": "1.0.0",
      "restore": {
        "projectUniqueName": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\Portfolio.Application.csproj",
        "projectName": "Portfolio.Application",
        "projectPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\Portfolio.Application.csproj",
        "packagesPath": "C:\\Users\\miche\\.nuget\\packages\\",
        "outputPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\obj\\",
        "projectStyle": "PackageReference",
        "fallbackFolders": [
          "C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\NuGetPackages"
        ],
        "configFilePaths": [
          "C:\\Users\\miche\\AppData\\Roaming\\NuGet\\NuGet.Config",
          "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.FallbackLocation.config",
          "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.Offline.config"
        ],
        "originalTargetFrameworks": [
          "net8.0"
        ],
        "sources": {
          "C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackages\\": {},
          "https://api.nuget.org/v3/index.json": {}
        },
        "frameworks": {
          "net8.0": {
            "targetAlias": "net8.0",
            "projectReferences": {
              "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\Portfolio.Domain.csproj": {
                "projectPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\Portfolio.Domain.csproj"
              }
            }
          }
        },
        "warningProperties": {
          "warnAsError": [
            "NU1605"
          ]
        },
        "restoreAuditProperties": {
          "enableAudit": "true",
          "auditLevel": "low",
          "auditMode": "direct"
        },
        "SdkAnalysisLevel": "9.0.100"
      },
      "frameworks": {
        "net8.0": {
          "targetAlias": "net8.0",
          "dependencies": {
            "AutoMapper": {
              "target": "Package",
              "version": "[13.0.1, )"
            },
            "FluentValidation": {
              "target": "Package",
              "version": "[11.9.0, )"
            },
            "FluentValidation.DependencyInjectionExtensions": {
              "target": "Package",
              "version": "[11.9.0, )"
            },
            "MediatR": {
              "target": "Package",
              "version": "[12.2.0, )"
            },
            "Microsoft.Extensions.Logging.Abstractions": {
              "target": "Package",
              "version": "[8.0.0, )"
            }
          },
          "imports": [
            "net461",
            "net462",
            "net47",
            "net471",
            "net472",
            "net48",
            "net481"
          ],
          "assetTargetFallback": true,
          "warn": true,
          "frameworkReferences": {
            "Microsoft.NETCore.App": {
              "privateAssets": "all"
            }
          },
          "runtimeIdentifierGraphPath": "C:\\Program Files\\dotnet\\sdk\\9.0.102/PortableRuntimeIdentifierGraph.json"
        }
      }
    },
    "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\Portfolio.Domain.csproj": {
      "version": "1.0.0",
      "restore": {
        "projectUniqueName": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\Portfolio.Domain.csproj",
        "projectName": "Portfolio.Domain",
        "projectPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\Portfolio.Domain.csproj",
        "packagesPath": "C:\\Users\\miche\\.nuget\\packages\\",
        "outputPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\obj\\",
        "projectStyle": "PackageReference",
        "fallbackFolders": [
          "C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\NuGetPackages"
        ],
        "configFilePaths": [
          "C:\\Users\\miche\\AppData\\Roaming\\NuGet\\NuGet.Config",
          "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.FallbackLocation.config",
          "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.Offline.config"
        ],
        "originalTargetFrameworks": [
          "net8.0"
        ],
        "sources": {
          "C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackages\\": {},
          "https://api.nuget.org/v3/index.json": {}
        },
        "frameworks": {
          "net8.0": {
            "targetAlias": "net8.0",
            "projectReferences": {}
          }
        },
        "warningProperties": {
          "warnAsError": [
            "NU1605"
          ]
        },
        "restoreAuditProperties": {
          "enableAudit": "true",
          "auditLevel": "low",
          "auditMode": "direct"
        },
        "SdkAnalysisLevel": "9.0.100"
      },
      "frameworks": {
        "net8.0": {
          "targetAlias": "net8.0",
          "imports": [
            "net461",
            "net462",
            "net47",
            "net471",
            "net472",
            "net48",
            "net481"
          ],
          "assetTargetFallback": true,
          "warn": true,
          "frameworkReferences": {
            "Microsoft.NETCore.App": {
              "privateAssets": "all"
            }
          },
          "runtimeIdentifierGraphPath": "C:\\Program Files\\dotnet\\sdk\\9.0.102/PortableRuntimeIdentifierGraph.json"
        }
      }
    }
  }
}

================
File: src/Portfolio.Application/obj/Portfolio.Application.csproj.nuget.g.props
================
<?xml version="1.0" encoding="utf-8" standalone="no"?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup Condition=" '$(ExcludeRestorePackageImports)' != 'true' ">
    <RestoreSuccess Condition=" '$(RestoreSuccess)' == '' ">True</RestoreSuccess>
    <RestoreTool Condition=" '$(RestoreTool)' == '' ">NuGet</RestoreTool>
    <ProjectAssetsFile Condition=" '$(ProjectAssetsFile)' == '' ">$(MSBuildThisFileDirectory)project.assets.json</ProjectAssetsFile>
    <NuGetPackageRoot Condition=" '$(NuGetPackageRoot)' == '' ">$(UserProfile)\.nuget\packages\</NuGetPackageRoot>
    <NuGetPackageFolders Condition=" '$(NuGetPackageFolders)' == '' ">C:\Users\miche\.nuget\packages\;C:\Program Files (x86)\Microsoft Visual Studio\Shared\NuGetPackages</NuGetPackageFolders>
    <NuGetProjectStyle Condition=" '$(NuGetProjectStyle)' == '' ">PackageReference</NuGetProjectStyle>
    <NuGetToolVersion Condition=" '$(NuGetToolVersion)' == '' ">6.12.3</NuGetToolVersion>
  </PropertyGroup>
  <ItemGroup Condition=" '$(ExcludeRestorePackageImports)' != 'true' ">
    <SourceRoot Include="C:\Users\miche\.nuget\packages\" />
    <SourceRoot Include="C:\Program Files (x86)\Microsoft Visual Studio\Shared\NuGetPackages\" />
  </ItemGroup>
</Project>

================
File: src/Portfolio.Application/obj/Portfolio.Application.csproj.nuget.g.targets
================
<?xml version="1.0" encoding="utf-8" standalone="no"?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ImportGroup Condition=" '$(ExcludeRestorePackageImports)' != 'true' ">
    <Import Project="$(NuGetPackageRoot)microsoft.extensions.logging.abstractions\8.0.0\buildTransitive\net6.0\Microsoft.Extensions.Logging.Abstractions.targets" Condition="Exists('$(NuGetPackageRoot)microsoft.extensions.logging.abstractions\8.0.0\buildTransitive\net6.0\Microsoft.Extensions.Logging.Abstractions.targets')" />
  </ImportGroup>
</Project>

================
File: src/Portfolio.Application/obj/project.assets.json
================
{
  "version": 3,
  "targets": {
    "net8.0": {
      "AutoMapper/13.0.1": {
        "type": "package",
        "dependencies": {
          "Microsoft.Extensions.Options": "6.0.0"
        },
        "compile": {
          "lib/net6.0/AutoMapper.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net6.0/AutoMapper.dll": {
            "related": ".xml"
          }
        }
      },
      "FluentValidation/11.9.0": {
        "type": "package",
        "compile": {
          "lib/net8.0/FluentValidation.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/FluentValidation.dll": {
            "related": ".xml"
          }
        }
      },
      "FluentValidation.DependencyInjectionExtensions/11.9.0": {
        "type": "package",
        "dependencies": {
          "FluentValidation": "11.9.0",
          "Microsoft.Extensions.Dependencyinjection.Abstractions": "2.1.0"
        },
        "compile": {
          "lib/netstandard2.1/FluentValidation.DependencyInjectionExtensions.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/netstandard2.1/FluentValidation.DependencyInjectionExtensions.dll": {
            "related": ".xml"
          }
        }
      },
      "MediatR/12.2.0": {
        "type": "package",
        "dependencies": {
          "MediatR.Contracts": "[2.0.1, 3.0.0)",
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0"
        },
        "compile": {
          "lib/net6.0/MediatR.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net6.0/MediatR.dll": {
            "related": ".xml"
          }
        }
      },
      "MediatR.Contracts/2.0.1": {
        "type": "package",
        "compile": {
          "lib/netstandard2.0/MediatR.Contracts.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/netstandard2.0/MediatR.Contracts.dll": {
            "related": ".xml"
          }
        }
      },
      "Microsoft.Extensions.DependencyInjection.Abstractions/8.0.0": {
        "type": "package",
        "compile": {
          "lib/net8.0/Microsoft.Extensions.DependencyInjection.Abstractions.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.DependencyInjection.Abstractions.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net6.0/_._": {}
        }
      },
      "Microsoft.Extensions.Logging.Abstractions/8.0.0": {
        "type": "package",
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0"
        },
        "compile": {
          "lib/net8.0/Microsoft.Extensions.Logging.Abstractions.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Logging.Abstractions.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net6.0/Microsoft.Extensions.Logging.Abstractions.targets": {}
        }
      },
      "Microsoft.Extensions.Options/6.0.0": {
        "type": "package",
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "6.0.0",
          "Microsoft.Extensions.Primitives": "6.0.0"
        },
        "compile": {
          "lib/netstandard2.1/Microsoft.Extensions.Options.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/netstandard2.1/Microsoft.Extensions.Options.dll": {
            "related": ".xml"
          }
        }
      },
      "Microsoft.Extensions.Primitives/6.0.0": {
        "type": "package",
        "dependencies": {
          "System.Runtime.CompilerServices.Unsafe": "6.0.0"
        },
        "compile": {
          "lib/net6.0/Microsoft.Extensions.Primitives.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net6.0/Microsoft.Extensions.Primitives.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/netcoreapp3.1/_._": {}
        }
      },
      "System.Runtime.CompilerServices.Unsafe/6.0.0": {
        "type": "package",
        "compile": {
          "lib/net6.0/System.Runtime.CompilerServices.Unsafe.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net6.0/System.Runtime.CompilerServices.Unsafe.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/netcoreapp3.1/_._": {}
        }
      },
      "Portfolio.Domain/1.0.0": {
        "type": "project",
        "framework": ".NETCoreApp,Version=v8.0",
        "compile": {
          "bin/placeholder/Portfolio.Domain.dll": {}
        },
        "runtime": {
          "bin/placeholder/Portfolio.Domain.dll": {}
        }
      }
    }
  },
  "libraries": {
    "AutoMapper/13.0.1": {
      "sha512": "/Fx1SbJ16qS7dU4i604Sle+U9VLX+WSNVJggk6MupKVkYvvBm4XqYaeFuf67diHefHKHs50uQIS2YEDFhPCakQ==",
      "type": "package",
      "path": "automapper/13.0.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "README.md",
        "automapper.13.0.1.nupkg.sha512",
        "automapper.nuspec",
        "icon.png",
        "lib/net6.0/AutoMapper.dll",
        "lib/net6.0/AutoMapper.xml"
      ]
    },
    "FluentValidation/11.9.0": {
      "sha512": "VneVlTvwYDkfHV5av3QrQ0amALgrLX6LV94wlYyEsh0B/klJBW7C8y2eAtj5tOZ3jH6CAVpr4s1ZGgew/QWyig==",
      "type": "package",
      "path": "fluentvalidation/11.9.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "README.md",
        "fluent-validation-icon.png",
        "fluentvalidation.11.9.0.nupkg.sha512",
        "fluentvalidation.nuspec",
        "lib/net5.0/FluentValidation.dll",
        "lib/net5.0/FluentValidation.xml",
        "lib/net6.0/FluentValidation.dll",
        "lib/net6.0/FluentValidation.xml",
        "lib/net7.0/FluentValidation.dll",
        "lib/net7.0/FluentValidation.xml",
        "lib/net8.0/FluentValidation.dll",
        "lib/net8.0/FluentValidation.xml",
        "lib/netstandard2.0/FluentValidation.dll",
        "lib/netstandard2.0/FluentValidation.xml",
        "lib/netstandard2.1/FluentValidation.dll",
        "lib/netstandard2.1/FluentValidation.xml"
      ]
    },
    "FluentValidation.DependencyInjectionExtensions/11.9.0": {
      "sha512": "Ko++xvN7HUf4WlHJL6bhsybUj/uho8ApOYIdxGjpF8Ot7Fukz6LRfRJ06H0KXhWqmMHWEbu89hJbjKJHtg7b9g==",
      "type": "package",
      "path": "fluentvalidation.dependencyinjectionextensions/11.9.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "README.md",
        "fluent-validation-icon.png",
        "fluentvalidation.dependencyinjectionextensions.11.9.0.nupkg.sha512",
        "fluentvalidation.dependencyinjectionextensions.nuspec",
        "lib/netstandard2.0/FluentValidation.DependencyInjectionExtensions.dll",
        "lib/netstandard2.0/FluentValidation.DependencyInjectionExtensions.xml",
        "lib/netstandard2.1/FluentValidation.DependencyInjectionExtensions.dll",
        "lib/netstandard2.1/FluentValidation.DependencyInjectionExtensions.xml"
      ]
    },
    "MediatR/12.2.0": {
      "sha512": "8TUFrHapKi6D74PhnSNEguRsH91HNGyP3R4ZQdgDorJgl9Wac5Prh0vA33QfrniAaS6L2xNNhc6vxzg+5AIbwA==",
      "type": "package",
      "path": "mediatr/12.2.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "gradient_128x128.png",
        "lib/net6.0/MediatR.dll",
        "lib/net6.0/MediatR.xml",
        "lib/netstandard2.0/MediatR.dll",
        "lib/netstandard2.0/MediatR.xml",
        "mediatr.12.2.0.nupkg.sha512",
        "mediatr.nuspec"
      ]
    },
    "MediatR.Contracts/2.0.1": {
      "sha512": "FYv95bNT4UwcNA+G/J1oX5OpRiSUxteXaUt2BJbRSdRNiIUNbggJF69wy6mnk2wYToaanpdXZdCwVylt96MpwQ==",
      "type": "package",
      "path": "mediatr.contracts/2.0.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "gradient_128x128.png",
        "lib/netstandard2.0/MediatR.Contracts.dll",
        "lib/netstandard2.0/MediatR.Contracts.xml",
        "mediatr.contracts.2.0.1.nupkg.sha512",
        "mediatr.contracts.nuspec"
      ]
    },
    "Microsoft.Extensions.DependencyInjection.Abstractions/8.0.0": {
      "sha512": "cjWrLkJXK0rs4zofsK4bSdg+jhDLTaxrkXu4gS6Y7MAlCvRyNNgwY/lJi5RDlQOnSZweHqoyvgvbdvQsRIW+hg==",
      "type": "package",
      "path": "microsoft.extensions.dependencyinjection.abstractions/8.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "PACKAGE.md",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/net461/Microsoft.Extensions.DependencyInjection.Abstractions.targets",
        "buildTransitive/net462/_._",
        "buildTransitive/net6.0/_._",
        "buildTransitive/netcoreapp2.0/Microsoft.Extensions.DependencyInjection.Abstractions.targets",
        "lib/net462/Microsoft.Extensions.DependencyInjection.Abstractions.dll",
        "lib/net462/Microsoft.Extensions.DependencyInjection.Abstractions.xml",
        "lib/net6.0/Microsoft.Extensions.DependencyInjection.Abstractions.dll",
        "lib/net6.0/Microsoft.Extensions.DependencyInjection.Abstractions.xml",
        "lib/net7.0/Microsoft.Extensions.DependencyInjection.Abstractions.dll",
        "lib/net7.0/Microsoft.Extensions.DependencyInjection.Abstractions.xml",
        "lib/net8.0/Microsoft.Extensions.DependencyInjection.Abstractions.dll",
        "lib/net8.0/Microsoft.Extensions.DependencyInjection.Abstractions.xml",
        "lib/netstandard2.0/Microsoft.Extensions.DependencyInjection.Abstractions.dll",
        "lib/netstandard2.0/Microsoft.Extensions.DependencyInjection.Abstractions.xml",
        "lib/netstandard2.1/Microsoft.Extensions.DependencyInjection.Abstractions.dll",
        "lib/netstandard2.1/Microsoft.Extensions.DependencyInjection.Abstractions.xml",
        "microsoft.extensions.dependencyinjection.abstractions.8.0.0.nupkg.sha512",
        "microsoft.extensions.dependencyinjection.abstractions.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "Microsoft.Extensions.Logging.Abstractions/8.0.0": {
      "sha512": "arDBqTgFCyS0EvRV7O3MZturChstm50OJ0y9bDJvAcmEPJm0FFpFyjU/JLYyStNGGey081DvnQYlncNX5SJJGA==",
      "type": "package",
      "path": "microsoft.extensions.logging.abstractions/8.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "PACKAGE.md",
        "THIRD-PARTY-NOTICES.TXT",
        "analyzers/dotnet/roslyn3.11/cs/Microsoft.Extensions.Logging.Generators.dll",
        "analyzers/dotnet/roslyn3.11/cs/cs/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/de/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/es/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/fr/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/it/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/ja/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/ko/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/pl/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/pt-BR/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/ru/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/tr/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/zh-Hans/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/zh-Hant/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/Microsoft.Extensions.Logging.Generators.dll",
        "analyzers/dotnet/roslyn4.0/cs/cs/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/de/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/es/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/fr/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/it/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/ja/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/ko/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/pl/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/pt-BR/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/ru/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/tr/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/zh-Hans/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/zh-Hant/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/Microsoft.Extensions.Logging.Generators.dll",
        "analyzers/dotnet/roslyn4.4/cs/cs/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/de/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/es/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/fr/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/it/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/ja/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/ko/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/pl/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/pt-BR/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/ru/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/tr/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/zh-Hans/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/zh-Hant/Microsoft.Extensions.Logging.Generators.resources.dll",
        "buildTransitive/net461/Microsoft.Extensions.Logging.Abstractions.targets",
        "buildTransitive/net462/Microsoft.Extensions.Logging.Abstractions.targets",
        "buildTransitive/net6.0/Microsoft.Extensions.Logging.Abstractions.targets",
        "buildTransitive/netcoreapp2.0/Microsoft.Extensions.Logging.Abstractions.targets",
        "buildTransitive/netstandard2.0/Microsoft.Extensions.Logging.Abstractions.targets",
        "lib/net462/Microsoft.Extensions.Logging.Abstractions.dll",
        "lib/net462/Microsoft.Extensions.Logging.Abstractions.xml",
        "lib/net6.0/Microsoft.Extensions.Logging.Abstractions.dll",
        "lib/net6.0/Microsoft.Extensions.Logging.Abstractions.xml",
        "lib/net7.0/Microsoft.Extensions.Logging.Abstractions.dll",
        "lib/net7.0/Microsoft.Extensions.Logging.Abstractions.xml",
        "lib/net8.0/Microsoft.Extensions.Logging.Abstractions.dll",
        "lib/net8.0/Microsoft.Extensions.Logging.Abstractions.xml",
        "lib/netstandard2.0/Microsoft.Extensions.Logging.Abstractions.dll",
        "lib/netstandard2.0/Microsoft.Extensions.Logging.Abstractions.xml",
        "microsoft.extensions.logging.abstractions.8.0.0.nupkg.sha512",
        "microsoft.extensions.logging.abstractions.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "Microsoft.Extensions.Options/6.0.0": {
      "sha512": "dzXN0+V1AyjOe2xcJ86Qbo233KHuLEY0njf/P2Kw8SfJU+d45HNS2ctJdnEnrWbM9Ye2eFgaC5Mj9otRMU6IsQ==",
      "type": "package",
      "path": "microsoft.extensions.options/6.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "THIRD-PARTY-NOTICES.TXT",
        "lib/net461/Microsoft.Extensions.Options.dll",
        "lib/net461/Microsoft.Extensions.Options.xml",
        "lib/netstandard2.0/Microsoft.Extensions.Options.dll",
        "lib/netstandard2.0/Microsoft.Extensions.Options.xml",
        "lib/netstandard2.1/Microsoft.Extensions.Options.dll",
        "lib/netstandard2.1/Microsoft.Extensions.Options.xml",
        "microsoft.extensions.options.6.0.0.nupkg.sha512",
        "microsoft.extensions.options.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "Microsoft.Extensions.Primitives/6.0.0": {
      "sha512": "9+PnzmQFfEFNR9J2aDTfJGGupShHjOuGw4VUv+JB044biSHrnmCIMD+mJHmb2H7YryrfBEXDurxQ47gJZdCKNQ==",
      "type": "package",
      "path": "microsoft.extensions.primitives/6.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/netcoreapp2.0/Microsoft.Extensions.Primitives.targets",
        "buildTransitive/netcoreapp3.1/_._",
        "lib/net461/Microsoft.Extensions.Primitives.dll",
        "lib/net461/Microsoft.Extensions.Primitives.xml",
        "lib/net6.0/Microsoft.Extensions.Primitives.dll",
        "lib/net6.0/Microsoft.Extensions.Primitives.xml",
        "lib/netcoreapp3.1/Microsoft.Extensions.Primitives.dll",
        "lib/netcoreapp3.1/Microsoft.Extensions.Primitives.xml",
        "lib/netstandard2.0/Microsoft.Extensions.Primitives.dll",
        "lib/netstandard2.0/Microsoft.Extensions.Primitives.xml",
        "microsoft.extensions.primitives.6.0.0.nupkg.sha512",
        "microsoft.extensions.primitives.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "System.Runtime.CompilerServices.Unsafe/6.0.0": {
      "sha512": "/iUeP3tq1S0XdNNoMz5C9twLSrM/TH+qElHkXWaPvuNOt+99G75NrV0OS2EqHx5wMN7popYjpc8oTjC1y16DLg==",
      "type": "package",
      "path": "system.runtime.compilerservices.unsafe/6.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/netcoreapp2.0/System.Runtime.CompilerServices.Unsafe.targets",
        "buildTransitive/netcoreapp3.1/_._",
        "lib/net461/System.Runtime.CompilerServices.Unsafe.dll",
        "lib/net461/System.Runtime.CompilerServices.Unsafe.xml",
        "lib/net6.0/System.Runtime.CompilerServices.Unsafe.dll",
        "lib/net6.0/System.Runtime.CompilerServices.Unsafe.xml",
        "lib/netcoreapp3.1/System.Runtime.CompilerServices.Unsafe.dll",
        "lib/netcoreapp3.1/System.Runtime.CompilerServices.Unsafe.xml",
        "lib/netstandard2.0/System.Runtime.CompilerServices.Unsafe.dll",
        "lib/netstandard2.0/System.Runtime.CompilerServices.Unsafe.xml",
        "system.runtime.compilerservices.unsafe.6.0.0.nupkg.sha512",
        "system.runtime.compilerservices.unsafe.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "Portfolio.Domain/1.0.0": {
      "type": "project",
      "path": "../Portfolio.Domain/Portfolio.Domain.csproj",
      "msbuildProject": "../Portfolio.Domain/Portfolio.Domain.csproj"
    }
  },
  "projectFileDependencyGroups": {
    "net8.0": [
      "AutoMapper >= 13.0.1",
      "FluentValidation >= 11.9.0",
      "FluentValidation.DependencyInjectionExtensions >= 11.9.0",
      "MediatR >= 12.2.0",
      "Microsoft.Extensions.Logging.Abstractions >= 8.0.0",
      "Portfolio.Domain >= 1.0.0"
    ]
  },
  "packageFolders": {
    "C:\\Users\\miche\\.nuget\\packages\\": {},
    "C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\NuGetPackages": {}
  },
  "project": {
    "version": "1.0.0",
    "restore": {
      "projectUniqueName": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\Portfolio.Application.csproj",
      "projectName": "Portfolio.Application",
      "projectPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\Portfolio.Application.csproj",
      "packagesPath": "C:\\Users\\miche\\.nuget\\packages\\",
      "outputPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\obj\\",
      "projectStyle": "PackageReference",
      "fallbackFolders": [
        "C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\NuGetPackages"
      ],
      "configFilePaths": [
        "C:\\Users\\miche\\AppData\\Roaming\\NuGet\\NuGet.Config",
        "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.FallbackLocation.config",
        "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.Offline.config"
      ],
      "originalTargetFrameworks": [
        "net8.0"
      ],
      "sources": {
        "C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackages\\": {},
        "https://api.nuget.org/v3/index.json": {}
      },
      "frameworks": {
        "net8.0": {
          "targetAlias": "net8.0",
          "projectReferences": {
            "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\Portfolio.Domain.csproj": {
              "projectPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\Portfolio.Domain.csproj"
            }
          }
        }
      },
      "warningProperties": {
        "warnAsError": [
          "NU1605"
        ]
      },
      "restoreAuditProperties": {
        "enableAudit": "true",
        "auditLevel": "low",
        "auditMode": "direct"
      },
      "SdkAnalysisLevel": "9.0.100"
    },
    "frameworks": {
      "net8.0": {
        "targetAlias": "net8.0",
        "dependencies": {
          "AutoMapper": {
            "target": "Package",
            "version": "[13.0.1, )"
          },
          "FluentValidation": {
            "target": "Package",
            "version": "[11.9.0, )"
          },
          "FluentValidation.DependencyInjectionExtensions": {
            "target": "Package",
            "version": "[11.9.0, )"
          },
          "MediatR": {
            "target": "Package",
            "version": "[12.2.0, )"
          },
          "Microsoft.Extensions.Logging.Abstractions": {
            "target": "Package",
            "version": "[8.0.0, )"
          }
        },
        "imports": [
          "net461",
          "net462",
          "net47",
          "net471",
          "net472",
          "net48",
          "net481"
        ],
        "assetTargetFallback": true,
        "warn": true,
        "frameworkReferences": {
          "Microsoft.NETCore.App": {
            "privateAssets": "all"
          }
        },
        "runtimeIdentifierGraphPath": "C:\\Program Files\\dotnet\\sdk\\9.0.102/PortableRuntimeIdentifierGraph.json"
      }
    }
  }
}

================
File: src/Portfolio.Application/obj/project.nuget.cache
================
{
  "version": 2,
  "dgSpecHash": "hbZ3rWqKBqc=",
  "success": true,
  "projectFilePath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\Portfolio.Application.csproj",
  "expectedPackageFiles": [
    "C:\\Users\\miche\\.nuget\\packages\\automapper\\13.0.1\\automapper.13.0.1.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\fluentvalidation\\11.9.0\\fluentvalidation.11.9.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\fluentvalidation.dependencyinjectionextensions\\11.9.0\\fluentvalidation.dependencyinjectionextensions.11.9.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\mediatr\\12.2.0\\mediatr.12.2.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\mediatr.contracts\\2.0.1\\mediatr.contracts.2.0.1.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.extensions.dependencyinjection.abstractions\\8.0.0\\microsoft.extensions.dependencyinjection.abstractions.8.0.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.extensions.logging.abstractions\\8.0.0\\microsoft.extensions.logging.abstractions.8.0.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.extensions.options\\6.0.0\\microsoft.extensions.options.6.0.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.extensions.primitives\\6.0.0\\microsoft.extensions.primitives.6.0.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\system.runtime.compilerservices.unsafe\\6.0.0\\system.runtime.compilerservices.unsafe.6.0.0.nupkg.sha512"
  ],
  "logs": []
}

================
File: src/Portfolio.Application/Portfolio.Application.csproj
================
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="AutoMapper" Version="13.0.1" />
    <PackageReference Include="FluentValidation" Version="11.9.0" />
    <PackageReference Include="FluentValidation.DependencyInjectionExtensions" Version="11.9.0" />
    <PackageReference Include="MediatR" Version="12.2.0" />
    <PackageReference Include="Microsoft.Extensions.Logging.Abstractions" Version="8.0.0" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\Portfolio.Domain\Portfolio.Domain.csproj" />
  </ItemGroup>

</Project>

================
File: src/Portfolio.Application/UseCases/Blogs/Commands/CreateBlog/CreateBlogCommand.cs
================
using Portfolio.Application.Common.DTOs;
using Portfolio.Application.Common.Interfaces;

namespace Portfolio.Application.UseCases.Blogs.Commands.CreateBlog;

public record CreateBlogCommand : ICommand<BlogDto>
{
    public required string Title { get; init; }
    public required string Excerpt { get; init; }
    public required string Body { get; init; }
    public bool IsDraft { get; init; }
    public DateTime? PublishAt { get; init; }
    public IReadOnlyCollection<string> Tags { get; init; } = Array.Empty<string>();
}

================
File: src/Portfolio.Application/UseCases/Blogs/Commands/CreateBlog/CreateBlogCommandHandler.cs
================
using AutoMapper;
using MediatR;
using Microsoft.Extensions.Logging;
using Portfolio.Application.Common.DTOs;
using Portfolio.Application.Interfaces.Persistence;
using Portfolio.Domain.Entities;

namespace Portfolio.Application.UseCases.Blogs.Commands.CreateBlog;

public class CreateBlogCommandHandler : IRequestHandler<CreateBlogCommand, BlogDto>
{
    private readonly IBlogRepository _blogRepository;
    private readonly IMapper _mapper;
    private readonly ILogger<CreateBlogCommandHandler> _logger;

    public CreateBlogCommandHandler(
        IBlogRepository blogRepository,
        IMapper mapper,
        ILogger<CreateBlogCommandHandler> logger)
    {
        _blogRepository = blogRepository ?? throw new ArgumentNullException(nameof(blogRepository));
        _mapper = mapper ?? throw new ArgumentNullException(nameof(mapper));
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    public async Task<BlogDto> Handle(CreateBlogCommand request, CancellationToken cancellationToken)
    {
        try
        {
            _logger.LogInformation("Creating new blog with title: {Title}", request.Title);

            // Get next vector ID for the blog
            var vectorId = await _blogRepository.GetNextVectorIdAsync(cancellationToken);
            _logger.LogDebug("Retrieved next vector ID: {VectorId}", vectorId);

            // Create new blog entity
            var blog = new Blog(
                title: request.Title,
                excerpt: request.Excerpt,
                body: request.Body,
                publishAt: request.PublishAt
            );

            // Add tags if any
            foreach (var tag in request.Tags)
            {
                blog.Tags.Add(tag);
            }

            _logger.LogDebug("Blog entity created with ID: {BlogId}", blog.Id);

            // Save to repository
            var createdBlog = await _blogRepository.AddAsync(blog, cancellationToken);
            _logger.LogInformation("Successfully created blog with ID: {BlogId}", createdBlog.Id);

            // Map to DTO and return
            return _mapper.Map<BlogDto>(createdBlog);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error creating blog with title: {Title}", request.Title);
            throw;
        }
    }
}

================
File: src/Portfolio.Application/UseCases/Blogs/Commands/CreateBlog/CreateBlogCommandValidator.cs
================
using FluentValidation;

namespace Portfolio.Application.UseCases.Blogs.Commands.CreateBlog;

public class CreateBlogCommandValidator : AbstractValidator<CreateBlogCommand>
{
    public CreateBlogCommandValidator()
    {
        RuleFor(x => x.Title)
            .NotEmpty().WithMessage("Title is required")
            .MaximumLength(200).WithMessage("Title cannot be longer than 200 characters");

        RuleFor(x => x.Excerpt)
            .NotEmpty().WithMessage("Excerpt is required")
            .MaximumLength(500).WithMessage("Excerpt cannot be longer than 500 characters");

        RuleFor(x => x.Body)
            .NotEmpty().WithMessage("Body is required");

        RuleFor(x => x.PublishAt)
            .Must(x => !x.HasValue || x.Value > DateTime.UtcNow)
            .WithMessage("Publish date must be in the future");

        RuleForEach(x => x.Tags)
            .NotEmpty().WithMessage("Tag cannot be empty")
            .MaximumLength(50).WithMessage("Tag cannot be longer than 50 characters");
    }
}

================
File: src/Portfolio.Application/UseCases/Blogs/Commands/DeleteBlog/DeleteBlogCommand.cs
================
using MediatR;
using Portfolio.Application.Common.Interfaces;

namespace Portfolio.Application.UseCases.Blogs.Commands.DeleteBlog;

public record DeleteBlogCommand(string Id) : ICommand<Unit>;

================
File: src/Portfolio.Application/UseCases/Blogs/Commands/DeleteBlog/DeleteBlogCommandHandler.cs
================
using MediatR;
using Microsoft.Extensions.Logging;
using Portfolio.Application.Common.Exceptions;
using Portfolio.Application.Interfaces.Persistence;

namespace Portfolio.Application.UseCases.Blogs.Commands.DeleteBlog;

public class DeleteBlogCommandHandler : IRequestHandler<DeleteBlogCommand, Unit>
{
    private readonly IBlogRepository _blogRepository;
    private readonly ILogger<DeleteBlogCommandHandler> _logger;

    public DeleteBlogCommandHandler(
        IBlogRepository blogRepository,
        ILogger<DeleteBlogCommandHandler> logger)
    {
        _blogRepository = blogRepository ?? throw new ArgumentNullException(nameof(blogRepository));
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    public async Task<Unit> Handle(DeleteBlogCommand request, CancellationToken cancellationToken)
    {
        try
        {
            _logger.LogInformation("Deleting blog with ID: {BlogId}", request.Id);

            var blog = await _blogRepository.GetByIdAsync(request.Id, cancellationToken)
                ?? throw new NotFoundException("Blog", request.Id);

            await _blogRepository.DeleteAsync(request.Id, cancellationToken);
            _logger.LogInformation("Successfully deleted blog with ID: {BlogId}", request.Id);

            return Unit.Value;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error deleting blog with ID: {BlogId}", request.Id);
            throw;
        }
    }
}

================
File: src/Portfolio.Application/UseCases/Blogs/Commands/UpdateBlog/UpdateBlogCommand.cs
================
using MediatR;
using Portfolio.Application.Common.DTOs;

namespace Portfolio.Application.UseCases.Blogs.Commands.UpdateBlog;

/// <summary>
/// Command to update a blog following CQRS pattern and DDD principles
/// </summary>
public record UpdateBlogCommand : IRequest<BlogDto>
{
    public required string Id { get; init; }
    public required string Title { get; init; }
    public required string Excerpt { get; init; }
    public required string Body { get; init; }
    public bool IsDraft { get; init; }
    public bool IsPublished { get; init; }
    public DateTime? PublishAt { get; init; }
    public IReadOnlyCollection<string> Tags { get; init; } = Array.Empty<string>();
}

================
File: src/Portfolio.Application/UseCases/Blogs/Commands/UpdateBlog/UpdateBlogCommandHandler.cs
================
using AutoMapper;
using MediatR;
using Microsoft.Extensions.Logging;
using Portfolio.Application.Common.DTOs;
using Portfolio.Application.Common.Exceptions;
using Portfolio.Application.Interfaces.Persistence;
using Portfolio.Domain.Entities;

namespace Portfolio.Application.UseCases.Blogs.Commands.UpdateBlog;

public class UpdateBlogCommandHandler : IRequestHandler<UpdateBlogCommand, BlogDto>
{
    private readonly IBlogRepository _blogRepository;
    private readonly IMapper _mapper;
    private readonly ILogger<UpdateBlogCommandHandler> _logger;

    public UpdateBlogCommandHandler(
        IBlogRepository blogRepository,
        IMapper mapper,
        ILogger<UpdateBlogCommandHandler> logger)
    {
        _blogRepository = blogRepository ?? throw new ArgumentNullException(nameof(blogRepository));
        _mapper = mapper ?? throw new ArgumentNullException(nameof(mapper));
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    public async Task<BlogDto> Handle(UpdateBlogCommand request, CancellationToken cancellationToken)
    {
        try
        {
            _logger.LogInformation("Updating blog with ID: {BlogId}", request.Id);

            var existingBlog = await _blogRepository.GetByIdAsync(request.Id, cancellationToken)
                ?? throw new NotFoundException("Blog", request.Id);

            // Update blog using domain entity's Update method following DDD principles
            var updatedBlog = existingBlog.Update(
                title: request.Title,
                excerpt: request.Excerpt,
                body: request.Body,
                publishAt: request.PublishAt,
                tags: request.Tags.ToList(),
                isDraft: request.IsDraft
            );

            _logger.LogDebug("Blog entity updated with ID: {BlogId}", updatedBlog.Id);

            // Save to repository
            await _blogRepository.UpdateAsync(updatedBlog, cancellationToken);
            _logger.LogInformation("Successfully updated blog with ID: {BlogId}", request.Id);

            // Map to DTO and return
            return _mapper.Map<BlogDto>(await _blogRepository.GetByIdAsync(request.Id));
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error updating blog with ID: {BlogId}", request.Id);
            throw;
        }
    }
}

================
File: src/Portfolio.Application/UseCases/Blogs/Queries/GetAllBlogs/GetAllBlogsQuery.cs
================
using Portfolio.Application.Common.DTOs;
using Portfolio.Application.Common.Interfaces;

namespace Portfolio.Application.UseCases.Blogs.Queries.GetAllBlogs;

/// <summary>
/// Query to retrieve all blog posts following CQRS pattern
/// </summary>
public record GetAllBlogsQuery : IQuery<IEnumerable<BlogDto>>;

================
File: src/Portfolio.Application/UseCases/Blogs/Queries/GetAllBlogs/GetAllBlogsQueryHandler.cs
================
using AutoMapper;
using MediatR;
using Portfolio.Application.Common.DTOs;
using Portfolio.Application.Interfaces.Persistence;

namespace Portfolio.Application.UseCases.Blogs.Queries.GetAllBlogs;

public class GetAllBlogsQueryHandler : IRequestHandler<GetAllBlogsQuery, IEnumerable<BlogDto>>
{
    private readonly IBlogRepository _blogRepository;
    private readonly IMapper _mapper;

    public GetAllBlogsQueryHandler(IBlogRepository blogRepository, IMapper mapper)
    {
        _blogRepository = blogRepository;
        _mapper = mapper;
    }

    public async Task<IEnumerable<BlogDto>> Handle(GetAllBlogsQuery request, CancellationToken cancellationToken)
    {
        var blogs = await _blogRepository.GetAllAsync(cancellationToken);
        return _mapper.Map<IEnumerable<BlogDto>>(blogs);
    }
}

================
File: src/Portfolio.Application/UseCases/Blogs/Queries/GetBlogById/GetBlogByIdQuery.cs
================
using Portfolio.Application.Common.DTOs;
using Portfolio.Application.Common.Interfaces;

namespace Portfolio.Application.UseCases.Blogs.Queries.GetBlogById;

/// <summary>
/// Query to retrieve a blog post by its ID following CQRS pattern
/// </summary>
public record GetBlogByIdQuery(string Id) : IQuery<BlogDto>;

================
File: src/Portfolio.Application/UseCases/Blogs/Queries/GetBlogById/GetBlogByIdQueryHandler.cs
================
using AutoMapper;
using MediatR;
using Portfolio.Application.Common.DTOs;
using Portfolio.Application.Common.Exceptions;
using Portfolio.Application.Interfaces.Persistence;

namespace Portfolio.Application.UseCases.Blogs.Queries.GetBlogById;

public class GetBlogByIdQueryHandler : IRequestHandler<GetBlogByIdQuery, BlogDto>
{
    private readonly IBlogRepository _blogRepository;
    private readonly IMapper _mapper;

    public GetBlogByIdQueryHandler(IBlogRepository blogRepository, IMapper mapper)
    {
        _blogRepository = blogRepository;
        _mapper = mapper;
    }

    public async Task<BlogDto> Handle(GetBlogByIdQuery request, CancellationToken cancellationToken)
    {
        var blog = await _blogRepository.GetByIdAsync(request.Id, cancellationToken)
            ?? throw new NotFoundException("Blog", request.Id);

        return _mapper.Map<BlogDto>(blog);
    }
}

================
File: src/Portfolio.Application/UseCases/Blogs/Queries/GetBlogByLink/GetBlogByLinkQuery.cs
================
using Portfolio.Application.Common.DTOs;
using Portfolio.Application.Common.Interfaces;

namespace Portfolio.Application.UseCases.Blogs.Queries.GetBlogByLink;

public record GetBlogByLinkQuery : IQuery<BlogDto?>
{
    public required string Link { get; init; }
}

================
File: src/Portfolio.Application/UseCases/Blogs/Queries/GetBlogByLink/GetBlogByLinkQueryHandler.cs
================
using AutoMapper;
using MediatR;
using Microsoft.Extensions.Logging;
using Portfolio.Application.Common.DTOs;
using Portfolio.Application.Common.Exceptions;
using Portfolio.Application.Interfaces.Persistence;

namespace Portfolio.Application.UseCases.Blogs.Queries.GetBlogByLink;

public class GetBlogByLinkQueryHandler : IRequestHandler<GetBlogByLinkQuery, BlogDto?>
{
    private readonly IBlogRepository _blogRepository;
    private readonly IMapper _mapper;
    private readonly ILogger<GetBlogByLinkQueryHandler> _logger;

    public GetBlogByLinkQueryHandler(
        IBlogRepository blogRepository,
        IMapper mapper,
        ILogger<GetBlogByLinkQueryHandler> logger)
    {
        _blogRepository = blogRepository ?? throw new ArgumentNullException(nameof(blogRepository));
        _mapper = mapper ?? throw new ArgumentNullException(nameof(mapper));
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    public async Task<BlogDto?> Handle(GetBlogByLinkQuery request, CancellationToken cancellationToken)
    {
        try
        {
            _logger.LogInformation("Fetching blog with link: {Link}", request.Link);

            var blog = await _blogRepository.GetByLinkAsync(request.Link, cancellationToken);

            if (blog == null)
            {
                _logger.LogWarning("Blog with link {Link} not found", request.Link);
                return null;
            }

            _logger.LogDebug("Successfully retrieved blog with ID: {BlogId}", blog.Id);
            return _mapper.Map<BlogDto>(blog);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error fetching blog with link: {Link}", request.Link);
            throw;
        }
    }
}

================
File: src/Portfolio.Application/UseCases/Blogs/Queries/GetBlogBySlug/GetBlogBySlugQuery.cs
================
using Portfolio.Application.Common.DTOs;
using Portfolio.Application.Common.Interfaces;

namespace Portfolio.Application.UseCases.Blogs.Queries.GetBlogBySlug;

/// <summary>
/// Query to retrieve a blog post by its slug following CQRS pattern
/// </summary>
public record GetBlogBySlugQuery(string Slug) : IQuery<BlogDto>;

================
File: src/Portfolio.Application/UseCases/Blogs/Queries/GetBlogBySlug/GetBlogBySlugQueryHandler.cs
================
using AutoMapper;
using MediatR;
using Portfolio.Application.Common.DTOs;
using Portfolio.Application.Common.Exceptions;
using Portfolio.Application.Interfaces.Persistence;

namespace Portfolio.Application.UseCases.Blogs.Queries.GetBlogBySlug;

public class GetBlogBySlugQueryHandler : IRequestHandler<GetBlogBySlugQuery, BlogDto>
{
    private readonly IBlogRepository _blogRepository;
    private readonly IMapper _mapper;

    public GetBlogBySlugQueryHandler(IBlogRepository blogRepository, IMapper mapper)
    {
        _blogRepository = blogRepository;
        _mapper = mapper;
    }

    public async Task<BlogDto> Handle(GetBlogBySlugQuery request, CancellationToken cancellationToken)
    {
        var blog = await _blogRepository.GetBySlugAsync(request.Slug, cancellationToken)
            ?? throw new NotFoundException("Blog", request.Slug);

        return _mapper.Map<BlogDto>(blog);
    }
}

================
File: src/Portfolio.Application/UseCases/Blogs/Queries/GetPublishedBlogs/GetPublishedBlogsQuery.cs
================
using Portfolio.Application.Common.DTOs;
using Portfolio.Application.Common.Interfaces;

namespace Portfolio.Application.UseCases.Blogs.Queries.GetPublishedBlogs;

public record GetPublishedBlogsQuery : IQuery<IEnumerable<BlogDto>>
{
    // Add pagination parameters if needed in the future
}

================
File: src/Portfolio.Application/UseCases/Blogs/Queries/GetPublishedBlogs/GetPublishedBlogsQueryHandler.cs
================
using AutoMapper;
using MediatR;
using Portfolio.Application.Common.DTOs;
using Portfolio.Application.Interfaces.Persistence;

namespace Portfolio.Application.UseCases.Blogs.Queries.GetPublishedBlogs;

public class GetPublishedBlogsQueryHandler : IRequestHandler<GetPublishedBlogsQuery, IEnumerable<BlogDto>>
{
    private readonly IBlogRepository _blogRepository;
    private readonly IMapper _mapper;

    public GetPublishedBlogsQueryHandler(IBlogRepository blogRepository, IMapper mapper)
    {
        _blogRepository = blogRepository ?? throw new ArgumentNullException(nameof(blogRepository));
        _mapper = mapper ?? throw new ArgumentNullException(nameof(mapper));
    }

    public async Task<IEnumerable<BlogDto>> Handle(GetPublishedBlogsQuery request, CancellationToken cancellationToken)
    {
        var blogs = await _blogRepository.GetPublishedAsync(cancellationToken);
        return _mapper.Map<IEnumerable<BlogDto>>(blogs);
    }
}

================
File: src/Portfolio.Application/UseCases/Pages/Commands/CreatePage/CreatePageCommand.cs
================
using MediatR;
using Portfolio.Application.Common.DTOs;

namespace Portfolio.Application.UseCases.Pages.Commands.CreatePage;

public record CreatePageCommand(
    string Title, 
    string Slug, 
    string Content,
    string? MetaDescription = null,
    IReadOnlyCollection<string>? MetaKeywords = null,
    string? OpenGraphImage = null) : IRequest<PageDto>;

================
File: src/Portfolio.Application/UseCases/Pages/Commands/CreatePage/CreatePageCommandHandler.cs
================
using AutoMapper;
using MediatR;
using Portfolio.Application.Common.DTOs;
using Portfolio.Application.Common.Exceptions;
using Portfolio.Application.Interfaces.Persistence;
using Portfolio.Domain.Entities;
using System.Runtime.CompilerServices;

namespace Portfolio.Application.UseCases.Pages.Commands.CreatePage;

public class CreatePageCommandHandler : IRequestHandler<CreatePageCommand, PageDto>
{
    private readonly IPageRepository _pageRepository;
    private readonly IMapper _mapper;

    public CreatePageCommandHandler(IPageRepository pageRepository, IMapper mapper)
    {
        _pageRepository = pageRepository;
        _mapper = mapper;
    }

    public async Task<PageDto> Handle(CreatePageCommand request, CancellationToken cancellationToken)
    {
        // Check for duplicate slug
        var existingPage = await _pageRepository.GetBySlugAsync(request.Slug, cancellationToken);
        if (existingPage != null)
            throw new ValidationException($"A page with slug '{request.Slug}' already exists.");

        // Create new page entity following DDD principles
        var page = new Page(
            title: request.Title,
            slug: request.Slug,
            content: request.Content,
            metaDescription: request.MetaDescription,
            metaKeywords: request.MetaKeywords?.ToList(),
            openGraphImage: request.OpenGraphImage
        );

        // Save to repository
        var createdPage = await _pageRepository.AddAsync(page, cancellationToken);

        // Map to DTO and return
        return _mapper.Map<PageDto>(createdPage);
    }
}

================
File: src/Portfolio.Application/UseCases/Pages/Commands/DeletePage/DeletePageCommand.cs
================
using MediatR;

namespace Portfolio.Application.UseCases.Pages.Commands.DeletePage;

public record DeletePageCommand(string Id) : IRequest<Unit>;

================
File: src/Portfolio.Application/UseCases/Pages/Commands/DeletePage/DeletePageCommandHandler.cs
================
using MediatR;
using Portfolio.Application.Common.Exceptions;
using Portfolio.Application.Interfaces.Persistence;
using Portfolio.Domain.Entities;

namespace Portfolio.Application.UseCases.Pages.Commands.DeletePage;

public class DeletePageCommandHandler : IRequestHandler<DeletePageCommand, Unit>
{
    private readonly IPageRepository _pageRepository;

    public DeletePageCommandHandler(IPageRepository pageRepository)
    {
        _pageRepository = pageRepository;
    }

    public async Task<Unit> Handle(DeletePageCommand request, CancellationToken cancellationToken)
    {
        // Verify page exists
        var page = await _pageRepository.GetByIdAsync(request.Id, cancellationToken);
        if (page == null)
            throw new NotFoundException(nameof(Page), request.Id);

        // Delete page
        await _pageRepository.DeleteAsync(request.Id, cancellationToken);

        return Unit.Value;
    }
}

================
File: src/Portfolio.Application/UseCases/Pages/Commands/UpdatePage/UpdatePageCommand.cs
================
using MediatR;
using Portfolio.Application.Common.DTOs;

namespace Portfolio.Application.UseCases.Pages.Commands.UpdatePage;

public record UpdatePageCommand : IRequest<PageDto>
{
    public required string Id { get; init; }
    public required string Title { get; init; }
    public required string Slug { get; init; }
    public required string Content { get; init; }
    public string? MetaDescription { get; init; }
    public IReadOnlyCollection<string>? MetaKeywords { get; init; }
    public string? OpenGraphImage { get; init; }
    public bool? IsDraft { get; init; }
    public bool? IsPublished { get; init; }
}

================
File: src/Portfolio.Application/UseCases/Pages/Commands/UpdatePage/UpdatePageCommandHandler.cs
================
using AutoMapper;
using MediatR;
using Portfolio.Application.Common.DTOs;
using Portfolio.Application.Common.Exceptions;
using Portfolio.Application.Interfaces.Persistence;
using Portfolio.Domain.Entities;

namespace Portfolio.Application.UseCases.Pages.Commands.UpdatePage;

public class UpdatePageCommandHandler : IRequestHandler<UpdatePageCommand, PageDto>
{
    private readonly IPageRepository _pageRepository;
    private readonly IMapper _mapper;

    public UpdatePageCommandHandler(IPageRepository pageRepository, IMapper mapper)
    {
        _pageRepository = pageRepository;
        _mapper = mapper;
    }

    public async Task<PageDto> Handle(UpdatePageCommand request, CancellationToken cancellationToken)
    {
        // Get existing page
        var page = await _pageRepository.GetByIdAsync(request.Id, cancellationToken);
        if (page == null)
            throw new NotFoundException(nameof(Page), request.Id);

        // Check for duplicate slug if changed
        if (request.Slug != page.Slug)
        {
            var existingPage = await _pageRepository.GetBySlugAsync(request.Slug, cancellationToken);
            if (existingPage != null)
                throw new ValidationException($"A page with slug '{request.Slug}' already exists.");
        }

        // Update page following DDD principles
        var updatedPage = page.Update(
            title: request.Title,
            slug: request.Slug,
            content: request.Content,
            metaDescription: request.MetaDescription,
            metaKeywords: request.MetaKeywords?.ToList(),
            openGraphImage: request.OpenGraphImage,
            isDraft: request.IsDraft,
            isPublished: request.IsPublished
        );

        // Save changes
        await _pageRepository.UpdateAsync(updatedPage, cancellationToken);

        // Map to DTO and return
        return _mapper.Map<PageDto>(updatedPage);
    }
}

================
File: src/Portfolio.Application/UseCases/Pages/Queries/GetAllPages/GetAllPagesQuery.cs
================
using MediatR;
using Portfolio.Application.Common.DTOs;

namespace Portfolio.Application.UseCases.Pages.Queries.GetAllPages;

public record GetAllPagesQuery : IRequest<IEnumerable<PageDto>>;

================
File: src/Portfolio.Application/UseCases/Pages/Queries/GetAllPages/GetAllPagesQueryHandler.cs
================
using AutoMapper;
using MediatR;
using Portfolio.Application.Common.DTOs;
using Portfolio.Application.Interfaces.Persistence;
using Portfolio.Domain.Entities;

namespace Portfolio.Application.UseCases.Pages.Queries.GetAllPages;

public class GetAllPagesQueryHandler : IRequestHandler<GetAllPagesQuery, IEnumerable<PageDto>>
{
    private readonly IPageRepository _pageRepository;
    private readonly IMapper _mapper;

    public GetAllPagesQueryHandler(IPageRepository pageRepository, IMapper mapper)
    {
        _pageRepository = pageRepository;
        _mapper = mapper;
    }

    public async Task<IEnumerable<PageDto>> Handle(GetAllPagesQuery request, CancellationToken cancellationToken)
    {
        var pages = await _pageRepository.GetAllAsync(cancellationToken);
        return _mapper.Map<IEnumerable<PageDto>>(pages);
    }
}

================
File: src/Portfolio.Application/UseCases/Pages/Queries/GetPageById/GetPageByIdQuery.cs
================
using MediatR;
using Portfolio.Application.Common.DTOs;

namespace Portfolio.Application.UseCases.Pages.Queries.GetPageById;

public record GetPageByIdQuery(string Id) : IRequest<PageDto>;

================
File: src/Portfolio.Application/UseCases/Pages/Queries/GetPageById/GetPageByIdQueryHandler.cs
================
using AutoMapper;
using MediatR;
using Portfolio.Application.Common.DTOs;
using Portfolio.Application.Common.Exceptions;
using Portfolio.Application.Interfaces.Persistence;
using Portfolio.Domain.Entities;

namespace Portfolio.Application.UseCases.Pages.Queries.GetPageById;

public class GetPageByIdQueryHandler : IRequestHandler<GetPageByIdQuery, PageDto>
{
    private readonly IPageRepository _pageRepository;
    private readonly IMapper _mapper;

    public GetPageByIdQueryHandler(IPageRepository pageRepository, IMapper mapper)
    {
        _pageRepository = pageRepository;
        _mapper = mapper;
    }

    public async Task<PageDto> Handle(GetPageByIdQuery request, CancellationToken cancellationToken)
    {
        var page = await _pageRepository.GetByIdAsync(request.Id, cancellationToken);

        if (page == null)
            throw new NotFoundException(nameof(Page), request.Id.ToString());

        return _mapper.Map<PageDto>(page);
    }
}

================
File: src/Portfolio.Application/UseCases/Pages/Queries/GetPageBySlug/GetPageBySlugQuery.cs
================
using MediatR;
using Portfolio.Application.Common.DTOs;

namespace Portfolio.Application.UseCases.Pages.Queries.GetPageBySlug;

public record GetPageBySlugQuery(string Slug) : IRequest<PageDto>;

================
File: src/Portfolio.Application/UseCases/Pages/Queries/GetPageBySlug/GetPageBySlugQueryHandler.cs
================
using AutoMapper;
using MediatR;
using Portfolio.Application.Common.DTOs;
using Portfolio.Application.Common.Exceptions;
using Portfolio.Application.Interfaces.Persistence;
using Portfolio.Domain.Entities;

namespace Portfolio.Application.UseCases.Pages.Queries.GetPageBySlug;

public class GetPageBySlugQueryHandler : IRequestHandler<GetPageBySlugQuery, PageDto>
{
    private readonly IPageRepository _pageRepository;
    private readonly IMapper _mapper;

    public GetPageBySlugQueryHandler(IPageRepository pageRepository, IMapper mapper)
    {
        _pageRepository = pageRepository;
        _mapper = mapper;
    }

    public async Task<PageDto> Handle(GetPageBySlugQuery request, CancellationToken cancellationToken)
    {
        var page = await _pageRepository.GetBySlugAsync(request.Slug, cancellationToken);

        if (page == null)
            throw new NotFoundException(nameof(Page), request.Slug);

        return _mapper.Map<PageDto>(page);
    }
}

================
File: src/Portfolio.Application/UseCases/Projects/Commands/CreateProject/CreateProjectCommand.cs
================
using Portfolio.Application.Common.DTOs;
using Portfolio.Application.Common.Interfaces;

namespace Portfolio.Application.UseCases.Projects.Commands.CreateProject;

public record CreateProjectCommand : ICommand<ProjectDto>
{
    public required string Title { get; init; }
    public required string Description { get; init; }
    public string? GithubUrl { get; init; }
    public string? LiveUrl { get; init; }
    public string? ImageUrl { get; init; }
    public IReadOnlyCollection<string> Technologies { get; init; } = Array.Empty<string>();
}

================
File: src/Portfolio.Application/UseCases/Projects/Commands/CreateProject/CreateProjectCommandHandler.cs
================
using AutoMapper;
using MediatR;
using Microsoft.Extensions.Logging;
using Portfolio.Application.Common.DTOs;
using Portfolio.Application.Interfaces.Persistence;
using Portfolio.Domain.Entities;

namespace Portfolio.Application.UseCases.Projects.Commands.CreateProject;

public class CreateProjectCommandHandler : IRequestHandler<CreateProjectCommand, ProjectDto>
{
    private readonly IProjectRepository _projectRepository;
    private readonly IMapper _mapper;
    private readonly ILogger<CreateProjectCommandHandler> _logger;

    public CreateProjectCommandHandler(
        IProjectRepository projectRepository,
        IMapper mapper,
        ILogger<CreateProjectCommandHandler> logger)
    {
        _projectRepository = projectRepository ?? throw new ArgumentNullException(nameof(projectRepository));
        _mapper = mapper ?? throw new ArgumentNullException(nameof(mapper));
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    public async Task<ProjectDto> Handle(CreateProjectCommand request, CancellationToken cancellationToken)
    {
        try
        {
            _logger.LogInformation("Creating new project with title: {Title}", request.Title);

            // Get next vector ID for the project
            var vectorId = await _projectRepository.GetNextVectorIdAsync(cancellationToken);
            _logger.LogDebug("Retrieved next vector ID: {VectorId}", vectorId);

            // Create new project entity
            var project = new Project(
                id: Guid.NewGuid().ToString(),
                title: request.Title,
                description: request.Description,
                link: string.Empty,
                githubUrl: request.GithubUrl,
                liveUrl: request.LiveUrl,
                imageUrl: request.ImageUrl,
                vectorId: vectorId
            );


            foreach (var technology in request.Technologies)
            {
                project.Technologies.Add(technology);
            }

            _logger.LogDebug("Project entity created with ID: {ProjectId}", project.Id);

            // Save to repository
            var createdProject = await _projectRepository.AddAsync(project, cancellationToken);
            _logger.LogInformation("Successfully created project with ID: {ProjectId}", createdProject.Id);

            // Map to DTO and return
            return _mapper.Map<ProjectDto>(createdProject);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error creating project with title: {Title}", request.Title);
            throw;
        }
    }
}

================
File: src/Portfolio.Application/UseCases/Projects/Commands/CreateProject/CreateProjectCommandValidator.cs
================
using FluentValidation;

namespace Portfolio.Application.UseCases.Projects.Commands.CreateProject;

public class CreateProjectCommandValidator : AbstractValidator<CreateProjectCommand>
{
    public CreateProjectCommandValidator()
    {
        RuleFor(x => x.Title)
            .NotEmpty().WithMessage("Title is required")
            .MaximumLength(200).WithMessage("Title cannot be longer than 200 characters");

        RuleFor(x => x.Description)
            .NotEmpty().WithMessage("Description is required")
            .MaximumLength(2000).WithMessage("Description cannot be longer than 2000 characters");

        When(x => !string.IsNullOrEmpty(x.GithubUrl), () =>
        {
            RuleFor(x => x.GithubUrl)
                .Must(url => Uri.TryCreate(url, UriKind.Absolute, out var uriResult) && 
                           (uriResult.Scheme == Uri.UriSchemeHttp || uriResult.Scheme == Uri.UriSchemeHttps))
                .WithMessage("Github URL must be a valid HTTP/HTTPS URL");
        });

        When(x => !string.IsNullOrEmpty(x.LiveUrl), () =>
        {
            RuleFor(x => x.LiveUrl)
                .Must(url => Uri.TryCreate(url, UriKind.Absolute, out var uriResult) && 
                           (uriResult.Scheme == Uri.UriSchemeHttp || uriResult.Scheme == Uri.UriSchemeHttps))
                .WithMessage("Live URL must be a valid HTTP/HTTPS URL");
        });

        When(x => !string.IsNullOrEmpty(x.ImageUrl), () =>
        {
            RuleFor(x => x.ImageUrl)
                .Must(url => Uri.TryCreate(url, UriKind.Absolute, out var uriResult) && 
                           (uriResult.Scheme == Uri.UriSchemeHttp || uriResult.Scheme == Uri.UriSchemeHttps))
                .WithMessage("Image URL must be a valid HTTP/HTTPS URL");
        });

        RuleForEach(x => x.Technologies)
            .NotEmpty().WithMessage("Technology cannot be empty")
            .MaximumLength(50).WithMessage("Technology cannot be longer than 50 characters");
    }
}

================
File: src/Portfolio.Application/UseCases/Projects/Commands/DeleteProject/DeleteProjectCommand.cs
================
using MediatR;
using Portfolio.Application.Common.Interfaces;

namespace Portfolio.Application.UseCases.Projects.Commands.DeleteProject;

/// <summary>
/// Command to delete a project following CQRS pattern
/// </summary>
public record DeleteProjectCommand(string Id) : ICommand<Unit>;

================
File: src/Portfolio.Application/UseCases/Projects/Commands/DeleteProject/DeleteProjectCommandHandler.cs
================
using MediatR;
using Portfolio.Application.Common.Exceptions;
using Portfolio.Application.Common.Interfaces;
using Portfolio.Application.Interfaces.Persistence;

namespace Portfolio.Application.UseCases.Projects.Commands.DeleteProject;

public class DeleteProjectCommandHandler : IRequestHandler<DeleteProjectCommand, Unit>
{
    private readonly IUnitOfWork _unitOfWork;
    private readonly IProjectRepository _projectRepository;

    public DeleteProjectCommandHandler(IUnitOfWork unitOfWork, IProjectRepository projectRepository)
    {
        _unitOfWork = unitOfWork;
        _projectRepository = projectRepository;
    }

    public async Task<Unit> Handle(DeleteProjectCommand request, CancellationToken cancellationToken)
    {
        var project = await _projectRepository.GetByIdAsync(request.Id, cancellationToken)
            ?? throw new NotFoundException("Project", request.Id);

        await _projectRepository.DeleteAsync(request.Id);
        await _unitOfWork.CommitTransactionAsync(cancellationToken);

        return Unit.Value;
    }
}

================
File: src/Portfolio.Application/UseCases/Projects/Commands/UpdateProject/UpdateProjectCommand.cs
================
using MediatR;
using Portfolio.Application.Common.DTOs;

namespace Portfolio.Application.UseCases.Projects.Commands.UpdateProject;

/// <summary>
/// Command to update a project following CQRS pattern and DDD principles
/// </summary>
public record UpdateProjectCommand : IRequest<ProjectDto>
{
    public required string Id { get; init; }
    public required string Title { get; init; }
    public required string Description { get; init; }
    public required string Link { get; init; }
    public string? GithubUrl { get; init; }
    public string? LiveUrl { get; init; }
    public string? ImageUrl { get; init; }
    public bool IsDraft { get; init; }
    public bool IsFeatured { get; init; }
    public IReadOnlyCollection<string> Technologies { get; init; } = Array.Empty<string>();
}

================
File: src/Portfolio.Application/UseCases/Projects/Commands/UpdateProject/UpdateProjectCommandHandler.cs
================
using AutoMapper;
using MediatR;
using Microsoft.Extensions.Logging;
using Portfolio.Application.Common.DTOs;
using Portfolio.Application.Common.Exceptions;
using Portfolio.Application.Interfaces.Persistence;

namespace Portfolio.Application.UseCases.Projects.Commands.UpdateProject;

public class UpdateProjectCommandHandler : IRequestHandler<UpdateProjectCommand, ProjectDto>
{
    private readonly IProjectRepository _projectRepository;
    private readonly IMapper _mapper;
    private readonly ILogger<UpdateProjectCommandHandler> _logger;

    public UpdateProjectCommandHandler(
        IProjectRepository projectRepository,
        IMapper mapper,
        ILogger<UpdateProjectCommandHandler> logger)
    {
        _projectRepository = projectRepository ?? throw new ArgumentNullException(nameof(projectRepository));
        _mapper = mapper ?? throw new ArgumentNullException(nameof(mapper));
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    public async Task<ProjectDto> Handle(UpdateProjectCommand request, CancellationToken cancellationToken)
    {
        try
        {
            _logger.LogInformation("Updating project with ID: {ProjectId}", request.Id);

            var project = await _projectRepository.GetByIdAsync(request.Id, cancellationToken)
                ?? throw new NotFoundException("Project", request.Id);

            // Update project properties - entity handles validation in setters
            project.Title = request.Title;
            project.Description = request.Description;
            project.GithubUrl = request.GithubUrl;
            project.LiveUrl = request.LiveUrl;
            project.IsDraft = !request.IsDraft;
            project.IsFeatured = request.IsFeatured;
            project.Technologies = request.Technologies.ToList();

            _logger.LogDebug("Project entity updated with ID: {ProjectId}", project.Id);

            // Save to repository
            await _projectRepository.UpdateAsync(project, cancellationToken);
            _logger.LogInformation("Successfully updated project with ID: {ProjectId}", project.Id);

            // Map to DTO and return
            return _mapper.Map<ProjectDto>(await _projectRepository.GetByIdAsync(project.Id));
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error updating project with ID: {ProjectId}", request.Id);
            throw;
        }
    }
}

================
File: src/Portfolio.Application/UseCases/Projects/Queries/GetAllProjects/GetAllProjectsQuery.cs
================
using Portfolio.Application.Common.DTOs;
using Portfolio.Application.Common.Interfaces;

namespace Portfolio.Application.UseCases.Projects.Queries.GetAllProjects;

/// <summary>
/// Query to retrieve all projects following CQRS pattern
/// </summary>
public record GetAllProjectsQuery : IQuery<IEnumerable<ProjectDto>>;

================
File: src/Portfolio.Application/UseCases/Projects/Queries/GetAllProjects/GetAllProjectsQueryHandler.cs
================
using AutoMapper;
using MediatR;
using Portfolio.Application.Common.DTOs;
using Portfolio.Application.Interfaces.Persistence;

namespace Portfolio.Application.UseCases.Projects.Queries.GetAllProjects;

public class GetAllProjectsQueryHandler : IRequestHandler<GetAllProjectsQuery, IEnumerable<ProjectDto>>
{
    private readonly IProjectRepository _projectRepository;
    private readonly IMapper _mapper;

    public GetAllProjectsQueryHandler(IProjectRepository projectRepository, IMapper mapper)
    {
        _projectRepository = projectRepository;
        _mapper = mapper;
    }

    public async Task<IEnumerable<ProjectDto>> Handle(GetAllProjectsQuery request, CancellationToken cancellationToken)
    {
        var projects = await _projectRepository.GetAllAsync(cancellationToken);
        return _mapper.Map<IEnumerable<ProjectDto>>(projects);
    }
}

================
File: src/Portfolio.Application/UseCases/Projects/Queries/GetProjectById/GetProjectByIdQuery.cs
================
using Portfolio.Application.Common.DTOs;
using Portfolio.Application.Common.Interfaces;

namespace Portfolio.Application.UseCases.Projects.Queries.GetProjectById;

/// <summary>
/// Query to retrieve a project by its ID following CQRS pattern
/// </summary>
public record GetProjectByIdQuery(string Id) : IQuery<ProjectDto>;

================
File: src/Portfolio.Application/UseCases/Projects/Queries/GetProjectById/GetProjectByIdQueryHandler.cs
================
using AutoMapper;
using MediatR;
using Portfolio.Application.Common.DTOs;
using Portfolio.Application.Common.Exceptions;
using Portfolio.Application.Interfaces.Persistence;

namespace Portfolio.Application.UseCases.Projects.Queries.GetProjectById;

public class GetProjectByIdQueryHandler : IRequestHandler<GetProjectByIdQuery, ProjectDto>
{
    private readonly IProjectRepository _projectRepository;
    private readonly IMapper _mapper;

    public GetProjectByIdQueryHandler(IProjectRepository projectRepository, IMapper mapper)
    {
        _projectRepository = projectRepository;
        _mapper = mapper;
    }

    public async Task<ProjectDto> Handle(GetProjectByIdQuery request, CancellationToken cancellationToken)
    {
        var project = await _projectRepository.GetByIdAsync(request.Id, cancellationToken)
            ?? throw new NotFoundException($"Project", request.Id);

        return _mapper.Map<ProjectDto>(project);
    }
}

================
File: src/Portfolio.Application/UseCases/Projects/Queries/GetProjectByLink/GetProjectByLinkQuery.cs
================
using Portfolio.Application.Common.DTOs;
using Portfolio.Application.Common.Interfaces;

namespace Portfolio.Application.UseCases.Projects.Queries.GetProjectByLink;

public record GetProjectByLinkQuery : IQuery<ProjectDto?>
{
    public required string Link { get; init; }
}

================
File: src/Portfolio.Application/UseCases/Projects/Queries/GetProjectByLink/GetProjectByLinkQueryHandler.cs
================
using AutoMapper;
using MediatR;
using Microsoft.Extensions.Logging;
using Portfolio.Application.Common.DTOs;
using Portfolio.Application.Common.Exceptions;
using Portfolio.Application.Interfaces.Persistence;

namespace Portfolio.Application.UseCases.Projects.Queries.GetProjectByLink;

public class GetProjectByLinkQueryHandler : IRequestHandler<GetProjectByLinkQuery, ProjectDto?>
{
    private readonly IProjectRepository _projectRepository;
    private readonly IMapper _mapper;
    private readonly ILogger<GetProjectByLinkQueryHandler> _logger;

    public GetProjectByLinkQueryHandler(
        IProjectRepository projectRepository,
        IMapper mapper,
        ILogger<GetProjectByLinkQueryHandler> logger)
    {
        _projectRepository = projectRepository ?? throw new ArgumentNullException(nameof(projectRepository));
        _mapper = mapper ?? throw new ArgumentNullException(nameof(mapper));
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    public async Task<ProjectDto?> Handle(GetProjectByLinkQuery request, CancellationToken cancellationToken)
    {
        try
        {
            _logger.LogInformation("Fetching project with link: {Link}", request.Link);

            var project = await _projectRepository.GetByLinkAsync(request.Link, cancellationToken);

            if (project == null)
            {
                _logger.LogWarning("Project with link {Link} not found", request.Link);
                return null;
            }

            _logger.LogDebug("Successfully retrieved project with ID: {ProjectId}", project.Id);
            return _mapper.Map<ProjectDto>(project);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error fetching project with link: {Link}", request.Link);
            throw;
        }
    }
}

================
File: src/Portfolio.Application/UseCases/Users/Commands/CreateUser/CreateUserCommand.cs
================
using Portfolio.Application.Common.DTOs;
using Portfolio.Application.Common.Interfaces;

namespace Portfolio.Application.UseCases.Users.Commands.CreateUser;

public record CreateUserCommand : ICommand<UserDto>
{
    public required string Username { get; init; }
    public required string Email { get; init; }
    public string? DisplayName { get; init; }
    public string? AvatarUrl { get; init; }
    public string? Provider { get; init; }
    public string? ProviderId { get; init; }
    public bool IsAdmin { get; init; }
}

================
File: src/Portfolio.Application/UseCases/Users/Commands/CreateUser/CreateUserCommandHandler.cs
================
using AutoMapper;
using MediatR;
using Microsoft.Extensions.Logging;
using Portfolio.Application.Common.DTOs;
using Portfolio.Application.Interfaces.Persistence;
using Portfolio.Domain.Entities;
using Portfolio.Domain.ValueObjects;

namespace Portfolio.Application.UseCases.Users.Commands.CreateUser;

public class CreateUserCommandHandler : IRequestHandler<CreateUserCommand, UserDto>
{
    private readonly IUserRepository _userRepository;
    private readonly IMapper _mapper;
    private readonly ILogger<CreateUserCommandHandler> _logger;

    public CreateUserCommandHandler(
        IUserRepository userRepository,
        IMapper mapper,
        ILogger<CreateUserCommandHandler> logger)
    {
        _userRepository = userRepository ?? throw new ArgumentNullException(nameof(userRepository));
        _mapper = mapper ?? throw new ArgumentNullException(nameof(mapper));
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    public async Task<UserDto> Handle(CreateUserCommand request, CancellationToken cancellationToken)
    {
        try
        {
            _logger.LogInformation("Creating new user with username: {Username}", request.Username);

            // Create Email value object
            var email = Email.Create(request.Email);
            _logger.LogDebug("Created Email value object for {Email}", request.Email);

            // Create new user entity
            var user = new User(
                id: Guid.NewGuid().ToString(),
                username: request.Username,
                email: email,
                displayName: request.DisplayName,
                avatarUrl: request.AvatarUrl,
                provider: request.Provider,
                providerId: request.ProviderId,
                isAdmin: request.IsAdmin
            );

            _logger.LogDebug("User entity created with ID: {UserId}", user.Id);

            // Save to repository
            var createdUser = await _userRepository.AddAsync(user, cancellationToken);
            _logger.LogInformation("Successfully created user with ID: {UserId}", createdUser.Id);

            // Map to DTO and return
            return _mapper.Map<UserDto>(createdUser);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error creating user with username: {Username}", request.Username);
            throw;
        }
    }
}

================
File: src/Portfolio.Application/UseCases/Users/Commands/CreateUser/CreateUserCommandValidator.cs
================
using FluentValidation;
using Portfolio.Application.Interfaces.Persistence;

namespace Portfolio.Application.UseCases.Users.Commands.CreateUser;

public class CreateUserCommandValidator : AbstractValidator<CreateUserCommand>
{
    private readonly IUserRepository _userRepository;

    public CreateUserCommandValidator(IUserRepository userRepository)
    {
        _userRepository = userRepository ?? throw new ArgumentNullException(nameof(userRepository));

        RuleFor(x => x.Username)
            .NotEmpty().WithMessage("Username is required")
            .MinimumLength(3).WithMessage("Username must be at least 3 characters")
            .MaximumLength(50).WithMessage("Username cannot be longer than 50 characters")
            .MustAsync(async (username, cancellation) => await _userRepository.IsUsernameUniqueAsync(username, cancellation))
            .WithMessage("Username is already taken");

        RuleFor(x => x.Email)
            .NotEmpty().WithMessage("Email is required")
            .EmailAddress().WithMessage("Invalid email format")
            .MustAsync(async (email, cancellation) => await _userRepository.IsEmailUniqueAsync(email, cancellation))
            .WithMessage("Email is already registered");

        When(x => !string.IsNullOrEmpty(x.DisplayName), () =>
        {
            RuleFor(x => x.DisplayName)
                .MaximumLength(100).WithMessage("Display name cannot be longer than 100 characters");
        });

        When(x => !string.IsNullOrEmpty(x.AvatarUrl), () =>
        {
            RuleFor(x => x.AvatarUrl)
                .Must(url => Uri.TryCreate(url, UriKind.Absolute, out var uriResult) && 
                           (uriResult.Scheme == Uri.UriSchemeHttp || uriResult.Scheme == Uri.UriSchemeHttps))
                .WithMessage("Avatar URL must be a valid HTTP/HTTPS URL");
        });

        When(x => !string.IsNullOrEmpty(x.Provider), () =>
        {
            RuleFor(x => x.ProviderId)
                .NotEmpty().WithMessage("Provider ID is required when Provider is specified");
        });
    }
}

================
File: src/Portfolio.Application/UseCases/Users/Commands/DeleteUser/DeleteUserCommand.cs
================
using MediatR;
using Portfolio.Application.Common.Interfaces;

namespace Portfolio.Application.UseCases.Users.Commands.DeleteUser;

/// <summary>
/// Command to delete a user following CQRS pattern
/// </summary>
public record DeleteUserCommand(string Id) : ICommand<Unit>;

================
File: src/Portfolio.Application/UseCases/Users/Commands/DeleteUser/DeleteUserCommandHandler.cs
================
using MediatR;
using Microsoft.Extensions.Logging;
using Portfolio.Application.Common.Exceptions;
using Portfolio.Application.Interfaces.Persistence;

namespace Portfolio.Application.UseCases.Users.Commands.DeleteUser;

public class DeleteUserCommandHandler : IRequestHandler<DeleteUserCommand, Unit>
{
    private readonly IUserRepository _userRepository;
    private readonly ILogger<DeleteUserCommandHandler> _logger;

    public DeleteUserCommandHandler(
        IUserRepository userRepository,
        ILogger<DeleteUserCommandHandler> logger)
    {
        _userRepository = userRepository ?? throw new ArgumentNullException(nameof(userRepository));
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    public async Task<Unit> Handle(DeleteUserCommand request, CancellationToken cancellationToken)
    {
        try
        {
            _logger.LogInformation("Deleting user with ID: {UserId}", request.Id);

            var user = await _userRepository.GetByIdAsync(request.Id, cancellationToken)
                ?? throw new NotFoundException("Use", request.Id);

            await _userRepository.DeleteAsync(request.Id, cancellationToken);
            _logger.LogInformation("Successfully deleted user with ID: {UserId}", request.Id);

            return Unit.Value;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error deleting user with ID: {UserId}", request.Id);
            throw;
        }
    }
}

================
File: src/Portfolio.Application/UseCases/Users/Commands/UpdateUser/UpdateUserCommand.cs
================
using MediatR;
using Portfolio.Application.Common.DTOs;

namespace Portfolio.Application.UseCases.Users.Commands.UpdateUser;

/// <summary>
/// Command to update a user following CQRS pattern and DDD principles
/// </summary>
public record UpdateUserCommand : IRequest<UserDto>
{
    public required string Id { get; init; }
    public required string Username { get; init; }
    public required string Email { get; init; }
    public string? DisplayName { get; init; }
    public string? AvatarUrl { get; init; }
    public bool IsAdmin { get; init; }
}

================
File: src/Portfolio.Application/UseCases/Users/Commands/UpdateUser/UpdateUserCommandHandler.cs
================
using AutoMapper;
using MediatR;
using Microsoft.Extensions.Logging;
using Portfolio.Application.Common.DTOs;
using Portfolio.Application.Common.Exceptions;
using Portfolio.Application.Interfaces.Persistence;
using Portfolio.Domain.ValueObjects;

namespace Portfolio.Application.UseCases.Users.Commands.UpdateUser;

public class UpdateUserCommandHandler : IRequestHandler<UpdateUserCommand, UserDto>
{
    private readonly IUserRepository _userRepository;
    private readonly IMapper _mapper;
    private readonly ILogger<UpdateUserCommandHandler> _logger;

    public UpdateUserCommandHandler(
        IUserRepository userRepository,
        IMapper mapper,
        ILogger<UpdateUserCommandHandler> logger)
    {
        _userRepository = userRepository ?? throw new ArgumentNullException(nameof(userRepository));
        _mapper = mapper ?? throw new ArgumentNullException(nameof(mapper));
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    public async Task<UserDto> Handle(UpdateUserCommand request, CancellationToken cancellationToken)
    {
        try
        {
            _logger.LogInformation("Updating user with ID: {UserId}", request.Id);

            var user = await _userRepository.GetByIdAsync(request.Id, cancellationToken)
                ?? throw new NotFoundException("User", request.Id);

            // Update user properties - entity handles validation in setters
            user.Username = request.Username;
            user.DisplayName = request.DisplayName;
            user.AvatarUrl = request.AvatarUrl;
            user.Email = Email.Create(request.Email);
            user.IsAdmin = request.IsAdmin;

            _logger.LogDebug("User entity updated with ID: {UserId}", user.Id);

            // Save to repository
            await _userRepository.UpdateAsync(user, cancellationToken);
            _logger.LogInformation("Successfully updated user with ID: {UserId}", request.Id);

            // Map to DTO and return
            return _mapper.Map<UserDto>(await _userRepository.GetByIdAsync(request.Id));
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error updating user with ID: {UserId}", request.Id);
            throw;
        }
    }
}

================
File: src/Portfolio.Application/UseCases/Users/Queries/GetAllUsers/GetAllUsersQuery.cs
================
using Portfolio.Application.Common.DTOs;
using Portfolio.Application.Common.Interfaces;

namespace Portfolio.Application.UseCases.Users.Queries.GetAllUsers;

/// <summary>
/// Query to retrieve all users following CQRS pattern
/// </summary>
public record GetAllUsersQuery : IQuery<IEnumerable<UserDto>>;

================
File: src/Portfolio.Application/UseCases/Users/Queries/GetAllUsers/GetAllUsersQueryHandler.cs
================
using AutoMapper;
using MediatR;
using Portfolio.Application.Common.DTOs;
using Portfolio.Application.Common.Interfaces;
using Portfolio.Application.Interfaces.Persistence;

namespace Portfolio.Application.UseCases.Users.Queries.GetAllUsers;

public class GetAllUsersQueryHandler : IRequestHandler<GetAllUsersQuery, IEnumerable<UserDto>>
{
    private readonly IUserRepository _userRepository;
    private readonly IMapper _mapper;

    public GetAllUsersQueryHandler(IUserRepository userRepository, IMapper mapper)
    {
        _userRepository = userRepository;
        _mapper = mapper;
    }

    public async Task<IEnumerable<UserDto>> Handle(GetAllUsersQuery request, CancellationToken cancellationToken)
    {
        var users = await _userRepository.GetAllAsync(cancellationToken);
        return _mapper.Map<IEnumerable<UserDto>>(users);
    }
}

================
File: src/Portfolio.Application/UseCases/Users/Queries/GetUserById/GetUserByIdQuery.cs
================
using Portfolio.Application.Common.DTOs;
using Portfolio.Application.Common.Interfaces;

namespace Portfolio.Application.UseCases.Users.Queries.GetUserById;

/// <summary>
/// Query to retrieve a user by their ID following CQRS pattern
/// </summary>
public record GetUserByIdQuery(string Id) : IQuery<UserDto>;

================
File: src/Portfolio.Application/UseCases/Users/Queries/GetUserById/GetUserByIdQueryHandler.cs
================
using AutoMapper;
using MediatR;
using Portfolio.Application.Common.DTOs;
using Portfolio.Application.Common.Exceptions;
using Portfolio.Application.Interfaces.Persistence;

namespace Portfolio.Application.UseCases.Users.Queries.GetUserById;

public class GetUserByIdQueryHandler : IRequestHandler<GetUserByIdQuery, UserDto>
{
    private readonly IUserRepository _userRepository;
    private readonly IMapper _mapper;

    public GetUserByIdQueryHandler(IUserRepository userRepository, IMapper mapper)
    {
        _userRepository = userRepository;
        _mapper = mapper;
    }

    public async Task<UserDto> Handle(GetUserByIdQuery request, CancellationToken cancellationToken)
    {
        var user = await _userRepository.GetByIdAsync(request.Id, cancellationToken)
            ?? throw new NotFoundException("Project", request.Id);

        return _mapper.Map<UserDto>(user);
    }
}

================
File: src/Portfolio.Application/UseCases/Users/Queries/GetUserByUsername/GetUserByUsernameQuery.cs
================
using Portfolio.Application.Common.DTOs;
using Portfolio.Application.Common.Interfaces;

namespace Portfolio.Application.UseCases.Users.Queries.GetUserByUsername;

public record GetUserByUsernameQuery(string Username) : IQuery<UserDto?>
{
}

================
File: src/Portfolio.Application/UseCases/Users/Queries/GetUserByUsername/GetUserByUsernameQueryHandler.cs
================
using AutoMapper;
using MediatR;
using Portfolio.Application.Common.DTOs;
using Portfolio.Application.Interfaces.Persistence;

namespace Portfolio.Application.UseCases.Users.Queries.GetUserByUsername;

public class GetUserByUsernameQueryHandler : IRequestHandler<GetUserByUsernameQuery, UserDto?>
{
    private readonly IUserRepository _userRepository;
    private readonly IMapper _mapper;

    public GetUserByUsernameQueryHandler(IUserRepository userRepository, IMapper mapper)
    {
        _userRepository = userRepository ?? throw new ArgumentNullException(nameof(userRepository));
        _mapper = mapper ?? throw new ArgumentNullException(nameof(mapper));
    }

    public async Task<UserDto?> Handle(GetUserByUsernameQuery request, CancellationToken cancellationToken)
    {
        var user = await _userRepository.GetByUsernameAsync(request.Username, cancellationToken);
        return user != null ? _mapper.Map<UserDto>(user) : null;
    }
}

================
File: src/Portfolio.Domain/bin/Debug/net8.0/Portfolio.Domain.deps.json
================
{
  "runtimeTarget": {
    "name": ".NETCoreApp,Version=v8.0",
    "signature": ""
  },
  "compilationOptions": {},
  "targets": {
    ".NETCoreApp,Version=v8.0": {
      "Portfolio.Domain/1.0.0": {
        "runtime": {
          "Portfolio.Domain.dll": {}
        }
      }
    }
  },
  "libraries": {
    "Portfolio.Domain/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    }
  }
}

================
File: src/Portfolio.Domain/bin/Debug/net9.0/Portfolio.Domain.deps.json
================
{
  "runtimeTarget": {
    "name": ".NETCoreApp,Version=v9.0",
    "signature": ""
  },
  "compilationOptions": {},
  "targets": {
    ".NETCoreApp,Version=v9.0": {
      "Portfolio.Domain/1.0.0": {
        "runtime": {
          "Portfolio.Domain.dll": {}
        }
      }
    }
  },
  "libraries": {
    "Portfolio.Domain/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    }
  }
}

================
File: src/Portfolio.Domain/Common/DuplicateSlugException.cs
================
namespace Portfolio.Domain.Common;

public class DuplicateSlugException : Exception
{
    public DuplicateSlugException(string message) : base(message)
    {
    }
}

================
File: src/Portfolio.Domain/Common/Entity.cs
================
using System;

namespace Portfolio.Domain.Common;

public abstract class Entity : IEntity
{
    public string Id { get; protected set; }
    public DateTime CreatedAt { get; internal set; }
    public DateTime UpdatedAt { get; internal set; }

    protected Entity()
    {
        Id = Guid.NewGuid().ToString();
        CreatedAt = DateTime.UtcNow;
        UpdatedAt = DateTime.UtcNow;
    }

    protected Entity(string id)
    {
        Id = id;
        CreatedAt = DateTime.UtcNow;
        UpdatedAt = DateTime.UtcNow;
    }

    public void UpdateModifiedDate()
    {
        UpdatedAt = DateTime.UtcNow;
    }
}

================
File: src/Portfolio.Domain/Common/IEntity.cs
================
namespace Portfolio.Domain.Common;

/// <summary>
/// Base interface for all entities in the domain model.
/// Implements DDD principles by ensuring each entity has a unique identifier.
/// </summary>
public interface IEntity
{
    string Id { get; }
}

================
File: src/Portfolio.Domain/Common/IPublishable.cs
================
namespace Portfolio.Domain.Common;

/// <summary>
/// Interface for entities that can be published, following DDD principles.
/// Defines the contract for publishing workflow.
/// </summary>
public interface IPublishable
{
    bool IsDraft { get; }
    bool IsPublished { get; }
    int VectorId { get; }
}

================
File: src/Portfolio.Domain/Common/NotFoundException.cs
================
namespace Portfolio.Domain.Common;

public class NotFoundException : Exception
{
    public string EntityName { get; }
    public object Key { get; }

    public NotFoundException(string message, string entityName, object key)
        : base(message)
    {
        EntityName = entityName;
        Key = key;
    }
}

================
File: src/Portfolio.Domain/Common/PublishableEntity.cs
================
using Portfolio.Domain.Exceptions;

namespace Portfolio.Domain.Common;

/// <summary>
/// Base class for entities that can be published, following DDD principles.
/// Provides common publishing workflow and validation.
/// </summary>
public abstract class PublishableEntity : Entity, IPublishable
{
    public bool IsDraft { get; protected init; }
    public bool IsPublished { get; protected init; }
    public int VectorId { get; protected init; }

    protected PublishableEntity()
    {
        IsDraft = true;
        IsPublished = false;
    }

    protected PublishableEntity(string id) : base(id)
    {
        IsDraft = true;
        IsPublished = false;
    }

    protected virtual void ValidateForPublishing()
    {
        // Base validation, can be overridden by derived classes
    }

    protected void ValidateVectorId(int vectorId)
    {
        if (vectorId <= 0)
            throw new DomainValidationException("Vector ID must be positive");
    }
}

================
File: src/Portfolio.Domain/Common/ValueObject.cs
================
namespace Portfolio.Domain.Common;

public abstract class ValueObject
{
    protected static bool EqualOperator(ValueObject left, ValueObject right)
    {
        if (left is null ^ right is null)
        {
            return false;
        }
        return left?.Equals(right!) != false;
    }

    protected static bool NotEqualOperator(ValueObject left, ValueObject right)
    {
        return !EqualOperator(left, right);
    }

    protected abstract IEnumerable<object> GetEqualityComponents();

    public override bool Equals(object? obj)
    {
        if (obj == null || obj.GetType() != GetType())
        {
            return false;
        }

        var other = (ValueObject)obj;
        return GetEqualityComponents().SequenceEqual(other.GetEqualityComponents());
    }

    public override int GetHashCode()
    {
        return GetEqualityComponents()
            .Select(x => x != null ? x.GetHashCode() : 0)
            .Aggregate((x, y) => x ^ y);
    }
}

================
File: src/Portfolio.Domain/Entities/Blog.cs
================
using Portfolio.Domain.Common;
using Portfolio.Domain.Exceptions;
using Portfolio.Domain.ValueObjects;
using System.Text.RegularExpressions;

namespace Portfolio.Domain.Entities;

public class Blog : PublishableEntity
{
    private string _title = string.Empty;
    private Slug? _slug;
    public string Title 
    { 
        get => _title;
        private init
        {
            if (string.IsNullOrWhiteSpace(value))
                throw new DomainValidationException("Title cannot be empty");
            if (value.Length > 200)
                throw new DomainValidationException("Title cannot be longer than 200 characters");
            _title = value;
            _slug = Slug.Create(value);
        }
    }

    public Slug? Slug{ get =>_slug; }
    public string Excerpt { get; private init; } = string.Empty;
    public string Body { get; private init; } = string.Empty;
    public DateTime? PublishAt { get; private init; }
    public string Link { get; private init; } = string.Empty;
    public List<string> Tags { get; private init; } = new();

    private Blog() { } // For EF Core

    public Blog(
        string title,
        string excerpt,
        string body,
        DateTime? publishAt = null,
        List<string>? tags = null)
    {
        Title = title;
        Excerpt = excerpt;
        Body = body;
        PublishAt = publishAt;
        Link = GenerateLink(title);
        Tags = tags ?? new List<string>();
        ValidateProperties();
    }

    public Blog Update(
        string title,
        string excerpt,
        string body,
        DateTime? publishAt = null,
        List<string>? tags = null,
        bool? isDraft = null,
        bool? isPublished = null)
    {
        ValidateProperties(title, excerpt, body);

        return new Blog
        {
            Id = Id,
            Title = title,
            Excerpt = excerpt,
            Body = body,
            PublishAt = publishAt ?? PublishAt,
            Link = title != Title ? GenerateLink(title) : Link,
            Tags = tags ?? Tags,
            IsDraft = isDraft ?? IsDraft,
            IsPublished = isPublished ?? IsPublished,
            VectorId = VectorId,
            CreatedAt = CreatedAt,
            UpdatedAt = DateTime.UtcNow
        };
    }

    public Blog Publish()
    {
        ValidateForPublishing();

        return new Blog
        {
            Id = Id,
            Title = Title,
            Excerpt = Excerpt,
            Body = Body,
            PublishAt = DateTime.UtcNow,
            Link = Link,
            Tags = Tags,
            IsDraft = false,
            IsPublished = true,
            VectorId = VectorId,
            CreatedAt = CreatedAt,
            UpdatedAt = DateTime.UtcNow
        };
    }

    public Blog Unpublish()
    {
        return new Blog
        {
            Id = Id,
            Title = Title,
            Excerpt = Excerpt,
            Body = Body,
            PublishAt = null,
            Link = Link,
            Tags = Tags,
            IsDraft = true,
            IsPublished = false,
            VectorId = VectorId,
            CreatedAt = CreatedAt,
            UpdatedAt = DateTime.UtcNow
        };
    }

    public Blog SetVectorId(int vectorId)
    {
        ValidateVectorId(vectorId);

        return new Blog
        {
            Id = Id,
            Title = Title,
            Excerpt = Excerpt,
            Body = Body,
            PublishAt = PublishAt,
            Link = Link,
            Tags = Tags,
            IsDraft = IsDraft,
            IsPublished = IsPublished,
            VectorId = vectorId,
            CreatedAt = CreatedAt,
            UpdatedAt = DateTime.UtcNow
        };
    }

    protected override void ValidateForPublishing()
    {
        if (string.IsNullOrWhiteSpace(Excerpt))
            throw new DomainValidationException("Excerpt is required before publishing");
        if (string.IsNullOrWhiteSpace(Body))
            throw new DomainValidationException("Body is required before publishing");
    }

    private void ValidateProperties()
    {
        ValidateProperties(Title, Excerpt, Body);
    }

    private static void ValidateProperties(string title, string excerpt, string body)
    {
        if (string.IsNullOrWhiteSpace(title))
            throw new DomainValidationException("Title cannot be empty");
        if (title.Length > 200)
            throw new DomainValidationException("Title cannot be longer than 200 characters");
        if (excerpt?.Length > 500)
            throw new DomainValidationException("Excerpt cannot be longer than 500 characters");
    }

    private static string GenerateLink(string title)
    {
        var slug = title.ToLowerInvariant();
        // Replace any non-alphanumeric characters with a dash
        slug = Regex.Replace(slug, @"[^a-z0-9]", "-");
        // Remove multiple consecutive dashes
        slug = Regex.Replace(slug, @"-+", "-");
        // Remove leading and trailing dashes
        slug = slug.Trim('-');
        return slug;
    }
}

================
File: src/Portfolio.Domain/Entities/Page.cs
================
using Portfolio.Domain.Common;
using Portfolio.Domain.Exceptions;

namespace Portfolio.Domain.Entities;

public class Page : PublishableEntity
{
    public string Title { get; private init; } = null!;
    public string Slug { get; private init; } = null!;
    public string Content { get; private init; } = null!;
    public string? MetaDescription { get; private init; }
    public List<string> MetaKeywords { get; private init; } = new();
    public string? OpenGraphImage { get; private init; }

    private Page() { } // For EF Core

    public Page(string title, string slug, string content, string? metaDescription = null, List<string>? metaKeywords = null, string? openGraphImage = null)
    {
        Title = title;
        Slug = slug.ToLower().Replace(" ", "-");
        Content = content;
        MetaDescription = metaDescription;
        MetaKeywords = metaKeywords ?? new List<string>();
        OpenGraphImage = openGraphImage;
        ValidateProperties();
    }

    public Page Update(
        string title, 
        string slug, 
        string content, 
        string? metaDescription = null,
        List<string>? metaKeywords = null,
        string? openGraphImage = null,
        bool? isDraft = null,
        bool? isPublished = null)
    {
        ValidateTitle(title);
        ValidateSlug(slug);
        ValidateContent(content);
        ValidateMetadata(metaDescription, metaKeywords, openGraphImage);

        return new Page
        {
            Id = Id,
            Title = title,
            Slug = slug.ToLower().Replace(" ", "-"),
            Content = content,
            MetaDescription = metaDescription ?? MetaDescription,
            MetaKeywords = metaKeywords ?? MetaKeywords,
            OpenGraphImage = openGraphImage ?? OpenGraphImage,
            IsDraft = isDraft ?? IsDraft,
            IsPublished = isPublished ?? IsPublished,
            VectorId = VectorId,
            CreatedAt = CreatedAt,
            UpdatedAt = DateTime.UtcNow
        };
    }

    public Page Publish()
    {
        ValidateForPublishing();

        return new Page
        {
            Id = Id,
            Title = Title,
            Slug = Slug,
            Content = Content,
            MetaDescription = MetaDescription,
            MetaKeywords = MetaKeywords,
            OpenGraphImage = OpenGraphImage,
            IsDraft = false,
            IsPublished = true,
            VectorId = VectorId,
            CreatedAt = CreatedAt,
            UpdatedAt = DateTime.UtcNow
        };
    }

    public Page Unpublish()
    {
        return new Page
        {
            Id = Id,
            Title = Title,
            Slug = Slug,
            Content = Content,
            MetaDescription = MetaDescription,
            MetaKeywords = MetaKeywords,
            OpenGraphImage = OpenGraphImage,
            IsDraft = true,
            IsPublished = false,
            VectorId = VectorId,
            CreatedAt = CreatedAt,
            UpdatedAt = DateTime.UtcNow
        };
    }

    public Page SetVectorId(int vectorId)
    {
        ValidateVectorId(vectorId);

        return new Page
        {
            Id = Id,
            Title = Title,
            Slug = Slug,
            Content = Content,
            MetaDescription = MetaDescription,
            MetaKeywords = MetaKeywords,
            OpenGraphImage = OpenGraphImage,
            IsDraft = IsDraft,
            IsPublished = IsPublished,
            VectorId = vectorId,
            CreatedAt = CreatedAt,
            UpdatedAt = DateTime.UtcNow
        };
    }

    protected override void ValidateForPublishing()
    {
        if (string.IsNullOrEmpty(MetaDescription))
            throw new DomainValidationException("Meta description is required before publishing");
    }

    private void ValidateProperties()
    {
        ValidateTitle(Title);
        ValidateSlug(Slug);
        ValidateContent(Content);
        ValidateMetadata(MetaDescription, MetaKeywords, OpenGraphImage);
    }

    private static void ValidateTitle(string title)
    {
        if (string.IsNullOrWhiteSpace(title))
            throw new DomainValidationException("Title cannot be empty");
        if (title.Length > 200)
            throw new DomainValidationException("Title cannot exceed 200 characters");
    }

    private static void ValidateSlug(string slug)
    {
        if (string.IsNullOrWhiteSpace(slug))
            throw new DomainValidationException("Slug cannot be empty");
        if (slug.Length > 200)
            throw new DomainValidationException("Slug cannot exceed 200 characters");
    }

    private static void ValidateContent(string content)
    {
        if (string.IsNullOrWhiteSpace(content))
            throw new DomainValidationException("Content cannot be empty");
    }

    private static void ValidateMetadata(string? metaDescription, List<string>? metaKeywords, string? openGraphImage)
    {
        if (metaDescription?.Length > 500)
            throw new DomainValidationException("Meta description cannot exceed 500 characters");

        if (openGraphImage?.Length > 500)
            throw new DomainValidationException("Open Graph image URL cannot exceed 500 characters");
    }
}

================
File: src/Portfolio.Domain/Entities/Project.cs
================
using Portfolio.Domain.Common;
using Portfolio.Domain.Exceptions;

namespace Portfolio.Domain.Entities;

/// <summary>
/// Represents a project entity.
/// </summary>
public class Project : Entity
{
    private string _title = string.Empty;
    public string Title 
    { 
        get => _title;
        set
        {
            if (string.IsNullOrWhiteSpace(value))
                throw new DomainValidationException("Title cannot be empty");
            if (value.Length > 200)
                throw new DomainValidationException("Title cannot be longer than 200 characters");
            _title = value;
            UpdatedAt = DateTime.UtcNow;
        }
    }

    private string _link = string.Empty;
    public string Link 
    { 
        get => _link;
        set
        {
            if (string.IsNullOrWhiteSpace(value))
                throw new DomainValidationException("Link cannot be empty");
            if (value.Length > 200)
                throw new DomainValidationException("Link cannot be longer than 200 characters");
            _link = value;
            UpdatedAt = DateTime.UtcNow;
        }
    }

    private string? _githubUrl;
    public string? GithubUrl 
    { 
        get => _githubUrl;
        set
        {
            ValidateUrl(value, nameof(GithubUrl));
            _githubUrl = value;
            UpdatedAt = DateTime.UtcNow;
        }
    }

    private string? _liveUrl;
    public string? LiveUrl 
    { 
        get => _liveUrl;
        set
        {
            ValidateUrl(value, nameof(LiveUrl));
            _liveUrl = value;
            UpdatedAt = DateTime.UtcNow;
        }
    }

    private string? _imageUrl;
    public string? ImageUrl 
    { 
        get => _imageUrl;
        set
        {
            ValidateUrl(value, nameof(ImageUrl));
            _imageUrl = value;
            UpdatedAt = DateTime.UtcNow;
        }
    }

    public string Description { get; set; } = string.Empty;
    public bool IsDraft { get; set; } = true;
    public bool IsFeatured { get; set; }
    public int VectorId { get; set; }
    public List<string> Technologies { get; set; } = new();

    private static void ValidateUrl(string? url, string paramName)
    {
        if (string.IsNullOrWhiteSpace(url))
            return;

        if (!Uri.TryCreate(url, UriKind.Absolute, out var uriResult) || 
            (uriResult.Scheme != Uri.UriSchemeHttp && uriResult.Scheme != Uri.UriSchemeHttps))
        {
            throw new DomainValidationException($"{paramName} must be a valid HTTP/HTTPS URL");
        }
    }

    // For EF Core
    private Project() : base()
    {
        Title = string.Empty;
        Link = string.Empty;
        Technologies = new List<string>();
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="Project"/> class.
    /// </summary>
    public Project(
        string id,
        string title,
        string link,
        string? githubUrl = null,
        string? liveUrl = null,
        string? imageUrl = null,
        bool isDraft = true,
        bool isFeatured = false,
        string description = "",
        int vectorId = 0) : base(id)
    {
        Title = title;
        Link = link;
        GithubUrl = githubUrl;
        LiveUrl = liveUrl;
        ImageUrl = imageUrl;
        IsDraft = isDraft;
        IsFeatured = isFeatured;
        VectorId = vectorId;
        Description = description;
    }
}

================
File: src/Portfolio.Domain/Entities/User.cs
================
using Portfolio.Domain.Common;
using Portfolio.Domain.Exceptions;
using Portfolio.Domain.ValueObjects;

namespace Portfolio.Domain.Entities;

public class User : Entity
{
    private string _username = string.Empty;
    public string Username 
    { 
        get => _username;
        set
        {
            if (string.IsNullOrWhiteSpace(value))
                throw new DomainValidationException("Username cannot be empty");
            if (value.Length < 3)
                throw new DomainValidationException("Username must be at least 3 characters long");
            if (value.Length > 50)
                throw new DomainValidationException("Username cannot be longer than 50 characters");
            if (!System.Text.RegularExpressions.Regex.IsMatch(value, @"^[a-zA-Z0-9._]+$"))
                throw new DomainValidationException("Username can only contain letters, numbers, dots, and underscores");
            _username = value;
            UpdatedAt = DateTime.UtcNow;
        }
    }

    private string? _displayName;
    public string? DisplayName 
    { 
        get => _displayName;
        set
        {
            if (value?.Length > 100)
                throw new DomainValidationException("Display name cannot be longer than 100 characters");
            _displayName = value;
            UpdatedAt = DateTime.UtcNow;
        }
    }

    private string? _avatarUrl;
    public string? AvatarUrl 
    { 
        get => _avatarUrl;
        set
        {
            ValidateUrl(value, nameof(AvatarUrl));
            _avatarUrl = value;
            UpdatedAt = DateTime.UtcNow;
        }
    }

    public Email Email { get; set; }
    public string? Provider { get; set; }
    public string? ProviderId { get; set; }
    public bool IsAdmin { get; set; }

    // For ORM
    private User() : base()
    {
        Email = Email.Create("placeholder@example.com"); // Will be overwritten by ORM
    }

    public User(
        string id,
        string username,
        Email email,
        string? displayName = null,
        string? avatarUrl = null,
        string? provider = null,
        string? providerId = null,
        bool isAdmin = false) : base(id)
    {
        Username = username;
        Email = email;
        DisplayName = displayName;
        AvatarUrl = avatarUrl;
        Provider = provider;
        ProviderId = providerId;
        IsAdmin = isAdmin;
    }

    private static void ValidateUrl(string? url, string paramName)
    {
        if (string.IsNullOrWhiteSpace(url))
            return;

        if (!Uri.TryCreate(url, UriKind.Absolute, out var uriResult) || 
            (uriResult.Scheme != Uri.UriSchemeHttp && uriResult.Scheme != Uri.UriSchemeHttps))
        {
            throw new DomainValidationException($"{paramName} must be a valid HTTP/HTTPS URL");
        }
    }
}

================
File: src/Portfolio.Domain/Exceptions/DomainValidationException.cs
================
namespace Portfolio.Domain.Exceptions;

public class DomainValidationException : Exception
{
    public DomainValidationException()
    {
    }

    public DomainValidationException(string message)
        : base(message)
    {
    }

    public DomainValidationException(string message, Exception innerException)
        : base(message, innerException)
    {
    }
}

================
File: src/Portfolio.Domain/obj/Debug/net8.0/.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
================
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

================
File: src/Portfolio.Domain/obj/Debug/net8.0/Portfolio.Domain.AssemblyInfo.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Portfolio.Domain")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+7c4cf518495f7b4351aa2e0be533baabd5237bff")]
[assembly: System.Reflection.AssemblyProductAttribute("Portfolio.Domain")]
[assembly: System.Reflection.AssemblyTitleAttribute("Portfolio.Domain")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.

================
File: src/Portfolio.Domain/obj/Debug/net8.0/Portfolio.Domain.AssemblyInfoInputs.cache
================
09db4541ebe73cf62c44e4373402fbf6a5d4ac5f74515ec8be68c8d5075f9b84

================
File: src/Portfolio.Domain/obj/Debug/net8.0/Portfolio.Domain.csproj.CoreCompileInputs.cache
================
e60a1b15b175c51bb09332863eb42fc7649e032de8d468b95d79f2c8c2bbe973

================
File: src/Portfolio.Domain/obj/Debug/net8.0/Portfolio.Domain.csproj.FileListAbsolute.txt
================
C:\dev\portfolio\portfolio.net\src\Portfolio.Domain\bin\Debug\net8.0\Portfolio.Domain.deps.json
C:\dev\portfolio\portfolio.net\src\Portfolio.Domain\bin\Debug\net8.0\Portfolio.Domain.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.Domain\bin\Debug\net8.0\Portfolio.Domain.pdb
C:\dev\portfolio\portfolio.net\src\Portfolio.Domain\obj\Debug\net8.0\Portfolio.Domain.GeneratedMSBuildEditorConfig.editorconfig
C:\dev\portfolio\portfolio.net\src\Portfolio.Domain\obj\Debug\net8.0\Portfolio.Domain.AssemblyInfoInputs.cache
C:\dev\portfolio\portfolio.net\src\Portfolio.Domain\obj\Debug\net8.0\Portfolio.Domain.AssemblyInfo.cs
C:\dev\portfolio\portfolio.net\src\Portfolio.Domain\obj\Debug\net8.0\Portfolio.Domain.csproj.CoreCompileInputs.cache
C:\dev\portfolio\portfolio.net\src\Portfolio.Domain\obj\Debug\net8.0\Portfolio.Domain.sourcelink.json
C:\dev\portfolio\portfolio.net\src\Portfolio.Domain\obj\Debug\net8.0\Portfolio.Domain.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.Domain\obj\Debug\net8.0\refint\Portfolio.Domain.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.Domain\obj\Debug\net8.0\Portfolio.Domain.pdb
C:\dev\portfolio\portfolio.net\src\Portfolio.Domain\obj\Debug\net8.0\ref\Portfolio.Domain.dll

================
File: src/Portfolio.Domain/obj/Debug/net8.0/Portfolio.Domain.GeneratedMSBuildEditorConfig.editorconfig
================
is_global = true
build_property.TargetFramework = net8.0
build_property.TargetPlatformMinVersion = 
build_property.UsingMicrosoftNETSdkWeb = 
build_property.ProjectTypeGuids = 
build_property.InvariantGlobalization = 
build_property.PlatformNeutralAssembly = 
build_property.EnforceExtendedAnalyzerRules = 
build_property._SupportedPlatformList = Linux,macOS,Windows
build_property.RootNamespace = Portfolio.Domain
build_property.ProjectDir = c:\dev\portfolio\portfolio.net\src\Portfolio.Domain\
build_property.EnableComHosting = 
build_property.EnableGeneratedComInterfaceComImportInterop = 
build_property.EffectiveAnalysisLevelStyle = 8.0
build_property.EnableCodeStyleSeverity =

================
File: src/Portfolio.Domain/obj/Debug/net8.0/Portfolio.Domain.GlobalUsings.g.cs
================
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

================
File: src/Portfolio.Domain/obj/Debug/net8.0/Portfolio.Domain.sourcelink.json
================
{"documents":{"C:\\dev\\portfolio\\*":"https://raw.githubusercontent.com/michelroberge/portfolio/104d91285c2777489c173d7e92482bc0071a9d92/*"}}

================
File: src/Portfolio.Domain/obj/Debug/net9.0/.NETCoreApp,Version=v9.0.AssemblyAttributes.cs
================
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

================
File: src/Portfolio.Domain/obj/Debug/net9.0/Portfolio.Domain.AssemblyInfo.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Portfolio.Domain")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+a77b8cd723df6507abae37b26ba29d39cca12004")]
[assembly: System.Reflection.AssemblyProductAttribute("Portfolio.Domain")]
[assembly: System.Reflection.AssemblyTitleAttribute("Portfolio.Domain")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.

================
File: src/Portfolio.Domain/obj/Debug/net9.0/Portfolio.Domain.AssemblyInfoInputs.cache
================
e752939de91b495e69276862b8de333de4964f7c3f4c0184f9a22905a74fa797

================
File: src/Portfolio.Domain/obj/Debug/net9.0/Portfolio.Domain.csproj.CoreCompileInputs.cache
================
ca794f0fdc02b10df69c521cdb8e4e1449c7cd238dc33fae25a19c7e7cf7d09e

================
File: src/Portfolio.Domain/obj/Debug/net9.0/Portfolio.Domain.csproj.FileListAbsolute.txt
================
C:\dev\portfolio\portfolio.net\src\Portfolio.Domain\bin\Debug\net9.0\Portfolio.Domain.deps.json
C:\dev\portfolio\portfolio.net\src\Portfolio.Domain\bin\Debug\net9.0\Portfolio.Domain.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.Domain\bin\Debug\net9.0\Portfolio.Domain.pdb
C:\dev\portfolio\portfolio.net\src\Portfolio.Domain\obj\Debug\net9.0\Portfolio.Domain.GeneratedMSBuildEditorConfig.editorconfig
C:\dev\portfolio\portfolio.net\src\Portfolio.Domain\obj\Debug\net9.0\Portfolio.Domain.AssemblyInfoInputs.cache
C:\dev\portfolio\portfolio.net\src\Portfolio.Domain\obj\Debug\net9.0\Portfolio.Domain.AssemblyInfo.cs
C:\dev\portfolio\portfolio.net\src\Portfolio.Domain\obj\Debug\net9.0\Portfolio.Domain.csproj.CoreCompileInputs.cache
C:\dev\portfolio\portfolio.net\src\Portfolio.Domain\obj\Debug\net9.0\Portfolio.Domain.sourcelink.json
C:\dev\portfolio\portfolio.net\src\Portfolio.Domain\obj\Debug\net9.0\Portfolio.Domain.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.Domain\obj\Debug\net9.0\refint\Portfolio.Domain.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.Domain\obj\Debug\net9.0\Portfolio.Domain.pdb
C:\dev\portfolio\portfolio.net\src\Portfolio.Domain\obj\Debug\net9.0\ref\Portfolio.Domain.dll

================
File: src/Portfolio.Domain/obj/Debug/net9.0/Portfolio.Domain.GeneratedMSBuildEditorConfig.editorconfig
================
is_global = true
build_property.TargetFramework = net9.0
build_property.TargetPlatformMinVersion = 
build_property.UsingMicrosoftNETSdkWeb = 
build_property.ProjectTypeGuids = 
build_property.InvariantGlobalization = 
build_property.PlatformNeutralAssembly = 
build_property.EnforceExtendedAnalyzerRules = 
build_property._SupportedPlatformList = Linux,macOS,Windows
build_property.RootNamespace = Portfolio.Domain
build_property.ProjectDir = C:\dev\portfolio\portfolio.net\src\Portfolio.Domain\
build_property.EnableComHosting = 
build_property.EnableGeneratedComInterfaceComImportInterop = 
build_property.EffectiveAnalysisLevelStyle = 9.0
build_property.EnableCodeStyleSeverity =

================
File: src/Portfolio.Domain/obj/Debug/net9.0/Portfolio.Domain.GlobalUsings.g.cs
================
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

================
File: src/Portfolio.Domain/obj/Debug/net9.0/Portfolio.Domain.sourcelink.json
================
{"documents":{"C:\\dev\\portfolio\\*":"https://raw.githubusercontent.com/michelroberge/portfolio/a77b8cd723df6507abae37b26ba29d39cca12004/*"}}

================
File: src/Portfolio.Domain/obj/Portfolio.Domain.csproj.nuget.dgspec.json
================
{
  "format": 1,
  "restore": {
    "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\Portfolio.Domain.csproj": {}
  },
  "projects": {
    "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\Portfolio.Domain.csproj": {
      "version": "1.0.0",
      "restore": {
        "projectUniqueName": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\Portfolio.Domain.csproj",
        "projectName": "Portfolio.Domain",
        "projectPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\Portfolio.Domain.csproj",
        "packagesPath": "C:\\Users\\miche\\.nuget\\packages\\",
        "outputPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\obj\\",
        "projectStyle": "PackageReference",
        "fallbackFolders": [
          "C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\NuGetPackages"
        ],
        "configFilePaths": [
          "C:\\Users\\miche\\AppData\\Roaming\\NuGet\\NuGet.Config",
          "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.FallbackLocation.config",
          "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.Offline.config"
        ],
        "originalTargetFrameworks": [
          "net8.0"
        ],
        "sources": {
          "C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackages\\": {},
          "https://api.nuget.org/v3/index.json": {}
        },
        "frameworks": {
          "net8.0": {
            "targetAlias": "net8.0",
            "projectReferences": {}
          }
        },
        "warningProperties": {
          "warnAsError": [
            "NU1605"
          ]
        },
        "restoreAuditProperties": {
          "enableAudit": "true",
          "auditLevel": "low",
          "auditMode": "direct"
        },
        "SdkAnalysisLevel": "9.0.100"
      },
      "frameworks": {
        "net8.0": {
          "targetAlias": "net8.0",
          "imports": [
            "net461",
            "net462",
            "net47",
            "net471",
            "net472",
            "net48",
            "net481"
          ],
          "assetTargetFallback": true,
          "warn": true,
          "frameworkReferences": {
            "Microsoft.NETCore.App": {
              "privateAssets": "all"
            }
          },
          "runtimeIdentifierGraphPath": "C:\\Program Files\\dotnet\\sdk\\9.0.102/PortableRuntimeIdentifierGraph.json"
        }
      }
    }
  }
}

================
File: src/Portfolio.Domain/obj/Portfolio.Domain.csproj.nuget.g.props
================
<?xml version="1.0" encoding="utf-8" standalone="no"?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup Condition=" '$(ExcludeRestorePackageImports)' != 'true' ">
    <RestoreSuccess Condition=" '$(RestoreSuccess)' == '' ">True</RestoreSuccess>
    <RestoreTool Condition=" '$(RestoreTool)' == '' ">NuGet</RestoreTool>
    <ProjectAssetsFile Condition=" '$(ProjectAssetsFile)' == '' ">$(MSBuildThisFileDirectory)project.assets.json</ProjectAssetsFile>
    <NuGetPackageRoot Condition=" '$(NuGetPackageRoot)' == '' ">$(UserProfile)\.nuget\packages\</NuGetPackageRoot>
    <NuGetPackageFolders Condition=" '$(NuGetPackageFolders)' == '' ">C:\Users\miche\.nuget\packages\;C:\Program Files (x86)\Microsoft Visual Studio\Shared\NuGetPackages</NuGetPackageFolders>
    <NuGetProjectStyle Condition=" '$(NuGetProjectStyle)' == '' ">PackageReference</NuGetProjectStyle>
    <NuGetToolVersion Condition=" '$(NuGetToolVersion)' == '' ">6.12.3</NuGetToolVersion>
  </PropertyGroup>
  <ItemGroup Condition=" '$(ExcludeRestorePackageImports)' != 'true' ">
    <SourceRoot Include="C:\Users\miche\.nuget\packages\" />
    <SourceRoot Include="C:\Program Files (x86)\Microsoft Visual Studio\Shared\NuGetPackages\" />
  </ItemGroup>
</Project>

================
File: src/Portfolio.Domain/obj/Portfolio.Domain.csproj.nuget.g.targets
================
<?xml version="1.0" encoding="utf-8" standalone="no"?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" />

================
File: src/Portfolio.Domain/obj/project.assets.json
================
{
  "version": 3,
  "targets": {
    "net8.0": {}
  },
  "libraries": {},
  "projectFileDependencyGroups": {
    "net8.0": []
  },
  "packageFolders": {
    "C:\\Users\\miche\\.nuget\\packages\\": {},
    "C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\NuGetPackages": {}
  },
  "project": {
    "version": "1.0.0",
    "restore": {
      "projectUniqueName": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\Portfolio.Domain.csproj",
      "projectName": "Portfolio.Domain",
      "projectPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\Portfolio.Domain.csproj",
      "packagesPath": "C:\\Users\\miche\\.nuget\\packages\\",
      "outputPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\obj\\",
      "projectStyle": "PackageReference",
      "fallbackFolders": [
        "C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\NuGetPackages"
      ],
      "configFilePaths": [
        "C:\\Users\\miche\\AppData\\Roaming\\NuGet\\NuGet.Config",
        "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.FallbackLocation.config",
        "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.Offline.config"
      ],
      "originalTargetFrameworks": [
        "net8.0"
      ],
      "sources": {
        "C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackages\\": {},
        "https://api.nuget.org/v3/index.json": {}
      },
      "frameworks": {
        "net8.0": {
          "targetAlias": "net8.0",
          "projectReferences": {}
        }
      },
      "warningProperties": {
        "warnAsError": [
          "NU1605"
        ]
      },
      "restoreAuditProperties": {
        "enableAudit": "true",
        "auditLevel": "low",
        "auditMode": "direct"
      },
      "SdkAnalysisLevel": "9.0.100"
    },
    "frameworks": {
      "net8.0": {
        "targetAlias": "net8.0",
        "imports": [
          "net461",
          "net462",
          "net47",
          "net471",
          "net472",
          "net48",
          "net481"
        ],
        "assetTargetFallback": true,
        "warn": true,
        "frameworkReferences": {
          "Microsoft.NETCore.App": {
            "privateAssets": "all"
          }
        },
        "runtimeIdentifierGraphPath": "C:\\Program Files\\dotnet\\sdk\\9.0.102/PortableRuntimeIdentifierGraph.json"
      }
    }
  }
}

================
File: src/Portfolio.Domain/obj/project.nuget.cache
================
{
  "version": 2,
  "dgSpecHash": "ttyGCQyCcBo=",
  "success": true,
  "projectFilePath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\Portfolio.Domain.csproj",
  "expectedPackageFiles": [],
  "logs": []
}

================
File: src/Portfolio.Domain/Portfolio.Domain.csproj
================
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

</Project>

================
File: src/Portfolio.Domain/ValueObjects/Email.cs
================
using Portfolio.Domain.Common;
using Portfolio.Domain.Exceptions;
using System.Text.RegularExpressions;

namespace Portfolio.Domain.ValueObjects;

public class Email : ValueObject
{
    public string Value { get; }

    private Email(string value)
    {
        Value = value;
    }

    public static Email Create(string email)
    {
        if (string.IsNullOrWhiteSpace(email))
            throw new DomainValidationException("Email cannot be empty");

        email = email.Trim();

        if (email.Length > 256)
            throw new DomainValidationException("Email cannot be longer than 256 characters");

        if (!IsValidEmail(email))
            throw new DomainValidationException("Invalid email format");

        return new Email(email.ToLowerInvariant());
    }

    private static bool IsValidEmail(string email)
    {
        // Basic email validation using regex
        var pattern = @"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$";
        return Regex.IsMatch(email, pattern);
    }

    protected override IEnumerable<object> GetEqualityComponents()
    {
        yield return Value;
    }

    public override string ToString() => Value;
}

================
File: src/Portfolio.Domain/ValueObjects/Slug.cs
================
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using Portfolio.Domain.Common;
using Portfolio.Domain.Exceptions;

namespace Portfolio.Domain.ValueObjects
{
    public class Slug : ValueObject
    {
        public string Value { get; }

        private Slug(string value)
        {
            Value = value;
        }
        public static Slug Create(string title)
        {
            if (string.IsNullOrWhiteSpace(title))
                throw new DomainValidationException("Title cannot be empty");

            title = GenerateSlug(title);

            if (title.Length > 256)
                throw new DomainValidationException("Title cannot be longer than 256 characters");

            return new Slug(title.ToLowerInvariant());
        }

        protected override IEnumerable<object> GetEqualityComponents()
        {
            yield return Value;
        }

        private static string GenerateSlug(string title)
        {
            if (string.IsNullOrWhiteSpace(title))
                return string.Empty;

            // Convert to lower case
            title = title.ToLowerInvariant();

            // Normalize to remove diacritics (accents)
            title = RemoveDiacritics(title);

            // Remove invalid characters
            title = Regex.Replace(title, @"[^a-z0-9\s-]", "");

            // Replace multiple spaces with a single space
            title = Regex.Replace(title, @"\s+", " ").Trim();

            // Replace spaces with dashes
            title = Regex.Replace(title, @"\s", "-");

            return title;
        }

        private static string RemoveDiacritics(string text)
        {
            var normalizedString = text.Normalize(NormalizationForm.FormD);
            var stringBuilder = new StringBuilder();

            foreach (var c in normalizedString)
            {
                var unicodeCategory = CharUnicodeInfo.GetUnicodeCategory(c);
                if (unicodeCategory != UnicodeCategory.NonSpacingMark)
                {
                    stringBuilder.Append(c);
                }
            }

            return stringBuilder.ToString().Normalize(NormalizationForm.FormC);
        }
        public override string ToString() => Value;
    }
}

================
File: src/Portfolio.Infrastructure/bin/Debug/net8.0/Portfolio.Infrastructure.deps.json
================
{
  "runtimeTarget": {
    "name": ".NETCoreApp,Version=v8.0",
    "signature": ""
  },
  "compilationOptions": {},
  "targets": {
    ".NETCoreApp,Version=v8.0": {
      "Portfolio.Infrastructure/1.0.0": {
        "dependencies": {
          "AutoMapper": "13.0.1",
          "MediatR": "12.2.0",
          "Microsoft.EntityFrameworkCore": "8.0.2",
          "Microsoft.EntityFrameworkCore.Design": "8.0.2",
          "Microsoft.EntityFrameworkCore.Tools": "8.0.2",
          "Microsoft.Extensions.Configuration.Abstractions": "8.0.0",
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0",
          "Npgsql.EntityFrameworkCore.PostgreSQL": "8.0.2",
          "Portfolio.Application": "1.0.0"
        },
        "runtime": {
          "Portfolio.Infrastructure.dll": {}
        }
      },
      "AutoMapper/13.0.1": {
        "dependencies": {
          "Microsoft.Extensions.Options": "8.0.0"
        },
        "runtime": {
          "lib/net6.0/AutoMapper.dll": {
            "assemblyVersion": "13.0.0.0",
            "fileVersion": "13.0.1.0"
          }
        }
      },
      "FluentValidation/11.9.0": {
        "runtime": {
          "lib/net8.0/FluentValidation.dll": {
            "assemblyVersion": "11.0.0.0",
            "fileVersion": "11.9.0.0"
          }
        }
      },
      "FluentValidation.DependencyInjectionExtensions/11.9.0": {
        "dependencies": {
          "FluentValidation": "11.9.0",
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0"
        },
        "runtime": {
          "lib/netstandard2.1/FluentValidation.DependencyInjectionExtensions.dll": {
            "assemblyVersion": "11.0.0.0",
            "fileVersion": "11.9.0.0"
          }
        }
      },
      "Humanizer.Core/2.14.1": {
        "runtime": {
          "lib/net6.0/Humanizer.dll": {
            "assemblyVersion": "2.14.0.0",
            "fileVersion": "2.14.1.48190"
          }
        }
      },
      "MediatR/12.2.0": {
        "dependencies": {
          "MediatR.Contracts": "2.0.1",
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0"
        },
        "runtime": {
          "lib/net6.0/MediatR.dll": {
            "assemblyVersion": "12.0.0.0",
            "fileVersion": "12.2.0.0"
          }
        }
      },
      "MediatR.Contracts/2.0.1": {
        "runtime": {
          "lib/netstandard2.0/MediatR.Contracts.dll": {
            "assemblyVersion": "2.0.1.0",
            "fileVersion": "2.0.1.0"
          }
        }
      },
      "Microsoft.Bcl.AsyncInterfaces/6.0.0": {
        "runtime": {
          "lib/netstandard2.1/Microsoft.Bcl.AsyncInterfaces.dll": {
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        }
      },
      "Microsoft.CodeAnalysis.Analyzers/3.3.3": {},
      "Microsoft.CodeAnalysis.Common/4.5.0": {
        "dependencies": {
          "Microsoft.CodeAnalysis.Analyzers": "3.3.3",
          "System.Collections.Immutable": "6.0.0",
          "System.Reflection.Metadata": "6.0.1",
          "System.Runtime.CompilerServices.Unsafe": "6.0.0",
          "System.Text.Encoding.CodePages": "6.0.0"
        },
        "runtime": {
          "lib/netcoreapp3.1/Microsoft.CodeAnalysis.dll": {
            "assemblyVersion": "4.5.0.0",
            "fileVersion": "4.500.23.10905"
          }
        },
        "resources": {
          "lib/netcoreapp3.1/cs/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "cs"
          },
          "lib/netcoreapp3.1/de/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "de"
          },
          "lib/netcoreapp3.1/es/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "es"
          },
          "lib/netcoreapp3.1/fr/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "fr"
          },
          "lib/netcoreapp3.1/it/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "it"
          },
          "lib/netcoreapp3.1/ja/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "ja"
          },
          "lib/netcoreapp3.1/ko/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "ko"
          },
          "lib/netcoreapp3.1/pl/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "pl"
          },
          "lib/netcoreapp3.1/pt-BR/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "pt-BR"
          },
          "lib/netcoreapp3.1/ru/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "ru"
          },
          "lib/netcoreapp3.1/tr/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "tr"
          },
          "lib/netcoreapp3.1/zh-Hans/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "zh-Hans"
          },
          "lib/netcoreapp3.1/zh-Hant/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "zh-Hant"
          }
        }
      },
      "Microsoft.CodeAnalysis.CSharp/4.5.0": {
        "dependencies": {
          "Microsoft.CodeAnalysis.Common": "4.5.0"
        },
        "runtime": {
          "lib/netcoreapp3.1/Microsoft.CodeAnalysis.CSharp.dll": {
            "assemblyVersion": "4.5.0.0",
            "fileVersion": "4.500.23.10905"
          }
        },
        "resources": {
          "lib/netcoreapp3.1/cs/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "cs"
          },
          "lib/netcoreapp3.1/de/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "de"
          },
          "lib/netcoreapp3.1/es/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "es"
          },
          "lib/netcoreapp3.1/fr/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "fr"
          },
          "lib/netcoreapp3.1/it/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "it"
          },
          "lib/netcoreapp3.1/ja/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "ja"
          },
          "lib/netcoreapp3.1/ko/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "ko"
          },
          "lib/netcoreapp3.1/pl/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "pl"
          },
          "lib/netcoreapp3.1/pt-BR/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "pt-BR"
          },
          "lib/netcoreapp3.1/ru/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "ru"
          },
          "lib/netcoreapp3.1/tr/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "tr"
          },
          "lib/netcoreapp3.1/zh-Hans/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "zh-Hans"
          },
          "lib/netcoreapp3.1/zh-Hant/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "zh-Hant"
          }
        }
      },
      "Microsoft.CodeAnalysis.CSharp.Workspaces/4.5.0": {
        "dependencies": {
          "Humanizer.Core": "2.14.1",
          "Microsoft.CodeAnalysis.CSharp": "4.5.0",
          "Microsoft.CodeAnalysis.Common": "4.5.0",
          "Microsoft.CodeAnalysis.Workspaces.Common": "4.5.0"
        },
        "runtime": {
          "lib/netcoreapp3.1/Microsoft.CodeAnalysis.CSharp.Workspaces.dll": {
            "assemblyVersion": "4.5.0.0",
            "fileVersion": "4.500.23.10905"
          }
        },
        "resources": {
          "lib/netcoreapp3.1/cs/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll": {
            "locale": "cs"
          },
          "lib/netcoreapp3.1/de/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll": {
            "locale": "de"
          },
          "lib/netcoreapp3.1/es/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll": {
            "locale": "es"
          },
          "lib/netcoreapp3.1/fr/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll": {
            "locale": "fr"
          },
          "lib/netcoreapp3.1/it/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll": {
            "locale": "it"
          },
          "lib/netcoreapp3.1/ja/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll": {
            "locale": "ja"
          },
          "lib/netcoreapp3.1/ko/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll": {
            "locale": "ko"
          },
          "lib/netcoreapp3.1/pl/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll": {
            "locale": "pl"
          },
          "lib/netcoreapp3.1/pt-BR/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll": {
            "locale": "pt-BR"
          },
          "lib/netcoreapp3.1/ru/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll": {
            "locale": "ru"
          },
          "lib/netcoreapp3.1/tr/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll": {
            "locale": "tr"
          },
          "lib/netcoreapp3.1/zh-Hans/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll": {
            "locale": "zh-Hans"
          },
          "lib/netcoreapp3.1/zh-Hant/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll": {
            "locale": "zh-Hant"
          }
        }
      },
      "Microsoft.CodeAnalysis.Workspaces.Common/4.5.0": {
        "dependencies": {
          "Humanizer.Core": "2.14.1",
          "Microsoft.Bcl.AsyncInterfaces": "6.0.0",
          "Microsoft.CodeAnalysis.Common": "4.5.0",
          "System.Composition": "6.0.0",
          "System.IO.Pipelines": "6.0.3",
          "System.Threading.Channels": "6.0.0"
        },
        "runtime": {
          "lib/netcoreapp3.1/Microsoft.CodeAnalysis.Workspaces.dll": {
            "assemblyVersion": "4.5.0.0",
            "fileVersion": "4.500.23.10905"
          }
        },
        "resources": {
          "lib/netcoreapp3.1/cs/Microsoft.CodeAnalysis.Workspaces.resources.dll": {
            "locale": "cs"
          },
          "lib/netcoreapp3.1/de/Microsoft.CodeAnalysis.Workspaces.resources.dll": {
            "locale": "de"
          },
          "lib/netcoreapp3.1/es/Microsoft.CodeAnalysis.Workspaces.resources.dll": {
            "locale": "es"
          },
          "lib/netcoreapp3.1/fr/Microsoft.CodeAnalysis.Workspaces.resources.dll": {
            "locale": "fr"
          },
          "lib/netcoreapp3.1/it/Microsoft.CodeAnalysis.Workspaces.resources.dll": {
            "locale": "it"
          },
          "lib/netcoreapp3.1/ja/Microsoft.CodeAnalysis.Workspaces.resources.dll": {
            "locale": "ja"
          },
          "lib/netcoreapp3.1/ko/Microsoft.CodeAnalysis.Workspaces.resources.dll": {
            "locale": "ko"
          },
          "lib/netcoreapp3.1/pl/Microsoft.CodeAnalysis.Workspaces.resources.dll": {
            "locale": "pl"
          },
          "lib/netcoreapp3.1/pt-BR/Microsoft.CodeAnalysis.Workspaces.resources.dll": {
            "locale": "pt-BR"
          },
          "lib/netcoreapp3.1/ru/Microsoft.CodeAnalysis.Workspaces.resources.dll": {
            "locale": "ru"
          },
          "lib/netcoreapp3.1/tr/Microsoft.CodeAnalysis.Workspaces.resources.dll": {
            "locale": "tr"
          },
          "lib/netcoreapp3.1/zh-Hans/Microsoft.CodeAnalysis.Workspaces.resources.dll": {
            "locale": "zh-Hans"
          },
          "lib/netcoreapp3.1/zh-Hant/Microsoft.CodeAnalysis.Workspaces.resources.dll": {
            "locale": "zh-Hant"
          }
        }
      },
      "Microsoft.EntityFrameworkCore/8.0.2": {
        "dependencies": {
          "Microsoft.EntityFrameworkCore.Abstractions": "8.0.2",
          "Microsoft.EntityFrameworkCore.Analyzers": "8.0.2",
          "Microsoft.Extensions.Caching.Memory": "8.0.0",
          "Microsoft.Extensions.Logging": "8.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.dll": {
            "assemblyVersion": "8.0.2.0",
            "fileVersion": "8.0.224.6803"
          }
        }
      },
      "Microsoft.EntityFrameworkCore.Abstractions/8.0.2": {
        "runtime": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.Abstractions.dll": {
            "assemblyVersion": "8.0.2.0",
            "fileVersion": "8.0.224.6803"
          }
        }
      },
      "Microsoft.EntityFrameworkCore.Analyzers/8.0.2": {},
      "Microsoft.EntityFrameworkCore.Design/8.0.2": {
        "dependencies": {
          "Humanizer.Core": "2.14.1",
          "Microsoft.CodeAnalysis.CSharp.Workspaces": "4.5.0",
          "Microsoft.EntityFrameworkCore.Relational": "8.0.2",
          "Microsoft.Extensions.DependencyModel": "8.0.0",
          "Mono.TextTemplating": "2.2.1"
        },
        "runtime": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.Design.dll": {
            "assemblyVersion": "8.0.2.0",
            "fileVersion": "8.0.224.6803"
          }
        }
      },
      "Microsoft.EntityFrameworkCore.Relational/8.0.2": {
        "dependencies": {
          "Microsoft.EntityFrameworkCore": "8.0.2",
          "Microsoft.Extensions.Configuration.Abstractions": "8.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.Relational.dll": {
            "assemblyVersion": "8.0.2.0",
            "fileVersion": "8.0.224.6803"
          }
        }
      },
      "Microsoft.EntityFrameworkCore.Tools/8.0.2": {
        "dependencies": {
          "Microsoft.EntityFrameworkCore.Design": "8.0.2"
        }
      },
      "Microsoft.Extensions.Caching.Abstractions/8.0.0": {
        "dependencies": {
          "Microsoft.Extensions.Primitives": "8.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Caching.Abstractions.dll": {
            "assemblyVersion": "8.0.0.0",
            "fileVersion": "8.0.23.53103"
          }
        }
      },
      "Microsoft.Extensions.Caching.Memory/8.0.0": {
        "dependencies": {
          "Microsoft.Extensions.Caching.Abstractions": "8.0.0",
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0",
          "Microsoft.Extensions.Logging.Abstractions": "8.0.0",
          "Microsoft.Extensions.Options": "8.0.0",
          "Microsoft.Extensions.Primitives": "8.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Caching.Memory.dll": {
            "assemblyVersion": "8.0.0.0",
            "fileVersion": "8.0.23.53103"
          }
        }
      },
      "Microsoft.Extensions.Configuration.Abstractions/8.0.0": {
        "dependencies": {
          "Microsoft.Extensions.Primitives": "8.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Configuration.Abstractions.dll": {
            "assemblyVersion": "8.0.0.0",
            "fileVersion": "8.0.23.53103"
          }
        }
      },
      "Microsoft.Extensions.DependencyInjection/8.0.0": {
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.DependencyInjection.dll": {
            "assemblyVersion": "8.0.0.0",
            "fileVersion": "8.0.23.53103"
          }
        }
      },
      "Microsoft.Extensions.DependencyInjection.Abstractions/8.0.0": {
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.DependencyInjection.Abstractions.dll": {
            "assemblyVersion": "8.0.0.0",
            "fileVersion": "8.0.23.53103"
          }
        }
      },
      "Microsoft.Extensions.DependencyModel/8.0.0": {
        "dependencies": {
          "System.Text.Encodings.Web": "8.0.0",
          "System.Text.Json": "8.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.DependencyModel.dll": {
            "assemblyVersion": "8.0.0.0",
            "fileVersion": "8.0.23.53103"
          }
        }
      },
      "Microsoft.Extensions.Logging/8.0.0": {
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection": "8.0.0",
          "Microsoft.Extensions.Logging.Abstractions": "8.0.0",
          "Microsoft.Extensions.Options": "8.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Logging.dll": {
            "assemblyVersion": "8.0.0.0",
            "fileVersion": "8.0.23.53103"
          }
        }
      },
      "Microsoft.Extensions.Logging.Abstractions/8.0.0": {
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Logging.Abstractions.dll": {
            "assemblyVersion": "8.0.0.0",
            "fileVersion": "8.0.23.53103"
          }
        }
      },
      "Microsoft.Extensions.Options/8.0.0": {
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0",
          "Microsoft.Extensions.Primitives": "8.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Options.dll": {
            "assemblyVersion": "8.0.0.0",
            "fileVersion": "8.0.23.53103"
          }
        }
      },
      "Microsoft.Extensions.Primitives/8.0.0": {
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Primitives.dll": {
            "assemblyVersion": "8.0.0.0",
            "fileVersion": "8.0.23.53103"
          }
        }
      },
      "Mono.TextTemplating/2.2.1": {
        "dependencies": {
          "System.CodeDom": "4.4.0"
        },
        "runtime": {
          "lib/netstandard2.0/Mono.TextTemplating.dll": {
            "assemblyVersion": "2.2.0.0",
            "fileVersion": "2.2.1.1"
          }
        }
      },
      "Npgsql/8.0.2": {
        "dependencies": {
          "Microsoft.Extensions.Logging.Abstractions": "8.0.0"
        },
        "runtime": {
          "lib/net8.0/Npgsql.dll": {
            "assemblyVersion": "8.0.2.0",
            "fileVersion": "8.0.2.0"
          }
        }
      },
      "Npgsql.EntityFrameworkCore.PostgreSQL/8.0.2": {
        "dependencies": {
          "Microsoft.EntityFrameworkCore": "8.0.2",
          "Microsoft.EntityFrameworkCore.Abstractions": "8.0.2",
          "Microsoft.EntityFrameworkCore.Relational": "8.0.2",
          "Npgsql": "8.0.2"
        },
        "runtime": {
          "lib/net8.0/Npgsql.EntityFrameworkCore.PostgreSQL.dll": {
            "assemblyVersion": "8.0.2.0",
            "fileVersion": "8.0.2.0"
          }
        }
      },
      "System.CodeDom/4.4.0": {
        "runtime": {
          "lib/netstandard2.0/System.CodeDom.dll": {
            "assemblyVersion": "4.0.0.0",
            "fileVersion": "4.6.25519.3"
          }
        }
      },
      "System.Collections.Immutable/6.0.0": {
        "dependencies": {
          "System.Runtime.CompilerServices.Unsafe": "6.0.0"
        }
      },
      "System.Composition/6.0.0": {
        "dependencies": {
          "System.Composition.AttributedModel": "6.0.0",
          "System.Composition.Convention": "6.0.0",
          "System.Composition.Hosting": "6.0.0",
          "System.Composition.Runtime": "6.0.0",
          "System.Composition.TypedParts": "6.0.0"
        }
      },
      "System.Composition.AttributedModel/6.0.0": {
        "runtime": {
          "lib/net6.0/System.Composition.AttributedModel.dll": {
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        }
      },
      "System.Composition.Convention/6.0.0": {
        "dependencies": {
          "System.Composition.AttributedModel": "6.0.0"
        },
        "runtime": {
          "lib/net6.0/System.Composition.Convention.dll": {
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        }
      },
      "System.Composition.Hosting/6.0.0": {
        "dependencies": {
          "System.Composition.Runtime": "6.0.0"
        },
        "runtime": {
          "lib/net6.0/System.Composition.Hosting.dll": {
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        }
      },
      "System.Composition.Runtime/6.0.0": {
        "runtime": {
          "lib/net6.0/System.Composition.Runtime.dll": {
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        }
      },
      "System.Composition.TypedParts/6.0.0": {
        "dependencies": {
          "System.Composition.AttributedModel": "6.0.0",
          "System.Composition.Hosting": "6.0.0",
          "System.Composition.Runtime": "6.0.0"
        },
        "runtime": {
          "lib/net6.0/System.Composition.TypedParts.dll": {
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        }
      },
      "System.IO.Pipelines/6.0.3": {
        "runtime": {
          "lib/net6.0/System.IO.Pipelines.dll": {
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.522.21309"
          }
        }
      },
      "System.Reflection.Metadata/6.0.1": {
        "dependencies": {
          "System.Collections.Immutable": "6.0.0"
        }
      },
      "System.Runtime.CompilerServices.Unsafe/6.0.0": {},
      "System.Text.Encoding.CodePages/6.0.0": {
        "dependencies": {
          "System.Runtime.CompilerServices.Unsafe": "6.0.0"
        }
      },
      "System.Text.Encodings.Web/8.0.0": {},
      "System.Text.Json/8.0.0": {
        "dependencies": {
          "System.Text.Encodings.Web": "8.0.0"
        }
      },
      "System.Threading.Channels/6.0.0": {},
      "Portfolio.Application/1.0.0": {
        "dependencies": {
          "AutoMapper": "13.0.1",
          "FluentValidation": "11.9.0",
          "FluentValidation.DependencyInjectionExtensions": "11.9.0",
          "MediatR": "12.2.0",
          "Microsoft.Extensions.Logging.Abstractions": "8.0.0",
          "Portfolio.Domain": "1.0.0"
        },
        "runtime": {
          "Portfolio.Application.dll": {
            "assemblyVersion": "1.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      },
      "Portfolio.Domain/1.0.0": {
        "runtime": {
          "Portfolio.Domain.dll": {
            "assemblyVersion": "1.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      }
    }
  },
  "libraries": {
    "Portfolio.Infrastructure/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "AutoMapper/13.0.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-/Fx1SbJ16qS7dU4i604Sle+U9VLX+WSNVJggk6MupKVkYvvBm4XqYaeFuf67diHefHKHs50uQIS2YEDFhPCakQ==",
      "path": "automapper/13.0.1",
      "hashPath": "automapper.13.0.1.nupkg.sha512"
    },
    "FluentValidation/11.9.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-VneVlTvwYDkfHV5av3QrQ0amALgrLX6LV94wlYyEsh0B/klJBW7C8y2eAtj5tOZ3jH6CAVpr4s1ZGgew/QWyig==",
      "path": "fluentvalidation/11.9.0",
      "hashPath": "fluentvalidation.11.9.0.nupkg.sha512"
    },
    "FluentValidation.DependencyInjectionExtensions/11.9.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-Ko++xvN7HUf4WlHJL6bhsybUj/uho8ApOYIdxGjpF8Ot7Fukz6LRfRJ06H0KXhWqmMHWEbu89hJbjKJHtg7b9g==",
      "path": "fluentvalidation.dependencyinjectionextensions/11.9.0",
      "hashPath": "fluentvalidation.dependencyinjectionextensions.11.9.0.nupkg.sha512"
    },
    "Humanizer.Core/2.14.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-lQKvtaTDOXnoVJ20ibTuSIOf2i0uO0MPbDhd1jm238I+U/2ZnRENj0cktKZhtchBMtCUSRQ5v4xBCUbKNmyVMw==",
      "path": "humanizer.core/2.14.1",
      "hashPath": "humanizer.core.2.14.1.nupkg.sha512"
    },
    "MediatR/12.2.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-8TUFrHapKi6D74PhnSNEguRsH91HNGyP3R4ZQdgDorJgl9Wac5Prh0vA33QfrniAaS6L2xNNhc6vxzg+5AIbwA==",
      "path": "mediatr/12.2.0",
      "hashPath": "mediatr.12.2.0.nupkg.sha512"
    },
    "MediatR.Contracts/2.0.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-FYv95bNT4UwcNA+G/J1oX5OpRiSUxteXaUt2BJbRSdRNiIUNbggJF69wy6mnk2wYToaanpdXZdCwVylt96MpwQ==",
      "path": "mediatr.contracts/2.0.1",
      "hashPath": "mediatr.contracts.2.0.1.nupkg.sha512"
    },
    "Microsoft.Bcl.AsyncInterfaces/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-UcSjPsst+DfAdJGVDsu346FX0ci0ah+lw3WRtn18NUwEqRt70HaOQ7lI72vy3+1LxtqI3T5GWwV39rQSrCzAeg==",
      "path": "microsoft.bcl.asyncinterfaces/6.0.0",
      "hashPath": "microsoft.bcl.asyncinterfaces.6.0.0.nupkg.sha512"
    },
    "Microsoft.CodeAnalysis.Analyzers/3.3.3": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-j/rOZtLMVJjrfLRlAMckJLPW/1rze9MT1yfWqSIbUPGRu1m1P0fuo9PmqapwsmePfGB5PJrudQLvmUOAMF0DqQ==",
      "path": "microsoft.codeanalysis.analyzers/3.3.3",
      "hashPath": "microsoft.codeanalysis.analyzers.3.3.3.nupkg.sha512"
    },
    "Microsoft.CodeAnalysis.Common/4.5.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-lwAbIZNdnY0SUNoDmZHkVUwLO8UyNnyyh1t/4XsbFxi4Ounb3xszIYZaWhyj5ZjyfcwqwmtMbE7fUTVCqQEIdQ==",
      "path": "microsoft.codeanalysis.common/4.5.0",
      "hashPath": "microsoft.codeanalysis.common.4.5.0.nupkg.sha512"
    },
    "Microsoft.CodeAnalysis.CSharp/4.5.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-cM59oMKAOxvdv76bdmaKPy5hfj+oR+zxikWoueEB7CwTko7mt9sVKZI8Qxlov0C/LuKEG+WQwifepqL3vuTiBQ==",
      "path": "microsoft.codeanalysis.csharp/4.5.0",
      "hashPath": "microsoft.codeanalysis.csharp.4.5.0.nupkg.sha512"
    },
    "Microsoft.CodeAnalysis.CSharp.Workspaces/4.5.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-h74wTpmGOp4yS4hj+EvNzEiPgg/KVs2wmSfTZ81upJZOtPkJsVkgfsgtxxqmAeapjT/vLKfmYV0bS8n5MNVP+g==",
      "path": "microsoft.codeanalysis.csharp.workspaces/4.5.0",
      "hashPath": "microsoft.codeanalysis.csharp.workspaces.4.5.0.nupkg.sha512"
    },
    "Microsoft.CodeAnalysis.Workspaces.Common/4.5.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-l4dDRmGELXG72XZaonnOeORyD/T5RpEu5LGHOUIhnv+MmUWDY/m1kWXGwtcgQ5CJ5ynkFiRnIYzTKXYjUs7rbw==",
      "path": "microsoft.codeanalysis.workspaces.common/4.5.0",
      "hashPath": "microsoft.codeanalysis.workspaces.common.4.5.0.nupkg.sha512"
    },
    "Microsoft.EntityFrameworkCore/8.0.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-6QlvBx4rdawW3AkkCsGVV+8qRLk34aknV5JD40s1hbVR18vKmT2KDl2DW83nHcPX7f4oebQ3BD1UMNCI/gkE0g==",
      "path": "microsoft.entityframeworkcore/8.0.2",
      "hashPath": "microsoft.entityframeworkcore.8.0.2.nupkg.sha512"
    },
    "Microsoft.EntityFrameworkCore.Abstractions/8.0.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-DjDKp++BTKFZmX+xLTow7grQTY+pImKfhGW68Zf8myiL3zyJ3b8RZbnLsWGNCqKQIF6hJIz/zA/zmERobFwV0A==",
      "path": "microsoft.entityframeworkcore.abstractions/8.0.2",
      "hashPath": "microsoft.entityframeworkcore.abstractions.8.0.2.nupkg.sha512"
    },
    "Microsoft.EntityFrameworkCore.Analyzers/8.0.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-LI7awhc0fiAKvcUemsqxXUWqzAH9ywTSyM1rpC1un4p5SE1bhr5nRLvyRVbKRzKakmnNNY3to8NPDnoySEkxVw==",
      "path": "microsoft.entityframeworkcore.analyzers/8.0.2",
      "hashPath": "microsoft.entityframeworkcore.analyzers.8.0.2.nupkg.sha512"
    },
    "Microsoft.EntityFrameworkCore.Design/8.0.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-lpSEopadyq4VjgErVbKXznlzmrdR+1zG4jjJlumgnDTz6Ov60qZkBn8uTfPYk0PUZ3wn+GNFOi3ouSTK4JKEIA==",
      "path": "microsoft.entityframeworkcore.design/8.0.2",
      "hashPath": "microsoft.entityframeworkcore.design.8.0.2.nupkg.sha512"
    },
    "Microsoft.EntityFrameworkCore.Relational/8.0.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-NoGfcq2OPw0z8XAPf74YFwGlTKjedWdsIEJqq4SvKcPjcu+B+/XDDNrDRxTvILfz4Ug8POSF49s1jz1JvUqTAg==",
      "path": "microsoft.entityframeworkcore.relational/8.0.2",
      "hashPath": "microsoft.entityframeworkcore.relational.8.0.2.nupkg.sha512"
    },
    "Microsoft.EntityFrameworkCore.Tools/8.0.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-PWy3X3Z1fnWlbU6pQMSnBvMwqERoKsriJ688TMl1xT2NyqcSk6/dX22eI5eV+qYXYmYna72Dq2u0P8tNZ6AYtg==",
      "path": "microsoft.entityframeworkcore.tools/8.0.2",
      "hashPath": "microsoft.entityframeworkcore.tools.8.0.2.nupkg.sha512"
    },
    "Microsoft.Extensions.Caching.Abstractions/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-3KuSxeHoNYdxVYfg2IRZCThcrlJ1XJqIXkAWikCsbm5C/bCjv7G0WoKDyuR98Q+T607QT2Zl5GsbGRkENcV2yQ==",
      "path": "microsoft.extensions.caching.abstractions/8.0.0",
      "hashPath": "microsoft.extensions.caching.abstractions.8.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Caching.Memory/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-7pqivmrZDzo1ADPkRwjy+8jtRKWRCPag9qPI+p7sgu7Q4QreWhcvbiWXsbhP+yY8XSiDvZpu2/LWdBv7PnmOpQ==",
      "path": "microsoft.extensions.caching.memory/8.0.0",
      "hashPath": "microsoft.extensions.caching.memory.8.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Configuration.Abstractions/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-3lE/iLSutpgX1CC0NOW70FJoGARRHbyKmG7dc0klnUZ9Dd9hS6N/POPWhKhMLCEuNN5nXEY5agmlFtH562vqhQ==",
      "path": "microsoft.extensions.configuration.abstractions/8.0.0",
      "hashPath": "microsoft.extensions.configuration.abstractions.8.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.DependencyInjection/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-V8S3bsm50ig6JSyrbcJJ8bW2b9QLGouz+G1miK3UTaOWmMtFwNNNzUf4AleyDWUmTrWMLNnFSLEQtxmxgNQnNQ==",
      "path": "microsoft.extensions.dependencyinjection/8.0.0",
      "hashPath": "microsoft.extensions.dependencyinjection.8.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.DependencyInjection.Abstractions/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-cjWrLkJXK0rs4zofsK4bSdg+jhDLTaxrkXu4gS6Y7MAlCvRyNNgwY/lJi5RDlQOnSZweHqoyvgvbdvQsRIW+hg==",
      "path": "microsoft.extensions.dependencyinjection.abstractions/8.0.0",
      "hashPath": "microsoft.extensions.dependencyinjection.abstractions.8.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.DependencyModel/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-NSmDw3K0ozNDgShSIpsZcbFIzBX4w28nDag+TfaQujkXGazBm+lid5onlWoCBy4VsLxqnnKjEBbGSJVWJMf43g==",
      "path": "microsoft.extensions.dependencymodel/8.0.0",
      "hashPath": "microsoft.extensions.dependencymodel.8.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Logging/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-tvRkov9tAJ3xP51LCv3FJ2zINmv1P8Hi8lhhtcKGqM+ImiTCC84uOPEI4z8Cdq2C3o9e+Aa0Gw0rmrsJD77W+w==",
      "path": "microsoft.extensions.logging/8.0.0",
      "hashPath": "microsoft.extensions.logging.8.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Logging.Abstractions/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-arDBqTgFCyS0EvRV7O3MZturChstm50OJ0y9bDJvAcmEPJm0FFpFyjU/JLYyStNGGey081DvnQYlncNX5SJJGA==",
      "path": "microsoft.extensions.logging.abstractions/8.0.0",
      "hashPath": "microsoft.extensions.logging.abstractions.8.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Options/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-JOVOfqpnqlVLUzINQ2fox8evY2SKLYJ3BV8QDe/Jyp21u1T7r45x/R/5QdteURMR5r01GxeJSBBUOCOyaNXA3g==",
      "path": "microsoft.extensions.options/8.0.0",
      "hashPath": "microsoft.extensions.options.8.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Primitives/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-bXJEZrW9ny8vjMF1JV253WeLhpEVzFo1lyaZu1vQ4ZxWUlVvknZ/+ftFgVheLubb4eZPSwwxBeqS1JkCOjxd8g==",
      "path": "microsoft.extensions.primitives/8.0.0",
      "hashPath": "microsoft.extensions.primitives.8.0.0.nupkg.sha512"
    },
    "Mono.TextTemplating/2.2.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-KZYeKBET/2Z0gY1WlTAK7+RHTl7GSbtvTLDXEZZojUdAPqpQNDL6tHv7VUpqfX5VEOh+uRGKaZXkuD253nEOBQ==",
      "path": "mono.texttemplating/2.2.1",
      "hashPath": "mono.texttemplating.2.2.1.nupkg.sha512"
    },
    "Npgsql/8.0.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-MuJzLoWCaQhQAR3oh66YR0Ir6mxuezncGX3f8wxvAc21g0+9HICktJQlqMoODhxztZKXE5k9GxRxqUAN+vPb4g==",
      "path": "npgsql/8.0.2",
      "hashPath": "npgsql.8.0.2.nupkg.sha512"
    },
    "Npgsql.EntityFrameworkCore.PostgreSQL/8.0.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-eoZPynwkZTWFTgnocvXORuCL2yFZtscrUdqVhjxiRULpC7BMg9zhLM5oDZAU5PoX1PgN77hmkKE4a3PQiHqh7Q==",
      "path": "npgsql.entityframeworkcore.postgresql/8.0.2",
      "hashPath": "npgsql.entityframeworkcore.postgresql.8.0.2.nupkg.sha512"
    },
    "System.CodeDom/4.4.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-2sCCb7doXEwtYAbqzbF/8UAeDRMNmPaQbU2q50Psg1J9KzumyVVCgKQY8s53WIPTufNT0DpSe9QRvVjOzfDWBA==",
      "path": "system.codedom/4.4.0",
      "hashPath": "system.codedom.4.4.0.nupkg.sha512"
    },
    "System.Collections.Immutable/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-l4zZJ1WU2hqpQQHXz1rvC3etVZN+2DLmQMO79FhOTZHMn8tDRr+WU287sbomD0BETlmKDn0ygUgVy9k5xkkJdA==",
      "path": "system.collections.immutable/6.0.0",
      "hashPath": "system.collections.immutable.6.0.0.nupkg.sha512"
    },
    "System.Composition/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-d7wMuKQtfsxUa7S13tITC8n1cQzewuhD5iDjZtK2prwFfKVzdYtgrTHgjaV03Zq7feGQ5gkP85tJJntXwInsJA==",
      "path": "system.composition/6.0.0",
      "hashPath": "system.composition.6.0.0.nupkg.sha512"
    },
    "System.Composition.AttributedModel/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-WK1nSDLByK/4VoC7fkNiFuTVEiperuCN/Hyn+VN30R+W2ijO1d0Z2Qm0ScEl9xkSn1G2MyapJi8xpf4R8WRa/w==",
      "path": "system.composition.attributedmodel/6.0.0",
      "hashPath": "system.composition.attributedmodel.6.0.0.nupkg.sha512"
    },
    "System.Composition.Convention/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-XYi4lPRdu5bM4JVJ3/UIHAiG6V6lWWUlkhB9ab4IOq0FrRsp0F4wTyV4Dj+Ds+efoXJ3qbLqlvaUozDO7OLeXA==",
      "path": "system.composition.convention/6.0.0",
      "hashPath": "system.composition.convention.6.0.0.nupkg.sha512"
    },
    "System.Composition.Hosting/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-w/wXjj7kvxuHPLdzZ0PAUt++qJl03t7lENmb2Oev0n3zbxyNULbWBlnd5J5WUMMv15kg5o+/TCZFb6lSwfaUUQ==",
      "path": "system.composition.hosting/6.0.0",
      "hashPath": "system.composition.hosting.6.0.0.nupkg.sha512"
    },
    "System.Composition.Runtime/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-qkRH/YBaMPTnzxrS5RDk1juvqed4A6HOD/CwRcDGyPpYps1J27waBddiiq1y93jk2ZZ9wuA/kynM+NO0kb3PKg==",
      "path": "system.composition.runtime/6.0.0",
      "hashPath": "system.composition.runtime.6.0.0.nupkg.sha512"
    },
    "System.Composition.TypedParts/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-iUR1eHrL8Cwd82neQCJ00MpwNIBs4NZgXzrPqx8NJf/k4+mwBO0XCRmHYJT4OLSwDDqh5nBLJWkz5cROnrGhRA==",
      "path": "system.composition.typedparts/6.0.0",
      "hashPath": "system.composition.typedparts.6.0.0.nupkg.sha512"
    },
    "System.IO.Pipelines/6.0.3": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-ryTgF+iFkpGZY1vRQhfCzX0xTdlV3pyaTTqRu2ETbEv+HlV7O6y7hyQURnghNIXvctl5DuZ//Dpks6HdL/Txgw==",
      "path": "system.io.pipelines/6.0.3",
      "hashPath": "system.io.pipelines.6.0.3.nupkg.sha512"
    },
    "System.Reflection.Metadata/6.0.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-III/lNMSn0ZRBuM9m5Cgbiho5j81u0FAEagFX5ta2DKbljZ3T0IpD8j+BIiHQPeKqJppWS9bGEp6JnKnWKze0g==",
      "path": "system.reflection.metadata/6.0.1",
      "hashPath": "system.reflection.metadata.6.0.1.nupkg.sha512"
    },
    "System.Runtime.CompilerServices.Unsafe/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-/iUeP3tq1S0XdNNoMz5C9twLSrM/TH+qElHkXWaPvuNOt+99G75NrV0OS2EqHx5wMN7popYjpc8oTjC1y16DLg==",
      "path": "system.runtime.compilerservices.unsafe/6.0.0",
      "hashPath": "system.runtime.compilerservices.unsafe.6.0.0.nupkg.sha512"
    },
    "System.Text.Encoding.CodePages/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-ZFCILZuOvtKPauZ/j/swhvw68ZRi9ATCfvGbk1QfydmcXBkIWecWKn/250UH7rahZ5OoDBaiAudJtPvLwzw85A==",
      "path": "system.text.encoding.codepages/6.0.0",
      "hashPath": "system.text.encoding.codepages.6.0.0.nupkg.sha512"
    },
    "System.Text.Encodings.Web/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-yev/k9GHAEGx2Rg3/tU6MQh4HGBXJs70y7j1LaM1i/ER9po+6nnQ6RRqTJn1E7Xu0fbIFK80Nh5EoODxrbxwBQ==",
      "path": "system.text.encodings.web/8.0.0",
      "hashPath": "system.text.encodings.web.8.0.0.nupkg.sha512"
    },
    "System.Text.Json/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-OdrZO2WjkiEG6ajEFRABTRCi/wuXQPxeV6g8xvUJqdxMvvuCCEk86zPla8UiIQJz3durtUEbNyY/3lIhS0yZvQ==",
      "path": "system.text.json/8.0.0",
      "hashPath": "system.text.json.8.0.0.nupkg.sha512"
    },
    "System.Threading.Channels/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-TY8/9+tI0mNaUMgntOxxaq2ndTkdXqLSxvPmas7XEqOlv9lQtB7wLjYGd756lOaO7Dvb5r/WXhluM+0Xe87v5Q==",
      "path": "system.threading.channels/6.0.0",
      "hashPath": "system.threading.channels.6.0.0.nupkg.sha512"
    },
    "Portfolio.Application/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "Portfolio.Domain/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    }
  }
}

================
File: src/Portfolio.Infrastructure/bin/Debug/net8.0/Portfolio.Infrastructure.runtimeconfig.json
================
{
  "runtimeOptions": {
    "tfm": "net8.0",
    "framework": {
      "name": "Microsoft.NETCore.App",
      "version": "8.0.0"
    },
    "configProperties": {
      "System.Reflection.NullabilityInfoContext.IsSupported": true,
      "System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization": false
    }
  }
}

================
File: src/Portfolio.Infrastructure/DependencyInjection.cs
================
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Portfolio.Application.Interfaces.Persistence;
using Portfolio.Infrastructure.Persistence;
using Portfolio.Infrastructure.Persistence.Repositories;

namespace Portfolio.Infrastructure;

public static class DependencyInjection
{
    public static IServiceCollection AddInfrastructure(
        this IServiceCollection services,
        IConfiguration configuration)
    {
        // Add DbContext
        services.AddDbContext<ApplicationDbContext>(options =>
            options.UseNpgsql(
                configuration.GetConnectionString("DefaultConnection"),
                b => b.MigrationsAssembly(typeof(ApplicationDbContext).Assembly.FullName)));

        services.AddScoped<IPageRepository, PageRepository>();

        // Add Repositories
        services.AddScoped<IBlogRepository, BlogRepository>();
        services.AddScoped<IProjectRepository, ProjectRepository>();
        services.AddScoped<IUserRepository, UserRepository>();
        services.AddScoped<IPageRepository, PageRepository>();

        // Add Unit of Work
        services.AddScoped<IUnitOfWork, UnitOfWork>();

        return services;
    }
}

================
File: src/Portfolio.Infrastructure/DependencyInjection/InfrastructureServiceExtensions.cs
================
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Portfolio.Application.Interfaces.Persistence;
using Portfolio.Infrastructure.Persistence;
using Portfolio.Infrastructure.Persistence.Repositories;

namespace Portfolio.Infrastructure;

public static class InfrastructureServiceExtensions
{
    public static IServiceCollection AddInfrastructureServices(this IServiceCollection services, IConfiguration configuration)
    {
        // Register DbContext
        services.AddDbContext<ApplicationDbContext>(options =>
            options.UseNpgsql(
                configuration.GetConnectionString("DefaultConnection"),
                b => b.MigrationsAssembly(typeof(ApplicationDbContext).Assembly.FullName)));

        // Register repositories following Clean Architecture
        services.AddScoped<IBlogRepository, BlogRepository>();
        services.AddScoped<IPageRepository, PageRepository>();
        services.AddScoped<IProjectRepository, ProjectRepository>();
        services.AddScoped<IUserRepository, UserRepository>();

        // Register UnitOfWork
        services.AddScoped<IUnitOfWork, UnitOfWork>();

        return services;
    }
}

================
File: src/Portfolio.Infrastructure/obj/Debug/net8.0/.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
================
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

================
File: src/Portfolio.Infrastructure/obj/Debug/net8.0/Portfolio.Infrastructure.AssemblyInfo.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Portfolio.Infrastructure")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+7c4cf518495f7b4351aa2e0be533baabd5237bff")]
[assembly: System.Reflection.AssemblyProductAttribute("Portfolio.Infrastructure")]
[assembly: System.Reflection.AssemblyTitleAttribute("Portfolio.Infrastructure")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.

================
File: src/Portfolio.Infrastructure/obj/Debug/net8.0/Portfolio.Infrastructure.AssemblyInfoInputs.cache
================
53f0e1285d55912e8b2b0b7076d5f5840d285c0e02658ea08d593eee05fa1da9

================
File: src/Portfolio.Infrastructure/obj/Debug/net8.0/Portfolio.Infrastructure.csproj.CoreCompileInputs.cache
================
589251d9997951a06e8798d49f151a94ea4a471c523b1fae0752d0c29901eb5e

================
File: src/Portfolio.Infrastructure/obj/Debug/net8.0/Portfolio.Infrastructure.csproj.FileListAbsolute.txt
================
C:\dev\portfolio\portfolio.net\src\Portfolio.Infrastructure\obj\Debug\net8.0\Portfolio.Infrastructure.csproj.AssemblyReference.cache
C:\dev\portfolio\portfolio.net\src\Portfolio.Infrastructure\obj\Debug\net8.0\Portfolio.Infrastructure.GeneratedMSBuildEditorConfig.editorconfig
C:\dev\portfolio\portfolio.net\src\Portfolio.Infrastructure\obj\Debug\net8.0\Portfolio.Infrastructure.AssemblyInfoInputs.cache
C:\dev\portfolio\portfolio.net\src\Portfolio.Infrastructure\obj\Debug\net8.0\Portfolio.Infrastructure.AssemblyInfo.cs
C:\dev\portfolio\portfolio.net\src\Portfolio.Infrastructure\obj\Debug\net8.0\Portfolio.Infrastructure.csproj.CoreCompileInputs.cache
C:\dev\portfolio\portfolio.net\src\Portfolio.Infrastructure\obj\Debug\net8.0\Portfolio.Infrastructure.sourcelink.json
C:\dev\portfolio\portfolio.net\src\Portfolio.Infrastructure\bin\Debug\net8.0\Portfolio.Infrastructure.deps.json
C:\dev\portfolio\portfolio.net\src\Portfolio.Infrastructure\bin\Debug\net8.0\Portfolio.Infrastructure.runtimeconfig.json
C:\dev\portfolio\portfolio.net\src\Portfolio.Infrastructure\bin\Debug\net8.0\Portfolio.Infrastructure.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.Infrastructure\bin\Debug\net8.0\Portfolio.Infrastructure.pdb
C:\dev\portfolio\portfolio.net\src\Portfolio.Infrastructure\bin\Debug\net8.0\Portfolio.Application.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.Infrastructure\bin\Debug\net8.0\Portfolio.Domain.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.Infrastructure\bin\Debug\net8.0\Portfolio.Application.pdb
C:\dev\portfolio\portfolio.net\src\Portfolio.Infrastructure\bin\Debug\net8.0\Portfolio.Domain.pdb
C:\dev\portfolio\portfolio.net\src\Portfolio.Infrastructure\obj\Debug\net8.0\Portfoli.D1057275.Up2Date
C:\dev\portfolio\portfolio.net\src\Portfolio.Infrastructure\obj\Debug\net8.0\Portfolio.Infrastructure.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.Infrastructure\obj\Debug\net8.0\refint\Portfolio.Infrastructure.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.Infrastructure\obj\Debug\net8.0\Portfolio.Infrastructure.pdb
C:\dev\portfolio\portfolio.net\src\Portfolio.Infrastructure\obj\Debug\net8.0\Portfolio.Infrastructure.genruntimeconfig.cache
C:\dev\portfolio\portfolio.net\src\Portfolio.Infrastructure\obj\Debug\net8.0\ref\Portfolio.Infrastructure.dll

================
File: src/Portfolio.Infrastructure/obj/Debug/net8.0/Portfolio.Infrastructure.GeneratedMSBuildEditorConfig.editorconfig
================
is_global = true
build_property.TargetFramework = net8.0
build_property.TargetPlatformMinVersion = 
build_property.UsingMicrosoftNETSdkWeb = 
build_property.ProjectTypeGuids = 
build_property.InvariantGlobalization = 
build_property.PlatformNeutralAssembly = 
build_property.EnforceExtendedAnalyzerRules = 
build_property._SupportedPlatformList = Linux,macOS,Windows
build_property.RootNamespace = Portfolio.Infrastructure
build_property.ProjectDir = c:\dev\portfolio\portfolio.net\src\Portfolio.Infrastructure\
build_property.EnableComHosting = 
build_property.EnableGeneratedComInterfaceComImportInterop = 
build_property.EffectiveAnalysisLevelStyle = 8.0
build_property.EnableCodeStyleSeverity =

================
File: src/Portfolio.Infrastructure/obj/Debug/net8.0/Portfolio.Infrastructure.genruntimeconfig.cache
================
72bd4cf16bc3878f80605f0d3a3f10299c441f60b36722861b9ee615ce549b64

================
File: src/Portfolio.Infrastructure/obj/Debug/net8.0/Portfolio.Infrastructure.GlobalUsings.g.cs
================
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

================
File: src/Portfolio.Infrastructure/obj/Debug/net8.0/Portfolio.Infrastructure.sourcelink.json
================
{"documents":{"C:\\dev\\portfolio\\*":"https://raw.githubusercontent.com/michelroberge/portfolio/104d91285c2777489c173d7e92482bc0071a9d92/*"}}

================
File: src/Portfolio.Infrastructure/obj/Portfolio.Infrastructure.csproj.nuget.dgspec.json
================
{
  "format": 1,
  "restore": {
    "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Infrastructure\\Portfolio.Infrastructure.csproj": {}
  },
  "projects": {
    "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\Portfolio.Application.csproj": {
      "version": "1.0.0",
      "restore": {
        "projectUniqueName": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\Portfolio.Application.csproj",
        "projectName": "Portfolio.Application",
        "projectPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\Portfolio.Application.csproj",
        "packagesPath": "C:\\Users\\miche\\.nuget\\packages\\",
        "outputPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\obj\\",
        "projectStyle": "PackageReference",
        "fallbackFolders": [
          "C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\NuGetPackages"
        ],
        "configFilePaths": [
          "C:\\Users\\miche\\AppData\\Roaming\\NuGet\\NuGet.Config",
          "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.FallbackLocation.config",
          "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.Offline.config"
        ],
        "originalTargetFrameworks": [
          "net8.0"
        ],
        "sources": {
          "C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackages\\": {},
          "https://api.nuget.org/v3/index.json": {}
        },
        "frameworks": {
          "net8.0": {
            "targetAlias": "net8.0",
            "projectReferences": {
              "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\Portfolio.Domain.csproj": {
                "projectPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\Portfolio.Domain.csproj"
              }
            }
          }
        },
        "warningProperties": {
          "warnAsError": [
            "NU1605"
          ]
        },
        "restoreAuditProperties": {
          "enableAudit": "true",
          "auditLevel": "low",
          "auditMode": "direct"
        },
        "SdkAnalysisLevel": "9.0.100"
      },
      "frameworks": {
        "net8.0": {
          "targetAlias": "net8.0",
          "dependencies": {
            "AutoMapper": {
              "target": "Package",
              "version": "[13.0.1, )"
            },
            "FluentValidation": {
              "target": "Package",
              "version": "[11.9.0, )"
            },
            "FluentValidation.DependencyInjectionExtensions": {
              "target": "Package",
              "version": "[11.9.0, )"
            },
            "MediatR": {
              "target": "Package",
              "version": "[12.2.0, )"
            },
            "Microsoft.Extensions.Logging.Abstractions": {
              "target": "Package",
              "version": "[8.0.0, )"
            }
          },
          "imports": [
            "net461",
            "net462",
            "net47",
            "net471",
            "net472",
            "net48",
            "net481"
          ],
          "assetTargetFallback": true,
          "warn": true,
          "frameworkReferences": {
            "Microsoft.NETCore.App": {
              "privateAssets": "all"
            }
          },
          "runtimeIdentifierGraphPath": "C:\\Program Files\\dotnet\\sdk\\9.0.102/PortableRuntimeIdentifierGraph.json"
        }
      }
    },
    "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\Portfolio.Domain.csproj": {
      "version": "1.0.0",
      "restore": {
        "projectUniqueName": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\Portfolio.Domain.csproj",
        "projectName": "Portfolio.Domain",
        "projectPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\Portfolio.Domain.csproj",
        "packagesPath": "C:\\Users\\miche\\.nuget\\packages\\",
        "outputPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\obj\\",
        "projectStyle": "PackageReference",
        "fallbackFolders": [
          "C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\NuGetPackages"
        ],
        "configFilePaths": [
          "C:\\Users\\miche\\AppData\\Roaming\\NuGet\\NuGet.Config",
          "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.FallbackLocation.config",
          "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.Offline.config"
        ],
        "originalTargetFrameworks": [
          "net8.0"
        ],
        "sources": {
          "C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackages\\": {},
          "https://api.nuget.org/v3/index.json": {}
        },
        "frameworks": {
          "net8.0": {
            "targetAlias": "net8.0",
            "projectReferences": {}
          }
        },
        "warningProperties": {
          "warnAsError": [
            "NU1605"
          ]
        },
        "restoreAuditProperties": {
          "enableAudit": "true",
          "auditLevel": "low",
          "auditMode": "direct"
        },
        "SdkAnalysisLevel": "9.0.100"
      },
      "frameworks": {
        "net8.0": {
          "targetAlias": "net8.0",
          "imports": [
            "net461",
            "net462",
            "net47",
            "net471",
            "net472",
            "net48",
            "net481"
          ],
          "assetTargetFallback": true,
          "warn": true,
          "frameworkReferences": {
            "Microsoft.NETCore.App": {
              "privateAssets": "all"
            }
          },
          "runtimeIdentifierGraphPath": "C:\\Program Files\\dotnet\\sdk\\9.0.102/PortableRuntimeIdentifierGraph.json"
        }
      }
    },
    "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Infrastructure\\Portfolio.Infrastructure.csproj": {
      "version": "1.0.0",
      "restore": {
        "projectUniqueName": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Infrastructure\\Portfolio.Infrastructure.csproj",
        "projectName": "Portfolio.Infrastructure",
        "projectPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Infrastructure\\Portfolio.Infrastructure.csproj",
        "packagesPath": "C:\\Users\\miche\\.nuget\\packages\\",
        "outputPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Infrastructure\\obj\\",
        "projectStyle": "PackageReference",
        "fallbackFolders": [
          "C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\NuGetPackages"
        ],
        "configFilePaths": [
          "C:\\Users\\miche\\AppData\\Roaming\\NuGet\\NuGet.Config",
          "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.FallbackLocation.config",
          "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.Offline.config"
        ],
        "originalTargetFrameworks": [
          "net8.0"
        ],
        "sources": {
          "C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackages\\": {},
          "https://api.nuget.org/v3/index.json": {}
        },
        "frameworks": {
          "net8.0": {
            "targetAlias": "net8.0",
            "projectReferences": {
              "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\Portfolio.Application.csproj": {
                "projectPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\Portfolio.Application.csproj"
              }
            }
          }
        },
        "warningProperties": {
          "warnAsError": [
            "NU1605"
          ]
        },
        "restoreAuditProperties": {
          "enableAudit": "true",
          "auditLevel": "low",
          "auditMode": "direct"
        },
        "SdkAnalysisLevel": "9.0.100"
      },
      "frameworks": {
        "net8.0": {
          "targetAlias": "net8.0",
          "dependencies": {
            "AutoMapper": {
              "target": "Package",
              "version": "[13.0.1, )"
            },
            "MediatR": {
              "target": "Package",
              "version": "[12.2.0, )"
            },
            "Microsoft.EntityFrameworkCore": {
              "target": "Package",
              "version": "[8.0.2, )"
            },
            "Microsoft.EntityFrameworkCore.Design": {
              "include": "Runtime, Build, Native, ContentFiles, Analyzers, BuildTransitive",
              "suppressParent": "All",
              "target": "Package",
              "version": "[8.0.2, )"
            },
            "Microsoft.EntityFrameworkCore.Tools": {
              "include": "Runtime, Build, Native, ContentFiles, Analyzers, BuildTransitive",
              "suppressParent": "All",
              "target": "Package",
              "version": "[8.0.2, )"
            },
            "Microsoft.Extensions.Configuration.Abstractions": {
              "target": "Package",
              "version": "[8.0.0, )"
            },
            "Microsoft.Extensions.DependencyInjection.Abstractions": {
              "target": "Package",
              "version": "[8.0.0, )"
            },
            "Npgsql.EntityFrameworkCore.PostgreSQL": {
              "target": "Package",
              "version": "[8.0.2, )"
            }
          },
          "imports": [
            "net461",
            "net462",
            "net47",
            "net471",
            "net472",
            "net48",
            "net481"
          ],
          "assetTargetFallback": true,
          "warn": true,
          "frameworkReferences": {
            "Microsoft.NETCore.App": {
              "privateAssets": "all"
            }
          },
          "runtimeIdentifierGraphPath": "C:\\Program Files\\dotnet\\sdk\\9.0.102/PortableRuntimeIdentifierGraph.json"
        }
      }
    }
  }
}

================
File: src/Portfolio.Infrastructure/obj/Portfolio.Infrastructure.csproj.nuget.g.props
================
<?xml version="1.0" encoding="utf-8" standalone="no"?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup Condition=" '$(ExcludeRestorePackageImports)' != 'true' ">
    <RestoreSuccess Condition=" '$(RestoreSuccess)' == '' ">True</RestoreSuccess>
    <RestoreTool Condition=" '$(RestoreTool)' == '' ">NuGet</RestoreTool>
    <ProjectAssetsFile Condition=" '$(ProjectAssetsFile)' == '' ">$(MSBuildThisFileDirectory)project.assets.json</ProjectAssetsFile>
    <NuGetPackageRoot Condition=" '$(NuGetPackageRoot)' == '' ">$(UserProfile)\.nuget\packages\</NuGetPackageRoot>
    <NuGetPackageFolders Condition=" '$(NuGetPackageFolders)' == '' ">C:\Users\miche\.nuget\packages\;C:\Program Files (x86)\Microsoft Visual Studio\Shared\NuGetPackages</NuGetPackageFolders>
    <NuGetProjectStyle Condition=" '$(NuGetProjectStyle)' == '' ">PackageReference</NuGetProjectStyle>
    <NuGetToolVersion Condition=" '$(NuGetToolVersion)' == '' ">6.12.3</NuGetToolVersion>
  </PropertyGroup>
  <ItemGroup Condition=" '$(ExcludeRestorePackageImports)' != 'true' ">
    <SourceRoot Include="C:\Users\miche\.nuget\packages\" />
    <SourceRoot Include="C:\Program Files (x86)\Microsoft Visual Studio\Shared\NuGetPackages\" />
  </ItemGroup>
  <ImportGroup Condition=" '$(ExcludeRestorePackageImports)' != 'true' ">
    <Import Project="$(NuGetPackageRoot)microsoft.entityframeworkcore\8.0.2\buildTransitive\net8.0\Microsoft.EntityFrameworkCore.props" Condition="Exists('$(NuGetPackageRoot)microsoft.entityframeworkcore\8.0.2\buildTransitive\net8.0\Microsoft.EntityFrameworkCore.props')" />
    <Import Project="$(NuGetPackageRoot)microsoft.entityframeworkcore.design\8.0.2\build\net8.0\Microsoft.EntityFrameworkCore.Design.props" Condition="Exists('$(NuGetPackageRoot)microsoft.entityframeworkcore.design\8.0.2\build\net8.0\Microsoft.EntityFrameworkCore.Design.props')" />
  </ImportGroup>
  <PropertyGroup Condition=" '$(ExcludeRestorePackageImports)' != 'true' ">
    <PkgMicrosoft_CodeAnalysis_Analyzers Condition=" '$(PkgMicrosoft_CodeAnalysis_Analyzers)' == '' ">C:\Users\miche\.nuget\packages\microsoft.codeanalysis.analyzers\3.3.3</PkgMicrosoft_CodeAnalysis_Analyzers>
    <PkgMicrosoft_EntityFrameworkCore_Tools Condition=" '$(PkgMicrosoft_EntityFrameworkCore_Tools)' == '' ">C:\Users\miche\.nuget\packages\microsoft.entityframeworkcore.tools\8.0.2</PkgMicrosoft_EntityFrameworkCore_Tools>
  </PropertyGroup>
</Project>

================
File: src/Portfolio.Infrastructure/obj/Portfolio.Infrastructure.csproj.nuget.g.targets
================
<?xml version="1.0" encoding="utf-8" standalone="no"?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ImportGroup Condition=" '$(ExcludeRestorePackageImports)' != 'true' ">
    <Import Project="$(NuGetPackageRoot)system.text.json\8.0.0\buildTransitive\net6.0\System.Text.Json.targets" Condition="Exists('$(NuGetPackageRoot)system.text.json\8.0.0\buildTransitive\net6.0\System.Text.Json.targets')" />
    <Import Project="$(NuGetPackageRoot)microsoft.extensions.options\8.0.0\buildTransitive\net6.0\Microsoft.Extensions.Options.targets" Condition="Exists('$(NuGetPackageRoot)microsoft.extensions.options\8.0.0\buildTransitive\net6.0\Microsoft.Extensions.Options.targets')" />
    <Import Project="$(NuGetPackageRoot)microsoft.extensions.logging.abstractions\8.0.0\buildTransitive\net6.0\Microsoft.Extensions.Logging.Abstractions.targets" Condition="Exists('$(NuGetPackageRoot)microsoft.extensions.logging.abstractions\8.0.0\buildTransitive\net6.0\Microsoft.Extensions.Logging.Abstractions.targets')" />
  </ImportGroup>
</Project>

================
File: src/Portfolio.Infrastructure/obj/project.assets.json
================
{
  "version": 3,
  "targets": {
    "net8.0": {
      "AutoMapper/13.0.1": {
        "type": "package",
        "dependencies": {
          "Microsoft.Extensions.Options": "6.0.0"
        },
        "compile": {
          "lib/net6.0/AutoMapper.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net6.0/AutoMapper.dll": {
            "related": ".xml"
          }
        }
      },
      "FluentValidation/11.9.0": {
        "type": "package",
        "compile": {
          "lib/net8.0/FluentValidation.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/FluentValidation.dll": {
            "related": ".xml"
          }
        }
      },
      "FluentValidation.DependencyInjectionExtensions/11.9.0": {
        "type": "package",
        "dependencies": {
          "FluentValidation": "11.9.0",
          "Microsoft.Extensions.Dependencyinjection.Abstractions": "2.1.0"
        },
        "compile": {
          "lib/netstandard2.1/FluentValidation.DependencyInjectionExtensions.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/netstandard2.1/FluentValidation.DependencyInjectionExtensions.dll": {
            "related": ".xml"
          }
        }
      },
      "Humanizer.Core/2.14.1": {
        "type": "package",
        "compile": {
          "lib/net6.0/_._": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net6.0/Humanizer.dll": {
            "related": ".xml"
          }
        }
      },
      "MediatR/12.2.0": {
        "type": "package",
        "dependencies": {
          "MediatR.Contracts": "[2.0.1, 3.0.0)",
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0"
        },
        "compile": {
          "lib/net6.0/MediatR.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net6.0/MediatR.dll": {
            "related": ".xml"
          }
        }
      },
      "MediatR.Contracts/2.0.1": {
        "type": "package",
        "compile": {
          "lib/netstandard2.0/MediatR.Contracts.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/netstandard2.0/MediatR.Contracts.dll": {
            "related": ".xml"
          }
        }
      },
      "Microsoft.Bcl.AsyncInterfaces/6.0.0": {
        "type": "package",
        "compile": {
          "lib/netstandard2.1/_._": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/netstandard2.1/Microsoft.Bcl.AsyncInterfaces.dll": {
            "related": ".xml"
          }
        }
      },
      "Microsoft.CodeAnalysis.Analyzers/3.3.3": {
        "type": "package",
        "build": {
          "build/_._": {}
        }
      },
      "Microsoft.CodeAnalysis.Common/4.5.0": {
        "type": "package",
        "dependencies": {
          "Microsoft.CodeAnalysis.Analyzers": "3.3.3",
          "System.Collections.Immutable": "6.0.0",
          "System.Reflection.Metadata": "6.0.1",
          "System.Runtime.CompilerServices.Unsafe": "6.0.0",
          "System.Text.Encoding.CodePages": "6.0.0"
        },
        "compile": {
          "lib/netcoreapp3.1/_._": {
            "related": ".pdb;.xml"
          }
        },
        "runtime": {
          "lib/netcoreapp3.1/Microsoft.CodeAnalysis.dll": {
            "related": ".pdb;.xml"
          }
        },
        "resource": {
          "lib/netcoreapp3.1/cs/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "cs"
          },
          "lib/netcoreapp3.1/de/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "de"
          },
          "lib/netcoreapp3.1/es/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "es"
          },
          "lib/netcoreapp3.1/fr/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "fr"
          },
          "lib/netcoreapp3.1/it/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "it"
          },
          "lib/netcoreapp3.1/ja/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "ja"
          },
          "lib/netcoreapp3.1/ko/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "ko"
          },
          "lib/netcoreapp3.1/pl/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "pl"
          },
          "lib/netcoreapp3.1/pt-BR/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "pt-BR"
          },
          "lib/netcoreapp3.1/ru/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "ru"
          },
          "lib/netcoreapp3.1/tr/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "tr"
          },
          "lib/netcoreapp3.1/zh-Hans/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "zh-Hans"
          },
          "lib/netcoreapp3.1/zh-Hant/Microsoft.CodeAnalysis.resources.dll": {
            "locale": "zh-Hant"
          }
        }
      },
      "Microsoft.CodeAnalysis.CSharp/4.5.0": {
        "type": "package",
        "dependencies": {
          "Microsoft.CodeAnalysis.Common": "[4.5.0]"
        },
        "compile": {
          "lib/netcoreapp3.1/_._": {
            "related": ".pdb;.xml"
          }
        },
        "runtime": {
          "lib/netcoreapp3.1/Microsoft.CodeAnalysis.CSharp.dll": {
            "related": ".pdb;.xml"
          }
        },
        "resource": {
          "lib/netcoreapp3.1/cs/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "cs"
          },
          "lib/netcoreapp3.1/de/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "de"
          },
          "lib/netcoreapp3.1/es/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "es"
          },
          "lib/netcoreapp3.1/fr/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "fr"
          },
          "lib/netcoreapp3.1/it/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "it"
          },
          "lib/netcoreapp3.1/ja/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "ja"
          },
          "lib/netcoreapp3.1/ko/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "ko"
          },
          "lib/netcoreapp3.1/pl/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "pl"
          },
          "lib/netcoreapp3.1/pt-BR/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "pt-BR"
          },
          "lib/netcoreapp3.1/ru/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "ru"
          },
          "lib/netcoreapp3.1/tr/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "tr"
          },
          "lib/netcoreapp3.1/zh-Hans/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "zh-Hans"
          },
          "lib/netcoreapp3.1/zh-Hant/Microsoft.CodeAnalysis.CSharp.resources.dll": {
            "locale": "zh-Hant"
          }
        }
      },
      "Microsoft.CodeAnalysis.CSharp.Workspaces/4.5.0": {
        "type": "package",
        "dependencies": {
          "Humanizer.Core": "2.14.1",
          "Microsoft.CodeAnalysis.CSharp": "[4.5.0]",
          "Microsoft.CodeAnalysis.Common": "[4.5.0]",
          "Microsoft.CodeAnalysis.Workspaces.Common": "[4.5.0]"
        },
        "compile": {
          "lib/netcoreapp3.1/_._": {
            "related": ".pdb;.xml"
          }
        },
        "runtime": {
          "lib/netcoreapp3.1/Microsoft.CodeAnalysis.CSharp.Workspaces.dll": {
            "related": ".pdb;.xml"
          }
        },
        "resource": {
          "lib/netcoreapp3.1/cs/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll": {
            "locale": "cs"
          },
          "lib/netcoreapp3.1/de/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll": {
            "locale": "de"
          },
          "lib/netcoreapp3.1/es/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll": {
            "locale": "es"
          },
          "lib/netcoreapp3.1/fr/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll": {
            "locale": "fr"
          },
          "lib/netcoreapp3.1/it/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll": {
            "locale": "it"
          },
          "lib/netcoreapp3.1/ja/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll": {
            "locale": "ja"
          },
          "lib/netcoreapp3.1/ko/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll": {
            "locale": "ko"
          },
          "lib/netcoreapp3.1/pl/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll": {
            "locale": "pl"
          },
          "lib/netcoreapp3.1/pt-BR/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll": {
            "locale": "pt-BR"
          },
          "lib/netcoreapp3.1/ru/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll": {
            "locale": "ru"
          },
          "lib/netcoreapp3.1/tr/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll": {
            "locale": "tr"
          },
          "lib/netcoreapp3.1/zh-Hans/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll": {
            "locale": "zh-Hans"
          },
          "lib/netcoreapp3.1/zh-Hant/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll": {
            "locale": "zh-Hant"
          }
        }
      },
      "Microsoft.CodeAnalysis.Workspaces.Common/4.5.0": {
        "type": "package",
        "dependencies": {
          "Humanizer.Core": "2.14.1",
          "Microsoft.Bcl.AsyncInterfaces": "6.0.0",
          "Microsoft.CodeAnalysis.Common": "[4.5.0]",
          "System.Composition": "6.0.0",
          "System.IO.Pipelines": "6.0.3",
          "System.Threading.Channels": "6.0.0"
        },
        "compile": {
          "lib/netcoreapp3.1/_._": {
            "related": ".pdb;.xml"
          }
        },
        "runtime": {
          "lib/netcoreapp3.1/Microsoft.CodeAnalysis.Workspaces.dll": {
            "related": ".pdb;.xml"
          }
        },
        "resource": {
          "lib/netcoreapp3.1/cs/Microsoft.CodeAnalysis.Workspaces.resources.dll": {
            "locale": "cs"
          },
          "lib/netcoreapp3.1/de/Microsoft.CodeAnalysis.Workspaces.resources.dll": {
            "locale": "de"
          },
          "lib/netcoreapp3.1/es/Microsoft.CodeAnalysis.Workspaces.resources.dll": {
            "locale": "es"
          },
          "lib/netcoreapp3.1/fr/Microsoft.CodeAnalysis.Workspaces.resources.dll": {
            "locale": "fr"
          },
          "lib/netcoreapp3.1/it/Microsoft.CodeAnalysis.Workspaces.resources.dll": {
            "locale": "it"
          },
          "lib/netcoreapp3.1/ja/Microsoft.CodeAnalysis.Workspaces.resources.dll": {
            "locale": "ja"
          },
          "lib/netcoreapp3.1/ko/Microsoft.CodeAnalysis.Workspaces.resources.dll": {
            "locale": "ko"
          },
          "lib/netcoreapp3.1/pl/Microsoft.CodeAnalysis.Workspaces.resources.dll": {
            "locale": "pl"
          },
          "lib/netcoreapp3.1/pt-BR/Microsoft.CodeAnalysis.Workspaces.resources.dll": {
            "locale": "pt-BR"
          },
          "lib/netcoreapp3.1/ru/Microsoft.CodeAnalysis.Workspaces.resources.dll": {
            "locale": "ru"
          },
          "lib/netcoreapp3.1/tr/Microsoft.CodeAnalysis.Workspaces.resources.dll": {
            "locale": "tr"
          },
          "lib/netcoreapp3.1/zh-Hans/Microsoft.CodeAnalysis.Workspaces.resources.dll": {
            "locale": "zh-Hans"
          },
          "lib/netcoreapp3.1/zh-Hant/Microsoft.CodeAnalysis.Workspaces.resources.dll": {
            "locale": "zh-Hant"
          }
        }
      },
      "Microsoft.EntityFrameworkCore/8.0.2": {
        "type": "package",
        "dependencies": {
          "Microsoft.EntityFrameworkCore.Abstractions": "8.0.2",
          "Microsoft.EntityFrameworkCore.Analyzers": "8.0.2",
          "Microsoft.Extensions.Caching.Memory": "8.0.0",
          "Microsoft.Extensions.Logging": "8.0.0"
        },
        "compile": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net8.0/Microsoft.EntityFrameworkCore.props": {}
        }
      },
      "Microsoft.EntityFrameworkCore.Abstractions/8.0.2": {
        "type": "package",
        "compile": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.Abstractions.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.Abstractions.dll": {
            "related": ".xml"
          }
        }
      },
      "Microsoft.EntityFrameworkCore.Analyzers/8.0.2": {
        "type": "package",
        "compile": {
          "lib/netstandard2.0/_._": {}
        },
        "runtime": {
          "lib/netstandard2.0/_._": {}
        }
      },
      "Microsoft.EntityFrameworkCore.Design/8.0.2": {
        "type": "package",
        "dependencies": {
          "Humanizer.Core": "2.14.1",
          "Microsoft.CodeAnalysis.CSharp.Workspaces": "4.5.0",
          "Microsoft.EntityFrameworkCore.Relational": "8.0.2",
          "Microsoft.Extensions.DependencyModel": "8.0.0",
          "Mono.TextTemplating": "2.2.1"
        },
        "compile": {
          "lib/net8.0/_._": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.Design.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "build/net8.0/Microsoft.EntityFrameworkCore.Design.props": {}
        }
      },
      "Microsoft.EntityFrameworkCore.Relational/8.0.2": {
        "type": "package",
        "dependencies": {
          "Microsoft.EntityFrameworkCore": "8.0.2",
          "Microsoft.Extensions.Configuration.Abstractions": "8.0.0"
        },
        "compile": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.Relational.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.Relational.dll": {
            "related": ".xml"
          }
        }
      },
      "Microsoft.EntityFrameworkCore.Tools/8.0.2": {
        "type": "package",
        "dependencies": {
          "Microsoft.EntityFrameworkCore.Design": "8.0.2"
        },
        "compile": {
          "lib/net8.0/_._": {}
        },
        "runtime": {
          "lib/net8.0/_._": {}
        }
      },
      "Microsoft.Extensions.Caching.Abstractions/8.0.0": {
        "type": "package",
        "dependencies": {
          "Microsoft.Extensions.Primitives": "8.0.0"
        },
        "compile": {
          "lib/net8.0/Microsoft.Extensions.Caching.Abstractions.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Caching.Abstractions.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net6.0/_._": {}
        }
      },
      "Microsoft.Extensions.Caching.Memory/8.0.0": {
        "type": "package",
        "dependencies": {
          "Microsoft.Extensions.Caching.Abstractions": "8.0.0",
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0",
          "Microsoft.Extensions.Logging.Abstractions": "8.0.0",
          "Microsoft.Extensions.Options": "8.0.0",
          "Microsoft.Extensions.Primitives": "8.0.0"
        },
        "compile": {
          "lib/net8.0/Microsoft.Extensions.Caching.Memory.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Caching.Memory.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net6.0/_._": {}
        }
      },
      "Microsoft.Extensions.Configuration.Abstractions/8.0.0": {
        "type": "package",
        "dependencies": {
          "Microsoft.Extensions.Primitives": "8.0.0"
        },
        "compile": {
          "lib/net8.0/Microsoft.Extensions.Configuration.Abstractions.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Configuration.Abstractions.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net6.0/_._": {}
        }
      },
      "Microsoft.Extensions.DependencyInjection/8.0.0": {
        "type": "package",
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0"
        },
        "compile": {
          "lib/net8.0/Microsoft.Extensions.DependencyInjection.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.DependencyInjection.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net6.0/_._": {}
        }
      },
      "Microsoft.Extensions.DependencyInjection.Abstractions/8.0.0": {
        "type": "package",
        "compile": {
          "lib/net8.0/Microsoft.Extensions.DependencyInjection.Abstractions.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.DependencyInjection.Abstractions.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net6.0/_._": {}
        }
      },
      "Microsoft.Extensions.DependencyModel/8.0.0": {
        "type": "package",
        "dependencies": {
          "System.Text.Encodings.Web": "8.0.0",
          "System.Text.Json": "8.0.0"
        },
        "compile": {
          "lib/net8.0/_._": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.DependencyModel.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net6.0/_._": {}
        }
      },
      "Microsoft.Extensions.Logging/8.0.0": {
        "type": "package",
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection": "8.0.0",
          "Microsoft.Extensions.Logging.Abstractions": "8.0.0",
          "Microsoft.Extensions.Options": "8.0.0"
        },
        "compile": {
          "lib/net8.0/Microsoft.Extensions.Logging.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Logging.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net6.0/_._": {}
        }
      },
      "Microsoft.Extensions.Logging.Abstractions/8.0.0": {
        "type": "package",
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0"
        },
        "compile": {
          "lib/net8.0/Microsoft.Extensions.Logging.Abstractions.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Logging.Abstractions.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net6.0/Microsoft.Extensions.Logging.Abstractions.targets": {}
        }
      },
      "Microsoft.Extensions.Options/8.0.0": {
        "type": "package",
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0",
          "Microsoft.Extensions.Primitives": "8.0.0"
        },
        "compile": {
          "lib/net8.0/Microsoft.Extensions.Options.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Options.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net6.0/Microsoft.Extensions.Options.targets": {}
        }
      },
      "Microsoft.Extensions.Primitives/8.0.0": {
        "type": "package",
        "compile": {
          "lib/net8.0/Microsoft.Extensions.Primitives.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Primitives.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net6.0/_._": {}
        }
      },
      "Mono.TextTemplating/2.2.1": {
        "type": "package",
        "dependencies": {
          "System.CodeDom": "4.4.0"
        },
        "compile": {
          "lib/netstandard2.0/_._": {}
        },
        "runtime": {
          "lib/netstandard2.0/Mono.TextTemplating.dll": {}
        }
      },
      "Npgsql/8.0.2": {
        "type": "package",
        "dependencies": {
          "Microsoft.Extensions.Logging.Abstractions": "8.0.0"
        },
        "compile": {
          "lib/net8.0/Npgsql.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Npgsql.dll": {
            "related": ".xml"
          }
        }
      },
      "Npgsql.EntityFrameworkCore.PostgreSQL/8.0.2": {
        "type": "package",
        "dependencies": {
          "Microsoft.EntityFrameworkCore": "8.0.2",
          "Microsoft.EntityFrameworkCore.Abstractions": "8.0.2",
          "Microsoft.EntityFrameworkCore.Relational": "8.0.2",
          "Npgsql": "8.0.2"
        },
        "compile": {
          "lib/net8.0/Npgsql.EntityFrameworkCore.PostgreSQL.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Npgsql.EntityFrameworkCore.PostgreSQL.dll": {
            "related": ".xml"
          }
        }
      },
      "System.CodeDom/4.4.0": {
        "type": "package",
        "compile": {
          "ref/netstandard2.0/_._": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/netstandard2.0/System.CodeDom.dll": {}
        }
      },
      "System.Collections.Immutable/6.0.0": {
        "type": "package",
        "dependencies": {
          "System.Runtime.CompilerServices.Unsafe": "6.0.0"
        },
        "compile": {
          "lib/net6.0/_._": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net6.0/System.Collections.Immutable.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/netcoreapp3.1/_._": {}
        }
      },
      "System.Composition/6.0.0": {
        "type": "package",
        "dependencies": {
          "System.Composition.AttributedModel": "6.0.0",
          "System.Composition.Convention": "6.0.0",
          "System.Composition.Hosting": "6.0.0",
          "System.Composition.Runtime": "6.0.0",
          "System.Composition.TypedParts": "6.0.0"
        },
        "build": {
          "buildTransitive/netcoreapp3.1/_._": {}
        }
      },
      "System.Composition.AttributedModel/6.0.0": {
        "type": "package",
        "compile": {
          "lib/net6.0/_._": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net6.0/System.Composition.AttributedModel.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/netcoreapp3.1/_._": {}
        }
      },
      "System.Composition.Convention/6.0.0": {
        "type": "package",
        "dependencies": {
          "System.Composition.AttributedModel": "6.0.0"
        },
        "compile": {
          "lib/net6.0/_._": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net6.0/System.Composition.Convention.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/netcoreapp3.1/_._": {}
        }
      },
      "System.Composition.Hosting/6.0.0": {
        "type": "package",
        "dependencies": {
          "System.Composition.Runtime": "6.0.0"
        },
        "compile": {
          "lib/net6.0/_._": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net6.0/System.Composition.Hosting.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/netcoreapp3.1/_._": {}
        }
      },
      "System.Composition.Runtime/6.0.0": {
        "type": "package",
        "compile": {
          "lib/net6.0/_._": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net6.0/System.Composition.Runtime.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/netcoreapp3.1/_._": {}
        }
      },
      "System.Composition.TypedParts/6.0.0": {
        "type": "package",
        "dependencies": {
          "System.Composition.AttributedModel": "6.0.0",
          "System.Composition.Hosting": "6.0.0",
          "System.Composition.Runtime": "6.0.0"
        },
        "compile": {
          "lib/net6.0/_._": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net6.0/System.Composition.TypedParts.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/netcoreapp3.1/_._": {}
        }
      },
      "System.IO.Pipelines/6.0.3": {
        "type": "package",
        "compile": {
          "lib/net6.0/_._": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net6.0/System.IO.Pipelines.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/netcoreapp3.1/_._": {}
        }
      },
      "System.Reflection.Metadata/6.0.1": {
        "type": "package",
        "dependencies": {
          "System.Collections.Immutable": "6.0.0"
        },
        "compile": {
          "lib/net6.0/_._": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net6.0/System.Reflection.Metadata.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/netcoreapp3.1/_._": {}
        }
      },
      "System.Runtime.CompilerServices.Unsafe/6.0.0": {
        "type": "package",
        "compile": {
          "lib/net6.0/_._": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net6.0/System.Runtime.CompilerServices.Unsafe.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/netcoreapp3.1/_._": {}
        }
      },
      "System.Text.Encoding.CodePages/6.0.0": {
        "type": "package",
        "dependencies": {
          "System.Runtime.CompilerServices.Unsafe": "6.0.0"
        },
        "compile": {
          "lib/net6.0/_._": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net6.0/System.Text.Encoding.CodePages.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/netcoreapp3.1/_._": {}
        },
        "runtimeTargets": {
          "runtimes/win/lib/net6.0/System.Text.Encoding.CodePages.dll": {
            "assetType": "runtime",
            "rid": "win"
          }
        }
      },
      "System.Text.Encodings.Web/8.0.0": {
        "type": "package",
        "compile": {
          "lib/net8.0/_._": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/System.Text.Encodings.Web.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net6.0/_._": {}
        },
        "runtimeTargets": {
          "runtimes/browser/lib/net8.0/System.Text.Encodings.Web.dll": {
            "assetType": "runtime",
            "rid": "browser"
          }
        }
      },
      "System.Text.Json/8.0.0": {
        "type": "package",
        "dependencies": {
          "System.Text.Encodings.Web": "8.0.0"
        },
        "compile": {
          "lib/net8.0/_._": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/System.Text.Json.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net6.0/System.Text.Json.targets": {}
        }
      },
      "System.Threading.Channels/6.0.0": {
        "type": "package",
        "compile": {
          "lib/net6.0/_._": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net6.0/System.Threading.Channels.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/netcoreapp3.1/_._": {}
        }
      },
      "Portfolio.Application/1.0.0": {
        "type": "project",
        "framework": ".NETCoreApp,Version=v8.0",
        "dependencies": {
          "AutoMapper": "13.0.1",
          "FluentValidation": "11.9.0",
          "FluentValidation.DependencyInjectionExtensions": "11.9.0",
          "MediatR": "12.2.0",
          "Microsoft.Extensions.Logging.Abstractions": "8.0.0",
          "Portfolio.Domain": "1.0.0"
        },
        "compile": {
          "bin/placeholder/Portfolio.Application.dll": {}
        },
        "runtime": {
          "bin/placeholder/Portfolio.Application.dll": {}
        }
      },
      "Portfolio.Domain/1.0.0": {
        "type": "project",
        "framework": ".NETCoreApp,Version=v8.0",
        "compile": {
          "bin/placeholder/Portfolio.Domain.dll": {}
        },
        "runtime": {
          "bin/placeholder/Portfolio.Domain.dll": {}
        }
      }
    }
  },
  "libraries": {
    "AutoMapper/13.0.1": {
      "sha512": "/Fx1SbJ16qS7dU4i604Sle+U9VLX+WSNVJggk6MupKVkYvvBm4XqYaeFuf67diHefHKHs50uQIS2YEDFhPCakQ==",
      "type": "package",
      "path": "automapper/13.0.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "README.md",
        "automapper.13.0.1.nupkg.sha512",
        "automapper.nuspec",
        "icon.png",
        "lib/net6.0/AutoMapper.dll",
        "lib/net6.0/AutoMapper.xml"
      ]
    },
    "FluentValidation/11.9.0": {
      "sha512": "VneVlTvwYDkfHV5av3QrQ0amALgrLX6LV94wlYyEsh0B/klJBW7C8y2eAtj5tOZ3jH6CAVpr4s1ZGgew/QWyig==",
      "type": "package",
      "path": "fluentvalidation/11.9.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "README.md",
        "fluent-validation-icon.png",
        "fluentvalidation.11.9.0.nupkg.sha512",
        "fluentvalidation.nuspec",
        "lib/net5.0/FluentValidation.dll",
        "lib/net5.0/FluentValidation.xml",
        "lib/net6.0/FluentValidation.dll",
        "lib/net6.0/FluentValidation.xml",
        "lib/net7.0/FluentValidation.dll",
        "lib/net7.0/FluentValidation.xml",
        "lib/net8.0/FluentValidation.dll",
        "lib/net8.0/FluentValidation.xml",
        "lib/netstandard2.0/FluentValidation.dll",
        "lib/netstandard2.0/FluentValidation.xml",
        "lib/netstandard2.1/FluentValidation.dll",
        "lib/netstandard2.1/FluentValidation.xml"
      ]
    },
    "FluentValidation.DependencyInjectionExtensions/11.9.0": {
      "sha512": "Ko++xvN7HUf4WlHJL6bhsybUj/uho8ApOYIdxGjpF8Ot7Fukz6LRfRJ06H0KXhWqmMHWEbu89hJbjKJHtg7b9g==",
      "type": "package",
      "path": "fluentvalidation.dependencyinjectionextensions/11.9.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "README.md",
        "fluent-validation-icon.png",
        "fluentvalidation.dependencyinjectionextensions.11.9.0.nupkg.sha512",
        "fluentvalidation.dependencyinjectionextensions.nuspec",
        "lib/netstandard2.0/FluentValidation.DependencyInjectionExtensions.dll",
        "lib/netstandard2.0/FluentValidation.DependencyInjectionExtensions.xml",
        "lib/netstandard2.1/FluentValidation.DependencyInjectionExtensions.dll",
        "lib/netstandard2.1/FluentValidation.DependencyInjectionExtensions.xml"
      ]
    },
    "Humanizer.Core/2.14.1": {
      "sha512": "lQKvtaTDOXnoVJ20ibTuSIOf2i0uO0MPbDhd1jm238I+U/2ZnRENj0cktKZhtchBMtCUSRQ5v4xBCUbKNmyVMw==",
      "type": "package",
      "path": "humanizer.core/2.14.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "humanizer.core.2.14.1.nupkg.sha512",
        "humanizer.core.nuspec",
        "lib/net6.0/Humanizer.dll",
        "lib/net6.0/Humanizer.xml",
        "lib/netstandard1.0/Humanizer.dll",
        "lib/netstandard1.0/Humanizer.xml",
        "lib/netstandard2.0/Humanizer.dll",
        "lib/netstandard2.0/Humanizer.xml",
        "logo.png"
      ]
    },
    "MediatR/12.2.0": {
      "sha512": "8TUFrHapKi6D74PhnSNEguRsH91HNGyP3R4ZQdgDorJgl9Wac5Prh0vA33QfrniAaS6L2xNNhc6vxzg+5AIbwA==",
      "type": "package",
      "path": "mediatr/12.2.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "gradient_128x128.png",
        "lib/net6.0/MediatR.dll",
        "lib/net6.0/MediatR.xml",
        "lib/netstandard2.0/MediatR.dll",
        "lib/netstandard2.0/MediatR.xml",
        "mediatr.12.2.0.nupkg.sha512",
        "mediatr.nuspec"
      ]
    },
    "MediatR.Contracts/2.0.1": {
      "sha512": "FYv95bNT4UwcNA+G/J1oX5OpRiSUxteXaUt2BJbRSdRNiIUNbggJF69wy6mnk2wYToaanpdXZdCwVylt96MpwQ==",
      "type": "package",
      "path": "mediatr.contracts/2.0.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "gradient_128x128.png",
        "lib/netstandard2.0/MediatR.Contracts.dll",
        "lib/netstandard2.0/MediatR.Contracts.xml",
        "mediatr.contracts.2.0.1.nupkg.sha512",
        "mediatr.contracts.nuspec"
      ]
    },
    "Microsoft.Bcl.AsyncInterfaces/6.0.0": {
      "sha512": "UcSjPsst+DfAdJGVDsu346FX0ci0ah+lw3WRtn18NUwEqRt70HaOQ7lI72vy3+1LxtqI3T5GWwV39rQSrCzAeg==",
      "type": "package",
      "path": "microsoft.bcl.asyncinterfaces/6.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "THIRD-PARTY-NOTICES.TXT",
        "lib/net461/Microsoft.Bcl.AsyncInterfaces.dll",
        "lib/net461/Microsoft.Bcl.AsyncInterfaces.xml",
        "lib/netstandard2.0/Microsoft.Bcl.AsyncInterfaces.dll",
        "lib/netstandard2.0/Microsoft.Bcl.AsyncInterfaces.xml",
        "lib/netstandard2.1/Microsoft.Bcl.AsyncInterfaces.dll",
        "lib/netstandard2.1/Microsoft.Bcl.AsyncInterfaces.xml",
        "microsoft.bcl.asyncinterfaces.6.0.0.nupkg.sha512",
        "microsoft.bcl.asyncinterfaces.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "Microsoft.CodeAnalysis.Analyzers/3.3.3": {
      "sha512": "j/rOZtLMVJjrfLRlAMckJLPW/1rze9MT1yfWqSIbUPGRu1m1P0fuo9PmqapwsmePfGB5PJrudQLvmUOAMF0DqQ==",
      "type": "package",
      "path": "microsoft.codeanalysis.analyzers/3.3.3",
      "hasTools": true,
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "ThirdPartyNotices.rtf",
        "analyzers/dotnet/cs/Microsoft.CodeAnalysis.Analyzers.dll",
        "analyzers/dotnet/cs/Microsoft.CodeAnalysis.CSharp.Analyzers.dll",
        "analyzers/dotnet/cs/cs/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/cs/de/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/cs/es/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/cs/fr/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/cs/it/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/cs/ja/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/cs/ko/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/cs/pl/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/cs/pt-BR/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/cs/ru/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/cs/tr/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/cs/zh-Hans/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/cs/zh-Hant/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/vb/Microsoft.CodeAnalysis.Analyzers.dll",
        "analyzers/dotnet/vb/Microsoft.CodeAnalysis.VisualBasic.Analyzers.dll",
        "analyzers/dotnet/vb/cs/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/vb/de/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/vb/es/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/vb/fr/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/vb/it/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/vb/ja/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/vb/ko/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/vb/pl/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/vb/pt-BR/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/vb/ru/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/vb/tr/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/vb/zh-Hans/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "analyzers/dotnet/vb/zh-Hant/Microsoft.CodeAnalysis.Analyzers.resources.dll",
        "build/Microsoft.CodeAnalysis.Analyzers.props",
        "build/Microsoft.CodeAnalysis.Analyzers.targets",
        "build/config/analysislevel_2_9_8_all.editorconfig",
        "build/config/analysislevel_2_9_8_default.editorconfig",
        "build/config/analysislevel_2_9_8_minimum.editorconfig",
        "build/config/analysislevel_2_9_8_none.editorconfig",
        "build/config/analysislevel_2_9_8_recommended.editorconfig",
        "build/config/analysislevel_3_3_all.editorconfig",
        "build/config/analysislevel_3_3_default.editorconfig",
        "build/config/analysislevel_3_3_minimum.editorconfig",
        "build/config/analysislevel_3_3_none.editorconfig",
        "build/config/analysislevel_3_3_recommended.editorconfig",
        "build/config/analysislevel_3_all.editorconfig",
        "build/config/analysislevel_3_default.editorconfig",
        "build/config/analysislevel_3_minimum.editorconfig",
        "build/config/analysislevel_3_none.editorconfig",
        "build/config/analysislevel_3_recommended.editorconfig",
        "build/config/analysislevelcorrectness_2_9_8_all.editorconfig",
        "build/config/analysislevelcorrectness_2_9_8_default.editorconfig",
        "build/config/analysislevelcorrectness_2_9_8_minimum.editorconfig",
        "build/config/analysislevelcorrectness_2_9_8_none.editorconfig",
        "build/config/analysislevelcorrectness_2_9_8_recommended.editorconfig",
        "build/config/analysislevelcorrectness_3_3_all.editorconfig",
        "build/config/analysislevelcorrectness_3_3_default.editorconfig",
        "build/config/analysislevelcorrectness_3_3_minimum.editorconfig",
        "build/config/analysislevelcorrectness_3_3_none.editorconfig",
        "build/config/analysislevelcorrectness_3_3_recommended.editorconfig",
        "build/config/analysislevelcorrectness_3_all.editorconfig",
        "build/config/analysislevelcorrectness_3_default.editorconfig",
        "build/config/analysislevelcorrectness_3_minimum.editorconfig",
        "build/config/analysislevelcorrectness_3_none.editorconfig",
        "build/config/analysislevelcorrectness_3_recommended.editorconfig",
        "build/config/analysislevellibrary_2_9_8_all.editorconfig",
        "build/config/analysislevellibrary_2_9_8_default.editorconfig",
        "build/config/analysislevellibrary_2_9_8_minimum.editorconfig",
        "build/config/analysislevellibrary_2_9_8_none.editorconfig",
        "build/config/analysislevellibrary_2_9_8_recommended.editorconfig",
        "build/config/analysislevellibrary_3_3_all.editorconfig",
        "build/config/analysislevellibrary_3_3_default.editorconfig",
        "build/config/analysislevellibrary_3_3_minimum.editorconfig",
        "build/config/analysislevellibrary_3_3_none.editorconfig",
        "build/config/analysislevellibrary_3_3_recommended.editorconfig",
        "build/config/analysislevellibrary_3_all.editorconfig",
        "build/config/analysislevellibrary_3_default.editorconfig",
        "build/config/analysislevellibrary_3_minimum.editorconfig",
        "build/config/analysislevellibrary_3_none.editorconfig",
        "build/config/analysislevellibrary_3_recommended.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysiscompatibility_2_9_8_all.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysiscompatibility_2_9_8_default.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysiscompatibility_2_9_8_minimum.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysiscompatibility_2_9_8_none.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysiscompatibility_2_9_8_recommended.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysiscompatibility_3_3_all.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysiscompatibility_3_3_default.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysiscompatibility_3_3_minimum.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysiscompatibility_3_3_none.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysiscompatibility_3_3_recommended.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysiscompatibility_3_all.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysiscompatibility_3_default.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysiscompatibility_3_minimum.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysiscompatibility_3_none.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysiscompatibility_3_recommended.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysiscorrectness_2_9_8_all.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysiscorrectness_2_9_8_default.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysiscorrectness_2_9_8_minimum.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysiscorrectness_2_9_8_none.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysiscorrectness_2_9_8_recommended.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysiscorrectness_3_3_all.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysiscorrectness_3_3_default.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysiscorrectness_3_3_minimum.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysiscorrectness_3_3_none.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysiscorrectness_3_3_recommended.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysiscorrectness_3_all.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysiscorrectness_3_default.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysiscorrectness_3_minimum.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysiscorrectness_3_none.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysiscorrectness_3_recommended.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisdesign_2_9_8_all.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisdesign_2_9_8_default.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisdesign_2_9_8_minimum.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisdesign_2_9_8_none.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisdesign_2_9_8_recommended.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisdesign_3_3_all.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisdesign_3_3_default.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisdesign_3_3_minimum.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisdesign_3_3_none.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisdesign_3_3_recommended.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisdesign_3_all.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisdesign_3_default.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisdesign_3_minimum.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisdesign_3_none.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisdesign_3_recommended.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisdocumentation_2_9_8_all.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisdocumentation_2_9_8_default.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisdocumentation_2_9_8_minimum.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisdocumentation_2_9_8_none.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisdocumentation_2_9_8_recommended.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisdocumentation_3_3_all.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisdocumentation_3_3_default.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisdocumentation_3_3_minimum.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisdocumentation_3_3_none.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisdocumentation_3_3_recommended.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisdocumentation_3_all.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisdocumentation_3_default.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisdocumentation_3_minimum.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisdocumentation_3_none.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisdocumentation_3_recommended.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysislocalization_2_9_8_all.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysislocalization_2_9_8_default.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysislocalization_2_9_8_minimum.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysislocalization_2_9_8_none.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysislocalization_2_9_8_recommended.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysislocalization_3_3_all.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysislocalization_3_3_default.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysislocalization_3_3_minimum.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysislocalization_3_3_none.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysislocalization_3_3_recommended.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysislocalization_3_all.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysislocalization_3_default.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysislocalization_3_minimum.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysislocalization_3_none.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysislocalization_3_recommended.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisperformance_2_9_8_all.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisperformance_2_9_8_default.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisperformance_2_9_8_minimum.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisperformance_2_9_8_none.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisperformance_2_9_8_recommended.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisperformance_3_3_all.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisperformance_3_3_default.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisperformance_3_3_minimum.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisperformance_3_3_none.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisperformance_3_3_recommended.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisperformance_3_all.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisperformance_3_default.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisperformance_3_minimum.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisperformance_3_none.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisperformance_3_recommended.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisreleasetracking_2_9_8_all.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisreleasetracking_2_9_8_default.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisreleasetracking_2_9_8_minimum.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisreleasetracking_2_9_8_none.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisreleasetracking_2_9_8_recommended.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisreleasetracking_3_3_all.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisreleasetracking_3_3_default.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisreleasetracking_3_3_minimum.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisreleasetracking_3_3_none.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisreleasetracking_3_3_recommended.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisreleasetracking_3_all.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisreleasetracking_3_default.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisreleasetracking_3_minimum.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisreleasetracking_3_none.editorconfig",
        "build/config/analysislevelmicrosoftcodeanalysisreleasetracking_3_recommended.editorconfig",
        "documentation/Analyzer Configuration.md",
        "documentation/Microsoft.CodeAnalysis.Analyzers.md",
        "documentation/Microsoft.CodeAnalysis.Analyzers.sarif",
        "editorconfig/AllRulesDefault/.editorconfig",
        "editorconfig/AllRulesDisabled/.editorconfig",
        "editorconfig/AllRulesEnabled/.editorconfig",
        "editorconfig/CorrectnessRulesDefault/.editorconfig",
        "editorconfig/CorrectnessRulesEnabled/.editorconfig",
        "editorconfig/DataflowRulesDefault/.editorconfig",
        "editorconfig/DataflowRulesEnabled/.editorconfig",
        "editorconfig/LibraryRulesDefault/.editorconfig",
        "editorconfig/LibraryRulesEnabled/.editorconfig",
        "editorconfig/MicrosoftCodeAnalysisCompatibilityRulesDefault/.editorconfig",
        "editorconfig/MicrosoftCodeAnalysisCompatibilityRulesEnabled/.editorconfig",
        "editorconfig/MicrosoftCodeAnalysisCorrectnessRulesDefault/.editorconfig",
        "editorconfig/MicrosoftCodeAnalysisCorrectnessRulesEnabled/.editorconfig",
        "editorconfig/MicrosoftCodeAnalysisDesignRulesDefault/.editorconfig",
        "editorconfig/MicrosoftCodeAnalysisDesignRulesEnabled/.editorconfig",
        "editorconfig/MicrosoftCodeAnalysisDocumentationRulesDefault/.editorconfig",
        "editorconfig/MicrosoftCodeAnalysisDocumentationRulesEnabled/.editorconfig",
        "editorconfig/MicrosoftCodeAnalysisLocalizationRulesDefault/.editorconfig",
        "editorconfig/MicrosoftCodeAnalysisLocalizationRulesEnabled/.editorconfig",
        "editorconfig/MicrosoftCodeAnalysisPerformanceRulesDefault/.editorconfig",
        "editorconfig/MicrosoftCodeAnalysisPerformanceRulesEnabled/.editorconfig",
        "editorconfig/MicrosoftCodeAnalysisReleaseTrackingRulesDefault/.editorconfig",
        "editorconfig/MicrosoftCodeAnalysisReleaseTrackingRulesEnabled/.editorconfig",
        "editorconfig/PortedFromFxCopRulesDefault/.editorconfig",
        "editorconfig/PortedFromFxCopRulesEnabled/.editorconfig",
        "microsoft.codeanalysis.analyzers.3.3.3.nupkg.sha512",
        "microsoft.codeanalysis.analyzers.nuspec",
        "rulesets/AllRulesDefault.ruleset",
        "rulesets/AllRulesDisabled.ruleset",
        "rulesets/AllRulesEnabled.ruleset",
        "rulesets/CorrectnessRulesDefault.ruleset",
        "rulesets/CorrectnessRulesEnabled.ruleset",
        "rulesets/DataflowRulesDefault.ruleset",
        "rulesets/DataflowRulesEnabled.ruleset",
        "rulesets/LibraryRulesDefault.ruleset",
        "rulesets/LibraryRulesEnabled.ruleset",
        "rulesets/MicrosoftCodeAnalysisCompatibilityRulesDefault.ruleset",
        "rulesets/MicrosoftCodeAnalysisCompatibilityRulesEnabled.ruleset",
        "rulesets/MicrosoftCodeAnalysisCorrectnessRulesDefault.ruleset",
        "rulesets/MicrosoftCodeAnalysisCorrectnessRulesEnabled.ruleset",
        "rulesets/MicrosoftCodeAnalysisDesignRulesDefault.ruleset",
        "rulesets/MicrosoftCodeAnalysisDesignRulesEnabled.ruleset",
        "rulesets/MicrosoftCodeAnalysisDocumentationRulesDefault.ruleset",
        "rulesets/MicrosoftCodeAnalysisDocumentationRulesEnabled.ruleset",
        "rulesets/MicrosoftCodeAnalysisLocalizationRulesDefault.ruleset",
        "rulesets/MicrosoftCodeAnalysisLocalizationRulesEnabled.ruleset",
        "rulesets/MicrosoftCodeAnalysisPerformanceRulesDefault.ruleset",
        "rulesets/MicrosoftCodeAnalysisPerformanceRulesEnabled.ruleset",
        "rulesets/MicrosoftCodeAnalysisReleaseTrackingRulesDefault.ruleset",
        "rulesets/MicrosoftCodeAnalysisReleaseTrackingRulesEnabled.ruleset",
        "rulesets/PortedFromFxCopRulesDefault.ruleset",
        "rulesets/PortedFromFxCopRulesEnabled.ruleset",
        "tools/install.ps1",
        "tools/uninstall.ps1"
      ]
    },
    "Microsoft.CodeAnalysis.Common/4.5.0": {
      "sha512": "lwAbIZNdnY0SUNoDmZHkVUwLO8UyNnyyh1t/4XsbFxi4Ounb3xszIYZaWhyj5ZjyfcwqwmtMbE7fUTVCqQEIdQ==",
      "type": "package",
      "path": "microsoft.codeanalysis.common/4.5.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "ThirdPartyNotices.rtf",
        "lib/netcoreapp3.1/Microsoft.CodeAnalysis.dll",
        "lib/netcoreapp3.1/Microsoft.CodeAnalysis.pdb",
        "lib/netcoreapp3.1/Microsoft.CodeAnalysis.xml",
        "lib/netcoreapp3.1/cs/Microsoft.CodeAnalysis.resources.dll",
        "lib/netcoreapp3.1/de/Microsoft.CodeAnalysis.resources.dll",
        "lib/netcoreapp3.1/es/Microsoft.CodeAnalysis.resources.dll",
        "lib/netcoreapp3.1/fr/Microsoft.CodeAnalysis.resources.dll",
        "lib/netcoreapp3.1/it/Microsoft.CodeAnalysis.resources.dll",
        "lib/netcoreapp3.1/ja/Microsoft.CodeAnalysis.resources.dll",
        "lib/netcoreapp3.1/ko/Microsoft.CodeAnalysis.resources.dll",
        "lib/netcoreapp3.1/pl/Microsoft.CodeAnalysis.resources.dll",
        "lib/netcoreapp3.1/pt-BR/Microsoft.CodeAnalysis.resources.dll",
        "lib/netcoreapp3.1/ru/Microsoft.CodeAnalysis.resources.dll",
        "lib/netcoreapp3.1/tr/Microsoft.CodeAnalysis.resources.dll",
        "lib/netcoreapp3.1/zh-Hans/Microsoft.CodeAnalysis.resources.dll",
        "lib/netcoreapp3.1/zh-Hant/Microsoft.CodeAnalysis.resources.dll",
        "lib/netstandard2.0/Microsoft.CodeAnalysis.dll",
        "lib/netstandard2.0/Microsoft.CodeAnalysis.pdb",
        "lib/netstandard2.0/Microsoft.CodeAnalysis.xml",
        "lib/netstandard2.0/cs/Microsoft.CodeAnalysis.resources.dll",
        "lib/netstandard2.0/de/Microsoft.CodeAnalysis.resources.dll",
        "lib/netstandard2.0/es/Microsoft.CodeAnalysis.resources.dll",
        "lib/netstandard2.0/fr/Microsoft.CodeAnalysis.resources.dll",
        "lib/netstandard2.0/it/Microsoft.CodeAnalysis.resources.dll",
        "lib/netstandard2.0/ja/Microsoft.CodeAnalysis.resources.dll",
        "lib/netstandard2.0/ko/Microsoft.CodeAnalysis.resources.dll",
        "lib/netstandard2.0/pl/Microsoft.CodeAnalysis.resources.dll",
        "lib/netstandard2.0/pt-BR/Microsoft.CodeAnalysis.resources.dll",
        "lib/netstandard2.0/ru/Microsoft.CodeAnalysis.resources.dll",
        "lib/netstandard2.0/tr/Microsoft.CodeAnalysis.resources.dll",
        "lib/netstandard2.0/zh-Hans/Microsoft.CodeAnalysis.resources.dll",
        "lib/netstandard2.0/zh-Hant/Microsoft.CodeAnalysis.resources.dll",
        "microsoft.codeanalysis.common.4.5.0.nupkg.sha512",
        "microsoft.codeanalysis.common.nuspec"
      ]
    },
    "Microsoft.CodeAnalysis.CSharp/4.5.0": {
      "sha512": "cM59oMKAOxvdv76bdmaKPy5hfj+oR+zxikWoueEB7CwTko7mt9sVKZI8Qxlov0C/LuKEG+WQwifepqL3vuTiBQ==",
      "type": "package",
      "path": "microsoft.codeanalysis.csharp/4.5.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "ThirdPartyNotices.rtf",
        "lib/netcoreapp3.1/Microsoft.CodeAnalysis.CSharp.dll",
        "lib/netcoreapp3.1/Microsoft.CodeAnalysis.CSharp.pdb",
        "lib/netcoreapp3.1/Microsoft.CodeAnalysis.CSharp.xml",
        "lib/netcoreapp3.1/cs/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/netcoreapp3.1/de/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/netcoreapp3.1/es/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/netcoreapp3.1/fr/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/netcoreapp3.1/it/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/netcoreapp3.1/ja/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/netcoreapp3.1/ko/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/netcoreapp3.1/pl/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/netcoreapp3.1/pt-BR/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/netcoreapp3.1/ru/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/netcoreapp3.1/tr/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/netcoreapp3.1/zh-Hans/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/netcoreapp3.1/zh-Hant/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/netstandard2.0/Microsoft.CodeAnalysis.CSharp.dll",
        "lib/netstandard2.0/Microsoft.CodeAnalysis.CSharp.pdb",
        "lib/netstandard2.0/Microsoft.CodeAnalysis.CSharp.xml",
        "lib/netstandard2.0/cs/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/netstandard2.0/de/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/netstandard2.0/es/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/netstandard2.0/fr/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/netstandard2.0/it/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/netstandard2.0/ja/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/netstandard2.0/ko/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/netstandard2.0/pl/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/netstandard2.0/pt-BR/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/netstandard2.0/ru/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/netstandard2.0/tr/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/netstandard2.0/zh-Hans/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "lib/netstandard2.0/zh-Hant/Microsoft.CodeAnalysis.CSharp.resources.dll",
        "microsoft.codeanalysis.csharp.4.5.0.nupkg.sha512",
        "microsoft.codeanalysis.csharp.nuspec"
      ]
    },
    "Microsoft.CodeAnalysis.CSharp.Workspaces/4.5.0": {
      "sha512": "h74wTpmGOp4yS4hj+EvNzEiPgg/KVs2wmSfTZ81upJZOtPkJsVkgfsgtxxqmAeapjT/vLKfmYV0bS8n5MNVP+g==",
      "type": "package",
      "path": "microsoft.codeanalysis.csharp.workspaces/4.5.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "ThirdPartyNotices.rtf",
        "lib/netcoreapp3.1/Microsoft.CodeAnalysis.CSharp.Workspaces.dll",
        "lib/netcoreapp3.1/Microsoft.CodeAnalysis.CSharp.Workspaces.pdb",
        "lib/netcoreapp3.1/Microsoft.CodeAnalysis.CSharp.Workspaces.xml",
        "lib/netcoreapp3.1/cs/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll",
        "lib/netcoreapp3.1/de/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll",
        "lib/netcoreapp3.1/es/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll",
        "lib/netcoreapp3.1/fr/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll",
        "lib/netcoreapp3.1/it/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll",
        "lib/netcoreapp3.1/ja/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll",
        "lib/netcoreapp3.1/ko/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll",
        "lib/netcoreapp3.1/pl/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll",
        "lib/netcoreapp3.1/pt-BR/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll",
        "lib/netcoreapp3.1/ru/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll",
        "lib/netcoreapp3.1/tr/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll",
        "lib/netcoreapp3.1/zh-Hans/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll",
        "lib/netcoreapp3.1/zh-Hant/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll",
        "lib/netstandard2.0/Microsoft.CodeAnalysis.CSharp.Workspaces.dll",
        "lib/netstandard2.0/Microsoft.CodeAnalysis.CSharp.Workspaces.pdb",
        "lib/netstandard2.0/Microsoft.CodeAnalysis.CSharp.Workspaces.xml",
        "lib/netstandard2.0/cs/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll",
        "lib/netstandard2.0/de/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll",
        "lib/netstandard2.0/es/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll",
        "lib/netstandard2.0/fr/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll",
        "lib/netstandard2.0/it/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll",
        "lib/netstandard2.0/ja/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll",
        "lib/netstandard2.0/ko/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll",
        "lib/netstandard2.0/pl/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll",
        "lib/netstandard2.0/pt-BR/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll",
        "lib/netstandard2.0/ru/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll",
        "lib/netstandard2.0/tr/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll",
        "lib/netstandard2.0/zh-Hans/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll",
        "lib/netstandard2.0/zh-Hant/Microsoft.CodeAnalysis.CSharp.Workspaces.resources.dll",
        "microsoft.codeanalysis.csharp.workspaces.4.5.0.nupkg.sha512",
        "microsoft.codeanalysis.csharp.workspaces.nuspec"
      ]
    },
    "Microsoft.CodeAnalysis.Workspaces.Common/4.5.0": {
      "sha512": "l4dDRmGELXG72XZaonnOeORyD/T5RpEu5LGHOUIhnv+MmUWDY/m1kWXGwtcgQ5CJ5ynkFiRnIYzTKXYjUs7rbw==",
      "type": "package",
      "path": "microsoft.codeanalysis.workspaces.common/4.5.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "ThirdPartyNotices.rtf",
        "lib/netcoreapp3.1/Microsoft.CodeAnalysis.Workspaces.dll",
        "lib/netcoreapp3.1/Microsoft.CodeAnalysis.Workspaces.pdb",
        "lib/netcoreapp3.1/Microsoft.CodeAnalysis.Workspaces.xml",
        "lib/netcoreapp3.1/cs/Microsoft.CodeAnalysis.Workspaces.resources.dll",
        "lib/netcoreapp3.1/de/Microsoft.CodeAnalysis.Workspaces.resources.dll",
        "lib/netcoreapp3.1/es/Microsoft.CodeAnalysis.Workspaces.resources.dll",
        "lib/netcoreapp3.1/fr/Microsoft.CodeAnalysis.Workspaces.resources.dll",
        "lib/netcoreapp3.1/it/Microsoft.CodeAnalysis.Workspaces.resources.dll",
        "lib/netcoreapp3.1/ja/Microsoft.CodeAnalysis.Workspaces.resources.dll",
        "lib/netcoreapp3.1/ko/Microsoft.CodeAnalysis.Workspaces.resources.dll",
        "lib/netcoreapp3.1/pl/Microsoft.CodeAnalysis.Workspaces.resources.dll",
        "lib/netcoreapp3.1/pt-BR/Microsoft.CodeAnalysis.Workspaces.resources.dll",
        "lib/netcoreapp3.1/ru/Microsoft.CodeAnalysis.Workspaces.resources.dll",
        "lib/netcoreapp3.1/tr/Microsoft.CodeAnalysis.Workspaces.resources.dll",
        "lib/netcoreapp3.1/zh-Hans/Microsoft.CodeAnalysis.Workspaces.resources.dll",
        "lib/netcoreapp3.1/zh-Hant/Microsoft.CodeAnalysis.Workspaces.resources.dll",
        "lib/netstandard2.0/Microsoft.CodeAnalysis.Workspaces.dll",
        "lib/netstandard2.0/Microsoft.CodeAnalysis.Workspaces.pdb",
        "lib/netstandard2.0/Microsoft.CodeAnalysis.Workspaces.xml",
        "lib/netstandard2.0/cs/Microsoft.CodeAnalysis.Workspaces.resources.dll",
        "lib/netstandard2.0/de/Microsoft.CodeAnalysis.Workspaces.resources.dll",
        "lib/netstandard2.0/es/Microsoft.CodeAnalysis.Workspaces.resources.dll",
        "lib/netstandard2.0/fr/Microsoft.CodeAnalysis.Workspaces.resources.dll",
        "lib/netstandard2.0/it/Microsoft.CodeAnalysis.Workspaces.resources.dll",
        "lib/netstandard2.0/ja/Microsoft.CodeAnalysis.Workspaces.resources.dll",
        "lib/netstandard2.0/ko/Microsoft.CodeAnalysis.Workspaces.resources.dll",
        "lib/netstandard2.0/pl/Microsoft.CodeAnalysis.Workspaces.resources.dll",
        "lib/netstandard2.0/pt-BR/Microsoft.CodeAnalysis.Workspaces.resources.dll",
        "lib/netstandard2.0/ru/Microsoft.CodeAnalysis.Workspaces.resources.dll",
        "lib/netstandard2.0/tr/Microsoft.CodeAnalysis.Workspaces.resources.dll",
        "lib/netstandard2.0/zh-Hans/Microsoft.CodeAnalysis.Workspaces.resources.dll",
        "lib/netstandard2.0/zh-Hant/Microsoft.CodeAnalysis.Workspaces.resources.dll",
        "microsoft.codeanalysis.workspaces.common.4.5.0.nupkg.sha512",
        "microsoft.codeanalysis.workspaces.common.nuspec"
      ]
    },
    "Microsoft.EntityFrameworkCore/8.0.2": {
      "sha512": "6QlvBx4rdawW3AkkCsGVV+8qRLk34aknV5JD40s1hbVR18vKmT2KDl2DW83nHcPX7f4oebQ3BD1UMNCI/gkE0g==",
      "type": "package",
      "path": "microsoft.entityframeworkcore/8.0.2",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "buildTransitive/net8.0/Microsoft.EntityFrameworkCore.props",
        "lib/net8.0/Microsoft.EntityFrameworkCore.dll",
        "lib/net8.0/Microsoft.EntityFrameworkCore.xml",
        "microsoft.entityframeworkcore.8.0.2.nupkg.sha512",
        "microsoft.entityframeworkcore.nuspec"
      ]
    },
    "Microsoft.EntityFrameworkCore.Abstractions/8.0.2": {
      "sha512": "DjDKp++BTKFZmX+xLTow7grQTY+pImKfhGW68Zf8myiL3zyJ3b8RZbnLsWGNCqKQIF6hJIz/zA/zmERobFwV0A==",
      "type": "package",
      "path": "microsoft.entityframeworkcore.abstractions/8.0.2",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "lib/net8.0/Microsoft.EntityFrameworkCore.Abstractions.dll",
        "lib/net8.0/Microsoft.EntityFrameworkCore.Abstractions.xml",
        "microsoft.entityframeworkcore.abstractions.8.0.2.nupkg.sha512",
        "microsoft.entityframeworkcore.abstractions.nuspec"
      ]
    },
    "Microsoft.EntityFrameworkCore.Analyzers/8.0.2": {
      "sha512": "LI7awhc0fiAKvcUemsqxXUWqzAH9ywTSyM1rpC1un4p5SE1bhr5nRLvyRVbKRzKakmnNNY3to8NPDnoySEkxVw==",
      "type": "package",
      "path": "microsoft.entityframeworkcore.analyzers/8.0.2",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "analyzers/dotnet/cs/Microsoft.EntityFrameworkCore.Analyzers.dll",
        "lib/netstandard2.0/_._",
        "microsoft.entityframeworkcore.analyzers.8.0.2.nupkg.sha512",
        "microsoft.entityframeworkcore.analyzers.nuspec"
      ]
    },
    "Microsoft.EntityFrameworkCore.Design/8.0.2": {
      "sha512": "lpSEopadyq4VjgErVbKXznlzmrdR+1zG4jjJlumgnDTz6Ov60qZkBn8uTfPYk0PUZ3wn+GNFOi3ouSTK4JKEIA==",
      "type": "package",
      "path": "microsoft.entityframeworkcore.design/8.0.2",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "build/net8.0/Microsoft.EntityFrameworkCore.Design.props",
        "lib/net8.0/Microsoft.EntityFrameworkCore.Design.dll",
        "lib/net8.0/Microsoft.EntityFrameworkCore.Design.xml",
        "microsoft.entityframeworkcore.design.8.0.2.nupkg.sha512",
        "microsoft.entityframeworkcore.design.nuspec"
      ]
    },
    "Microsoft.EntityFrameworkCore.Relational/8.0.2": {
      "sha512": "NoGfcq2OPw0z8XAPf74YFwGlTKjedWdsIEJqq4SvKcPjcu+B+/XDDNrDRxTvILfz4Ug8POSF49s1jz1JvUqTAg==",
      "type": "package",
      "path": "microsoft.entityframeworkcore.relational/8.0.2",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "lib/net8.0/Microsoft.EntityFrameworkCore.Relational.dll",
        "lib/net8.0/Microsoft.EntityFrameworkCore.Relational.xml",
        "microsoft.entityframeworkcore.relational.8.0.2.nupkg.sha512",
        "microsoft.entityframeworkcore.relational.nuspec"
      ]
    },
    "Microsoft.EntityFrameworkCore.Tools/8.0.2": {
      "sha512": "PWy3X3Z1fnWlbU6pQMSnBvMwqERoKsriJ688TMl1xT2NyqcSk6/dX22eI5eV+qYXYmYna72Dq2u0P8tNZ6AYtg==",
      "type": "package",
      "path": "microsoft.entityframeworkcore.tools/8.0.2",
      "hasTools": true,
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "lib/net8.0/_._",
        "microsoft.entityframeworkcore.tools.8.0.2.nupkg.sha512",
        "microsoft.entityframeworkcore.tools.nuspec",
        "tools/EntityFrameworkCore.PS2.psd1",
        "tools/EntityFrameworkCore.PS2.psm1",
        "tools/EntityFrameworkCore.psd1",
        "tools/EntityFrameworkCore.psm1",
        "tools/about_EntityFrameworkCore.help.txt",
        "tools/init.ps1",
        "tools/net461/any/ef.exe",
        "tools/net461/win-arm64/ef.exe",
        "tools/net461/win-x86/ef.exe",
        "tools/netcoreapp2.0/any/ef.dll",
        "tools/netcoreapp2.0/any/ef.runtimeconfig.json"
      ]
    },
    "Microsoft.Extensions.Caching.Abstractions/8.0.0": {
      "sha512": "3KuSxeHoNYdxVYfg2IRZCThcrlJ1XJqIXkAWikCsbm5C/bCjv7G0WoKDyuR98Q+T607QT2Zl5GsbGRkENcV2yQ==",
      "type": "package",
      "path": "microsoft.extensions.caching.abstractions/8.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "PACKAGE.md",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/net461/Microsoft.Extensions.Caching.Abstractions.targets",
        "buildTransitive/net462/_._",
        "buildTransitive/net6.0/_._",
        "buildTransitive/netcoreapp2.0/Microsoft.Extensions.Caching.Abstractions.targets",
        "lib/net462/Microsoft.Extensions.Caching.Abstractions.dll",
        "lib/net462/Microsoft.Extensions.Caching.Abstractions.xml",
        "lib/net6.0/Microsoft.Extensions.Caching.Abstractions.dll",
        "lib/net6.0/Microsoft.Extensions.Caching.Abstractions.xml",
        "lib/net7.0/Microsoft.Extensions.Caching.Abstractions.dll",
        "lib/net7.0/Microsoft.Extensions.Caching.Abstractions.xml",
        "lib/net8.0/Microsoft.Extensions.Caching.Abstractions.dll",
        "lib/net8.0/Microsoft.Extensions.Caching.Abstractions.xml",
        "lib/netstandard2.0/Microsoft.Extensions.Caching.Abstractions.dll",
        "lib/netstandard2.0/Microsoft.Extensions.Caching.Abstractions.xml",
        "microsoft.extensions.caching.abstractions.8.0.0.nupkg.sha512",
        "microsoft.extensions.caching.abstractions.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "Microsoft.Extensions.Caching.Memory/8.0.0": {
      "sha512": "7pqivmrZDzo1ADPkRwjy+8jtRKWRCPag9qPI+p7sgu7Q4QreWhcvbiWXsbhP+yY8XSiDvZpu2/LWdBv7PnmOpQ==",
      "type": "package",
      "path": "microsoft.extensions.caching.memory/8.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "PACKAGE.md",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/net461/Microsoft.Extensions.Caching.Memory.targets",
        "buildTransitive/net462/_._",
        "buildTransitive/net6.0/_._",
        "buildTransitive/netcoreapp2.0/Microsoft.Extensions.Caching.Memory.targets",
        "lib/net462/Microsoft.Extensions.Caching.Memory.dll",
        "lib/net462/Microsoft.Extensions.Caching.Memory.xml",
        "lib/net6.0/Microsoft.Extensions.Caching.Memory.dll",
        "lib/net6.0/Microsoft.Extensions.Caching.Memory.xml",
        "lib/net7.0/Microsoft.Extensions.Caching.Memory.dll",
        "lib/net7.0/Microsoft.Extensions.Caching.Memory.xml",
        "lib/net8.0/Microsoft.Extensions.Caching.Memory.dll",
        "lib/net8.0/Microsoft.Extensions.Caching.Memory.xml",
        "lib/netstandard2.0/Microsoft.Extensions.Caching.Memory.dll",
        "lib/netstandard2.0/Microsoft.Extensions.Caching.Memory.xml",
        "microsoft.extensions.caching.memory.8.0.0.nupkg.sha512",
        "microsoft.extensions.caching.memory.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "Microsoft.Extensions.Configuration.Abstractions/8.0.0": {
      "sha512": "3lE/iLSutpgX1CC0NOW70FJoGARRHbyKmG7dc0klnUZ9Dd9hS6N/POPWhKhMLCEuNN5nXEY5agmlFtH562vqhQ==",
      "type": "package",
      "path": "microsoft.extensions.configuration.abstractions/8.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "PACKAGE.md",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/net461/Microsoft.Extensions.Configuration.Abstractions.targets",
        "buildTransitive/net462/_._",
        "buildTransitive/net6.0/_._",
        "buildTransitive/netcoreapp2.0/Microsoft.Extensions.Configuration.Abstractions.targets",
        "lib/net462/Microsoft.Extensions.Configuration.Abstractions.dll",
        "lib/net462/Microsoft.Extensions.Configuration.Abstractions.xml",
        "lib/net6.0/Microsoft.Extensions.Configuration.Abstractions.dll",
        "lib/net6.0/Microsoft.Extensions.Configuration.Abstractions.xml",
        "lib/net7.0/Microsoft.Extensions.Configuration.Abstractions.dll",
        "lib/net7.0/Microsoft.Extensions.Configuration.Abstractions.xml",
        "lib/net8.0/Microsoft.Extensions.Configuration.Abstractions.dll",
        "lib/net8.0/Microsoft.Extensions.Configuration.Abstractions.xml",
        "lib/netstandard2.0/Microsoft.Extensions.Configuration.Abstractions.dll",
        "lib/netstandard2.0/Microsoft.Extensions.Configuration.Abstractions.xml",
        "microsoft.extensions.configuration.abstractions.8.0.0.nupkg.sha512",
        "microsoft.extensions.configuration.abstractions.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "Microsoft.Extensions.DependencyInjection/8.0.0": {
      "sha512": "V8S3bsm50ig6JSyrbcJJ8bW2b9QLGouz+G1miK3UTaOWmMtFwNNNzUf4AleyDWUmTrWMLNnFSLEQtxmxgNQnNQ==",
      "type": "package",
      "path": "microsoft.extensions.dependencyinjection/8.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "PACKAGE.md",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/net461/Microsoft.Extensions.DependencyInjection.targets",
        "buildTransitive/net462/_._",
        "buildTransitive/net6.0/_._",
        "buildTransitive/netcoreapp2.0/Microsoft.Extensions.DependencyInjection.targets",
        "lib/net462/Microsoft.Extensions.DependencyInjection.dll",
        "lib/net462/Microsoft.Extensions.DependencyInjection.xml",
        "lib/net6.0/Microsoft.Extensions.DependencyInjection.dll",
        "lib/net6.0/Microsoft.Extensions.DependencyInjection.xml",
        "lib/net7.0/Microsoft.Extensions.DependencyInjection.dll",
        "lib/net7.0/Microsoft.Extensions.DependencyInjection.xml",
        "lib/net8.0/Microsoft.Extensions.DependencyInjection.dll",
        "lib/net8.0/Microsoft.Extensions.DependencyInjection.xml",
        "lib/netstandard2.0/Microsoft.Extensions.DependencyInjection.dll",
        "lib/netstandard2.0/Microsoft.Extensions.DependencyInjection.xml",
        "lib/netstandard2.1/Microsoft.Extensions.DependencyInjection.dll",
        "lib/netstandard2.1/Microsoft.Extensions.DependencyInjection.xml",
        "microsoft.extensions.dependencyinjection.8.0.0.nupkg.sha512",
        "microsoft.extensions.dependencyinjection.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "Microsoft.Extensions.DependencyInjection.Abstractions/8.0.0": {
      "sha512": "cjWrLkJXK0rs4zofsK4bSdg+jhDLTaxrkXu4gS6Y7MAlCvRyNNgwY/lJi5RDlQOnSZweHqoyvgvbdvQsRIW+hg==",
      "type": "package",
      "path": "microsoft.extensions.dependencyinjection.abstractions/8.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "PACKAGE.md",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/net461/Microsoft.Extensions.DependencyInjection.Abstractions.targets",
        "buildTransitive/net462/_._",
        "buildTransitive/net6.0/_._",
        "buildTransitive/netcoreapp2.0/Microsoft.Extensions.DependencyInjection.Abstractions.targets",
        "lib/net462/Microsoft.Extensions.DependencyInjection.Abstractions.dll",
        "lib/net462/Microsoft.Extensions.DependencyInjection.Abstractions.xml",
        "lib/net6.0/Microsoft.Extensions.DependencyInjection.Abstractions.dll",
        "lib/net6.0/Microsoft.Extensions.DependencyInjection.Abstractions.xml",
        "lib/net7.0/Microsoft.Extensions.DependencyInjection.Abstractions.dll",
        "lib/net7.0/Microsoft.Extensions.DependencyInjection.Abstractions.xml",
        "lib/net8.0/Microsoft.Extensions.DependencyInjection.Abstractions.dll",
        "lib/net8.0/Microsoft.Extensions.DependencyInjection.Abstractions.xml",
        "lib/netstandard2.0/Microsoft.Extensions.DependencyInjection.Abstractions.dll",
        "lib/netstandard2.0/Microsoft.Extensions.DependencyInjection.Abstractions.xml",
        "lib/netstandard2.1/Microsoft.Extensions.DependencyInjection.Abstractions.dll",
        "lib/netstandard2.1/Microsoft.Extensions.DependencyInjection.Abstractions.xml",
        "microsoft.extensions.dependencyinjection.abstractions.8.0.0.nupkg.sha512",
        "microsoft.extensions.dependencyinjection.abstractions.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "Microsoft.Extensions.DependencyModel/8.0.0": {
      "sha512": "NSmDw3K0ozNDgShSIpsZcbFIzBX4w28nDag+TfaQujkXGazBm+lid5onlWoCBy4VsLxqnnKjEBbGSJVWJMf43g==",
      "type": "package",
      "path": "microsoft.extensions.dependencymodel/8.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "PACKAGE.md",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/net461/Microsoft.Extensions.DependencyModel.targets",
        "buildTransitive/net462/_._",
        "buildTransitive/net6.0/_._",
        "buildTransitive/netcoreapp2.0/Microsoft.Extensions.DependencyModel.targets",
        "lib/net462/Microsoft.Extensions.DependencyModel.dll",
        "lib/net462/Microsoft.Extensions.DependencyModel.xml",
        "lib/net6.0/Microsoft.Extensions.DependencyModel.dll",
        "lib/net6.0/Microsoft.Extensions.DependencyModel.xml",
        "lib/net7.0/Microsoft.Extensions.DependencyModel.dll",
        "lib/net7.0/Microsoft.Extensions.DependencyModel.xml",
        "lib/net8.0/Microsoft.Extensions.DependencyModel.dll",
        "lib/net8.0/Microsoft.Extensions.DependencyModel.xml",
        "lib/netstandard2.0/Microsoft.Extensions.DependencyModel.dll",
        "lib/netstandard2.0/Microsoft.Extensions.DependencyModel.xml",
        "microsoft.extensions.dependencymodel.8.0.0.nupkg.sha512",
        "microsoft.extensions.dependencymodel.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "Microsoft.Extensions.Logging/8.0.0": {
      "sha512": "tvRkov9tAJ3xP51LCv3FJ2zINmv1P8Hi8lhhtcKGqM+ImiTCC84uOPEI4z8Cdq2C3o9e+Aa0Gw0rmrsJD77W+w==",
      "type": "package",
      "path": "microsoft.extensions.logging/8.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "PACKAGE.md",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/net461/Microsoft.Extensions.Logging.targets",
        "buildTransitive/net462/_._",
        "buildTransitive/net6.0/_._",
        "buildTransitive/netcoreapp2.0/Microsoft.Extensions.Logging.targets",
        "lib/net462/Microsoft.Extensions.Logging.dll",
        "lib/net462/Microsoft.Extensions.Logging.xml",
        "lib/net6.0/Microsoft.Extensions.Logging.dll",
        "lib/net6.0/Microsoft.Extensions.Logging.xml",
        "lib/net7.0/Microsoft.Extensions.Logging.dll",
        "lib/net7.0/Microsoft.Extensions.Logging.xml",
        "lib/net8.0/Microsoft.Extensions.Logging.dll",
        "lib/net8.0/Microsoft.Extensions.Logging.xml",
        "lib/netstandard2.0/Microsoft.Extensions.Logging.dll",
        "lib/netstandard2.0/Microsoft.Extensions.Logging.xml",
        "lib/netstandard2.1/Microsoft.Extensions.Logging.dll",
        "lib/netstandard2.1/Microsoft.Extensions.Logging.xml",
        "microsoft.extensions.logging.8.0.0.nupkg.sha512",
        "microsoft.extensions.logging.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "Microsoft.Extensions.Logging.Abstractions/8.0.0": {
      "sha512": "arDBqTgFCyS0EvRV7O3MZturChstm50OJ0y9bDJvAcmEPJm0FFpFyjU/JLYyStNGGey081DvnQYlncNX5SJJGA==",
      "type": "package",
      "path": "microsoft.extensions.logging.abstractions/8.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "PACKAGE.md",
        "THIRD-PARTY-NOTICES.TXT",
        "analyzers/dotnet/roslyn3.11/cs/Microsoft.Extensions.Logging.Generators.dll",
        "analyzers/dotnet/roslyn3.11/cs/cs/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/de/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/es/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/fr/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/it/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/ja/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/ko/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/pl/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/pt-BR/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/ru/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/tr/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/zh-Hans/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/zh-Hant/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/Microsoft.Extensions.Logging.Generators.dll",
        "analyzers/dotnet/roslyn4.0/cs/cs/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/de/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/es/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/fr/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/it/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/ja/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/ko/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/pl/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/pt-BR/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/ru/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/tr/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/zh-Hans/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/zh-Hant/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/Microsoft.Extensions.Logging.Generators.dll",
        "analyzers/dotnet/roslyn4.4/cs/cs/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/de/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/es/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/fr/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/it/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/ja/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/ko/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/pl/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/pt-BR/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/ru/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/tr/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/zh-Hans/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/zh-Hant/Microsoft.Extensions.Logging.Generators.resources.dll",
        "buildTransitive/net461/Microsoft.Extensions.Logging.Abstractions.targets",
        "buildTransitive/net462/Microsoft.Extensions.Logging.Abstractions.targets",
        "buildTransitive/net6.0/Microsoft.Extensions.Logging.Abstractions.targets",
        "buildTransitive/netcoreapp2.0/Microsoft.Extensions.Logging.Abstractions.targets",
        "buildTransitive/netstandard2.0/Microsoft.Extensions.Logging.Abstractions.targets",
        "lib/net462/Microsoft.Extensions.Logging.Abstractions.dll",
        "lib/net462/Microsoft.Extensions.Logging.Abstractions.xml",
        "lib/net6.0/Microsoft.Extensions.Logging.Abstractions.dll",
        "lib/net6.0/Microsoft.Extensions.Logging.Abstractions.xml",
        "lib/net7.0/Microsoft.Extensions.Logging.Abstractions.dll",
        "lib/net7.0/Microsoft.Extensions.Logging.Abstractions.xml",
        "lib/net8.0/Microsoft.Extensions.Logging.Abstractions.dll",
        "lib/net8.0/Microsoft.Extensions.Logging.Abstractions.xml",
        "lib/netstandard2.0/Microsoft.Extensions.Logging.Abstractions.dll",
        "lib/netstandard2.0/Microsoft.Extensions.Logging.Abstractions.xml",
        "microsoft.extensions.logging.abstractions.8.0.0.nupkg.sha512",
        "microsoft.extensions.logging.abstractions.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "Microsoft.Extensions.Options/8.0.0": {
      "sha512": "JOVOfqpnqlVLUzINQ2fox8evY2SKLYJ3BV8QDe/Jyp21u1T7r45x/R/5QdteURMR5r01GxeJSBBUOCOyaNXA3g==",
      "type": "package",
      "path": "microsoft.extensions.options/8.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "PACKAGE.md",
        "THIRD-PARTY-NOTICES.TXT",
        "analyzers/dotnet/roslyn4.4/cs/Microsoft.Extensions.Options.SourceGeneration.dll",
        "analyzers/dotnet/roslyn4.4/cs/cs/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/de/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/es/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/fr/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/it/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/ja/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/ko/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/pl/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/pt-BR/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/ru/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/tr/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/zh-Hans/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/zh-Hant/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "buildTransitive/net461/Microsoft.Extensions.Options.targets",
        "buildTransitive/net462/Microsoft.Extensions.Options.targets",
        "buildTransitive/net6.0/Microsoft.Extensions.Options.targets",
        "buildTransitive/netcoreapp2.0/Microsoft.Extensions.Options.targets",
        "buildTransitive/netstandard2.0/Microsoft.Extensions.Options.targets",
        "lib/net462/Microsoft.Extensions.Options.dll",
        "lib/net462/Microsoft.Extensions.Options.xml",
        "lib/net6.0/Microsoft.Extensions.Options.dll",
        "lib/net6.0/Microsoft.Extensions.Options.xml",
        "lib/net7.0/Microsoft.Extensions.Options.dll",
        "lib/net7.0/Microsoft.Extensions.Options.xml",
        "lib/net8.0/Microsoft.Extensions.Options.dll",
        "lib/net8.0/Microsoft.Extensions.Options.xml",
        "lib/netstandard2.0/Microsoft.Extensions.Options.dll",
        "lib/netstandard2.0/Microsoft.Extensions.Options.xml",
        "lib/netstandard2.1/Microsoft.Extensions.Options.dll",
        "lib/netstandard2.1/Microsoft.Extensions.Options.xml",
        "microsoft.extensions.options.8.0.0.nupkg.sha512",
        "microsoft.extensions.options.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "Microsoft.Extensions.Primitives/8.0.0": {
      "sha512": "bXJEZrW9ny8vjMF1JV253WeLhpEVzFo1lyaZu1vQ4ZxWUlVvknZ/+ftFgVheLubb4eZPSwwxBeqS1JkCOjxd8g==",
      "type": "package",
      "path": "microsoft.extensions.primitives/8.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "PACKAGE.md",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/net461/Microsoft.Extensions.Primitives.targets",
        "buildTransitive/net462/_._",
        "buildTransitive/net6.0/_._",
        "buildTransitive/netcoreapp2.0/Microsoft.Extensions.Primitives.targets",
        "lib/net462/Microsoft.Extensions.Primitives.dll",
        "lib/net462/Microsoft.Extensions.Primitives.xml",
        "lib/net6.0/Microsoft.Extensions.Primitives.dll",
        "lib/net6.0/Microsoft.Extensions.Primitives.xml",
        "lib/net7.0/Microsoft.Extensions.Primitives.dll",
        "lib/net7.0/Microsoft.Extensions.Primitives.xml",
        "lib/net8.0/Microsoft.Extensions.Primitives.dll",
        "lib/net8.0/Microsoft.Extensions.Primitives.xml",
        "lib/netstandard2.0/Microsoft.Extensions.Primitives.dll",
        "lib/netstandard2.0/Microsoft.Extensions.Primitives.xml",
        "microsoft.extensions.primitives.8.0.0.nupkg.sha512",
        "microsoft.extensions.primitives.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "Mono.TextTemplating/2.2.1": {
      "sha512": "KZYeKBET/2Z0gY1WlTAK7+RHTl7GSbtvTLDXEZZojUdAPqpQNDL6tHv7VUpqfX5VEOh+uRGKaZXkuD253nEOBQ==",
      "type": "package",
      "path": "mono.texttemplating/2.2.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "lib/net472/Mono.TextTemplating.dll",
        "lib/netstandard2.0/Mono.TextTemplating.dll",
        "mono.texttemplating.2.2.1.nupkg.sha512",
        "mono.texttemplating.nuspec"
      ]
    },
    "Npgsql/8.0.2": {
      "sha512": "MuJzLoWCaQhQAR3oh66YR0Ir6mxuezncGX3f8wxvAc21g0+9HICktJQlqMoODhxztZKXE5k9GxRxqUAN+vPb4g==",
      "type": "package",
      "path": "npgsql/8.0.2",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "README.md",
        "lib/net6.0/Npgsql.dll",
        "lib/net6.0/Npgsql.xml",
        "lib/net7.0/Npgsql.dll",
        "lib/net7.0/Npgsql.xml",
        "lib/net8.0/Npgsql.dll",
        "lib/net8.0/Npgsql.xml",
        "lib/netstandard2.0/Npgsql.dll",
        "lib/netstandard2.0/Npgsql.xml",
        "lib/netstandard2.1/Npgsql.dll",
        "lib/netstandard2.1/Npgsql.xml",
        "npgsql.8.0.2.nupkg.sha512",
        "npgsql.nuspec",
        "postgresql.png"
      ]
    },
    "Npgsql.EntityFrameworkCore.PostgreSQL/8.0.2": {
      "sha512": "eoZPynwkZTWFTgnocvXORuCL2yFZtscrUdqVhjxiRULpC7BMg9zhLM5oDZAU5PoX1PgN77hmkKE4a3PQiHqh7Q==",
      "type": "package",
      "path": "npgsql.entityframeworkcore.postgresql/8.0.2",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "README.md",
        "lib/net8.0/Npgsql.EntityFrameworkCore.PostgreSQL.dll",
        "lib/net8.0/Npgsql.EntityFrameworkCore.PostgreSQL.xml",
        "npgsql.entityframeworkcore.postgresql.8.0.2.nupkg.sha512",
        "npgsql.entityframeworkcore.postgresql.nuspec",
        "postgresql.png"
      ]
    },
    "System.CodeDom/4.4.0": {
      "sha512": "2sCCb7doXEwtYAbqzbF/8UAeDRMNmPaQbU2q50Psg1J9KzumyVVCgKQY8s53WIPTufNT0DpSe9QRvVjOzfDWBA==",
      "type": "package",
      "path": "system.codedom/4.4.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "LICENSE.TXT",
        "THIRD-PARTY-NOTICES.TXT",
        "lib/net461/System.CodeDom.dll",
        "lib/netstandard2.0/System.CodeDom.dll",
        "ref/net461/System.CodeDom.dll",
        "ref/net461/System.CodeDom.xml",
        "ref/netstandard2.0/System.CodeDom.dll",
        "ref/netstandard2.0/System.CodeDom.xml",
        "system.codedom.4.4.0.nupkg.sha512",
        "system.codedom.nuspec",
        "useSharedDesignerContext.txt",
        "version.txt"
      ]
    },
    "System.Collections.Immutable/6.0.0": {
      "sha512": "l4zZJ1WU2hqpQQHXz1rvC3etVZN+2DLmQMO79FhOTZHMn8tDRr+WU287sbomD0BETlmKDn0ygUgVy9k5xkkJdA==",
      "type": "package",
      "path": "system.collections.immutable/6.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/netcoreapp2.0/System.Collections.Immutable.targets",
        "buildTransitive/netcoreapp3.1/_._",
        "lib/net461/System.Collections.Immutable.dll",
        "lib/net461/System.Collections.Immutable.xml",
        "lib/net6.0/System.Collections.Immutable.dll",
        "lib/net6.0/System.Collections.Immutable.xml",
        "lib/netstandard2.0/System.Collections.Immutable.dll",
        "lib/netstandard2.0/System.Collections.Immutable.xml",
        "system.collections.immutable.6.0.0.nupkg.sha512",
        "system.collections.immutable.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "System.Composition/6.0.0": {
      "sha512": "d7wMuKQtfsxUa7S13tITC8n1cQzewuhD5iDjZtK2prwFfKVzdYtgrTHgjaV03Zq7feGQ5gkP85tJJntXwInsJA==",
      "type": "package",
      "path": "system.composition/6.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/netcoreapp2.0/System.Composition.targets",
        "buildTransitive/netcoreapp3.1/_._",
        "system.composition.6.0.0.nupkg.sha512",
        "system.composition.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "System.Composition.AttributedModel/6.0.0": {
      "sha512": "WK1nSDLByK/4VoC7fkNiFuTVEiperuCN/Hyn+VN30R+W2ijO1d0Z2Qm0ScEl9xkSn1G2MyapJi8xpf4R8WRa/w==",
      "type": "package",
      "path": "system.composition.attributedmodel/6.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/netcoreapp2.0/System.Composition.AttributedModel.targets",
        "buildTransitive/netcoreapp3.1/_._",
        "lib/net461/System.Composition.AttributedModel.dll",
        "lib/net461/System.Composition.AttributedModel.xml",
        "lib/net6.0/System.Composition.AttributedModel.dll",
        "lib/net6.0/System.Composition.AttributedModel.xml",
        "lib/netstandard2.0/System.Composition.AttributedModel.dll",
        "lib/netstandard2.0/System.Composition.AttributedModel.xml",
        "system.composition.attributedmodel.6.0.0.nupkg.sha512",
        "system.composition.attributedmodel.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "System.Composition.Convention/6.0.0": {
      "sha512": "XYi4lPRdu5bM4JVJ3/UIHAiG6V6lWWUlkhB9ab4IOq0FrRsp0F4wTyV4Dj+Ds+efoXJ3qbLqlvaUozDO7OLeXA==",
      "type": "package",
      "path": "system.composition.convention/6.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/netcoreapp2.0/System.Composition.Convention.targets",
        "buildTransitive/netcoreapp3.1/_._",
        "lib/net461/System.Composition.Convention.dll",
        "lib/net461/System.Composition.Convention.xml",
        "lib/net6.0/System.Composition.Convention.dll",
        "lib/net6.0/System.Composition.Convention.xml",
        "lib/netstandard2.0/System.Composition.Convention.dll",
        "lib/netstandard2.0/System.Composition.Convention.xml",
        "system.composition.convention.6.0.0.nupkg.sha512",
        "system.composition.convention.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "System.Composition.Hosting/6.0.0": {
      "sha512": "w/wXjj7kvxuHPLdzZ0PAUt++qJl03t7lENmb2Oev0n3zbxyNULbWBlnd5J5WUMMv15kg5o+/TCZFb6lSwfaUUQ==",
      "type": "package",
      "path": "system.composition.hosting/6.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/netcoreapp2.0/System.Composition.Hosting.targets",
        "buildTransitive/netcoreapp3.1/_._",
        "lib/net461/System.Composition.Hosting.dll",
        "lib/net461/System.Composition.Hosting.xml",
        "lib/net6.0/System.Composition.Hosting.dll",
        "lib/net6.0/System.Composition.Hosting.xml",
        "lib/netstandard2.0/System.Composition.Hosting.dll",
        "lib/netstandard2.0/System.Composition.Hosting.xml",
        "system.composition.hosting.6.0.0.nupkg.sha512",
        "system.composition.hosting.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "System.Composition.Runtime/6.0.0": {
      "sha512": "qkRH/YBaMPTnzxrS5RDk1juvqed4A6HOD/CwRcDGyPpYps1J27waBddiiq1y93jk2ZZ9wuA/kynM+NO0kb3PKg==",
      "type": "package",
      "path": "system.composition.runtime/6.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/netcoreapp2.0/System.Composition.Runtime.targets",
        "buildTransitive/netcoreapp3.1/_._",
        "lib/net461/System.Composition.Runtime.dll",
        "lib/net461/System.Composition.Runtime.xml",
        "lib/net6.0/System.Composition.Runtime.dll",
        "lib/net6.0/System.Composition.Runtime.xml",
        "lib/netstandard2.0/System.Composition.Runtime.dll",
        "lib/netstandard2.0/System.Composition.Runtime.xml",
        "system.composition.runtime.6.0.0.nupkg.sha512",
        "system.composition.runtime.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "System.Composition.TypedParts/6.0.0": {
      "sha512": "iUR1eHrL8Cwd82neQCJ00MpwNIBs4NZgXzrPqx8NJf/k4+mwBO0XCRmHYJT4OLSwDDqh5nBLJWkz5cROnrGhRA==",
      "type": "package",
      "path": "system.composition.typedparts/6.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/netcoreapp2.0/System.Composition.TypedParts.targets",
        "buildTransitive/netcoreapp3.1/_._",
        "lib/net461/System.Composition.TypedParts.dll",
        "lib/net461/System.Composition.TypedParts.xml",
        "lib/net6.0/System.Composition.TypedParts.dll",
        "lib/net6.0/System.Composition.TypedParts.xml",
        "lib/netstandard2.0/System.Composition.TypedParts.dll",
        "lib/netstandard2.0/System.Composition.TypedParts.xml",
        "system.composition.typedparts.6.0.0.nupkg.sha512",
        "system.composition.typedparts.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "System.IO.Pipelines/6.0.3": {
      "sha512": "ryTgF+iFkpGZY1vRQhfCzX0xTdlV3pyaTTqRu2ETbEv+HlV7O6y7hyQURnghNIXvctl5DuZ//Dpks6HdL/Txgw==",
      "type": "package",
      "path": "system.io.pipelines/6.0.3",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/netcoreapp2.0/System.IO.Pipelines.targets",
        "buildTransitive/netcoreapp3.1/_._",
        "lib/net461/System.IO.Pipelines.dll",
        "lib/net461/System.IO.Pipelines.xml",
        "lib/net6.0/System.IO.Pipelines.dll",
        "lib/net6.0/System.IO.Pipelines.xml",
        "lib/netcoreapp3.1/System.IO.Pipelines.dll",
        "lib/netcoreapp3.1/System.IO.Pipelines.xml",
        "lib/netstandard2.0/System.IO.Pipelines.dll",
        "lib/netstandard2.0/System.IO.Pipelines.xml",
        "system.io.pipelines.6.0.3.nupkg.sha512",
        "system.io.pipelines.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "System.Reflection.Metadata/6.0.1": {
      "sha512": "III/lNMSn0ZRBuM9m5Cgbiho5j81u0FAEagFX5ta2DKbljZ3T0IpD8j+BIiHQPeKqJppWS9bGEp6JnKnWKze0g==",
      "type": "package",
      "path": "system.reflection.metadata/6.0.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/netcoreapp2.0/System.Reflection.Metadata.targets",
        "buildTransitive/netcoreapp3.1/_._",
        "lib/net461/System.Reflection.Metadata.dll",
        "lib/net461/System.Reflection.Metadata.xml",
        "lib/net6.0/System.Reflection.Metadata.dll",
        "lib/net6.0/System.Reflection.Metadata.xml",
        "lib/netstandard2.0/System.Reflection.Metadata.dll",
        "lib/netstandard2.0/System.Reflection.Metadata.xml",
        "system.reflection.metadata.6.0.1.nupkg.sha512",
        "system.reflection.metadata.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "System.Runtime.CompilerServices.Unsafe/6.0.0": {
      "sha512": "/iUeP3tq1S0XdNNoMz5C9twLSrM/TH+qElHkXWaPvuNOt+99G75NrV0OS2EqHx5wMN7popYjpc8oTjC1y16DLg==",
      "type": "package",
      "path": "system.runtime.compilerservices.unsafe/6.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/netcoreapp2.0/System.Runtime.CompilerServices.Unsafe.targets",
        "buildTransitive/netcoreapp3.1/_._",
        "lib/net461/System.Runtime.CompilerServices.Unsafe.dll",
        "lib/net461/System.Runtime.CompilerServices.Unsafe.xml",
        "lib/net6.0/System.Runtime.CompilerServices.Unsafe.dll",
        "lib/net6.0/System.Runtime.CompilerServices.Unsafe.xml",
        "lib/netcoreapp3.1/System.Runtime.CompilerServices.Unsafe.dll",
        "lib/netcoreapp3.1/System.Runtime.CompilerServices.Unsafe.xml",
        "lib/netstandard2.0/System.Runtime.CompilerServices.Unsafe.dll",
        "lib/netstandard2.0/System.Runtime.CompilerServices.Unsafe.xml",
        "system.runtime.compilerservices.unsafe.6.0.0.nupkg.sha512",
        "system.runtime.compilerservices.unsafe.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "System.Text.Encoding.CodePages/6.0.0": {
      "sha512": "ZFCILZuOvtKPauZ/j/swhvw68ZRi9ATCfvGbk1QfydmcXBkIWecWKn/250UH7rahZ5OoDBaiAudJtPvLwzw85A==",
      "type": "package",
      "path": "system.text.encoding.codepages/6.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/netcoreapp2.0/System.Text.Encoding.CodePages.targets",
        "buildTransitive/netcoreapp3.1/_._",
        "lib/MonoAndroid10/_._",
        "lib/MonoTouch10/_._",
        "lib/net461/System.Text.Encoding.CodePages.dll",
        "lib/net461/System.Text.Encoding.CodePages.xml",
        "lib/net6.0/System.Text.Encoding.CodePages.dll",
        "lib/net6.0/System.Text.Encoding.CodePages.xml",
        "lib/netcoreapp3.1/System.Text.Encoding.CodePages.dll",
        "lib/netcoreapp3.1/System.Text.Encoding.CodePages.xml",
        "lib/netstandard2.0/System.Text.Encoding.CodePages.dll",
        "lib/netstandard2.0/System.Text.Encoding.CodePages.xml",
        "lib/xamarinios10/_._",
        "lib/xamarinmac20/_._",
        "lib/xamarintvos10/_._",
        "lib/xamarinwatchos10/_._",
        "runtimes/win/lib/net461/System.Text.Encoding.CodePages.dll",
        "runtimes/win/lib/net461/System.Text.Encoding.CodePages.xml",
        "runtimes/win/lib/net6.0/System.Text.Encoding.CodePages.dll",
        "runtimes/win/lib/net6.0/System.Text.Encoding.CodePages.xml",
        "runtimes/win/lib/netcoreapp3.1/System.Text.Encoding.CodePages.dll",
        "runtimes/win/lib/netcoreapp3.1/System.Text.Encoding.CodePages.xml",
        "runtimes/win/lib/netstandard2.0/System.Text.Encoding.CodePages.dll",
        "runtimes/win/lib/netstandard2.0/System.Text.Encoding.CodePages.xml",
        "system.text.encoding.codepages.6.0.0.nupkg.sha512",
        "system.text.encoding.codepages.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "System.Text.Encodings.Web/8.0.0": {
      "sha512": "yev/k9GHAEGx2Rg3/tU6MQh4HGBXJs70y7j1LaM1i/ER9po+6nnQ6RRqTJn1E7Xu0fbIFK80Nh5EoODxrbxwBQ==",
      "type": "package",
      "path": "system.text.encodings.web/8.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/net461/System.Text.Encodings.Web.targets",
        "buildTransitive/net462/_._",
        "buildTransitive/net6.0/_._",
        "buildTransitive/netcoreapp2.0/System.Text.Encodings.Web.targets",
        "lib/net462/System.Text.Encodings.Web.dll",
        "lib/net462/System.Text.Encodings.Web.xml",
        "lib/net6.0/System.Text.Encodings.Web.dll",
        "lib/net6.0/System.Text.Encodings.Web.xml",
        "lib/net7.0/System.Text.Encodings.Web.dll",
        "lib/net7.0/System.Text.Encodings.Web.xml",
        "lib/net8.0/System.Text.Encodings.Web.dll",
        "lib/net8.0/System.Text.Encodings.Web.xml",
        "lib/netstandard2.0/System.Text.Encodings.Web.dll",
        "lib/netstandard2.0/System.Text.Encodings.Web.xml",
        "runtimes/browser/lib/net6.0/System.Text.Encodings.Web.dll",
        "runtimes/browser/lib/net6.0/System.Text.Encodings.Web.xml",
        "runtimes/browser/lib/net7.0/System.Text.Encodings.Web.dll",
        "runtimes/browser/lib/net7.0/System.Text.Encodings.Web.xml",
        "runtimes/browser/lib/net8.0/System.Text.Encodings.Web.dll",
        "runtimes/browser/lib/net8.0/System.Text.Encodings.Web.xml",
        "system.text.encodings.web.8.0.0.nupkg.sha512",
        "system.text.encodings.web.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "System.Text.Json/8.0.0": {
      "sha512": "OdrZO2WjkiEG6ajEFRABTRCi/wuXQPxeV6g8xvUJqdxMvvuCCEk86zPla8UiIQJz3durtUEbNyY/3lIhS0yZvQ==",
      "type": "package",
      "path": "system.text.json/8.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "PACKAGE.md",
        "THIRD-PARTY-NOTICES.TXT",
        "analyzers/dotnet/roslyn3.11/cs/System.Text.Json.SourceGeneration.dll",
        "analyzers/dotnet/roslyn3.11/cs/cs/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/de/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/es/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/fr/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/it/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/ja/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/ko/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/pl/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/pt-BR/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/ru/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/tr/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/zh-Hans/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/zh-Hant/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/System.Text.Json.SourceGeneration.dll",
        "analyzers/dotnet/roslyn4.0/cs/cs/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/de/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/es/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/fr/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/it/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/ja/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/ko/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/pl/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/pt-BR/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/ru/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/tr/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/zh-Hans/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/zh-Hant/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/System.Text.Json.SourceGeneration.dll",
        "analyzers/dotnet/roslyn4.4/cs/cs/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/de/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/es/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/fr/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/it/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/ja/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/ko/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/pl/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/pt-BR/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/ru/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/tr/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/zh-Hans/System.Text.Json.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/zh-Hant/System.Text.Json.SourceGeneration.resources.dll",
        "buildTransitive/net461/System.Text.Json.targets",
        "buildTransitive/net462/System.Text.Json.targets",
        "buildTransitive/net6.0/System.Text.Json.targets",
        "buildTransitive/netcoreapp2.0/System.Text.Json.targets",
        "buildTransitive/netstandard2.0/System.Text.Json.targets",
        "lib/net462/System.Text.Json.dll",
        "lib/net462/System.Text.Json.xml",
        "lib/net6.0/System.Text.Json.dll",
        "lib/net6.0/System.Text.Json.xml",
        "lib/net7.0/System.Text.Json.dll",
        "lib/net7.0/System.Text.Json.xml",
        "lib/net8.0/System.Text.Json.dll",
        "lib/net8.0/System.Text.Json.xml",
        "lib/netstandard2.0/System.Text.Json.dll",
        "lib/netstandard2.0/System.Text.Json.xml",
        "system.text.json.8.0.0.nupkg.sha512",
        "system.text.json.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "System.Threading.Channels/6.0.0": {
      "sha512": "TY8/9+tI0mNaUMgntOxxaq2ndTkdXqLSxvPmas7XEqOlv9lQtB7wLjYGd756lOaO7Dvb5r/WXhluM+0Xe87v5Q==",
      "type": "package",
      "path": "system.threading.channels/6.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/netcoreapp2.0/System.Threading.Channels.targets",
        "buildTransitive/netcoreapp3.1/_._",
        "lib/net461/System.Threading.Channels.dll",
        "lib/net461/System.Threading.Channels.xml",
        "lib/net6.0/System.Threading.Channels.dll",
        "lib/net6.0/System.Threading.Channels.xml",
        "lib/netcoreapp3.1/System.Threading.Channels.dll",
        "lib/netcoreapp3.1/System.Threading.Channels.xml",
        "lib/netstandard2.0/System.Threading.Channels.dll",
        "lib/netstandard2.0/System.Threading.Channels.xml",
        "lib/netstandard2.1/System.Threading.Channels.dll",
        "lib/netstandard2.1/System.Threading.Channels.xml",
        "system.threading.channels.6.0.0.nupkg.sha512",
        "system.threading.channels.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "Portfolio.Application/1.0.0": {
      "type": "project",
      "path": "../Portfolio.Application/Portfolio.Application.csproj",
      "msbuildProject": "../Portfolio.Application/Portfolio.Application.csproj"
    },
    "Portfolio.Domain/1.0.0": {
      "type": "project",
      "path": "../Portfolio.Domain/Portfolio.Domain.csproj",
      "msbuildProject": "../Portfolio.Domain/Portfolio.Domain.csproj"
    }
  },
  "projectFileDependencyGroups": {
    "net8.0": [
      "AutoMapper >= 13.0.1",
      "MediatR >= 12.2.0",
      "Microsoft.EntityFrameworkCore >= 8.0.2",
      "Microsoft.EntityFrameworkCore.Design >= 8.0.2",
      "Microsoft.EntityFrameworkCore.Tools >= 8.0.2",
      "Microsoft.Extensions.Configuration.Abstractions >= 8.0.0",
      "Microsoft.Extensions.DependencyInjection.Abstractions >= 8.0.0",
      "Npgsql.EntityFrameworkCore.PostgreSQL >= 8.0.2",
      "Portfolio.Application >= 1.0.0"
    ]
  },
  "packageFolders": {
    "C:\\Users\\miche\\.nuget\\packages\\": {},
    "C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\NuGetPackages": {}
  },
  "project": {
    "version": "1.0.0",
    "restore": {
      "projectUniqueName": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Infrastructure\\Portfolio.Infrastructure.csproj",
      "projectName": "Portfolio.Infrastructure",
      "projectPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Infrastructure\\Portfolio.Infrastructure.csproj",
      "packagesPath": "C:\\Users\\miche\\.nuget\\packages\\",
      "outputPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Infrastructure\\obj\\",
      "projectStyle": "PackageReference",
      "fallbackFolders": [
        "C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\NuGetPackages"
      ],
      "configFilePaths": [
        "C:\\Users\\miche\\AppData\\Roaming\\NuGet\\NuGet.Config",
        "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.FallbackLocation.config",
        "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.Offline.config"
      ],
      "originalTargetFrameworks": [
        "net8.0"
      ],
      "sources": {
        "C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackages\\": {},
        "https://api.nuget.org/v3/index.json": {}
      },
      "frameworks": {
        "net8.0": {
          "targetAlias": "net8.0",
          "projectReferences": {
            "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\Portfolio.Application.csproj": {
              "projectPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\Portfolio.Application.csproj"
            }
          }
        }
      },
      "warningProperties": {
        "warnAsError": [
          "NU1605"
        ]
      },
      "restoreAuditProperties": {
        "enableAudit": "true",
        "auditLevel": "low",
        "auditMode": "direct"
      },
      "SdkAnalysisLevel": "9.0.100"
    },
    "frameworks": {
      "net8.0": {
        "targetAlias": "net8.0",
        "dependencies": {
          "AutoMapper": {
            "target": "Package",
            "version": "[13.0.1, )"
          },
          "MediatR": {
            "target": "Package",
            "version": "[12.2.0, )"
          },
          "Microsoft.EntityFrameworkCore": {
            "target": "Package",
            "version": "[8.0.2, )"
          },
          "Microsoft.EntityFrameworkCore.Design": {
            "include": "Runtime, Build, Native, ContentFiles, Analyzers, BuildTransitive",
            "suppressParent": "All",
            "target": "Package",
            "version": "[8.0.2, )"
          },
          "Microsoft.EntityFrameworkCore.Tools": {
            "include": "Runtime, Build, Native, ContentFiles, Analyzers, BuildTransitive",
            "suppressParent": "All",
            "target": "Package",
            "version": "[8.0.2, )"
          },
          "Microsoft.Extensions.Configuration.Abstractions": {
            "target": "Package",
            "version": "[8.0.0, )"
          },
          "Microsoft.Extensions.DependencyInjection.Abstractions": {
            "target": "Package",
            "version": "[8.0.0, )"
          },
          "Npgsql.EntityFrameworkCore.PostgreSQL": {
            "target": "Package",
            "version": "[8.0.2, )"
          }
        },
        "imports": [
          "net461",
          "net462",
          "net47",
          "net471",
          "net472",
          "net48",
          "net481"
        ],
        "assetTargetFallback": true,
        "warn": true,
        "frameworkReferences": {
          "Microsoft.NETCore.App": {
            "privateAssets": "all"
          }
        },
        "runtimeIdentifierGraphPath": "C:\\Program Files\\dotnet\\sdk\\9.0.102/PortableRuntimeIdentifierGraph.json"
      }
    }
  }
}

================
File: src/Portfolio.Infrastructure/obj/project.nuget.cache
================
{
  "version": 2,
  "dgSpecHash": "DliXiONvRBo=",
  "success": true,
  "projectFilePath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Infrastructure\\Portfolio.Infrastructure.csproj",
  "expectedPackageFiles": [
    "C:\\Users\\miche\\.nuget\\packages\\automapper\\13.0.1\\automapper.13.0.1.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\fluentvalidation\\11.9.0\\fluentvalidation.11.9.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\fluentvalidation.dependencyinjectionextensions\\11.9.0\\fluentvalidation.dependencyinjectionextensions.11.9.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\humanizer.core\\2.14.1\\humanizer.core.2.14.1.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\mediatr\\12.2.0\\mediatr.12.2.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\mediatr.contracts\\2.0.1\\mediatr.contracts.2.0.1.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.bcl.asyncinterfaces\\6.0.0\\microsoft.bcl.asyncinterfaces.6.0.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.codeanalysis.analyzers\\3.3.3\\microsoft.codeanalysis.analyzers.3.3.3.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.codeanalysis.common\\4.5.0\\microsoft.codeanalysis.common.4.5.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.codeanalysis.csharp\\4.5.0\\microsoft.codeanalysis.csharp.4.5.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.codeanalysis.csharp.workspaces\\4.5.0\\microsoft.codeanalysis.csharp.workspaces.4.5.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.codeanalysis.workspaces.common\\4.5.0\\microsoft.codeanalysis.workspaces.common.4.5.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.entityframeworkcore\\8.0.2\\microsoft.entityframeworkcore.8.0.2.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.entityframeworkcore.abstractions\\8.0.2\\microsoft.entityframeworkcore.abstractions.8.0.2.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.entityframeworkcore.analyzers\\8.0.2\\microsoft.entityframeworkcore.analyzers.8.0.2.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.entityframeworkcore.design\\8.0.2\\microsoft.entityframeworkcore.design.8.0.2.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.entityframeworkcore.relational\\8.0.2\\microsoft.entityframeworkcore.relational.8.0.2.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.entityframeworkcore.tools\\8.0.2\\microsoft.entityframeworkcore.tools.8.0.2.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.extensions.caching.abstractions\\8.0.0\\microsoft.extensions.caching.abstractions.8.0.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.extensions.caching.memory\\8.0.0\\microsoft.extensions.caching.memory.8.0.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.extensions.configuration.abstractions\\8.0.0\\microsoft.extensions.configuration.abstractions.8.0.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.extensions.dependencyinjection\\8.0.0\\microsoft.extensions.dependencyinjection.8.0.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.extensions.dependencyinjection.abstractions\\8.0.0\\microsoft.extensions.dependencyinjection.abstractions.8.0.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.extensions.dependencymodel\\8.0.0\\microsoft.extensions.dependencymodel.8.0.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.extensions.logging\\8.0.0\\microsoft.extensions.logging.8.0.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.extensions.logging.abstractions\\8.0.0\\microsoft.extensions.logging.abstractions.8.0.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.extensions.options\\8.0.0\\microsoft.extensions.options.8.0.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.extensions.primitives\\8.0.0\\microsoft.extensions.primitives.8.0.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\mono.texttemplating\\2.2.1\\mono.texttemplating.2.2.1.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\npgsql\\8.0.2\\npgsql.8.0.2.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\npgsql.entityframeworkcore.postgresql\\8.0.2\\npgsql.entityframeworkcore.postgresql.8.0.2.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\system.codedom\\4.4.0\\system.codedom.4.4.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\system.collections.immutable\\6.0.0\\system.collections.immutable.6.0.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\system.composition\\6.0.0\\system.composition.6.0.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\system.composition.attributedmodel\\6.0.0\\system.composition.attributedmodel.6.0.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\system.composition.convention\\6.0.0\\system.composition.convention.6.0.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\system.composition.hosting\\6.0.0\\system.composition.hosting.6.0.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\system.composition.runtime\\6.0.0\\system.composition.runtime.6.0.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\system.composition.typedparts\\6.0.0\\system.composition.typedparts.6.0.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\system.io.pipelines\\6.0.3\\system.io.pipelines.6.0.3.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\system.reflection.metadata\\6.0.1\\system.reflection.metadata.6.0.1.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\system.runtime.compilerservices.unsafe\\6.0.0\\system.runtime.compilerservices.unsafe.6.0.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\system.text.encoding.codepages\\6.0.0\\system.text.encoding.codepages.6.0.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\system.text.encodings.web\\8.0.0\\system.text.encodings.web.8.0.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\system.text.json\\8.0.0\\system.text.json.8.0.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\system.threading.channels\\6.0.0\\system.threading.channels.6.0.0.nupkg.sha512"
  ],
  "logs": []
}

================
File: src/Portfolio.Infrastructure/Persistence/ApplicationDbContext.cs
================
using Microsoft.EntityFrameworkCore;
using Portfolio.Domain.Common;
using Portfolio.Domain.Entities;

namespace Portfolio.Infrastructure.Persistence;

public class ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : DbContext(options)
{
    public DbSet<Blog> Blogs { get; set; } = null!;
    public DbSet<Page> Pages { get; set; } = null!;
    public DbSet<Project> Projects { get; set; } = null!;
    public DbSet<User> Users { get; set; } = null!;

    public override async Task<int> SaveChangesAsync(CancellationToken cancellationToken = default)
    {
        var entries = ChangeTracker
            .Entries<Entity>()
            .Where(e => e.State == EntityState.Added || e.State == EntityState.Modified);

        foreach (var entry in entries)
        {
            switch (entry.State)
            {
                case EntityState.Added:
                    entry.Property(nameof(Entity.CreatedAt)).CurrentValue = DateTime.UtcNow;
                    entry.Property(nameof(Entity.UpdatedAt)).CurrentValue = DateTime.UtcNow;
                    break;

                case EntityState.Modified:
                    entry.Property(nameof(Entity.UpdatedAt)).CurrentValue = DateTime.UtcNow;
                    break;
            }
        }

        return await base.SaveChangesAsync(cancellationToken);
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);

        // Apply all entity configurations from assembly
        modelBuilder.ApplyConfigurationsFromAssembly(typeof(ApplicationDbContext).Assembly);
    }
}

================
File: src/Portfolio.Infrastructure/Persistence/Configurations/BaseConfiguration.cs
================
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Portfolio.Domain.Common;

namespace Portfolio.Infrastructure.Persistence.Configurations;

/// <summary>
/// Base configuration for all entities following Clean Architecture principles.
/// Provides common configuration for entity properties.
/// </summary>
public abstract class BaseConfiguration<TEntity> : IEntityTypeConfiguration<TEntity>
    where TEntity : Entity
{
    public virtual void Configure(EntityTypeBuilder<TEntity> builder)
    {
        // Configure key
        builder.HasKey(e => e.Id);

        // Configure common properties
        builder.Property(e => e.Id)
            .HasMaxLength(36)
            .IsRequired();

        builder.Property(e => e.CreatedAt)
            .IsRequired();

        builder.Property(e => e.UpdatedAt)
            .IsRequired();

        // Allow derived configurations to add additional configuration
        ConfigureEntity(builder);
    }

    /// <summary>
    /// Configure additional entity-specific properties.
    /// Override this method in derived configurations to add entity-specific configuration.
    /// </summary>
    protected virtual void ConfigureEntity(EntityTypeBuilder<TEntity> builder)
    {
    }
}

================
File: src/Portfolio.Infrastructure/Persistence/Configurations/BlogConfiguration.cs
================
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Portfolio.Domain.Entities;
using System.Text.Json;

namespace Portfolio.Infrastructure.Persistence.Configurations;

/// <summary>
/// Configuration for Blog entity following Clean Architecture and DDD principles.
/// Handles database mapping for Blog aggregate root and its value objects.
/// </summary>
public class BlogConfiguration : BaseConfiguration<Blog>
{
    protected override void ConfigureEntity(EntityTypeBuilder<Blog> builder)
    {
        // Configure table
        builder.ToTable("Blogs");

        // Configure required properties
        builder.Property(b => b.Title)
            .HasMaxLength(200)
            .IsRequired();

        builder.Property(b => b.Link)
            .HasMaxLength(200)
            .IsRequired();

        builder.Property(b => b.Excerpt)
            .HasMaxLength(500)
            .IsRequired();

        builder.Property(b => b.Body)
            .IsRequired();

        // Configure status properties
        builder.Property(b => b.IsDraft)
            .IsRequired()
            .HasDefaultValue(true);

        builder.Property(b => b.IsPublished)
            .IsRequired()
            .HasDefaultValue(false);

        builder.Property(b => b.PublishAt);

        // Configure vector search properties
        builder.Property(b => b.VectorId)
            .IsRequired();

        // Configure tags collection
        builder.Property(b => b.Tags)
            .HasColumnName("Tags")
            .HasConversion(
                v => JsonSerializer.Serialize(v, (JsonSerializerOptions)null!),
                v => JsonSerializer.Deserialize<List<string>>(v, (JsonSerializerOptions)null!)!);

        // Configure indexes for performance and data integrity
        builder.HasIndex(b => b.Link)
            .IsUnique()
            .HasDatabaseName("IX_Blogs_Link");

        builder.HasIndex(b => b.VectorId)
            .IsUnique()
            .HasDatabaseName("IX_Blogs_VectorId");

        // Configure composite indexes for efficient querying
        builder.HasIndex(b => new { b.IsDraft, b.IsPublished, b.PublishAt })
            .HasDatabaseName("IX_Blogs_IsDraft_IsPublished_PublishAt");

        // Configure full-text search index
        builder.HasIndex(b => new { b.Title, b.Body })
            .HasDatabaseName("IX_Blogs_FullText");
    }
}

================
File: src/Portfolio.Infrastructure/Persistence/Configurations/PageConfiguration.cs
================
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Portfolio.Domain.Entities;
using System.Text.Json;

namespace Portfolio.Infrastructure.Persistence.Configurations;

/// <summary>
/// Configuration for Page entity following Clean Architecture and DDD principles.
/// Handles database mapping for Page aggregate root and its value objects.
/// </summary>
public class PageConfiguration : BaseConfiguration<Page>
{
    protected override void ConfigureEntity(EntityTypeBuilder<Page> builder)
    {
        // Configure table
        builder.ToTable("Pages");

        // Configure required properties
        builder.Property(p => p.Title)
            .HasMaxLength(200)
            .IsRequired();

        builder.Property(p => p.Slug)
            .HasMaxLength(200)
            .IsRequired();

        builder.Property(p => p.Content)
            .IsRequired();

        // Configure metadata properties
        builder.Property(p => p.MetaDescription)
            .HasMaxLength(500);

        builder.Property(p => p.MetaKeywords)
            .HasConversion(
                v => JsonSerializer.Serialize(v, (JsonSerializerOptions)null!),
                v => JsonSerializer.Deserialize<List<string>>(v, (JsonSerializerOptions)null!)!);

        builder.Property(p => p.OpenGraphImage)
            .HasMaxLength(500);

        // Configure status properties
        builder.Property(p => p.IsDraft)
            .IsRequired()
            .HasDefaultValue(true);

        builder.Property(p => p.IsPublished)
            .IsRequired()
            .HasDefaultValue(false);

        // Configure vector search properties
        builder.Property(p => p.VectorId)
            .IsRequired();

        // Configure indexes for performance and data integrity
        builder.HasIndex(p => p.Slug)
            .IsUnique()
            .HasDatabaseName("IX_Pages_Slug");

        builder.HasIndex(p => p.VectorId)
            .IsUnique()
            .HasDatabaseName("IX_Pages_VectorId");

        // Configure composite indexes for efficient querying
        builder.HasIndex(p => new { p.IsDraft, p.IsPublished })
            .HasDatabaseName("IX_Pages_IsDraft_IsPublished");

        // Configure full-text search index
        builder.HasIndex(p => new { p.Title, p.Content })
            .HasDatabaseName("IX_Pages_FullText");
    }
}

================
File: src/Portfolio.Infrastructure/Persistence/Configurations/ProjectConfiguration.cs
================
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Portfolio.Domain.Entities;
using System.Text.Json;

namespace Portfolio.Infrastructure.Persistence.Configurations;

/// <summary>
/// Configuration for Project entity following Clean Architecture and DDD principles.
/// Handles database mapping for Project aggregate root and its value objects.
/// </summary>
public class ProjectConfiguration : BaseConfiguration<Project>
{
    protected override void ConfigureEntity(EntityTypeBuilder<Project> builder)
    {
        // Configure table
        builder.ToTable("Projects");

        // Configure required properties
        builder.Property(p => p.Title)
            .HasMaxLength(200)
            .IsRequired();

        builder.Property(p => p.Link)
            .HasMaxLength(200)
            .IsRequired();

        builder.Property(p => p.Description)
            .IsRequired();

        // Configure optional URLs
        builder.Property(p => p.GithubUrl)
            .HasMaxLength(500);

        builder.Property(p => p.LiveUrl)
            .HasMaxLength(500);

        builder.Property(p => p.ImageUrl)
            .HasMaxLength(500);

        // Configure status properties
        builder.Property(p => p.IsDraft)
            .IsRequired()
            .HasDefaultValue(true);

        builder.Property(p => p.IsFeatured)
            .IsRequired()
            .HasDefaultValue(false);

        // Configure vector search properties
        builder.Property(p => p.VectorId)
            .IsRequired();

        // Configure technologies collection
        builder.Property(p => p.Technologies)
            .HasColumnName("Technologies")
            .HasConversion(
                v => JsonSerializer.Serialize(v, (JsonSerializerOptions)null!),
                v => JsonSerializer.Deserialize<List<string>>(v, (JsonSerializerOptions)null!)!);

        // Configure indexes for performance and data integrity
        builder.HasIndex(p => p.Link)
            .IsUnique()
            .HasDatabaseName("IX_Projects_Link");

        builder.HasIndex(p => p.VectorId)
            .IsUnique()
            .HasDatabaseName("IX_Projects_VectorId");

        // Configure composite indexes for efficient querying
        builder.HasIndex(p => new { p.IsDraft, p.IsFeatured })
            .HasDatabaseName("IX_Projects_IsDraft_IsFeatured");
    }
}

================
File: src/Portfolio.Infrastructure/Persistence/Configurations/UserConfiguration.cs
================
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Portfolio.Domain.Entities;
using Portfolio.Domain.ValueObjects;

namespace Portfolio.Infrastructure.Persistence.Configurations;

/// <summary>
/// Configuration for User entity following Clean Architecture and DDD principles.
/// Handles database mapping for User aggregate root and its value objects.
/// </summary>
public class UserConfiguration : BaseConfiguration<User>
{
    protected override void ConfigureEntity(EntityTypeBuilder<User> builder)
    {
        // Configure table
        builder.ToTable("Users");

        // Configure required properties
        builder.Property(u => u.Username)
            .HasMaxLength(50)
            .IsRequired();

        // Configure Email value object
        builder.Property(u => u.Email)
            .HasConversion(
                email => email.Value,
                value => Email.Create(value))
            .HasMaxLength(256)
            .IsRequired();

        // Configure optional properties
        builder.Property(u => u.DisplayName)
            .HasMaxLength(100);

        builder.Property(u => u.AvatarUrl)
            .HasMaxLength(500);

        // Configure authentication properties
        builder.Property(u => u.Provider)
            .HasMaxLength(50);

        builder.Property(u => u.ProviderId)
            .HasMaxLength(100);

        // Configure role properties
        builder.Property(u => u.IsAdmin)
            .IsRequired()
            .HasDefaultValue(false);

        // Configure indexes for performance and data integrity
        builder.HasIndex(u => u.Username)
            .IsUnique()
            .HasDatabaseName("IX_Users_Username");

        builder.HasIndex(u => u.Email)
            .IsUnique()
            .HasDatabaseName("IX_Users_Email");

        builder.HasIndex(u => new { u.Provider, u.ProviderId })
            .IsUnique()
            .HasFilter("[Provider] IS NOT NULL AND [ProviderId] IS NOT NULL")
            .HasDatabaseName("IX_Users_Provider_ProviderId");

        builder.HasIndex(u => u.IsAdmin)
            .HasDatabaseName("IX_Users_IsAdmin");
    }
}

================
File: src/Portfolio.Infrastructure/Persistence/Repositories/BaseRepository.cs
================
using Microsoft.EntityFrameworkCore;
using Portfolio.Application.Interfaces.Persistence;
using Portfolio.Domain.Common;

namespace Portfolio.Infrastructure.Persistence.Repositories;

/// <summary>
/// Base repository implementation following Clean Architecture principles.
/// Provides common CRUD operations for all entities and ensures data consistency.
/// </summary>
public abstract class BaseRepository<TEntity> : IRepository<TEntity>
    where TEntity : class, IEntity
{
    protected readonly ApplicationDbContext Context;
    protected readonly DbSet<TEntity> DbSet;

    protected BaseRepository(ApplicationDbContext context)
    {
        Context = context ?? throw new ArgumentNullException(nameof(context));
        DbSet = context.Set<TEntity>();
    }

    public virtual async Task<TEntity> GetByIdAsync(string id, CancellationToken cancellationToken = default)
    {
        var entity = await DbSet.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
        if (entity == null)
            throw new NotFoundException(typeof(TEntity).Name, nameof(id), id);
        return entity;
    }

    public virtual async Task<IEnumerable<TEntity>> GetAllAsync(CancellationToken cancellationToken = default)
    {
        return await DbSet.ToListAsync(cancellationToken);
    }

    public virtual async Task<TEntity> AddAsync(TEntity entity, CancellationToken cancellationToken = default)
    {
        ArgumentNullException.ThrowIfNull(entity);

        await DbSet.AddAsync(entity, cancellationToken);
        await Context.SaveChangesAsync(cancellationToken);
        return entity;
    }

    public virtual async Task UpdateAsync(TEntity entity, CancellationToken cancellationToken = default)
    {
        ArgumentNullException.ThrowIfNull(entity);

        // Ensure entity exists
        await GetByIdAsync(entity.Id, cancellationToken);

        Context.Entry(entity).State = EntityState.Modified;
        await Context.SaveChangesAsync(cancellationToken);
    }

    public virtual async Task DeleteAsync(string id, CancellationToken cancellationToken = default)
    {
        var entity = await GetByIdAsync(id, cancellationToken);
        DbSet.Remove(entity);
        await Context.SaveChangesAsync(cancellationToken);
    }

    protected virtual async Task<bool> ExistsAsync(string id, CancellationToken cancellationToken = default)
    {
        return await DbSet.AnyAsync(e => e.Id == id, cancellationToken);
    }

    protected virtual IQueryable<TEntity> GetQueryable()
    {
        return DbSet.AsQueryable();
    }
}

================
File: src/Portfolio.Infrastructure/Persistence/Repositories/BlogRepository.cs
================
using Microsoft.EntityFrameworkCore;
using Portfolio.Application.Interfaces.Persistence;
using Portfolio.Domain.Entities;

namespace Portfolio.Infrastructure.Persistence.Repositories;

/// <summary>
/// Repository implementation for Blog entity operations following Clean Architecture principles.
/// Inherits from BaseRepository for common CRUD operations and implements IBlogRepository for blog-specific operations.
/// </summary>
public class BlogRepository : BaseRepository<Blog>, IBlogRepository
{
    public BlogRepository(ApplicationDbContext context) : base(context)
    {
    }

    public async Task<Blog?> GetBySlugAsync(string slug, CancellationToken cancellationToken = default)
    {
        return await DbSet
            .FirstOrDefaultAsync(b => b.Slug.ToString() == slug, cancellationToken);
    }

    public async Task<Blog?> GetByLinkAsync(string link, CancellationToken cancellationToken = default)
    {
        return await DbSet
            .FirstOrDefaultAsync(b => b.Link == link, cancellationToken);
    }

    public async Task<IEnumerable<Blog>> GetPublishedAsync(CancellationToken cancellationToken = default)
    {
        return await DbSet
            .Where(b => !b.IsDraft && (!b.PublishAt.HasValue || b.PublishAt <= DateTime.UtcNow))
            .OrderByDescending(b => b.PublishAt ?? b.CreatedAt)
            .ToListAsync(cancellationToken);
    }

    public async Task<IEnumerable<Blog>> GetByTagAsync(string tag, CancellationToken cancellationToken = default)
    {
        return await DbSet
            .Where(b => b.Tags.Contains(tag))
            .OrderByDescending(b => b.PublishAt ?? b.CreatedAt)
            .ToListAsync(cancellationToken);
    }

    public async Task<int> GetNextVectorIdAsync(CancellationToken cancellationToken = default)
    {
        var maxVectorId = await DbSet
            .MaxAsync(b => (int?)b.VectorId, cancellationToken) ?? 0;
        return maxVectorId + 1;
    }

    public override async Task<IEnumerable<Blog>> GetAllAsync(CancellationToken cancellationToken = default)
    {
        return await DbSet
            .OrderByDescending(b => b.CreatedAt)
            .ToListAsync(cancellationToken);
    }
}

================
File: src/Portfolio.Infrastructure/Persistence/Repositories/PageRepository.cs
================
using Microsoft.EntityFrameworkCore;
using Portfolio.Application.Interfaces.Persistence;
using Portfolio.Domain.Common;
using Portfolio.Domain.Entities;

namespace Portfolio.Infrastructure.Persistence.Repositories;

public class PageRepository : BaseRepository<Page>, IPageRepository
{
    public PageRepository(ApplicationDbContext context) : base(context)
    {
    }

    public async Task<Page> GetBySlugAsync(string slug, CancellationToken cancellationToken = default)
    {
        var page = await DbSet
            .FirstOrDefaultAsync(p => p.Slug == slug, cancellationToken);

        if (page == null)
            throw new NotFoundException(typeof(Page).Name, nameof(slug), slug);

        return page;
    }
}

================
File: src/Portfolio.Infrastructure/Persistence/Repositories/ProjectRepository.cs
================
using Microsoft.EntityFrameworkCore;
using Portfolio.Application.Interfaces.Persistence;
using Portfolio.Domain.Entities;

namespace Portfolio.Infrastructure.Persistence.Repositories;

/// <summary>
/// Repository implementation for Project entity operations following Clean Architecture principles.
/// Inherits from BaseRepository for common CRUD operations and implements IProjectRepository for project-specific operations.
/// </summary>
public class ProjectRepository : BaseRepository<Project>, IProjectRepository
{
    public ProjectRepository(ApplicationDbContext context) : base(context)
    {
    }

    public async Task<Project?> GetByLinkAsync(string link, CancellationToken cancellationToken = default)
    {
        return await DbSet
            .FirstOrDefaultAsync(p => p.Link == link, cancellationToken);
    }

    public async Task<IEnumerable<Project>> GetByTechnologyAsync(string technology, CancellationToken cancellationToken = default)
    {
        return await DbSet
            .Where(p => p.Technologies.Contains(technology))
            .OrderByDescending(p => p.CreatedAt)
            .ToListAsync(cancellationToken);
    }

    public async Task<int> GetNextVectorIdAsync(CancellationToken cancellationToken = default)
    {
        var maxVectorId = await DbSet
            .MaxAsync(p => (int?)p.VectorId, cancellationToken) ?? 0;
        return maxVectorId + 1;
    }

    public override async Task<IEnumerable<Project>> GetAllAsync(CancellationToken cancellationToken = default)
    {
        return await DbSet
            .OrderByDescending(p => p.CreatedAt)
            .ToListAsync(cancellationToken);
    }
}

================
File: src/Portfolio.Infrastructure/Persistence/Repositories/UserRepository.cs
================
using Microsoft.EntityFrameworkCore;
using Portfolio.Application.Interfaces.Persistence;
using Portfolio.Domain.Entities;

namespace Portfolio.Infrastructure.Persistence.Repositories;

/// <summary>
/// Repository implementation for User entity operations following Clean Architecture principles.
/// Inherits from BaseRepository for common CRUD operations and implements IUserRepository for user-specific operations.
/// </summary>
public class UserRepository : BaseRepository<User>, IUserRepository
{
    public UserRepository(ApplicationDbContext context) : base(context)
    {
    }

    public async Task<User?> GetByUsernameAsync(string username, CancellationToken cancellationToken = default)
    {
        return await DbSet
            .FirstOrDefaultAsync(u => u.Username == username, cancellationToken);
    }

    public async Task<User?> GetByEmailAsync(string email, CancellationToken cancellationToken = default)
    {
        return await DbSet
            .FirstOrDefaultAsync(u => u.Email.Value == email, cancellationToken);
    }

    public async Task<User?> GetByProviderAsync(string provider, string providerId, CancellationToken cancellationToken = default)
    {
        return await DbSet
            .FirstOrDefaultAsync(u => u.Provider == provider && u.ProviderId == providerId, cancellationToken);
    }

    public override async Task<IEnumerable<User>> GetAllAsync(CancellationToken cancellationToken = default)
    {
        return await DbSet
            .OrderByDescending(u => u.CreatedAt)
            .ToListAsync(cancellationToken);
    }

    public async Task<bool> IsUsernameUniqueAsync(string username, CancellationToken cancellationToken = default)
    {
        return !await DbSet
            .AnyAsync(u => u.Username == username, cancellationToken);
    }

    public async Task<bool> IsEmailUniqueAsync(string email, CancellationToken cancellationToken = default)
    {
        return !await DbSet
            .AnyAsync(u => u.Email.Value == email, cancellationToken);
    }
}

================
File: src/Portfolio.Infrastructure/Persistence/UnitOfWork.cs
================
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Storage;
using Portfolio.Application.Interfaces.Persistence;

namespace Portfolio.Infrastructure.Persistence;

public class UnitOfWork : IUnitOfWork, IDisposable
{
    private readonly ApplicationDbContext _context;
    private IDbContextTransaction? _currentTransaction;
    private bool _disposed;

    public IBlogRepository Blogs { get; }
    public IProjectRepository Projects { get; }
    public IUserRepository Users { get; }

    public UnitOfWork(
        ApplicationDbContext context,
        IBlogRepository blogRepository,
        IProjectRepository projectRepository,
        IUserRepository userRepository)
    {
        _context = context ?? throw new ArgumentNullException(nameof(context));
        Blogs = blogRepository ?? throw new ArgumentNullException(nameof(blogRepository));
        Projects = projectRepository ?? throw new ArgumentNullException(nameof(projectRepository));
        Users = userRepository ?? throw new ArgumentNullException(nameof(userRepository));
    }

    public async Task BeginTransactionAsync(CancellationToken cancellationToken = default)
    {
        if (_currentTransaction != null)
        {
            return;
        }

        _currentTransaction = await _context.Database.BeginTransactionAsync(cancellationToken);
    }

    public async Task CommitTransactionAsync(CancellationToken cancellationToken = default)
    {
        try
        {
            await _context.SaveChangesAsync(cancellationToken);

            if (_currentTransaction != null)
            {
                await _currentTransaction.CommitAsync(cancellationToken);
            }
        }
        catch
        {
            await RollbackTransactionAsync(cancellationToken);
            throw;
        }
        finally
        {
            if (_currentTransaction != null)
            {
                await _currentTransaction.DisposeAsync();
                _currentTransaction = null;
            }
        }
    }

    public async Task RollbackTransactionAsync(CancellationToken cancellationToken = default)
    {
        if (_currentTransaction != null)
        {
            await _currentTransaction.RollbackAsync(cancellationToken);
            await _currentTransaction.DisposeAsync();
            _currentTransaction = null;
        }
    }

    public async Task SaveChangesAsync(CancellationToken cancellationToken = default)
    {
        await _context.SaveChangesAsync(cancellationToken);
    }

    public void Dispose()
    {
        Dispose(true);
        GC.SuppressFinalize(this);
    }

    protected virtual void Dispose(bool disposing)
    {
        if (!_disposed && disposing)
        {
            _context.Dispose();
            _currentTransaction?.Dispose();
        }
        _disposed = true;
    }
}

================
File: src/Portfolio.Infrastructure/Portfolio.Infrastructure.csproj
================
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="AutoMapper" Version="13.0.1" />
    <PackageReference Include="MediatR" Version="12.2.0" />
    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="8.0.2" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="8.0.2">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="8.0.2">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.Extensions.Configuration.Abstractions" Version="8.0.0" />
    <PackageReference Include="Microsoft.Extensions.DependencyInjection.Abstractions" Version="8.0.0" />
    <PackageReference Include="Npgsql.EntityFrameworkCore.PostgreSQL" Version="8.0.2" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\Portfolio.Application\Portfolio.Application.csproj" />
  </ItemGroup>

</Project>

================
File: src/Portfolio.WebApi/appsettings.Development.json
================
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  }
}

================
File: src/Portfolio.WebApi/appsettings.json
================
{
  "ConnectionStrings": {
    "DefaultConnection": "Host=10.0.0.42;Port=5432;Database=portfolio;Username=michel;Password=!Mich1234;Include Error Detail=true"
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*"
}

================
File: src/Portfolio.WebApi/bin/Debug/net8.0/appsettings.Development.json
================
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  }
}

================
File: src/Portfolio.WebApi/bin/Debug/net8.0/appsettings.json
================
{
  "ConnectionStrings": {
    "DefaultConnection": "Host=10.0.0.42;Port=5432;Database=portfolio;Username=michel;Password=!Mich1234;Include Error Detail=true"
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*"
}

================
File: src/Portfolio.WebApi/bin/Debug/net8.0/Portfolio.WebApi.deps.json
================
{
  "runtimeTarget": {
    "name": ".NETCoreApp,Version=v8.0",
    "signature": ""
  },
  "compilationOptions": {},
  "targets": {
    ".NETCoreApp,Version=v8.0": {
      "Portfolio.WebApi/1.0.0": {
        "dependencies": {
          "AutoMapper": "13.0.1",
          "MediatR": "12.2.0",
          "Microsoft.AspNetCore.OpenApi": "8.0.0",
          "Microsoft.Extensions.DependencyInjection": "8.0.0",
          "Portfolio.Infrastructure": "1.0.0",
          "Swashbuckle.AspNetCore": "6.5.0"
        },
        "runtime": {
          "Portfolio.WebApi.dll": {}
        }
      },
      "AutoMapper/13.0.1": {
        "dependencies": {
          "Microsoft.Extensions.Options": "8.0.0"
        },
        "runtime": {
          "lib/net6.0/AutoMapper.dll": {
            "assemblyVersion": "13.0.0.0",
            "fileVersion": "13.0.1.0"
          }
        }
      },
      "FluentValidation/11.9.0": {
        "runtime": {
          "lib/net8.0/FluentValidation.dll": {
            "assemblyVersion": "11.0.0.0",
            "fileVersion": "11.9.0.0"
          }
        }
      },
      "FluentValidation.DependencyInjectionExtensions/11.9.0": {
        "dependencies": {
          "FluentValidation": "11.9.0",
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0"
        },
        "runtime": {
          "lib/netstandard2.1/FluentValidation.DependencyInjectionExtensions.dll": {
            "assemblyVersion": "11.0.0.0",
            "fileVersion": "11.9.0.0"
          }
        }
      },
      "MediatR/12.2.0": {
        "dependencies": {
          "MediatR.Contracts": "2.0.1",
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0"
        },
        "runtime": {
          "lib/net6.0/MediatR.dll": {
            "assemblyVersion": "12.0.0.0",
            "fileVersion": "12.2.0.0"
          }
        }
      },
      "MediatR.Contracts/2.0.1": {
        "runtime": {
          "lib/netstandard2.0/MediatR.Contracts.dll": {
            "assemblyVersion": "2.0.1.0",
            "fileVersion": "2.0.1.0"
          }
        }
      },
      "Microsoft.AspNetCore.OpenApi/8.0.0": {
        "dependencies": {
          "Microsoft.OpenApi": "1.4.3"
        },
        "runtime": {
          "lib/net8.0/Microsoft.AspNetCore.OpenApi.dll": {
            "assemblyVersion": "8.0.0.0",
            "fileVersion": "8.0.23.53112"
          }
        }
      },
      "Microsoft.EntityFrameworkCore/8.0.2": {
        "dependencies": {
          "Microsoft.EntityFrameworkCore.Abstractions": "8.0.2",
          "Microsoft.EntityFrameworkCore.Analyzers": "8.0.2",
          "Microsoft.Extensions.Caching.Memory": "8.0.0",
          "Microsoft.Extensions.Logging": "8.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.dll": {
            "assemblyVersion": "8.0.2.0",
            "fileVersion": "8.0.224.6803"
          }
        }
      },
      "Microsoft.EntityFrameworkCore.Abstractions/8.0.2": {
        "runtime": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.Abstractions.dll": {
            "assemblyVersion": "8.0.2.0",
            "fileVersion": "8.0.224.6803"
          }
        }
      },
      "Microsoft.EntityFrameworkCore.Analyzers/8.0.2": {},
      "Microsoft.EntityFrameworkCore.Relational/8.0.2": {
        "dependencies": {
          "Microsoft.EntityFrameworkCore": "8.0.2",
          "Microsoft.Extensions.Configuration.Abstractions": "8.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.Relational.dll": {
            "assemblyVersion": "8.0.2.0",
            "fileVersion": "8.0.224.6803"
          }
        }
      },
      "Microsoft.Extensions.ApiDescription.Server/6.0.5": {},
      "Microsoft.Extensions.Caching.Abstractions/8.0.0": {
        "dependencies": {
          "Microsoft.Extensions.Primitives": "8.0.0"
        }
      },
      "Microsoft.Extensions.Caching.Memory/8.0.0": {
        "dependencies": {
          "Microsoft.Extensions.Caching.Abstractions": "8.0.0",
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0",
          "Microsoft.Extensions.Logging.Abstractions": "8.0.0",
          "Microsoft.Extensions.Options": "8.0.0",
          "Microsoft.Extensions.Primitives": "8.0.0"
        }
      },
      "Microsoft.Extensions.Configuration.Abstractions/8.0.0": {
        "dependencies": {
          "Microsoft.Extensions.Primitives": "8.0.0"
        }
      },
      "Microsoft.Extensions.DependencyInjection/8.0.0": {
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0"
        }
      },
      "Microsoft.Extensions.DependencyInjection.Abstractions/8.0.0": {},
      "Microsoft.Extensions.Logging/8.0.0": {
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection": "8.0.0",
          "Microsoft.Extensions.Logging.Abstractions": "8.0.0",
          "Microsoft.Extensions.Options": "8.0.0"
        }
      },
      "Microsoft.Extensions.Logging.Abstractions/8.0.0": {
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0"
        }
      },
      "Microsoft.Extensions.Options/8.0.0": {
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0",
          "Microsoft.Extensions.Primitives": "8.0.0"
        }
      },
      "Microsoft.Extensions.Primitives/8.0.0": {},
      "Microsoft.OpenApi/1.4.3": {
        "runtime": {
          "lib/netstandard2.0/Microsoft.OpenApi.dll": {
            "assemblyVersion": "1.4.3.0",
            "fileVersion": "1.4.3.0"
          }
        }
      },
      "Npgsql/8.0.2": {
        "dependencies": {
          "Microsoft.Extensions.Logging.Abstractions": "8.0.0"
        },
        "runtime": {
          "lib/net8.0/Npgsql.dll": {
            "assemblyVersion": "8.0.2.0",
            "fileVersion": "8.0.2.0"
          }
        }
      },
      "Npgsql.EntityFrameworkCore.PostgreSQL/8.0.2": {
        "dependencies": {
          "Microsoft.EntityFrameworkCore": "8.0.2",
          "Microsoft.EntityFrameworkCore.Abstractions": "8.0.2",
          "Microsoft.EntityFrameworkCore.Relational": "8.0.2",
          "Npgsql": "8.0.2"
        },
        "runtime": {
          "lib/net8.0/Npgsql.EntityFrameworkCore.PostgreSQL.dll": {
            "assemblyVersion": "8.0.2.0",
            "fileVersion": "8.0.2.0"
          }
        }
      },
      "Swashbuckle.AspNetCore/6.5.0": {
        "dependencies": {
          "Microsoft.Extensions.ApiDescription.Server": "6.0.5",
          "Swashbuckle.AspNetCore.Swagger": "6.5.0",
          "Swashbuckle.AspNetCore.SwaggerGen": "6.5.0",
          "Swashbuckle.AspNetCore.SwaggerUI": "6.5.0"
        }
      },
      "Swashbuckle.AspNetCore.Swagger/6.5.0": {
        "dependencies": {
          "Microsoft.OpenApi": "1.4.3"
        },
        "runtime": {
          "lib/net7.0/Swashbuckle.AspNetCore.Swagger.dll": {
            "assemblyVersion": "6.5.0.0",
            "fileVersion": "6.5.0.0"
          }
        }
      },
      "Swashbuckle.AspNetCore.SwaggerGen/6.5.0": {
        "dependencies": {
          "Swashbuckle.AspNetCore.Swagger": "6.5.0"
        },
        "runtime": {
          "lib/net7.0/Swashbuckle.AspNetCore.SwaggerGen.dll": {
            "assemblyVersion": "6.5.0.0",
            "fileVersion": "6.5.0.0"
          }
        }
      },
      "Swashbuckle.AspNetCore.SwaggerUI/6.5.0": {
        "runtime": {
          "lib/net7.0/Swashbuckle.AspNetCore.SwaggerUI.dll": {
            "assemblyVersion": "6.5.0.0",
            "fileVersion": "6.5.0.0"
          }
        }
      },
      "Portfolio.Application/1.0.0": {
        "dependencies": {
          "AutoMapper": "13.0.1",
          "FluentValidation": "11.9.0",
          "FluentValidation.DependencyInjectionExtensions": "11.9.0",
          "MediatR": "12.2.0",
          "Microsoft.Extensions.Logging.Abstractions": "8.0.0",
          "Portfolio.Domain": "1.0.0"
        },
        "runtime": {
          "Portfolio.Application.dll": {
            "assemblyVersion": "1.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      },
      "Portfolio.Domain/1.0.0": {
        "runtime": {
          "Portfolio.Domain.dll": {
            "assemblyVersion": "1.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      },
      "Portfolio.Infrastructure/1.0.0": {
        "dependencies": {
          "AutoMapper": "13.0.1",
          "MediatR": "12.2.0",
          "Microsoft.EntityFrameworkCore": "8.0.2",
          "Microsoft.Extensions.Configuration.Abstractions": "8.0.0",
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0",
          "Npgsql.EntityFrameworkCore.PostgreSQL": "8.0.2",
          "Portfolio.Application": "1.0.0"
        },
        "runtime": {
          "Portfolio.Infrastructure.dll": {
            "assemblyVersion": "1.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      }
    }
  },
  "libraries": {
    "Portfolio.WebApi/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "AutoMapper/13.0.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-/Fx1SbJ16qS7dU4i604Sle+U9VLX+WSNVJggk6MupKVkYvvBm4XqYaeFuf67diHefHKHs50uQIS2YEDFhPCakQ==",
      "path": "automapper/13.0.1",
      "hashPath": "automapper.13.0.1.nupkg.sha512"
    },
    "FluentValidation/11.9.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-VneVlTvwYDkfHV5av3QrQ0amALgrLX6LV94wlYyEsh0B/klJBW7C8y2eAtj5tOZ3jH6CAVpr4s1ZGgew/QWyig==",
      "path": "fluentvalidation/11.9.0",
      "hashPath": "fluentvalidation.11.9.0.nupkg.sha512"
    },
    "FluentValidation.DependencyInjectionExtensions/11.9.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-Ko++xvN7HUf4WlHJL6bhsybUj/uho8ApOYIdxGjpF8Ot7Fukz6LRfRJ06H0KXhWqmMHWEbu89hJbjKJHtg7b9g==",
      "path": "fluentvalidation.dependencyinjectionextensions/11.9.0",
      "hashPath": "fluentvalidation.dependencyinjectionextensions.11.9.0.nupkg.sha512"
    },
    "MediatR/12.2.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-8TUFrHapKi6D74PhnSNEguRsH91HNGyP3R4ZQdgDorJgl9Wac5Prh0vA33QfrniAaS6L2xNNhc6vxzg+5AIbwA==",
      "path": "mediatr/12.2.0",
      "hashPath": "mediatr.12.2.0.nupkg.sha512"
    },
    "MediatR.Contracts/2.0.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-FYv95bNT4UwcNA+G/J1oX5OpRiSUxteXaUt2BJbRSdRNiIUNbggJF69wy6mnk2wYToaanpdXZdCwVylt96MpwQ==",
      "path": "mediatr.contracts/2.0.1",
      "hashPath": "mediatr.contracts.2.0.1.nupkg.sha512"
    },
    "Microsoft.AspNetCore.OpenApi/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-T4mwMvPSOYAp+KeQ4xO8H2rxpiOMJ9W/7yBBkUTMp96AHtGlPN4s7hbax2tM61LxTY775JKL4fiv5grn41EHXw==",
      "path": "microsoft.aspnetcore.openapi/8.0.0",
      "hashPath": "microsoft.aspnetcore.openapi.8.0.0.nupkg.sha512"
    },
    "Microsoft.EntityFrameworkCore/8.0.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-6QlvBx4rdawW3AkkCsGVV+8qRLk34aknV5JD40s1hbVR18vKmT2KDl2DW83nHcPX7f4oebQ3BD1UMNCI/gkE0g==",
      "path": "microsoft.entityframeworkcore/8.0.2",
      "hashPath": "microsoft.entityframeworkcore.8.0.2.nupkg.sha512"
    },
    "Microsoft.EntityFrameworkCore.Abstractions/8.0.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-DjDKp++BTKFZmX+xLTow7grQTY+pImKfhGW68Zf8myiL3zyJ3b8RZbnLsWGNCqKQIF6hJIz/zA/zmERobFwV0A==",
      "path": "microsoft.entityframeworkcore.abstractions/8.0.2",
      "hashPath": "microsoft.entityframeworkcore.abstractions.8.0.2.nupkg.sha512"
    },
    "Microsoft.EntityFrameworkCore.Analyzers/8.0.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-LI7awhc0fiAKvcUemsqxXUWqzAH9ywTSyM1rpC1un4p5SE1bhr5nRLvyRVbKRzKakmnNNY3to8NPDnoySEkxVw==",
      "path": "microsoft.entityframeworkcore.analyzers/8.0.2",
      "hashPath": "microsoft.entityframeworkcore.analyzers.8.0.2.nupkg.sha512"
    },
    "Microsoft.EntityFrameworkCore.Relational/8.0.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-NoGfcq2OPw0z8XAPf74YFwGlTKjedWdsIEJqq4SvKcPjcu+B+/XDDNrDRxTvILfz4Ug8POSF49s1jz1JvUqTAg==",
      "path": "microsoft.entityframeworkcore.relational/8.0.2",
      "hashPath": "microsoft.entityframeworkcore.relational.8.0.2.nupkg.sha512"
    },
    "Microsoft.Extensions.ApiDescription.Server/6.0.5": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-Ckb5EDBUNJdFWyajfXzUIMRkhf52fHZOQuuZg/oiu8y7zDCVwD0iHhew6MnThjHmevanpxL3f5ci2TtHQEN6bw==",
      "path": "microsoft.extensions.apidescription.server/6.0.5",
      "hashPath": "microsoft.extensions.apidescription.server.6.0.5.nupkg.sha512"
    },
    "Microsoft.Extensions.Caching.Abstractions/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-3KuSxeHoNYdxVYfg2IRZCThcrlJ1XJqIXkAWikCsbm5C/bCjv7G0WoKDyuR98Q+T607QT2Zl5GsbGRkENcV2yQ==",
      "path": "microsoft.extensions.caching.abstractions/8.0.0",
      "hashPath": "microsoft.extensions.caching.abstractions.8.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Caching.Memory/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-7pqivmrZDzo1ADPkRwjy+8jtRKWRCPag9qPI+p7sgu7Q4QreWhcvbiWXsbhP+yY8XSiDvZpu2/LWdBv7PnmOpQ==",
      "path": "microsoft.extensions.caching.memory/8.0.0",
      "hashPath": "microsoft.extensions.caching.memory.8.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Configuration.Abstractions/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-3lE/iLSutpgX1CC0NOW70FJoGARRHbyKmG7dc0klnUZ9Dd9hS6N/POPWhKhMLCEuNN5nXEY5agmlFtH562vqhQ==",
      "path": "microsoft.extensions.configuration.abstractions/8.0.0",
      "hashPath": "microsoft.extensions.configuration.abstractions.8.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.DependencyInjection/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-V8S3bsm50ig6JSyrbcJJ8bW2b9QLGouz+G1miK3UTaOWmMtFwNNNzUf4AleyDWUmTrWMLNnFSLEQtxmxgNQnNQ==",
      "path": "microsoft.extensions.dependencyinjection/8.0.0",
      "hashPath": "microsoft.extensions.dependencyinjection.8.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.DependencyInjection.Abstractions/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-cjWrLkJXK0rs4zofsK4bSdg+jhDLTaxrkXu4gS6Y7MAlCvRyNNgwY/lJi5RDlQOnSZweHqoyvgvbdvQsRIW+hg==",
      "path": "microsoft.extensions.dependencyinjection.abstractions/8.0.0",
      "hashPath": "microsoft.extensions.dependencyinjection.abstractions.8.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Logging/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-tvRkov9tAJ3xP51LCv3FJ2zINmv1P8Hi8lhhtcKGqM+ImiTCC84uOPEI4z8Cdq2C3o9e+Aa0Gw0rmrsJD77W+w==",
      "path": "microsoft.extensions.logging/8.0.0",
      "hashPath": "microsoft.extensions.logging.8.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Logging.Abstractions/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-arDBqTgFCyS0EvRV7O3MZturChstm50OJ0y9bDJvAcmEPJm0FFpFyjU/JLYyStNGGey081DvnQYlncNX5SJJGA==",
      "path": "microsoft.extensions.logging.abstractions/8.0.0",
      "hashPath": "microsoft.extensions.logging.abstractions.8.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Options/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-JOVOfqpnqlVLUzINQ2fox8evY2SKLYJ3BV8QDe/Jyp21u1T7r45x/R/5QdteURMR5r01GxeJSBBUOCOyaNXA3g==",
      "path": "microsoft.extensions.options/8.0.0",
      "hashPath": "microsoft.extensions.options.8.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Primitives/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-bXJEZrW9ny8vjMF1JV253WeLhpEVzFo1lyaZu1vQ4ZxWUlVvknZ/+ftFgVheLubb4eZPSwwxBeqS1JkCOjxd8g==",
      "path": "microsoft.extensions.primitives/8.0.0",
      "hashPath": "microsoft.extensions.primitives.8.0.0.nupkg.sha512"
    },
    "Microsoft.OpenApi/1.4.3": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-rURwggB+QZYcSVbDr7HSdhw/FELvMlriW10OeOzjPT7pstefMo7IThhtNtDudxbXhW+lj0NfX72Ka5EDsG8x6w==",
      "path": "microsoft.openapi/1.4.3",
      "hashPath": "microsoft.openapi.1.4.3.nupkg.sha512"
    },
    "Npgsql/8.0.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-MuJzLoWCaQhQAR3oh66YR0Ir6mxuezncGX3f8wxvAc21g0+9HICktJQlqMoODhxztZKXE5k9GxRxqUAN+vPb4g==",
      "path": "npgsql/8.0.2",
      "hashPath": "npgsql.8.0.2.nupkg.sha512"
    },
    "Npgsql.EntityFrameworkCore.PostgreSQL/8.0.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-eoZPynwkZTWFTgnocvXORuCL2yFZtscrUdqVhjxiRULpC7BMg9zhLM5oDZAU5PoX1PgN77hmkKE4a3PQiHqh7Q==",
      "path": "npgsql.entityframeworkcore.postgresql/8.0.2",
      "hashPath": "npgsql.entityframeworkcore.postgresql.8.0.2.nupkg.sha512"
    },
    "Swashbuckle.AspNetCore/6.5.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-FK05XokgjgwlCI6wCT+D4/abtQkL1X1/B9Oas6uIwHFmYrIO9WUD5aLC9IzMs9GnHfUXOtXZ2S43gN1mhs5+aA==",
      "path": "swashbuckle.aspnetcore/6.5.0",
      "hashPath": "swashbuckle.aspnetcore.6.5.0.nupkg.sha512"
    },
    "Swashbuckle.AspNetCore.Swagger/6.5.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-XWmCmqyFmoItXKFsQSwQbEAsjDKcxlNf1l+/Ki42hcb6LjKL8m5Db69OTvz5vLonMSRntYO1XLqz0OP+n3vKnA==",
      "path": "swashbuckle.aspnetcore.swagger/6.5.0",
      "hashPath": "swashbuckle.aspnetcore.swagger.6.5.0.nupkg.sha512"
    },
    "Swashbuckle.AspNetCore.SwaggerGen/6.5.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-Y/qW8Qdg9OEs7V013tt+94OdPxbRdbhcEbw4NiwGvf4YBcfhL/y7qp/Mjv/cENsQ2L3NqJ2AOu94weBy/h4KvA==",
      "path": "swashbuckle.aspnetcore.swaggergen/6.5.0",
      "hashPath": "swashbuckle.aspnetcore.swaggergen.6.5.0.nupkg.sha512"
    },
    "Swashbuckle.AspNetCore.SwaggerUI/6.5.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-OvbvxX+wL8skxTBttcBsVxdh73Fag4xwqEU2edh4JMn7Ws/xJHnY/JB1e9RoCb6XpDxUF3hD9A0Z1lEUx40Pfw==",
      "path": "swashbuckle.aspnetcore.swaggerui/6.5.0",
      "hashPath": "swashbuckle.aspnetcore.swaggerui.6.5.0.nupkg.sha512"
    },
    "Portfolio.Application/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "Portfolio.Domain/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "Portfolio.Infrastructure/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    }
  }
}

================
File: src/Portfolio.WebApi/bin/Debug/net8.0/Portfolio.WebApi.runtimeconfig.json
================
{
  "runtimeOptions": {
    "tfm": "net8.0",
    "frameworks": [
      {
        "name": "Microsoft.NETCore.App",
        "version": "8.0.0"
      },
      {
        "name": "Microsoft.AspNetCore.App",
        "version": "8.0.0"
      }
    ],
    "configProperties": {
      "System.GC.Server": true,
      "System.Globalization.Invariant": true,
      "System.Globalization.PredefinedCulturesOnly": true,
      "System.Reflection.NullabilityInfoContext.IsSupported": true,
      "System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization": false
    }
  }
}

================
File: src/Portfolio.WebApi/bin/Debug/net8.0/Portfolio.WebApi.staticwebassets.endpoints.json
================
{
  "Version": 1,
  "ManifestType": "Build",
  "Endpoints": []
}

================
File: src/Portfolio.WebApi/bin/Debug/net9.0/appsettings.Development.json
================
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  }
}

================
File: src/Portfolio.WebApi/bin/Debug/net9.0/appsettings.json
================
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*"
}

================
File: src/Portfolio.WebApi/bin/Debug/net9.0/Portfolio.WebApi.deps.json
================
{
  "runtimeTarget": {
    "name": ".NETCoreApp,Version=v9.0",
    "signature": ""
  },
  "compilationOptions": {},
  "targets": {
    ".NETCoreApp,Version=v9.0": {
      "Portfolio.WebApi/1.0.0": {
        "dependencies": {
          "MediatR": "12.2.0",
          "Microsoft.AspNetCore.OpenApi": "9.0.1",
          "NSwag.AspNetCore": "14.0.3",
          "Portfolio.Application": "1.0.0",
          "Portfolio.Domain": "1.0.0",
          "Portfolio.Infrastructure": "1.0.0"
        },
        "runtime": {
          "Portfolio.WebApi.dll": {}
        }
      },
      "AutoMapper/13.0.1": {
        "dependencies": {
          "Microsoft.Extensions.Options": "8.0.0"
        },
        "runtime": {
          "lib/net6.0/AutoMapper.dll": {
            "assemblyVersion": "13.0.0.0",
            "fileVersion": "13.0.1.0"
          }
        }
      },
      "FluentValidation/11.9.0": {
        "runtime": {
          "lib/net8.0/FluentValidation.dll": {
            "assemblyVersion": "11.0.0.0",
            "fileVersion": "11.9.0.0"
          }
        }
      },
      "FluentValidation.DependencyInjectionExtensions/11.9.0": {
        "dependencies": {
          "FluentValidation": "11.9.0",
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0"
        },
        "runtime": {
          "lib/netstandard2.1/FluentValidation.DependencyInjectionExtensions.dll": {
            "assemblyVersion": "11.0.0.0",
            "fileVersion": "11.9.0.0"
          }
        }
      },
      "MediatR/12.2.0": {
        "dependencies": {
          "MediatR.Contracts": "2.0.1",
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0"
        },
        "runtime": {
          "lib/net6.0/MediatR.dll": {
            "assemblyVersion": "12.0.0.0",
            "fileVersion": "12.2.0.0"
          }
        }
      },
      "MediatR.Contracts/2.0.1": {
        "runtime": {
          "lib/netstandard2.0/MediatR.Contracts.dll": {
            "assemblyVersion": "2.0.1.0",
            "fileVersion": "2.0.1.0"
          }
        }
      },
      "Microsoft.AspNetCore.OpenApi/9.0.1": {
        "dependencies": {
          "Microsoft.OpenApi": "1.6.17"
        },
        "runtime": {
          "lib/net9.0/Microsoft.AspNetCore.OpenApi.dll": {
            "assemblyVersion": "9.0.1.0",
            "fileVersion": "9.0.124.61009"
          }
        }
      },
      "Microsoft.CSharp/4.3.0": {
        "dependencies": {
          "System.Collections": "4.3.0",
          "System.Diagnostics.Debug": "4.3.0",
          "System.Dynamic.Runtime": "4.3.0",
          "System.Globalization": "4.3.0",
          "System.Linq": "4.3.0",
          "System.Linq.Expressions": "4.3.0",
          "System.ObjectModel": "4.3.0",
          "System.Reflection": "4.3.0",
          "System.Reflection.Extensions": "4.3.0",
          "System.Reflection.Primitives": "4.3.0",
          "System.Reflection.TypeExtensions": "4.3.0",
          "System.Resources.ResourceManager": "4.3.0",
          "System.Runtime": "4.3.0",
          "System.Runtime.Extensions": "4.3.0",
          "System.Runtime.InteropServices": "4.3.0",
          "System.Threading": "4.3.0"
        }
      },
      "Microsoft.EntityFrameworkCore/8.0.2": {
        "dependencies": {
          "Microsoft.EntityFrameworkCore.Abstractions": "8.0.2",
          "Microsoft.EntityFrameworkCore.Analyzers": "8.0.2",
          "Microsoft.Extensions.Caching.Memory": "8.0.0",
          "Microsoft.Extensions.Logging": "8.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.dll": {
            "assemblyVersion": "8.0.2.0",
            "fileVersion": "8.0.224.6803"
          }
        }
      },
      "Microsoft.EntityFrameworkCore.Abstractions/8.0.2": {
        "runtime": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.Abstractions.dll": {
            "assemblyVersion": "8.0.2.0",
            "fileVersion": "8.0.224.6803"
          }
        }
      },
      "Microsoft.EntityFrameworkCore.Analyzers/8.0.2": {},
      "Microsoft.EntityFrameworkCore.Relational/8.0.2": {
        "dependencies": {
          "Microsoft.EntityFrameworkCore": "8.0.2",
          "Microsoft.Extensions.Configuration.Abstractions": "8.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.Relational.dll": {
            "assemblyVersion": "8.0.2.0",
            "fileVersion": "8.0.224.6803"
          }
        }
      },
      "Microsoft.Extensions.ApiDescription.Server/6.0.3": {},
      "Microsoft.Extensions.Caching.Abstractions/8.0.0": {
        "dependencies": {
          "Microsoft.Extensions.Primitives": "8.0.0"
        }
      },
      "Microsoft.Extensions.Caching.Memory/8.0.0": {
        "dependencies": {
          "Microsoft.Extensions.Caching.Abstractions": "8.0.0",
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0",
          "Microsoft.Extensions.Logging.Abstractions": "8.0.0",
          "Microsoft.Extensions.Options": "8.0.0",
          "Microsoft.Extensions.Primitives": "8.0.0"
        }
      },
      "Microsoft.Extensions.Configuration.Abstractions/8.0.0": {
        "dependencies": {
          "Microsoft.Extensions.Primitives": "8.0.0"
        }
      },
      "Microsoft.Extensions.DependencyInjection/8.0.0": {
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0"
        }
      },
      "Microsoft.Extensions.DependencyInjection.Abstractions/8.0.0": {},
      "Microsoft.Extensions.FileProviders.Abstractions/8.0.0": {
        "dependencies": {
          "Microsoft.Extensions.Primitives": "8.0.0"
        }
      },
      "Microsoft.Extensions.FileProviders.Embedded/8.0.0": {
        "dependencies": {
          "Microsoft.Extensions.FileProviders.Abstractions": "8.0.0"
        }
      },
      "Microsoft.Extensions.Logging/8.0.0": {
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection": "8.0.0",
          "Microsoft.Extensions.Logging.Abstractions": "8.0.0",
          "Microsoft.Extensions.Options": "8.0.0"
        }
      },
      "Microsoft.Extensions.Logging.Abstractions/8.0.0": {
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0"
        }
      },
      "Microsoft.Extensions.Options/8.0.0": {
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0",
          "Microsoft.Extensions.Primitives": "8.0.0"
        }
      },
      "Microsoft.Extensions.Primitives/8.0.0": {},
      "Microsoft.NETCore.Platforms/1.1.0": {},
      "Microsoft.NETCore.Targets/1.1.0": {},
      "Microsoft.OpenApi/1.6.17": {
        "runtime": {
          "lib/netstandard2.0/Microsoft.OpenApi.dll": {
            "assemblyVersion": "1.6.17.0",
            "fileVersion": "1.6.17.0"
          }
        }
      },
      "Namotion.Reflection/3.1.1": {
        "dependencies": {
          "Microsoft.CSharp": "4.3.0"
        },
        "runtime": {
          "lib/netstandard2.0/Namotion.Reflection.dll": {
            "assemblyVersion": "3.1.1.0",
            "fileVersion": "3.1.1.0"
          }
        }
      },
      "Newtonsoft.Json/13.0.3": {
        "runtime": {
          "lib/net6.0/Newtonsoft.Json.dll": {
            "assemblyVersion": "13.0.0.0",
            "fileVersion": "13.0.3.27908"
          }
        }
      },
      "NJsonSchema/11.0.0": {
        "dependencies": {
          "NJsonSchema.Annotations": "11.0.0",
          "Namotion.Reflection": "3.1.1",
          "Newtonsoft.Json": "13.0.3"
        },
        "runtime": {
          "lib/net6.0/NJsonSchema.dll": {
            "assemblyVersion": "11.0.0.0",
            "fileVersion": "11.0.0.0"
          }
        }
      },
      "NJsonSchema.Annotations/11.0.0": {
        "runtime": {
          "lib/netstandard2.0/NJsonSchema.Annotations.dll": {
            "assemblyVersion": "11.0.0.0",
            "fileVersion": "11.0.0.0"
          }
        }
      },
      "NJsonSchema.NewtonsoftJson/11.0.0": {
        "dependencies": {
          "NJsonSchema": "11.0.0",
          "Newtonsoft.Json": "13.0.3"
        },
        "runtime": {
          "lib/netstandard2.0/NJsonSchema.NewtonsoftJson.dll": {
            "assemblyVersion": "11.0.0.0",
            "fileVersion": "11.0.0.0"
          }
        }
      },
      "NJsonSchema.Yaml/11.0.0": {
        "dependencies": {
          "NJsonSchema": "11.0.0",
          "YamlDotNet": "13.7.1"
        },
        "runtime": {
          "lib/netstandard2.0/NJsonSchema.Yaml.dll": {
            "assemblyVersion": "11.0.0.0",
            "fileVersion": "11.0.0.0"
          }
        }
      },
      "Npgsql/8.0.2": {
        "dependencies": {
          "Microsoft.Extensions.Logging.Abstractions": "8.0.0"
        },
        "runtime": {
          "lib/net8.0/Npgsql.dll": {
            "assemblyVersion": "8.0.2.0",
            "fileVersion": "8.0.2.0"
          }
        }
      },
      "Npgsql.EntityFrameworkCore.PostgreSQL/8.0.2": {
        "dependencies": {
          "Microsoft.EntityFrameworkCore": "8.0.2",
          "Microsoft.EntityFrameworkCore.Abstractions": "8.0.2",
          "Microsoft.EntityFrameworkCore.Relational": "8.0.2",
          "Npgsql": "8.0.2"
        },
        "runtime": {
          "lib/net8.0/Npgsql.EntityFrameworkCore.PostgreSQL.dll": {
            "assemblyVersion": "8.0.2.0",
            "fileVersion": "8.0.2.0"
          }
        }
      },
      "NSwag.Annotations/14.0.3": {
        "runtime": {
          "lib/netstandard2.0/NSwag.Annotations.dll": {
            "assemblyVersion": "14.0.3.0",
            "fileVersion": "14.0.3.0"
          }
        }
      },
      "NSwag.AspNetCore/14.0.3": {
        "dependencies": {
          "Microsoft.Extensions.ApiDescription.Server": "6.0.3",
          "Microsoft.Extensions.FileProviders.Embedded": "8.0.0",
          "NSwag.Annotations": "14.0.3",
          "NSwag.Core": "14.0.3",
          "NSwag.Core.Yaml": "14.0.3",
          "NSwag.Generation": "14.0.3",
          "NSwag.Generation.AspNetCore": "14.0.3"
        },
        "runtime": {
          "lib/net8.0/NSwag.AspNetCore.dll": {
            "assemblyVersion": "14.0.3.0",
            "fileVersion": "14.0.3.0"
          }
        }
      },
      "NSwag.Core/14.0.3": {
        "dependencies": {
          "NJsonSchema": "11.0.0"
        },
        "runtime": {
          "lib/netstandard2.0/NSwag.Core.dll": {
            "assemblyVersion": "14.0.3.0",
            "fileVersion": "14.0.3.0"
          }
        }
      },
      "NSwag.Core.Yaml/14.0.3": {
        "dependencies": {
          "NJsonSchema.Yaml": "11.0.0",
          "NSwag.Core": "14.0.3"
        },
        "runtime": {
          "lib/netstandard2.0/NSwag.Core.Yaml.dll": {
            "assemblyVersion": "14.0.3.0",
            "fileVersion": "14.0.3.0"
          }
        }
      },
      "NSwag.Generation/14.0.3": {
        "dependencies": {
          "NJsonSchema.NewtonsoftJson": "11.0.0",
          "NSwag.Core": "14.0.3"
        },
        "runtime": {
          "lib/netstandard2.0/NSwag.Generation.dll": {
            "assemblyVersion": "14.0.3.0",
            "fileVersion": "14.0.3.0"
          }
        }
      },
      "NSwag.Generation.AspNetCore/14.0.3": {
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0",
          "Microsoft.Extensions.Options": "8.0.0",
          "NSwag.Generation": "14.0.3"
        },
        "runtime": {
          "lib/net8.0/NSwag.Generation.AspNetCore.dll": {
            "assemblyVersion": "14.0.3.0",
            "fileVersion": "14.0.3.0"
          }
        }
      },
      "System.Collections/4.3.0": {
        "dependencies": {
          "Microsoft.NETCore.Platforms": "1.1.0",
          "Microsoft.NETCore.Targets": "1.1.0",
          "System.Runtime": "4.3.0"
        }
      },
      "System.Diagnostics.Debug/4.3.0": {
        "dependencies": {
          "Microsoft.NETCore.Platforms": "1.1.0",
          "Microsoft.NETCore.Targets": "1.1.0",
          "System.Runtime": "4.3.0"
        }
      },
      "System.Dynamic.Runtime/4.3.0": {
        "dependencies": {
          "System.Collections": "4.3.0",
          "System.Diagnostics.Debug": "4.3.0",
          "System.Linq": "4.3.0",
          "System.Linq.Expressions": "4.3.0",
          "System.ObjectModel": "4.3.0",
          "System.Reflection": "4.3.0",
          "System.Reflection.Emit": "4.3.0",
          "System.Reflection.Emit.ILGeneration": "4.3.0",
          "System.Reflection.Primitives": "4.3.0",
          "System.Reflection.TypeExtensions": "4.3.0",
          "System.Resources.ResourceManager": "4.3.0",
          "System.Runtime": "4.3.0",
          "System.Runtime.Extensions": "4.3.0",
          "System.Threading": "4.3.0"
        }
      },
      "System.Globalization/4.3.0": {
        "dependencies": {
          "Microsoft.NETCore.Platforms": "1.1.0",
          "Microsoft.NETCore.Targets": "1.1.0",
          "System.Runtime": "4.3.0"
        }
      },
      "System.IO/4.3.0": {
        "dependencies": {
          "Microsoft.NETCore.Platforms": "1.1.0",
          "Microsoft.NETCore.Targets": "1.1.0",
          "System.Runtime": "4.3.0",
          "System.Text.Encoding": "4.3.0",
          "System.Threading.Tasks": "4.3.0"
        }
      },
      "System.Linq/4.3.0": {
        "dependencies": {
          "System.Collections": "4.3.0",
          "System.Diagnostics.Debug": "4.3.0",
          "System.Resources.ResourceManager": "4.3.0",
          "System.Runtime": "4.3.0",
          "System.Runtime.Extensions": "4.3.0"
        }
      },
      "System.Linq.Expressions/4.3.0": {
        "dependencies": {
          "System.Collections": "4.3.0",
          "System.Diagnostics.Debug": "4.3.0",
          "System.Globalization": "4.3.0",
          "System.IO": "4.3.0",
          "System.Linq": "4.3.0",
          "System.ObjectModel": "4.3.0",
          "System.Reflection": "4.3.0",
          "System.Reflection.Emit": "4.3.0",
          "System.Reflection.Emit.ILGeneration": "4.3.0",
          "System.Reflection.Emit.Lightweight": "4.3.0",
          "System.Reflection.Extensions": "4.3.0",
          "System.Reflection.Primitives": "4.3.0",
          "System.Reflection.TypeExtensions": "4.3.0",
          "System.Resources.ResourceManager": "4.3.0",
          "System.Runtime": "4.3.0",
          "System.Runtime.Extensions": "4.3.0",
          "System.Threading": "4.3.0"
        }
      },
      "System.ObjectModel/4.3.0": {
        "dependencies": {
          "System.Collections": "4.3.0",
          "System.Diagnostics.Debug": "4.3.0",
          "System.Resources.ResourceManager": "4.3.0",
          "System.Runtime": "4.3.0",
          "System.Threading": "4.3.0"
        }
      },
      "System.Reflection/4.3.0": {
        "dependencies": {
          "Microsoft.NETCore.Platforms": "1.1.0",
          "Microsoft.NETCore.Targets": "1.1.0",
          "System.IO": "4.3.0",
          "System.Reflection.Primitives": "4.3.0",
          "System.Runtime": "4.3.0"
        }
      },
      "System.Reflection.Emit/4.3.0": {
        "dependencies": {
          "System.IO": "4.3.0",
          "System.Reflection": "4.3.0",
          "System.Reflection.Emit.ILGeneration": "4.3.0",
          "System.Reflection.Primitives": "4.3.0",
          "System.Runtime": "4.3.0"
        }
      },
      "System.Reflection.Emit.ILGeneration/4.3.0": {
        "dependencies": {
          "System.Reflection": "4.3.0",
          "System.Reflection.Primitives": "4.3.0",
          "System.Runtime": "4.3.0"
        }
      },
      "System.Reflection.Emit.Lightweight/4.3.0": {
        "dependencies": {
          "System.Reflection": "4.3.0",
          "System.Reflection.Emit.ILGeneration": "4.3.0",
          "System.Reflection.Primitives": "4.3.0",
          "System.Runtime": "4.3.0"
        }
      },
      "System.Reflection.Extensions/4.3.0": {
        "dependencies": {
          "Microsoft.NETCore.Platforms": "1.1.0",
          "Microsoft.NETCore.Targets": "1.1.0",
          "System.Reflection": "4.3.0",
          "System.Runtime": "4.3.0"
        }
      },
      "System.Reflection.Primitives/4.3.0": {
        "dependencies": {
          "Microsoft.NETCore.Platforms": "1.1.0",
          "Microsoft.NETCore.Targets": "1.1.0",
          "System.Runtime": "4.3.0"
        }
      },
      "System.Reflection.TypeExtensions/4.3.0": {
        "dependencies": {
          "System.Reflection": "4.3.0",
          "System.Runtime": "4.3.0"
        }
      },
      "System.Resources.ResourceManager/4.3.0": {
        "dependencies": {
          "Microsoft.NETCore.Platforms": "1.1.0",
          "Microsoft.NETCore.Targets": "1.1.0",
          "System.Globalization": "4.3.0",
          "System.Reflection": "4.3.0",
          "System.Runtime": "4.3.0"
        }
      },
      "System.Runtime/4.3.0": {
        "dependencies": {
          "Microsoft.NETCore.Platforms": "1.1.0",
          "Microsoft.NETCore.Targets": "1.1.0"
        }
      },
      "System.Runtime.Extensions/4.3.0": {
        "dependencies": {
          "Microsoft.NETCore.Platforms": "1.1.0",
          "Microsoft.NETCore.Targets": "1.1.0",
          "System.Runtime": "4.3.0"
        }
      },
      "System.Runtime.Handles/4.3.0": {
        "dependencies": {
          "Microsoft.NETCore.Platforms": "1.1.0",
          "Microsoft.NETCore.Targets": "1.1.0",
          "System.Runtime": "4.3.0"
        }
      },
      "System.Runtime.InteropServices/4.3.0": {
        "dependencies": {
          "Microsoft.NETCore.Platforms": "1.1.0",
          "Microsoft.NETCore.Targets": "1.1.0",
          "System.Reflection": "4.3.0",
          "System.Reflection.Primitives": "4.3.0",
          "System.Runtime": "4.3.0",
          "System.Runtime.Handles": "4.3.0"
        }
      },
      "System.Text.Encoding/4.3.0": {
        "dependencies": {
          "Microsoft.NETCore.Platforms": "1.1.0",
          "Microsoft.NETCore.Targets": "1.1.0",
          "System.Runtime": "4.3.0"
        }
      },
      "System.Threading/4.3.0": {
        "dependencies": {
          "System.Runtime": "4.3.0",
          "System.Threading.Tasks": "4.3.0"
        }
      },
      "System.Threading.Tasks/4.3.0": {
        "dependencies": {
          "Microsoft.NETCore.Platforms": "1.1.0",
          "Microsoft.NETCore.Targets": "1.1.0",
          "System.Runtime": "4.3.0"
        }
      },
      "YamlDotNet/13.7.1": {
        "runtime": {
          "lib/net7.0/YamlDotNet.dll": {
            "assemblyVersion": "13.0.0.0",
            "fileVersion": "13.7.1.0"
          }
        }
      },
      "Portfolio.Application/1.0.0": {
        "dependencies": {
          "AutoMapper": "13.0.1",
          "FluentValidation": "11.9.0",
          "FluentValidation.DependencyInjectionExtensions": "11.9.0",
          "MediatR": "12.2.0",
          "Microsoft.Extensions.Logging.Abstractions": "8.0.0",
          "Portfolio.Domain": "1.0.0"
        },
        "runtime": {
          "Portfolio.Application.dll": {
            "assemblyVersion": "1.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      },
      "Portfolio.Domain/1.0.0": {
        "runtime": {
          "Portfolio.Domain.dll": {
            "assemblyVersion": "1.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      },
      "Portfolio.Infrastructure/1.0.0": {
        "dependencies": {
          "Microsoft.EntityFrameworkCore": "8.0.2",
          "Microsoft.Extensions.Configuration.Abstractions": "8.0.0",
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0",
          "Npgsql.EntityFrameworkCore.PostgreSQL": "8.0.2",
          "Portfolio.Application": "1.0.0"
        },
        "runtime": {
          "Portfolio.Infrastructure.dll": {
            "assemblyVersion": "1.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      }
    }
  },
  "libraries": {
    "Portfolio.WebApi/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "AutoMapper/13.0.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-/Fx1SbJ16qS7dU4i604Sle+U9VLX+WSNVJggk6MupKVkYvvBm4XqYaeFuf67diHefHKHs50uQIS2YEDFhPCakQ==",
      "path": "automapper/13.0.1",
      "hashPath": "automapper.13.0.1.nupkg.sha512"
    },
    "FluentValidation/11.9.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-VneVlTvwYDkfHV5av3QrQ0amALgrLX6LV94wlYyEsh0B/klJBW7C8y2eAtj5tOZ3jH6CAVpr4s1ZGgew/QWyig==",
      "path": "fluentvalidation/11.9.0",
      "hashPath": "fluentvalidation.11.9.0.nupkg.sha512"
    },
    "FluentValidation.DependencyInjectionExtensions/11.9.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-Ko++xvN7HUf4WlHJL6bhsybUj/uho8ApOYIdxGjpF8Ot7Fukz6LRfRJ06H0KXhWqmMHWEbu89hJbjKJHtg7b9g==",
      "path": "fluentvalidation.dependencyinjectionextensions/11.9.0",
      "hashPath": "fluentvalidation.dependencyinjectionextensions.11.9.0.nupkg.sha512"
    },
    "MediatR/12.2.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-8TUFrHapKi6D74PhnSNEguRsH91HNGyP3R4ZQdgDorJgl9Wac5Prh0vA33QfrniAaS6L2xNNhc6vxzg+5AIbwA==",
      "path": "mediatr/12.2.0",
      "hashPath": "mediatr.12.2.0.nupkg.sha512"
    },
    "MediatR.Contracts/2.0.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-FYv95bNT4UwcNA+G/J1oX5OpRiSUxteXaUt2BJbRSdRNiIUNbggJF69wy6mnk2wYToaanpdXZdCwVylt96MpwQ==",
      "path": "mediatr.contracts/2.0.1",
      "hashPath": "mediatr.contracts.2.0.1.nupkg.sha512"
    },
    "Microsoft.AspNetCore.OpenApi/9.0.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-xRJe8UrLnOGs6hOBrT/4r74q97626H0mABb/DV0smlReIx6uQCENAe+TUqF6hD3NtT4sB+qrvWhAej6kxPxgew==",
      "path": "microsoft.aspnetcore.openapi/9.0.1",
      "hashPath": "microsoft.aspnetcore.openapi.9.0.1.nupkg.sha512"
    },
    "Microsoft.CSharp/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-P+MBhIM0YX+JqROuf7i306ZLJEjQYA9uUyRDE+OqwUI5sh41e2ZbPQV3LfAPh+29cmceE1pUffXsGfR4eMY3KA==",
      "path": "microsoft.csharp/4.3.0",
      "hashPath": "microsoft.csharp.4.3.0.nupkg.sha512"
    },
    "Microsoft.EntityFrameworkCore/8.0.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-6QlvBx4rdawW3AkkCsGVV+8qRLk34aknV5JD40s1hbVR18vKmT2KDl2DW83nHcPX7f4oebQ3BD1UMNCI/gkE0g==",
      "path": "microsoft.entityframeworkcore/8.0.2",
      "hashPath": "microsoft.entityframeworkcore.8.0.2.nupkg.sha512"
    },
    "Microsoft.EntityFrameworkCore.Abstractions/8.0.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-DjDKp++BTKFZmX+xLTow7grQTY+pImKfhGW68Zf8myiL3zyJ3b8RZbnLsWGNCqKQIF6hJIz/zA/zmERobFwV0A==",
      "path": "microsoft.entityframeworkcore.abstractions/8.0.2",
      "hashPath": "microsoft.entityframeworkcore.abstractions.8.0.2.nupkg.sha512"
    },
    "Microsoft.EntityFrameworkCore.Analyzers/8.0.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-LI7awhc0fiAKvcUemsqxXUWqzAH9ywTSyM1rpC1un4p5SE1bhr5nRLvyRVbKRzKakmnNNY3to8NPDnoySEkxVw==",
      "path": "microsoft.entityframeworkcore.analyzers/8.0.2",
      "hashPath": "microsoft.entityframeworkcore.analyzers.8.0.2.nupkg.sha512"
    },
    "Microsoft.EntityFrameworkCore.Relational/8.0.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-NoGfcq2OPw0z8XAPf74YFwGlTKjedWdsIEJqq4SvKcPjcu+B+/XDDNrDRxTvILfz4Ug8POSF49s1jz1JvUqTAg==",
      "path": "microsoft.entityframeworkcore.relational/8.0.2",
      "hashPath": "microsoft.entityframeworkcore.relational.8.0.2.nupkg.sha512"
    },
    "Microsoft.Extensions.ApiDescription.Server/6.0.3": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-/FkS66n3wJaUR+Grkg+dMMIyrfmfkEybNoyOhdBMURxavPx6Q1Kn7NY5Ho41s975gpXA9Pnw7WRJbxwICLFgbw==",
      "path": "microsoft.extensions.apidescription.server/6.0.3",
      "hashPath": "microsoft.extensions.apidescription.server.6.0.3.nupkg.sha512"
    },
    "Microsoft.Extensions.Caching.Abstractions/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-3KuSxeHoNYdxVYfg2IRZCThcrlJ1XJqIXkAWikCsbm5C/bCjv7G0WoKDyuR98Q+T607QT2Zl5GsbGRkENcV2yQ==",
      "path": "microsoft.extensions.caching.abstractions/8.0.0",
      "hashPath": "microsoft.extensions.caching.abstractions.8.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Caching.Memory/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-7pqivmrZDzo1ADPkRwjy+8jtRKWRCPag9qPI+p7sgu7Q4QreWhcvbiWXsbhP+yY8XSiDvZpu2/LWdBv7PnmOpQ==",
      "path": "microsoft.extensions.caching.memory/8.0.0",
      "hashPath": "microsoft.extensions.caching.memory.8.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Configuration.Abstractions/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-3lE/iLSutpgX1CC0NOW70FJoGARRHbyKmG7dc0klnUZ9Dd9hS6N/POPWhKhMLCEuNN5nXEY5agmlFtH562vqhQ==",
      "path": "microsoft.extensions.configuration.abstractions/8.0.0",
      "hashPath": "microsoft.extensions.configuration.abstractions.8.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.DependencyInjection/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-V8S3bsm50ig6JSyrbcJJ8bW2b9QLGouz+G1miK3UTaOWmMtFwNNNzUf4AleyDWUmTrWMLNnFSLEQtxmxgNQnNQ==",
      "path": "microsoft.extensions.dependencyinjection/8.0.0",
      "hashPath": "microsoft.extensions.dependencyinjection.8.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.DependencyInjection.Abstractions/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-cjWrLkJXK0rs4zofsK4bSdg+jhDLTaxrkXu4gS6Y7MAlCvRyNNgwY/lJi5RDlQOnSZweHqoyvgvbdvQsRIW+hg==",
      "path": "microsoft.extensions.dependencyinjection.abstractions/8.0.0",
      "hashPath": "microsoft.extensions.dependencyinjection.abstractions.8.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.FileProviders.Abstractions/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-ZbaMlhJlpisjuWbvXr4LdAst/1XxH3vZ6A0BsgTphZ2L4PGuxRLz7Jr/S7mkAAnOn78Vu0fKhEgNF5JO3zfjqQ==",
      "path": "microsoft.extensions.fileproviders.abstractions/8.0.0",
      "hashPath": "microsoft.extensions.fileproviders.abstractions.8.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.FileProviders.Embedded/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-TuRh62KcoOvaSDCbtHT8K0WYptZysYQHPRRNfOgqF7ZUtUL4O0WMV8RdxbtDFJDsg3jv9bgHwXbrgwTeI9+5uQ==",
      "path": "microsoft.extensions.fileproviders.embedded/8.0.0",
      "hashPath": "microsoft.extensions.fileproviders.embedded.8.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Logging/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-tvRkov9tAJ3xP51LCv3FJ2zINmv1P8Hi8lhhtcKGqM+ImiTCC84uOPEI4z8Cdq2C3o9e+Aa0Gw0rmrsJD77W+w==",
      "path": "microsoft.extensions.logging/8.0.0",
      "hashPath": "microsoft.extensions.logging.8.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Logging.Abstractions/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-arDBqTgFCyS0EvRV7O3MZturChstm50OJ0y9bDJvAcmEPJm0FFpFyjU/JLYyStNGGey081DvnQYlncNX5SJJGA==",
      "path": "microsoft.extensions.logging.abstractions/8.0.0",
      "hashPath": "microsoft.extensions.logging.abstractions.8.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Options/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-JOVOfqpnqlVLUzINQ2fox8evY2SKLYJ3BV8QDe/Jyp21u1T7r45x/R/5QdteURMR5r01GxeJSBBUOCOyaNXA3g==",
      "path": "microsoft.extensions.options/8.0.0",
      "hashPath": "microsoft.extensions.options.8.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Primitives/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-bXJEZrW9ny8vjMF1JV253WeLhpEVzFo1lyaZu1vQ4ZxWUlVvknZ/+ftFgVheLubb4eZPSwwxBeqS1JkCOjxd8g==",
      "path": "microsoft.extensions.primitives/8.0.0",
      "hashPath": "microsoft.extensions.primitives.8.0.0.nupkg.sha512"
    },
    "Microsoft.NETCore.Platforms/1.1.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-kz0PEW2lhqygehI/d6XsPCQzD7ff7gUJaVGPVETX611eadGsA3A877GdSlU0LRVMCTH/+P3o2iDTak+S08V2+A==",
      "path": "microsoft.netcore.platforms/1.1.0",
      "hashPath": "microsoft.netcore.platforms.1.1.0.nupkg.sha512"
    },
    "Microsoft.NETCore.Targets/1.1.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-aOZA3BWfz9RXjpzt0sRJJMjAscAUm3Hoa4UWAfceV9UTYxgwZ1lZt5nO2myFf+/jetYQo4uTP7zS8sJY67BBxg==",
      "path": "microsoft.netcore.targets/1.1.0",
      "hashPath": "microsoft.netcore.targets.1.1.0.nupkg.sha512"
    },
    "Microsoft.OpenApi/1.6.17": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-Le+kehlmrlQfuDFUt1zZ2dVwrhFQtKREdKBo+rexOwaCoYP0/qpgT9tLxCsZjsgR5Itk1UKPcbgO+FyaNid/bA==",
      "path": "microsoft.openapi/1.6.17",
      "hashPath": "microsoft.openapi.1.6.17.nupkg.sha512"
    },
    "Namotion.Reflection/3.1.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-Qn0wM7u9TpSpja2x8UVexr2bLHb1DGMNhD2TCz3woklxaY1oH+Sitrw9fg/4YbNoNtczeH2jf+yPdXMQlgvFlQ==",
      "path": "namotion.reflection/3.1.1",
      "hashPath": "namotion.reflection.3.1.1.nupkg.sha512"
    },
    "Newtonsoft.Json/13.0.3": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-HrC5BXdl00IP9zeV+0Z848QWPAoCr9P3bDEZguI+gkLcBKAOxix/tLEAAHC+UvDNPv4a2d18lOReHMOagPa+zQ==",
      "path": "newtonsoft.json/13.0.3",
      "hashPath": "newtonsoft.json.13.0.3.nupkg.sha512"
    },
    "NJsonSchema/11.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-yJviNfW8U8+ACJO0VyiNuNIDGoRDZO5awNfjL1+6iO7TVI5pfjun+ZBVsv1hLga/IVlhnUPpMj8VuhQAYfXD/A==",
      "path": "njsonschema/11.0.0",
      "hashPath": "njsonschema.11.0.0.nupkg.sha512"
    },
    "NJsonSchema.Annotations/11.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-kbUrZfspa+Y5Kz0OaRbLQxLtVydWFvkY1CpwfKmravZXG2icphuYHR58EwBZuCQWJb/BL81PGP4FjpDNBFnn6Q==",
      "path": "njsonschema.annotations/11.0.0",
      "hashPath": "njsonschema.annotations.11.0.0.nupkg.sha512"
    },
    "NJsonSchema.NewtonsoftJson/11.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-MCugHG7dyQhfwgY1NIaCZNFQzTYwmQpfwm15bksG/Ng1H8up/4DxxH1M9fDtV5xqYBrWGjMRSmTokGr9wwLCPg==",
      "path": "njsonschema.newtonsoftjson/11.0.0",
      "hashPath": "njsonschema.newtonsoftjson.11.0.0.nupkg.sha512"
    },
    "NJsonSchema.Yaml/11.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-riCNrkN2YOVYyvvJjtc7zdIYXQT6/l7FMe0XFGH5rfxWN4/Iy/T60+ZzketAIMhzqn65WPmFZ3NUJ1nGtGCrMw==",
      "path": "njsonschema.yaml/11.0.0",
      "hashPath": "njsonschema.yaml.11.0.0.nupkg.sha512"
    },
    "Npgsql/8.0.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-MuJzLoWCaQhQAR3oh66YR0Ir6mxuezncGX3f8wxvAc21g0+9HICktJQlqMoODhxztZKXE5k9GxRxqUAN+vPb4g==",
      "path": "npgsql/8.0.2",
      "hashPath": "npgsql.8.0.2.nupkg.sha512"
    },
    "Npgsql.EntityFrameworkCore.PostgreSQL/8.0.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-eoZPynwkZTWFTgnocvXORuCL2yFZtscrUdqVhjxiRULpC7BMg9zhLM5oDZAU5PoX1PgN77hmkKE4a3PQiHqh7Q==",
      "path": "npgsql.entityframeworkcore.postgresql/8.0.2",
      "hashPath": "npgsql.entityframeworkcore.postgresql.8.0.2.nupkg.sha512"
    },
    "NSwag.Annotations/14.0.3": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-FOK/EvGfnNcVTRPaZXsngmZJl0uOB51/8M5xSdDYqVLhrqxmSOsL/SIISVecRy/9nbg5dmVsHS20of6papLk5w==",
      "path": "nswag.annotations/14.0.3",
      "hashPath": "nswag.annotations.14.0.3.nupkg.sha512"
    },
    "NSwag.AspNetCore/14.0.3": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-GFCf/IIEXwwZ+03py6NpQNz0ARkcLdWxKLYX0EYiiAXoTVBij+g5KIl5/j1FoIH79b30twyNOXcEmdIqA/ZWWQ==",
      "path": "nswag.aspnetcore/14.0.3",
      "hashPath": "nswag.aspnetcore.14.0.3.nupkg.sha512"
    },
    "NSwag.Core/14.0.3": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-lC5NTB2c+/JfQGYOFtVTKy2z8pZD/lsaRGYxzbmJsvNgGfeEq4FiT7yumYEUMvi+lnrv5R58cuqgdLoLdIqqVQ==",
      "path": "nswag.core/14.0.3",
      "hashPath": "nswag.core.14.0.3.nupkg.sha512"
    },
    "NSwag.Core.Yaml/14.0.3": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-s3PFor6CJ3T2+s5FUh4AaqmPNnsl25rnu01lpqBAy+PIkJjzlMp47xTeBOl0I6bBg5XDcGCiqR/VGjkfRoA/eA==",
      "path": "nswag.core.yaml/14.0.3",
      "hashPath": "nswag.core.yaml.14.0.3.nupkg.sha512"
    },
    "NSwag.Generation/14.0.3": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-76o7oIymq7oOOMIJLSpMDw9XhP8rgl/RgnFUTY41unRdG8W7Xn1U5VpTmF1I7hI/pgVcp/xwHuTcwgaG1IKnIQ==",
      "path": "nswag.generation/14.0.3",
      "hashPath": "nswag.generation.14.0.3.nupkg.sha512"
    },
    "NSwag.Generation.AspNetCore/14.0.3": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-mMixV2r4/nl8j+7QtkS/5ig5E+5fLhwlTeoMTfdNVY7J9ggyS/xVZlBrgqtgLt9a9gvkNaZMrLu2jacjOvZcqg==",
      "path": "nswag.generation.aspnetcore/14.0.3",
      "hashPath": "nswag.generation.aspnetcore.14.0.3.nupkg.sha512"
    },
    "System.Collections/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-3Dcj85/TBdVpL5Zr+gEEBUuFe2icOnLalmEh9hfck1PTYbbyWuZgh4fmm2ysCLTrqLQw6t3TgTyJ+VLp+Qb+Lw==",
      "path": "system.collections/4.3.0",
      "hashPath": "system.collections.4.3.0.nupkg.sha512"
    },
    "System.Diagnostics.Debug/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-ZUhUOdqmaG5Jk3Xdb8xi5kIyQYAA4PnTNlHx1mu9ZY3qv4ELIdKbnL/akbGaKi2RnNUWaZsAs31rvzFdewTj2g==",
      "path": "system.diagnostics.debug/4.3.0",
      "hashPath": "system.diagnostics.debug.4.3.0.nupkg.sha512"
    },
    "System.Dynamic.Runtime/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-SNVi1E/vfWUAs/WYKhE9+qlS6KqK0YVhnlT0HQtr8pMIA8YX3lwy3uPMownDwdYISBdmAF/2holEIldVp85Wag==",
      "path": "system.dynamic.runtime/4.3.0",
      "hashPath": "system.dynamic.runtime.4.3.0.nupkg.sha512"
    },
    "System.Globalization/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-kYdVd2f2PAdFGblzFswE4hkNANJBKRmsfa2X5LG2AcWE1c7/4t0pYae1L8vfZ5xvE2nK/R9JprtToA61OSHWIg==",
      "path": "system.globalization/4.3.0",
      "hashPath": "system.globalization.4.3.0.nupkg.sha512"
    },
    "System.IO/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-3qjaHvxQPDpSOYICjUoTsmoq5u6QJAFRUITgeT/4gqkF1bajbSmb1kwSxEA8AHlofqgcKJcM8udgieRNhaJ5Cg==",
      "path": "system.io/4.3.0",
      "hashPath": "system.io.4.3.0.nupkg.sha512"
    },
    "System.Linq/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-5DbqIUpsDp0dFftytzuMmc0oeMdQwjcP/EWxsksIz/w1TcFRkZ3yKKz0PqiYFMmEwPSWw+qNVqD7PJ889JzHbw==",
      "path": "system.linq/4.3.0",
      "hashPath": "system.linq.4.3.0.nupkg.sha512"
    },
    "System.Linq.Expressions/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-PGKkrd2khG4CnlyJwxwwaWWiSiWFNBGlgXvJpeO0xCXrZ89ODrQ6tjEWS/kOqZ8GwEOUATtKtzp1eRgmYNfclg==",
      "path": "system.linq.expressions/4.3.0",
      "hashPath": "system.linq.expressions.4.3.0.nupkg.sha512"
    },
    "System.ObjectModel/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-bdX+80eKv9bN6K4N+d77OankKHGn6CH711a6fcOpMQu2Fckp/Ft4L/kW9WznHpyR0NRAvJutzOMHNNlBGvxQzQ==",
      "path": "system.objectmodel/4.3.0",
      "hashPath": "system.objectmodel.4.3.0.nupkg.sha512"
    },
    "System.Reflection/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-KMiAFoW7MfJGa9nDFNcfu+FpEdiHpWgTcS2HdMpDvt9saK3y/G4GwprPyzqjFH9NTaGPQeWNHU+iDlDILj96aQ==",
      "path": "system.reflection/4.3.0",
      "hashPath": "system.reflection.4.3.0.nupkg.sha512"
    },
    "System.Reflection.Emit/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-228FG0jLcIwTVJyz8CLFKueVqQK36ANazUManGaJHkO0icjiIypKW7YLWLIWahyIkdh5M7mV2dJepllLyA1SKg==",
      "path": "system.reflection.emit/4.3.0",
      "hashPath": "system.reflection.emit.4.3.0.nupkg.sha512"
    },
    "System.Reflection.Emit.ILGeneration/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-59tBslAk9733NXLrUJrwNZEzbMAcu8k344OYo+wfSVygcgZ9lgBdGIzH/nrg3LYhXceynyvTc8t5/GD4Ri0/ng==",
      "path": "system.reflection.emit.ilgeneration/4.3.0",
      "hashPath": "system.reflection.emit.ilgeneration.4.3.0.nupkg.sha512"
    },
    "System.Reflection.Emit.Lightweight/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-oadVHGSMsTmZsAF864QYN1t1QzZjIcuKU3l2S9cZOwDdDueNTrqq1yRj7koFfIGEnKpt6NjpL3rOzRhs4ryOgA==",
      "path": "system.reflection.emit.lightweight/4.3.0",
      "hashPath": "system.reflection.emit.lightweight.4.3.0.nupkg.sha512"
    },
    "System.Reflection.Extensions/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-rJkrJD3kBI5B712aRu4DpSIiHRtr6QlfZSQsb0hYHrDCZORXCFjQfoipo2LaMUHoT9i1B7j7MnfaEKWDFmFQNQ==",
      "path": "system.reflection.extensions/4.3.0",
      "hashPath": "system.reflection.extensions.4.3.0.nupkg.sha512"
    },
    "System.Reflection.Primitives/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-5RXItQz5As4xN2/YUDxdpsEkMhvw3e6aNveFXUn4Hl/udNTCNhnKp8lT9fnc3MhvGKh1baak5CovpuQUXHAlIA==",
      "path": "system.reflection.primitives/4.3.0",
      "hashPath": "system.reflection.primitives.4.3.0.nupkg.sha512"
    },
    "System.Reflection.TypeExtensions/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-7u6ulLcZbyxB5Gq0nMkQttcdBTx57ibzw+4IOXEfR+sXYQoHvjW5LTLyNr8O22UIMrqYbchJQJnos4eooYzYJA==",
      "path": "system.reflection.typeextensions/4.3.0",
      "hashPath": "system.reflection.typeextensions.4.3.0.nupkg.sha512"
    },
    "System.Resources.ResourceManager/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-/zrcPkkWdZmI4F92gL/TPumP98AVDu/Wxr3CSJGQQ+XN6wbRZcyfSKVoPo17ilb3iOr0cCRqJInGwNMolqhS8A==",
      "path": "system.resources.resourcemanager/4.3.0",
      "hashPath": "system.resources.resourcemanager.4.3.0.nupkg.sha512"
    },
    "System.Runtime/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-JufQi0vPQ0xGnAczR13AUFglDyVYt4Kqnz1AZaiKZ5+GICq0/1MH/mO/eAJHt/mHW1zjKBJd7kV26SrxddAhiw==",
      "path": "system.runtime/4.3.0",
      "hashPath": "system.runtime.4.3.0.nupkg.sha512"
    },
    "System.Runtime.Extensions/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-guW0uK0fn5fcJJ1tJVXYd7/1h5F+pea1r7FLSOz/f8vPEqbR2ZAknuRDvTQ8PzAilDveOxNjSfr0CHfIQfFk8g==",
      "path": "system.runtime.extensions/4.3.0",
      "hashPath": "system.runtime.extensions.4.3.0.nupkg.sha512"
    },
    "System.Runtime.Handles/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-OKiSUN7DmTWeYb3l51A7EYaeNMnvxwE249YtZz7yooT4gOZhmTjIn48KgSsw2k2lYdLgTKNJw/ZIfSElwDRVgg==",
      "path": "system.runtime.handles/4.3.0",
      "hashPath": "system.runtime.handles.4.3.0.nupkg.sha512"
    },
    "System.Runtime.InteropServices/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-uv1ynXqiMK8mp1GM3jDqPCFN66eJ5w5XNomaK2XD+TuCroNTLFGeZ+WCmBMcBDyTFKou3P6cR6J/QsaqDp7fGQ==",
      "path": "system.runtime.interopservices/4.3.0",
      "hashPath": "system.runtime.interopservices.4.3.0.nupkg.sha512"
    },
    "System.Text.Encoding/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-BiIg+KWaSDOITze6jGQynxg64naAPtqGHBwDrLaCtixsa5bKiR8dpPOHA7ge3C0JJQizJE+sfkz1wV+BAKAYZw==",
      "path": "system.text.encoding/4.3.0",
      "hashPath": "system.text.encoding.4.3.0.nupkg.sha512"
    },
    "System.Threading/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-VkUS0kOBcUf3Wwm0TSbrevDDZ6BlM+b/HRiapRFWjM5O0NS0LviG0glKmFK+hhPDd1XFeSdU1GmlLhb2CoVpIw==",
      "path": "system.threading/4.3.0",
      "hashPath": "system.threading.4.3.0.nupkg.sha512"
    },
    "System.Threading.Tasks/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-LbSxKEdOUhVe8BezB/9uOGGppt+nZf6e1VFyw6v3DN6lqitm0OSn2uXMOdtP0M3W4iMcqcivm2J6UgqiwwnXiA==",
      "path": "system.threading.tasks/4.3.0",
      "hashPath": "system.threading.tasks.4.3.0.nupkg.sha512"
    },
    "YamlDotNet/13.7.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-X4m1PnFcJwvAj1sCDMntg/eZcX96CJLrWMiYnq41KqhFVZPuw63ZTSxIGqgdCwHWHvCAyTxheELC/VDf1HsU2A==",
      "path": "yamldotnet/13.7.1",
      "hashPath": "yamldotnet.13.7.1.nupkg.sha512"
    },
    "Portfolio.Application/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "Portfolio.Domain/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "Portfolio.Infrastructure/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    }
  }
}

================
File: src/Portfolio.WebApi/bin/Debug/net9.0/Portfolio.WebApi.runtimeconfig.json
================
{
  "runtimeOptions": {
    "tfm": "net9.0",
    "frameworks": [
      {
        "name": "Microsoft.NETCore.App",
        "version": "9.0.0"
      },
      {
        "name": "Microsoft.AspNetCore.App",
        "version": "9.0.0"
      }
    ],
    "configProperties": {
      "System.GC.Server": true,
      "System.Reflection.NullabilityInfoContext.IsSupported": true,
      "System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization": false
    }
  }
}

================
File: src/Portfolio.WebApi/bin/Debug/net9.0/Portfolio.WebApi.staticwebassets.endpoints.json
================
{
  "Version": 1,
  "ManifestType": "Build",
  "Endpoints": []
}

================
File: src/Portfolio.WebApi/Extensions/ApplicationBuilderExtensions.cs
================
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;

namespace Portfolio.WebApi.Extensions;

public static class ApplicationBuilderExtensions
{
    public static IApplicationBuilder UseCustomMiddleware(this IApplicationBuilder app, IWebHostEnvironment env)
    {

        app.UseHttpsRedirection();
        app.UseCustomExceptionHandler();

        return app;
    }

    public static IApplicationBuilder UseSwaggerWithUI(this IApplicationBuilder app, IWebHostEnvironment env)
    {
        if (env.IsDevelopment())
        {
            app.UseSwagger();
            app.UseSwaggerUI();
        }
        return app;
    }

    public static IApplicationBuilder UseCustomExceptionHandler(this IApplicationBuilder app)
    {
        app.UseExceptionHandler("/error");
        return app;
    }
}

================
File: src/Portfolio.WebApi/Extensions/EndpointExtensions.cs
================
using Portfolio.WebApi.Extensions.Endpoints;
namespace Portfolio.WebApi.Extensions;

/// <summary>
/// Provides endpoint configuration extensions following Clean Architecture principles.
/// Each domain entity has its own dedicated endpoint configuration class.
/// </summary>
public static class EndpointExtensions
{
    /// <summary>
    /// Maps all API endpoints following Clean Architecture and DDD principles.
    /// </summary>
    public static WebApplication MapEndpoints(this WebApplication app)
    {
        app.MapPageEndpoints();
        app.MapBlogEndpoints();
        app.MapProjectEndpoints();
        app.MapUserEndpoints();
        return app;
    }

}

================
File: src/Portfolio.WebApi/Extensions/Endpoints/BaseEndpoints.cs
================
using Microsoft.AspNetCore.Mvc;
using Portfolio.Domain.Common;
using Portfolio.Domain.Exceptions;

namespace Portfolio.WebApi.Extensions.Endpoints;

public static class BaseEndpoints
{
    public static IResult HandleException(Exception ex)
    {
        return ex switch
        {
            DomainValidationException validationEx => Results.BadRequest(validationEx.Message),
            NotFoundException notFoundEx => Results.NotFound(notFoundEx.Message),
            _ => Results.StatusCode(500)
        };
    }
}

================
File: src/Portfolio.WebApi/Extensions/Endpoints/BlogEndpoints.cs
================
using MediatR;
using Microsoft.AspNetCore.Mvc;
using Portfolio.Application.UseCases.Blogs.Commands.CreateBlog;
using Portfolio.Application.UseCases.Blogs.Commands.DeleteBlog;
using Portfolio.Application.UseCases.Blogs.Commands.UpdateBlog;
using Portfolio.Application.UseCases.Blogs.Queries.GetAllBlogs;
using Portfolio.Application.UseCases.Blogs.Queries.GetBlogById;
using Portfolio.Application.UseCases.Blogs.Queries.GetBlogBySlug;

namespace Portfolio.WebApi.Extensions.Endpoints;

public static class BlogEndpoints
{
    public static IEndpointRouteBuilder MapBlogEndpoints(this IEndpointRouteBuilder app)
    {
        var blogs = app.MapGroup("/api/blogs")
            .WithTags("Blogs")
            .WithOpenApi();

        // Commands
        blogs.MapPost("/", async (IMediator mediator, [FromBody] CreateBlogCommand command) =>
        {
            try
            {
                var result = await mediator.Send(command);
                return Results.Created($"/api/blogs/{result.Id}", result);
            }
            catch (Exception ex)
            {
                return BaseEndpoints.HandleException(ex);
            }
        })
        .WithName("CreateBlog")
        .WithDescription("Creates a new blog post");

        blogs.MapPut("/{id}", async (IMediator mediator, string id, [FromBody] UpdateBlogCommand command) =>
        {
            try 
            {
                if (id != command.Id) return Results.BadRequest("Id mismatch");
                var result = await mediator.Send(command);
                return Results.Ok(result);
            }
            catch (Exception ex)
            {
                return BaseEndpoints.HandleException(ex);
            }
        })
        .WithName("UpdateBlog")
        .WithDescription("Updates an existing blog post");

        blogs.MapDelete("/{id}", async (IMediator mediator, string id) =>
        {
            try
            {
                await mediator.Send(new DeleteBlogCommand(id));
                return Results.NoContent();
            }
            catch (Exception ex)
            {
                return BaseEndpoints.HandleException(ex);
            }
        })
        .WithName("DeleteBlog")
        .WithDescription("Deletes a blog post");

        // Queries
        blogs.MapGet("/", async (IMediator mediator) =>
        {
            try
            {
                var result = await mediator.Send(new GetAllBlogsQuery());
                return Results.Ok(result);
            }
            catch (Exception ex)
            {
                return BaseEndpoints.HandleException(ex);
            }
        })
        .WithName("GetAllBlogs")
        .WithDescription("Retrieves all blog posts");

        blogs.MapGet("/{id}", async (IMediator mediator, string id) =>
        {
            try
            {
                var result = await mediator.Send(new GetBlogByIdQuery(id));
                return Results.Ok(result);
            }
            catch (Exception ex)
            {
                return BaseEndpoints.HandleException(ex);
            }
        })
        .WithName("GetBlogById")
        .WithDescription("Retrieves a blog post by its ID");

        blogs.MapGet("/by-slug/{slug}", async (IMediator mediator, string slug) =>
        {
            try
            {
                var result = await mediator.Send(new GetBlogBySlugQuery(slug));
                return Results.Ok(result);
            }
            catch (Exception ex)
            {
                return BaseEndpoints.HandleException(ex);
            }
        })
        .WithName("GetBlogBySlug")
        .WithDescription("Retrieves a blog post by its slug");

        return app;
    }
}

================
File: src/Portfolio.WebApi/Extensions/Endpoints/EndpointBase.cs
================
using MediatR;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Portfolio.Application.Common.DTOs;
using Portfolio.Domain.Common;
using Portfolio.Domain.Exceptions;

namespace Portfolio.WebApi.Extensions.Endpoints;

/// <summary>
/// Base class for endpoint configurations following Clean Architecture and DDD principles.
/// Provides common functionality for handling requests and responses.
/// </summary>
public static class EndpointBase
{
    /// <summary>
    /// Handles domain exceptions and returns appropriate HTTP responses
    /// </summary>
    public static IResult HandleException(Exception ex)
    {
        return ex switch
        {
            DomainValidationException validationEx => Results.BadRequest(validationEx.Message),
            NotFoundException notFoundEx => Results.NotFound(notFoundEx.Message),
            _ => Results.StatusCode(500)
        };
    }

    /// <summary>
    /// Creates a standardized endpoint group with OpenAPI documentation
    /// </summary>
    public static RouteGroupBuilder CreateGroup(IEndpointRouteBuilder app, string groupName, string tag)
    {
        return app.MapGroup($"/api/{groupName}")
            .WithTags(tag)
            .WithOpenApi();
    }

    /// <summary>
    /// Configures common CRUD endpoints for a domain entity following DDD principles
    /// </summary>
    public static RouteGroupBuilder MapCrudEndpoints<TCreateCommand, TUpdateCommand, TDeleteCommand, TGetAllQuery, TGetByIdQuery, TResponse>(
        this RouteGroupBuilder group,
        string entityName)
        where TCreateCommand : IRequest<TResponse>
        where TUpdateCommand : IRequest<TResponse>
        where TDeleteCommand : IRequest<Unit>
        where TGetAllQuery : IRequest<IEnumerable<TResponse>>
        where TGetByIdQuery : IRequest<TResponse>
        where TResponse : BaseDto
    {
        // Commands
        group.MapPost("/", async (IMediator mediator, [FromBody] TCreateCommand command) =>
        {
            try
            {
                var result = await mediator.Send(command);
                return Results.Created($"/api/{entityName.ToLower()}/{((dynamic)result).Id}", result);
            }
            catch (Exception ex)
            {
                return HandleException(ex);
            }
        })
        .WithName($"Create{entityName}")
        .WithDescription($"Creates a new {entityName.ToLower()}");

        group.MapPut("/{id}", async (IMediator mediator, string id, [FromBody] TUpdateCommand command) =>
        {
            try
            {
                if (id != ((dynamic)command).Id?.ToString()) 
                    return Results.BadRequest("Id mismatch");
                
                var result = await mediator.Send(command);
                return Results.Ok(result);
            }
            catch (Exception ex)
            {
                return HandleException(ex);
            }
        })
        .WithName($"Update{entityName}")
        .WithDescription($"Updates an existing {entityName.ToLower()}");

        group.MapDelete("/{id}", async (IMediator mediator, string id) =>
        {
            try
            {
                // Create delete command using reflection since we can't construct generic type
                var command = Activator.CreateInstance(typeof(TDeleteCommand), id);
                await mediator.Send(command);
                return Results.NoContent();
            }
            catch (Exception ex)
            {
                return HandleException(ex);
            }
        })
        .WithName($"Delete{entityName}")
        .WithDescription($"Deletes a {entityName.ToLower()}");

        // Queries
        group.MapGet("/", async (IMediator mediator) =>
        {
            try
            {
                var query = Activator.CreateInstance<TGetAllQuery>();
                var result = await mediator.Send(query);
                return Results.Ok(result);
            }
            catch (Exception ex)
            {
                return HandleException(ex);
            }
        })
        .WithName($"GetAll{entityName}s")
        .WithDescription($"Retrieves all {entityName.ToLower()}s");

        group.MapGet("/{id}", async (IMediator mediator, string id) =>
        {
            try
            {
                var query = Activator.CreateInstance(typeof(TGetByIdQuery), id);
                var result = await mediator.Send(query);
                return Results.Ok(result);
            }
            catch (Exception ex)
            {
                return HandleException(ex);
            }
        })
        .WithName($"Get{entityName}ById")
        .WithDescription($"Retrieves a {entityName.ToLower()} by its ID");

        return group;
    }
}

================
File: src/Portfolio.WebApi/Extensions/Endpoints/PageEndpoints.cs
================
using MediatR;
using Microsoft.AspNetCore.Builder;
using Portfolio.Application.Common.DTOs;
using Portfolio.Application.UseCases.Pages.Commands.CreatePage;
using Portfolio.Application.UseCases.Pages.Commands.DeletePage;
using Portfolio.Application.UseCases.Pages.Commands.UpdatePage;
using Portfolio.Application.UseCases.Pages.Queries.GetAllPages;
using Portfolio.Application.UseCases.Pages.Queries.GetPageById;
using Portfolio.Application.UseCases.Pages.Queries.GetPageBySlug;

namespace Portfolio.WebApi.Extensions.Endpoints;

/// <summary>
/// Configures endpoints for the Page aggregate following DDD principles
/// </summary>
public static class PageEndpoints
{
    public static IEndpointRouteBuilder MapPageEndpoints(this IEndpointRouteBuilder app)
    {
        var group = EndpointBase.CreateGroup(app, "pages", "Pages");

        // Configure standard CRUD endpoints
        group.MapCrudEndpoints<CreatePageCommand, UpdatePageCommand, DeletePageCommand,
            GetAllPagesQuery, GetPageByIdQuery, PageDto>("Page");

        // Additional domain-specific endpoints
        group.MapGet("/by-slug/{slug}", async (IMediator mediator, string slug) =>
        {
            try
            {
                var result = await mediator.Send(new GetPageBySlugQuery(slug));
                return Results.Ok(result);
            }
            catch (Exception ex)
            {
                return EndpointBase.HandleException(ex);
            }
        })
        .WithName("GetPageBySlug")
        .WithDescription("Retrieves a page by its slug");

        return app;
    }
}

================
File: src/Portfolio.WebApi/Extensions/Endpoints/ProjectEndpoints.cs
================
using MediatR;
using Microsoft.AspNetCore.Mvc;
using Portfolio.Application.UseCases.Projects.Commands.CreateProject;
using Portfolio.Application.UseCases.Projects.Commands.DeleteProject;
using Portfolio.Application.UseCases.Projects.Commands.UpdateProject;
using Portfolio.Application.UseCases.Projects.Queries.GetAllProjects;
using Portfolio.Application.UseCases.Projects.Queries.GetProjectById;

namespace Portfolio.WebApi.Extensions.Endpoints;

public static class ProjectEndpoints
{
    public static IEndpointRouteBuilder MapProjectEndpoints(this IEndpointRouteBuilder app)
    {
        var projects = app.MapGroup("/api/projects")
            .WithTags("Projects")
            .WithOpenApi();

        // Commands
        projects.MapPost("/", async (IMediator mediator, [FromBody] CreateProjectCommand command) =>
        {
            try
            {
                var result = await mediator.Send(command);
                return Results.Created($"/api/projects/{result.Id}", result);
            }
            catch (Exception ex)
            {
                return BaseEndpoints.HandleException(ex);
            }
        })
        .WithName("CreateProject")
        .WithDescription("Creates a new project");

        projects.MapPut("/{id}", async (IMediator mediator, string id, [FromBody] UpdateProjectCommand command) =>
        {
            try 
            {
                if (id != command.Id) return Results.BadRequest("Id mismatch");
                var result = await mediator.Send(command);
                return Results.Ok(result);
            }
            catch (Exception ex)
            {
                return BaseEndpoints.HandleException(ex);
            }
        })
        .WithName("UpdateProject")
        .WithDescription("Updates an existing project");

        projects.MapDelete("/{id}", async (IMediator mediator, string id) =>
        {
            try
            {
                await mediator.Send(new DeleteProjectCommand(id));
                return Results.NoContent();
            }
            catch (Exception ex)
            {
                return BaseEndpoints.HandleException(ex);
            }
        })
        .WithName("DeleteProject")
        .WithDescription("Deletes a project");

        // Queries
        projects.MapGet("/", async (IMediator mediator) =>
        {
            try
            {
                var result = await mediator.Send(new GetAllProjectsQuery());
                return Results.Ok(result);
            }
            catch (Exception ex)
            {
                return BaseEndpoints.HandleException(ex);
            }
        })
        .WithName("GetAllProjects")
        .WithDescription("Retrieves all projects");

        projects.MapGet("/{id}", async (IMediator mediator, string id) =>
        {
            try
            {
                var result = await mediator.Send(new GetProjectByIdQuery(id));
                return Results.Ok(result);
            }
            catch (Exception ex)
            {
                return BaseEndpoints.HandleException(ex);
            }
        })
        .WithName("GetProjectById")
        .WithDescription("Retrieves a project by its ID");

        return app;
    }
}

================
File: src/Portfolio.WebApi/Extensions/Endpoints/UserEndpoints.cs
================
using MediatR;
using Microsoft.AspNetCore.Mvc;
using Portfolio.Application.UseCases.Users.Commands.CreateUser;
using Portfolio.Application.UseCases.Users.Commands.DeleteUser;
using Portfolio.Application.UseCases.Users.Commands.UpdateUser;
using Portfolio.Application.UseCases.Users.Queries.GetAllUsers;
using Portfolio.Application.UseCases.Users.Queries.GetUserById;
using Portfolio.Application.UseCases.Users.Queries.GetUserByUsername;

namespace Portfolio.WebApi.Extensions.Endpoints;

public static class UserEndpoints
{
    public static IEndpointRouteBuilder MapUserEndpoints(this IEndpointRouteBuilder app)
    {
        var users = app.MapGroup("/api/users")
            .WithTags("Users")
            .WithOpenApi();

        // Commands
        users.MapPost("/", async (IMediator mediator, [FromBody] CreateUserCommand command) =>
        {
            try
            {
                var result = await mediator.Send(command);
                return Results.Created($"/api/users/{result.Id}", result);
            }
            catch (Exception ex)
            {
                return BaseEndpoints.HandleException(ex);
            }
        })
        .WithName("CreateUser")
        .WithDescription("Creates a new user");

        users.MapPut("/{id}", async (IMediator mediator, string id, [FromBody] UpdateUserCommand command) =>
        {
            try 
            {
                if (id != command.Id) return Results.BadRequest("Id mismatch");
                var result = await mediator.Send(command);
                return Results.Ok(result);
            }
            catch (Exception ex)
            {
                return BaseEndpoints.HandleException(ex);
            }
        })
        .WithName("UpdateUser")
        .WithDescription("Updates an existing user");

        users.MapDelete("/{id}", async (IMediator mediator, string id) =>
        {
            try
            {
                await mediator.Send(new DeleteUserCommand(id));
                return Results.NoContent();
            }
            catch (Exception ex)
            {
                return BaseEndpoints.HandleException(ex);
            }
        })
        .WithName("DeleteUser")
        .WithDescription("Deletes a user");

        // Queries
        users.MapGet("/", async (IMediator mediator) =>
        {
            try
            {
                var result = await mediator.Send(new GetAllUsersQuery());
                return Results.Ok(result);
            }
            catch (Exception ex)
            {
                return BaseEndpoints.HandleException(ex);
            }
        })
        .WithName("GetAllUsers")
        .WithDescription("Retrieves all users");

        users.MapGet("/{id}", async (IMediator mediator, string id) =>
        {
            try
            {
                var result = await mediator.Send(new GetUserByIdQuery(id));
                return Results.Ok(result);
            }
            catch (Exception ex)
            {
                return BaseEndpoints.HandleException(ex);
            }
        })
        .WithName("GetUserById")
        .WithDescription("Retrieves a user by their ID");

        users.MapGet("/by-username/{username}", async (IMediator mediator, string username) =>
        {
            try
            {
                var result = await mediator.Send(new GetUserByUsernameQuery(username));
                return Results.Ok(result);
            }
            catch (Exception ex)
            {
                return BaseEndpoints.HandleException(ex);
            }
        })
        .WithName("GetUserByUsername")
        .WithDescription("Retrieves a user by their username");

        return app;
    }
}

================
File: src/Portfolio.WebApi/Extensions/WebApiServiceExtensions.cs
================
using Microsoft.OpenApi.Models;

namespace Portfolio.WebApi.Extensions;

public static class WebApiServiceExtensions
{
    public static IServiceCollection AddWebApiServices(this IServiceCollection services)
    {
        services.AddEndpointsApiExplorer();
        services.AddSwaggerGen(c =>
        {
            c.SwaggerDoc("v1", new OpenApiInfo
            {
                Title = "Portfolio API",
                Version = "v1",
                Description = "Portfolio API following Clean Architecture and DDD principles"
            });
        });

        return services;
    }

    public static IApplicationBuilder UseSwaggerWithUI(this IApplicationBuilder app)
    {
        app.UseSwagger();
        app.UseSwaggerUI(c =>
        {
            c.SwaggerEndpoint("/swagger/v1/swagger.json", "Portfolio API v1");
            c.RoutePrefix = string.Empty; // Serve Swagger UI at the root URL
        });

        return app;
    }
}

================
File: src/Portfolio.WebApi/obj/Debug/net8.0/.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
================
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

================
File: src/Portfolio.WebApi/obj/Debug/net8.0/ApiEndpoints.json
================
[
  {
    "ContainingType": "Portfolio.WebApi.Extensions.Endpoints.BlogEndpoints\u002B\u003C\u003Ec",
    "Method": "\u003CMapBlogEndpoints\u003Eb__0_0",
    "RelativePath": "api/blogs/",
    "HttpMethod": "POST",
    "IsController": false,
    "Order": 0,
    "Parameters": [
      {
        "Name": "command",
        "Type": "Portfolio.Application.UseCases.Blogs.Commands.CreateBlog.CreateBlogCommand",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ],
    "Tags": [
      "Blogs"
    ],
    "EndpointName": "CreateBlog",
    "Description": "Creates a new blog post"
  },
  {
    "ContainingType": "Portfolio.WebApi.Extensions.Endpoints.BlogEndpoints\u002B\u003C\u003Ec",
    "Method": "\u003CMapBlogEndpoints\u003Eb__0_3",
    "RelativePath": "api/blogs/",
    "HttpMethod": "GET",
    "IsController": false,
    "Order": 0,
    "Parameters": [],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ],
    "Tags": [
      "Blogs"
    ],
    "EndpointName": "GetAllBlogs",
    "Description": "Retrieves all blog posts"
  },
  {
    "ContainingType": "Portfolio.WebApi.Extensions.Endpoints.BlogEndpoints\u002B\u003C\u003Ec",
    "Method": "\u003CMapBlogEndpoints\u003Eb__0_5",
    "RelativePath": "api/blogs/by-slug/{slug}",
    "HttpMethod": "GET",
    "IsController": false,
    "Order": 0,
    "Parameters": [
      {
        "Name": "slug",
        "Type": "System.String",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ],
    "Tags": [
      "Blogs"
    ],
    "EndpointName": "GetBlogBySlug",
    "Description": "Retrieves a blog post by its slug"
  },
  {
    "ContainingType": "Portfolio.WebApi.Extensions.Endpoints.BlogEndpoints\u002B\u003C\u003Ec",
    "Method": "\u003CMapBlogEndpoints\u003Eb__0_1",
    "RelativePath": "api/blogs/{id}",
    "HttpMethod": "PUT",
    "IsController": false,
    "Order": 0,
    "Parameters": [
      {
        "Name": "id",
        "Type": "System.String",
        "IsRequired": true
      },
      {
        "Name": "command",
        "Type": "Portfolio.Application.UseCases.Blogs.Commands.UpdateBlog.UpdateBlogCommand",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ],
    "Tags": [
      "Blogs"
    ],
    "EndpointName": "UpdateBlog",
    "Description": "Updates an existing blog post"
  },
  {
    "ContainingType": "Portfolio.WebApi.Extensions.Endpoints.BlogEndpoints\u002B\u003C\u003Ec",
    "Method": "\u003CMapBlogEndpoints\u003Eb__0_2",
    "RelativePath": "api/blogs/{id}",
    "HttpMethod": "DELETE",
    "IsController": false,
    "Order": 0,
    "Parameters": [
      {
        "Name": "id",
        "Type": "System.String",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ],
    "Tags": [
      "Blogs"
    ],
    "EndpointName": "DeleteBlog",
    "Description": "Deletes a blog post"
  },
  {
    "ContainingType": "Portfolio.WebApi.Extensions.Endpoints.BlogEndpoints\u002B\u003C\u003Ec",
    "Method": "\u003CMapBlogEndpoints\u003Eb__0_4",
    "RelativePath": "api/blogs/{id}",
    "HttpMethod": "GET",
    "IsController": false,
    "Order": 0,
    "Parameters": [
      {
        "Name": "id",
        "Type": "System.String",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ],
    "Tags": [
      "Blogs"
    ],
    "EndpointName": "GetBlogById",
    "Description": "Retrieves a blog post by its ID"
  },
  {
    "ContainingType": "Portfolio.WebApi.Extensions.Endpoints.EndpointBase\u002B\u003C\u003Ec__DisplayClass2_0\u00606[[Portfolio.Application.UseCases.Pages.Commands.CreatePage.CreatePageCommand, Portfolio.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Portfolio.Application.UseCases.Pages.Commands.UpdatePage.UpdatePageCommand, Portfolio.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Portfolio.Application.UseCases.Pages.Commands.DeletePage.DeletePageCommand, Portfolio.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Portfolio.Application.UseCases.Pages.Queries.GetAllPages.GetAllPagesQuery, Portfolio.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Portfolio.Application.UseCases.Pages.Queries.GetPageById.GetPageByIdQuery, Portfolio.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Portfolio.Application.Common.DTOs.PageDto, Portfolio.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
    "Method": "\u003CMapCrudEndpoints\u003Eb__0",
    "RelativePath": "api/pages/",
    "HttpMethod": "POST",
    "IsController": false,
    "Order": 0,
    "Parameters": [
      {
        "Name": "command",
        "Type": "Portfolio.Application.UseCases.Pages.Commands.CreatePage.CreatePageCommand",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ],
    "Tags": [
      "Pages"
    ],
    "EndpointName": "CreatePage",
    "Description": "Creates a new page"
  },
  {
    "ContainingType": "Portfolio.WebApi.Extensions.Endpoints.EndpointBase\u002B\u003C\u003Ec__2\u00606[[Portfolio.Application.UseCases.Pages.Commands.CreatePage.CreatePageCommand, Portfolio.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Portfolio.Application.UseCases.Pages.Commands.UpdatePage.UpdatePageCommand, Portfolio.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Portfolio.Application.UseCases.Pages.Commands.DeletePage.DeletePageCommand, Portfolio.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Portfolio.Application.UseCases.Pages.Queries.GetAllPages.GetAllPagesQuery, Portfolio.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Portfolio.Application.UseCases.Pages.Queries.GetPageById.GetPageByIdQuery, Portfolio.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Portfolio.Application.Common.DTOs.PageDto, Portfolio.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
    "Method": "\u003CMapCrudEndpoints\u003Eb__2_3",
    "RelativePath": "api/pages/",
    "HttpMethod": "GET",
    "IsController": false,
    "Order": 0,
    "Parameters": [],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ],
    "Tags": [
      "Pages"
    ],
    "EndpointName": "GetAllPages",
    "Description": "Retrieves all pages"
  },
  {
    "ContainingType": "Portfolio.WebApi.Extensions.Endpoints.PageEndpoints\u002B\u003C\u003Ec",
    "Method": "\u003CMapPageEndpoints\u003Eb__0_0",
    "RelativePath": "api/pages/by-slug/{slug}",
    "HttpMethod": "GET",
    "IsController": false,
    "Order": 0,
    "Parameters": [
      {
        "Name": "slug",
        "Type": "System.String",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ],
    "Tags": [
      "Pages"
    ],
    "EndpointName": "GetPageBySlug",
    "Description": "Retrieves a page by its slug"
  },
  {
    "ContainingType": "Portfolio.WebApi.Extensions.Endpoints.EndpointBase\u002B\u003C\u003Ec__2\u00606[[Portfolio.Application.UseCases.Pages.Commands.CreatePage.CreatePageCommand, Portfolio.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Portfolio.Application.UseCases.Pages.Commands.UpdatePage.UpdatePageCommand, Portfolio.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Portfolio.Application.UseCases.Pages.Commands.DeletePage.DeletePageCommand, Portfolio.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Portfolio.Application.UseCases.Pages.Queries.GetAllPages.GetAllPagesQuery, Portfolio.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Portfolio.Application.UseCases.Pages.Queries.GetPageById.GetPageByIdQuery, Portfolio.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Portfolio.Application.Common.DTOs.PageDto, Portfolio.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
    "Method": "\u003CMapCrudEndpoints\u003Eb__2_1",
    "RelativePath": "api/pages/{id}",
    "HttpMethod": "PUT",
    "IsController": false,
    "Order": 0,
    "Parameters": [
      {
        "Name": "id",
        "Type": "System.String",
        "IsRequired": true
      },
      {
        "Name": "command",
        "Type": "Portfolio.Application.UseCases.Pages.Commands.UpdatePage.UpdatePageCommand",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ],
    "Tags": [
      "Pages"
    ],
    "EndpointName": "UpdatePage",
    "Description": "Updates an existing page"
  },
  {
    "ContainingType": "Portfolio.WebApi.Extensions.Endpoints.EndpointBase\u002B\u003C\u003Ec__2\u00606[[Portfolio.Application.UseCases.Pages.Commands.CreatePage.CreatePageCommand, Portfolio.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Portfolio.Application.UseCases.Pages.Commands.UpdatePage.UpdatePageCommand, Portfolio.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Portfolio.Application.UseCases.Pages.Commands.DeletePage.DeletePageCommand, Portfolio.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Portfolio.Application.UseCases.Pages.Queries.GetAllPages.GetAllPagesQuery, Portfolio.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Portfolio.Application.UseCases.Pages.Queries.GetPageById.GetPageByIdQuery, Portfolio.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Portfolio.Application.Common.DTOs.PageDto, Portfolio.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
    "Method": "\u003CMapCrudEndpoints\u003Eb__2_2",
    "RelativePath": "api/pages/{id}",
    "HttpMethod": "DELETE",
    "IsController": false,
    "Order": 0,
    "Parameters": [
      {
        "Name": "id",
        "Type": "System.String",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ],
    "Tags": [
      "Pages"
    ],
    "EndpointName": "DeletePage",
    "Description": "Deletes a page"
  },
  {
    "ContainingType": "Portfolio.WebApi.Extensions.Endpoints.EndpointBase\u002B\u003C\u003Ec__2\u00606[[Portfolio.Application.UseCases.Pages.Commands.CreatePage.CreatePageCommand, Portfolio.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Portfolio.Application.UseCases.Pages.Commands.UpdatePage.UpdatePageCommand, Portfolio.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Portfolio.Application.UseCases.Pages.Commands.DeletePage.DeletePageCommand, Portfolio.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Portfolio.Application.UseCases.Pages.Queries.GetAllPages.GetAllPagesQuery, Portfolio.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Portfolio.Application.UseCases.Pages.Queries.GetPageById.GetPageByIdQuery, Portfolio.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Portfolio.Application.Common.DTOs.PageDto, Portfolio.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
    "Method": "\u003CMapCrudEndpoints\u003Eb__2_4",
    "RelativePath": "api/pages/{id}",
    "HttpMethod": "GET",
    "IsController": false,
    "Order": 0,
    "Parameters": [
      {
        "Name": "id",
        "Type": "System.String",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ],
    "Tags": [
      "Pages"
    ],
    "EndpointName": "GetPageById",
    "Description": "Retrieves a page by its ID"
  },
  {
    "ContainingType": "Portfolio.WebApi.Extensions.Endpoints.ProjectEndpoints\u002B\u003C\u003Ec",
    "Method": "\u003CMapProjectEndpoints\u003Eb__0_0",
    "RelativePath": "api/projects/",
    "HttpMethod": "POST",
    "IsController": false,
    "Order": 0,
    "Parameters": [
      {
        "Name": "command",
        "Type": "Portfolio.Application.UseCases.Projects.Commands.CreateProject.CreateProjectCommand",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ],
    "Tags": [
      "Projects"
    ],
    "EndpointName": "CreateProject",
    "Description": "Creates a new project"
  },
  {
    "ContainingType": "Portfolio.WebApi.Extensions.Endpoints.ProjectEndpoints\u002B\u003C\u003Ec",
    "Method": "\u003CMapProjectEndpoints\u003Eb__0_3",
    "RelativePath": "api/projects/",
    "HttpMethod": "GET",
    "IsController": false,
    "Order": 0,
    "Parameters": [],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ],
    "Tags": [
      "Projects"
    ],
    "EndpointName": "GetAllProjects",
    "Description": "Retrieves all projects"
  },
  {
    "ContainingType": "Portfolio.WebApi.Extensions.Endpoints.ProjectEndpoints\u002B\u003C\u003Ec",
    "Method": "\u003CMapProjectEndpoints\u003Eb__0_1",
    "RelativePath": "api/projects/{id}",
    "HttpMethod": "PUT",
    "IsController": false,
    "Order": 0,
    "Parameters": [
      {
        "Name": "id",
        "Type": "System.String",
        "IsRequired": true
      },
      {
        "Name": "command",
        "Type": "Portfolio.Application.UseCases.Projects.Commands.UpdateProject.UpdateProjectCommand",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ],
    "Tags": [
      "Projects"
    ],
    "EndpointName": "UpdateProject",
    "Description": "Updates an existing project"
  },
  {
    "ContainingType": "Portfolio.WebApi.Extensions.Endpoints.ProjectEndpoints\u002B\u003C\u003Ec",
    "Method": "\u003CMapProjectEndpoints\u003Eb__0_2",
    "RelativePath": "api/projects/{id}",
    "HttpMethod": "DELETE",
    "IsController": false,
    "Order": 0,
    "Parameters": [
      {
        "Name": "id",
        "Type": "System.String",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ],
    "Tags": [
      "Projects"
    ],
    "EndpointName": "DeleteProject",
    "Description": "Deletes a project"
  },
  {
    "ContainingType": "Portfolio.WebApi.Extensions.Endpoints.ProjectEndpoints\u002B\u003C\u003Ec",
    "Method": "\u003CMapProjectEndpoints\u003Eb__0_4",
    "RelativePath": "api/projects/{id}",
    "HttpMethod": "GET",
    "IsController": false,
    "Order": 0,
    "Parameters": [
      {
        "Name": "id",
        "Type": "System.String",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ],
    "Tags": [
      "Projects"
    ],
    "EndpointName": "GetProjectById",
    "Description": "Retrieves a project by its ID"
  },
  {
    "ContainingType": "Portfolio.WebApi.Extensions.Endpoints.UserEndpoints\u002B\u003C\u003Ec",
    "Method": "\u003CMapUserEndpoints\u003Eb__0_0",
    "RelativePath": "api/users/",
    "HttpMethod": "POST",
    "IsController": false,
    "Order": 0,
    "Parameters": [
      {
        "Name": "command",
        "Type": "Portfolio.Application.UseCases.Users.Commands.CreateUser.CreateUserCommand",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ],
    "Tags": [
      "Users"
    ],
    "EndpointName": "CreateUser",
    "Description": "Creates a new user"
  },
  {
    "ContainingType": "Portfolio.WebApi.Extensions.Endpoints.UserEndpoints\u002B\u003C\u003Ec",
    "Method": "\u003CMapUserEndpoints\u003Eb__0_3",
    "RelativePath": "api/users/",
    "HttpMethod": "GET",
    "IsController": false,
    "Order": 0,
    "Parameters": [],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ],
    "Tags": [
      "Users"
    ],
    "EndpointName": "GetAllUsers",
    "Description": "Retrieves all users"
  },
  {
    "ContainingType": "Portfolio.WebApi.Extensions.Endpoints.UserEndpoints\u002B\u003C\u003Ec",
    "Method": "\u003CMapUserEndpoints\u003Eb__0_5",
    "RelativePath": "api/users/by-username/{username}",
    "HttpMethod": "GET",
    "IsController": false,
    "Order": 0,
    "Parameters": [
      {
        "Name": "username",
        "Type": "System.String",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ],
    "Tags": [
      "Users"
    ],
    "EndpointName": "GetUserByUsername",
    "Description": "Retrieves a user by their username"
  },
  {
    "ContainingType": "Portfolio.WebApi.Extensions.Endpoints.UserEndpoints\u002B\u003C\u003Ec",
    "Method": "\u003CMapUserEndpoints\u003Eb__0_1",
    "RelativePath": "api/users/{id}",
    "HttpMethod": "PUT",
    "IsController": false,
    "Order": 0,
    "Parameters": [
      {
        "Name": "id",
        "Type": "System.String",
        "IsRequired": true
      },
      {
        "Name": "command",
        "Type": "Portfolio.Application.UseCases.Users.Commands.UpdateUser.UpdateUserCommand",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ],
    "Tags": [
      "Users"
    ],
    "EndpointName": "UpdateUser",
    "Description": "Updates an existing user"
  },
  {
    "ContainingType": "Portfolio.WebApi.Extensions.Endpoints.UserEndpoints\u002B\u003C\u003Ec",
    "Method": "\u003CMapUserEndpoints\u003Eb__0_2",
    "RelativePath": "api/users/{id}",
    "HttpMethod": "DELETE",
    "IsController": false,
    "Order": 0,
    "Parameters": [
      {
        "Name": "id",
        "Type": "System.String",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ],
    "Tags": [
      "Users"
    ],
    "EndpointName": "DeleteUser",
    "Description": "Deletes a user"
  },
  {
    "ContainingType": "Portfolio.WebApi.Extensions.Endpoints.UserEndpoints\u002B\u003C\u003Ec",
    "Method": "\u003CMapUserEndpoints\u003Eb__0_4",
    "RelativePath": "api/users/{id}",
    "HttpMethod": "GET",
    "IsController": false,
    "Order": 0,
    "Parameters": [
      {
        "Name": "id",
        "Type": "System.String",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ],
    "Tags": [
      "Users"
    ],
    "EndpointName": "GetUserById",
    "Description": "Retrieves a user by their ID"
  }
]

================
File: src/Portfolio.WebApi/obj/Debug/net8.0/EndpointInfo/Portfolio.WebApi.json
================
{
  "openapi": "3.0.1",
  "info": {
    "title": "Portfolio API",
    "description": "Portfolio API following Clean Architecture and DDD principles",
    "version": "v1"
  },
  "paths": {
    "/api/blogs": {
      "post": {
        "tags": [
          "Blogs"
        ],
        "description": "Creates a new blog post",
        "operationId": "CreateBlog",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBlogCommand"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "get": {
        "tags": [
          "Blogs"
        ],
        "description": "Retrieves all blog posts",
        "operationId": "GetAllBlogs",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/blogs/{id}": {
      "put": {
        "tags": [
          "Blogs"
        ],
        "description": "Updates an existing blog post",
        "operationId": "UpdateBlog",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBlogCommand"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Blogs"
        ],
        "description": "Deletes a blog post",
        "operationId": "DeleteBlog",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "get": {
        "tags": [
          "Blogs"
        ],
        "description": "Retrieves a blog post by its ID",
        "operationId": "GetBlogById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/blogs/by-slug/{slug}": {
      "get": {
        "tags": [
          "Blogs"
        ],
        "description": "Retrieves a blog post by its slug",
        "operationId": "GetBlogBySlug",
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/pages": {
      "post": {
        "tags": [
          "Pages"
        ],
        "description": "Creates a new page",
        "operationId": "CreatePage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePageCommand"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "get": {
        "tags": [
          "Pages"
        ],
        "description": "Retrieves all pages",
        "operationId": "GetAllPages",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/pages/{id}": {
      "put": {
        "tags": [
          "Pages"
        ],
        "description": "Updates an existing page",
        "operationId": "UpdatePage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePageCommand"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Pages"
        ],
        "description": "Deletes a page",
        "operationId": "DeletePage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "get": {
        "tags": [
          "Pages"
        ],
        "description": "Retrieves a page by its ID",
        "operationId": "GetPageById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/pages/by-slug/{slug}": {
      "get": {
        "tags": [
          "Pages"
        ],
        "description": "Retrieves a page by its slug",
        "operationId": "GetPageBySlug",
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/projects": {
      "post": {
        "tags": [
          "Projects"
        ],
        "description": "Creates a new project",
        "operationId": "CreateProject",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProjectCommand"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "get": {
        "tags": [
          "Projects"
        ],
        "description": "Retrieves all projects",
        "operationId": "GetAllProjects",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/projects/{id}": {
      "put": {
        "tags": [
          "Projects"
        ],
        "description": "Updates an existing project",
        "operationId": "UpdateProject",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProjectCommand"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Projects"
        ],
        "description": "Deletes a project",
        "operationId": "DeleteProject",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "get": {
        "tags": [
          "Projects"
        ],
        "description": "Retrieves a project by its ID",
        "operationId": "GetProjectById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/users": {
      "post": {
        "tags": [
          "Users"
        ],
        "description": "Creates a new user",
        "operationId": "CreateUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserCommand"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "get": {
        "tags": [
          "Users"
        ],
        "description": "Retrieves all users",
        "operationId": "GetAllUsers",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/users/{id}": {
      "put": {
        "tags": [
          "Users"
        ],
        "description": "Updates an existing user",
        "operationId": "UpdateUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserCommand"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "description": "Deletes a user",
        "operationId": "DeleteUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "get": {
        "tags": [
          "Users"
        ],
        "description": "Retrieves a user by their ID",
        "operationId": "GetUserById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/users/by-username/{username}": {
      "get": {
        "tags": [
          "Users"
        ],
        "description": "Retrieves a user by their username",
        "operationId": "GetUserByUsername",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CreateBlogCommand": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "excerpt": {
            "type": "string",
            "nullable": true
          },
          "body": {
            "type": "string",
            "nullable": true
          },
          "isDraft": {
            "type": "boolean"
          },
          "publishAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreatePageCommand": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "slug": {
            "type": "string",
            "nullable": true
          },
          "content": {
            "type": "string",
            "nullable": true
          },
          "metaDescription": {
            "type": "string",
            "nullable": true
          },
          "metaKeywords": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "openGraphImage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateProjectCommand": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "githubUrl": {
            "type": "string",
            "nullable": true
          },
          "liveUrl": {
            "type": "string",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          },
          "technologies": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateUserCommand": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "avatarUrl": {
            "type": "string",
            "nullable": true
          },
          "provider": {
            "type": "string",
            "nullable": true
          },
          "providerId": {
            "type": "string",
            "nullable": true
          },
          "isAdmin": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "UpdateBlogCommand": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "excerpt": {
            "type": "string",
            "nullable": true
          },
          "body": {
            "type": "string",
            "nullable": true
          },
          "isDraft": {
            "type": "boolean"
          },
          "isPublished": {
            "type": "boolean"
          },
          "publishAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdatePageCommand": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "slug": {
            "type": "string",
            "nullable": true
          },
          "content": {
            "type": "string",
            "nullable": true
          },
          "metaDescription": {
            "type": "string",
            "nullable": true
          },
          "metaKeywords": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "openGraphImage": {
            "type": "string",
            "nullable": true
          },
          "isDraft": {
            "type": "boolean",
            "nullable": true
          },
          "isPublished": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateProjectCommand": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "link": {
            "type": "string",
            "nullable": true
          },
          "githubUrl": {
            "type": "string",
            "nullable": true
          },
          "liveUrl": {
            "type": "string",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          },
          "isDraft": {
            "type": "boolean"
          },
          "isFeatured": {
            "type": "boolean"
          },
          "technologies": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateUserCommand": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "avatarUrl": {
            "type": "string",
            "nullable": true
          },
          "isAdmin": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      }
    }
  }
}

================
File: src/Portfolio.WebApi/obj/Debug/net8.0/EndpointInfo/Portfolio.WebApi.OpenApiFiles.cache
================
Portfolio.WebApi.json

================
File: src/Portfolio.WebApi/obj/Debug/net8.0/Portfolio.WebApi.AssemblyInfo.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Portfolio.WebApi")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+7c4cf518495f7b4351aa2e0be533baabd5237bff")]
[assembly: System.Reflection.AssemblyProductAttribute("Portfolio.WebApi")]
[assembly: System.Reflection.AssemblyTitleAttribute("Portfolio.WebApi")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.

================
File: src/Portfolio.WebApi/obj/Debug/net8.0/Portfolio.WebApi.AssemblyInfoInputs.cache
================
ee1d9aa732038c090ee5c568a68e63a36feab61da978e6484c7605312fd791b3

================
File: src/Portfolio.WebApi/obj/Debug/net8.0/Portfolio.WebApi.csproj.CoreCompileInputs.cache
================
4030e943bb0d1fcbd4566754fd0aac9acc04d655005a0160265407bbe53fd98b

================
File: src/Portfolio.WebApi/obj/Debug/net8.0/Portfolio.WebApi.csproj.FileListAbsolute.txt
================
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net8.0\Portfolio.WebApi.csproj.AssemblyReference.cache
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net8.0\Portfolio.WebApi.GeneratedMSBuildEditorConfig.editorconfig
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net8.0\Portfolio.WebApi.AssemblyInfoInputs.cache
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net8.0\Portfolio.WebApi.AssemblyInfo.cs
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net8.0\Portfolio.WebApi.csproj.CoreCompileInputs.cache
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net8.0\Portfolio.WebApi.MvcApplicationPartsAssemblyInfo.cs
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net8.0\Portfolio.WebApi.MvcApplicationPartsAssemblyInfo.cache
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net8.0\Portfolio.WebApi.sourcelink.json
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net8.0\appsettings.Development.json
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net8.0\appsettings.json
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net8.0\Portfolio.WebApi.staticwebassets.endpoints.json
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net8.0\Portfolio.WebApi.exe
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net8.0\Portfolio.WebApi.deps.json
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net8.0\Portfolio.WebApi.runtimeconfig.json
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net8.0\Portfolio.WebApi.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net8.0\Portfolio.WebApi.pdb
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net8.0\AutoMapper.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net8.0\FluentValidation.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net8.0\FluentValidation.DependencyInjectionExtensions.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net8.0\MediatR.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net8.0\MediatR.Contracts.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net8.0\Microsoft.AspNetCore.OpenApi.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net8.0\Microsoft.EntityFrameworkCore.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net8.0\Microsoft.EntityFrameworkCore.Abstractions.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net8.0\Microsoft.EntityFrameworkCore.Relational.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net8.0\Microsoft.OpenApi.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net8.0\Npgsql.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net8.0\Npgsql.EntityFrameworkCore.PostgreSQL.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net8.0\Swashbuckle.AspNetCore.Swagger.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net8.0\Swashbuckle.AspNetCore.SwaggerGen.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net8.0\Swashbuckle.AspNetCore.SwaggerUI.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net8.0\Portfolio.Application.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net8.0\Portfolio.Domain.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net8.0\Portfolio.Infrastructure.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net8.0\Portfolio.Infrastructure.pdb
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net8.0\Portfolio.Application.pdb
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net8.0\Portfolio.Domain.pdb
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net8.0\scopedcss\bundle\Portfolio.WebApi.styles.css
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net8.0\staticwebassets.build.json
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net8.0\staticwebassets.development.json
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net8.0\staticwebassets.build.endpoints.json
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net8.0\staticwebassets\msbuild.Portfolio.WebApi.Microsoft.AspNetCore.StaticWebAssets.props
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net8.0\staticwebassets\msbuild.Portfolio.WebApi.Microsoft.AspNetCore.StaticWebAssetEndpoints.props
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net8.0\staticwebassets\msbuild.build.Portfolio.WebApi.props
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net8.0\staticwebassets\msbuild.buildMultiTargeting.Portfolio.WebApi.props
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net8.0\staticwebassets\msbuild.buildTransitive.Portfolio.WebApi.props
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net8.0\staticwebassets.pack.json
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net8.0\Portfoli.1BF16BEA.Up2Date
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net8.0\Portfolio.WebApi.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net8.0\refint\Portfolio.WebApi.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net8.0\Portfolio.WebApi.pdb
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net8.0\Portfolio.WebApi.genruntimeconfig.cache
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net8.0\ref\Portfolio.WebApi.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net8.0\staticwebassets.upToDateCheck.txt

================
File: src/Portfolio.WebApi/obj/Debug/net8.0/Portfolio.WebApi.GeneratedMSBuildEditorConfig.editorconfig
================
is_global = true
build_property.TargetFramework = net8.0
build_property.TargetPlatformMinVersion = 
build_property.UsingMicrosoftNETSdkWeb = true
build_property.ProjectTypeGuids = 
build_property.InvariantGlobalization = true
build_property.PlatformNeutralAssembly = 
build_property.EnforceExtendedAnalyzerRules = 
build_property._SupportedPlatformList = Linux,macOS,Windows
build_property.RootNamespace = Portfolio.WebApi
build_property.RootNamespace = Portfolio.WebApi
build_property.ProjectDir = c:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\
build_property.EnableComHosting = 
build_property.EnableGeneratedComInterfaceComImportInterop = 
build_property.RazorLangVersion = 8.0
build_property.SupportLocalizedComponentNames = 
build_property.GenerateRazorMetadataSourceChecksumAttributes = 
build_property.MSBuildProjectDirectory = c:\dev\portfolio\portfolio.net\src\Portfolio.WebApi
build_property._RazorSourceGeneratorDebug = 
build_property.EffectiveAnalysisLevelStyle = 8.0
build_property.EnableCodeStyleSeverity =

================
File: src/Portfolio.WebApi/obj/Debug/net8.0/Portfolio.WebApi.genruntimeconfig.cache
================
153860d4bc8039b42311143ddf12f7f647a36153d5a99f078c8a7f5cfaca3f8e

================
File: src/Portfolio.WebApi/obj/Debug/net8.0/Portfolio.WebApi.GlobalUsings.g.cs
================
// <auto-generated/>
global using global::Microsoft.AspNetCore.Builder;
global using global::Microsoft.AspNetCore.Hosting;
global using global::Microsoft.AspNetCore.Http;
global using global::Microsoft.AspNetCore.Routing;
global using global::Microsoft.Extensions.Configuration;
global using global::Microsoft.Extensions.DependencyInjection;
global using global::Microsoft.Extensions.Hosting;
global using global::Microsoft.Extensions.Logging;
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Net.Http.Json;
global using global::System.Threading;
global using global::System.Threading.Tasks;

================
File: src/Portfolio.WebApi/obj/Debug/net8.0/Portfolio.WebApi.MvcApplicationPartsAssemblyInfo.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute("Microsoft.AspNetCore.OpenApi")]
[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute("Swashbuckle.AspNetCore.SwaggerGen")]

// Généré par la classe MSBuild WriteCodeFragment.

================
File: src/Portfolio.WebApi/obj/Debug/net8.0/Portfolio.WebApi.sourcelink.json
================
{"documents":{"C:\\dev\\portfolio\\*":"https://raw.githubusercontent.com/michelroberge/portfolio/104d91285c2777489c173d7e92482bc0071a9d92/*"}}

================
File: src/Portfolio.WebApi/obj/Debug/net8.0/project.razor.json
================
{
  "SerializedFilePath": "c:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.WebApi\\obj\\Debug\\net8.0\\project.razor.json",
  "FilePath": "c:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.WebApi\\Portfolio.WebApi.csproj",
  "Configuration": {
    "ConfigurationName": "MVC-3.0",
    "LanguageVersion": "8.0",
    "Extensions": [
      {
        "ExtensionName": "MVC-3.0"
      }
    ]
  },
  "ProjectWorkspaceState": {
    "TagHelpers": [
      {
        "HashCode": 1958348942,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView\">\r\n             <summary>\r\n             Combines the behaviors of <see cref=\"T:Microsoft.AspNetCore.Components.Authorization.AuthorizeView\" /> and <see cref=\"T:Microsoft.AspNetCore.Components.RouteView\" />,\r\n             so that it displays the page matching the specified route but only if the user\r\n             is authorized to see it.\r\n            \r\n             Additionally, this component supplies a cascading parameter of type <see cref=\"T:System.Threading.Tasks.Task`1\" />,\r\n             which makes the user's current authentication state available to descendants.\r\n             </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "AuthorizeRouteView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "NotAuthorized",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.NotAuthorized\">\r\n            <summary>\r\n            The content that will be displayed if the user is not authorized.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "NotAuthorized",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Authorization.AuthenticationState>",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Authorizing",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.Authorizing\">\r\n            <summary>\r\n            The content that will be displayed while asynchronous authorization is in progress.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Authorizing",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Resource",
            "TypeName": "System.Object",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.Resource\">\r\n            <summary>\r\n            The resource to which access is being controlled.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Resource",
              "Common.GloballyQualifiedTypeName": "global::System.Object"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RouteData",
            "TypeName": "Microsoft.AspNetCore.Components.RouteData",
            "IsEditorRequired": true,
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.RouteView.RouteData\">\r\n            <summary>\r\n            Gets or sets the route data. This determines the page that will be\r\n            displayed and the parameter values that will be supplied to the page.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "RouteData",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RouteData"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DefaultLayout",
            "TypeName": "System.Type",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.RouteView.DefaultLayout\">\r\n            <summary>\r\n            Gets or sets the type of a layout to be used if the page does not\r\n            declare any layout. If specified, the type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />\r\n            and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "DefaultLayout",
              "Common.GloballyQualifiedTypeName": "global::System.Type"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView",
          "Common.TypeNameIdentifier": "AuthorizeRouteView",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Authorization",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 152997056,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView\">\r\n             <summary>\r\n             Combines the behaviors of <see cref=\"T:Microsoft.AspNetCore.Components.Authorization.AuthorizeView\" /> and <see cref=\"T:Microsoft.AspNetCore.Components.RouteView\" />,\r\n             so that it displays the page matching the specified route but only if the user\r\n             is authorized to see it.\r\n            \r\n             Additionally, this component supplies a cascading parameter of type <see cref=\"T:System.Threading.Tasks.Task`1\" />,\r\n             which makes the user's current authentication state available to descendants.\r\n             </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "NotAuthorized",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.NotAuthorized\">\r\n            <summary>\r\n            The content that will be displayed if the user is not authorized.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "NotAuthorized",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Authorization.AuthenticationState>",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Authorizing",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.Authorizing\">\r\n            <summary>\r\n            The content that will be displayed while asynchronous authorization is in progress.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Authorizing",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Resource",
            "TypeName": "System.Object",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.Resource\">\r\n            <summary>\r\n            The resource to which access is being controlled.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Resource",
              "Common.GloballyQualifiedTypeName": "global::System.Object"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RouteData",
            "TypeName": "Microsoft.AspNetCore.Components.RouteData",
            "IsEditorRequired": true,
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.RouteView.RouteData\">\r\n            <summary>\r\n            Gets or sets the route data. This determines the page that will be\r\n            displayed and the parameter values that will be supplied to the page.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "RouteData",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RouteData"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DefaultLayout",
            "TypeName": "System.Type",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.RouteView.DefaultLayout\">\r\n            <summary>\r\n            Gets or sets the type of a layout to be used if the page does not\r\n            declare any layout. If specified, the type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />\r\n            and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "DefaultLayout",
              "Common.GloballyQualifiedTypeName": "global::System.Type"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView",
          "Common.TypeNameIdentifier": "AuthorizeRouteView",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Authorization",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -799807170,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.NotAuthorized",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.NotAuthorized\">\r\n            <summary>\r\n            The content that will be displayed if the user is not authorized.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NotAuthorized",
            "ParentTag": "AuthorizeRouteView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'NotAuthorized' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.NotAuthorized",
          "Common.TypeNameIdentifier": "AuthorizeRouteView",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Authorization",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1495817894,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.NotAuthorized",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.NotAuthorized\">\r\n            <summary>\r\n            The content that will be displayed if the user is not authorized.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NotAuthorized",
            "ParentTag": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'NotAuthorized' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.NotAuthorized",
          "Common.TypeNameIdentifier": "AuthorizeRouteView",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Authorization",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 112053485,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.Authorizing",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.Authorizing\">\r\n            <summary>\r\n            The content that will be displayed while asynchronous authorization is in progress.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Authorizing",
            "ParentTag": "AuthorizeRouteView"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.Authorizing",
          "Common.TypeNameIdentifier": "AuthorizeRouteView",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Authorization",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -591887590,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.Authorizing",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.Authorizing\">\r\n            <summary>\r\n            The content that will be displayed while asynchronous authorization is in progress.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Authorizing",
            "ParentTag": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.Authorizing",
          "Common.TypeNameIdentifier": "AuthorizeRouteView",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Authorization",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 582137520,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Authorization.AuthorizeView\">\r\n            <summary>\r\n            Displays differing content depending on the user's authorization status.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "AuthorizeView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Policy",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Policy\">\r\n            <summary>\r\n            The policy name that determines whether the content can be displayed.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Policy",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Roles",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Roles\">\r\n            <summary>\r\n            A comma delimited list of roles that are allowed to display the content.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Roles",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.ChildContent\">\r\n            <summary>\r\n            The content that will be displayed if the user is authorized.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Authorization.AuthenticationState>",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NotAuthorized",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.NotAuthorized\">\r\n            <summary>\r\n            The content that will be displayed if the user is not authorized.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "NotAuthorized",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Authorization.AuthenticationState>",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Authorized",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.Authorized\">\r\n            <summary>\r\n            The content that will be displayed if the user is authorized.\r\n            If you specify a value for this parameter, do not also specify a value for <see cref=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.ChildContent\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Authorized",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Authorization.AuthenticationState>",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Authorizing",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.Authorizing\">\r\n            <summary>\r\n            The content that will be displayed while asynchronous authorization is in progress.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Authorizing",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Resource",
            "TypeName": "System.Object",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.Resource\">\r\n            <summary>\r\n            The resource to which access is being controlled.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Resource",
              "Common.GloballyQualifiedTypeName": "global::System.Object"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView",
          "Common.TypeNameIdentifier": "AuthorizeView",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Authorization",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 1153426929,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Authorization.AuthorizeView\">\r\n            <summary>\r\n            Displays differing content depending on the user's authorization status.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Policy",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Policy\">\r\n            <summary>\r\n            The policy name that determines whether the content can be displayed.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Policy",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Roles",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Roles\">\r\n            <summary>\r\n            A comma delimited list of roles that are allowed to display the content.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Roles",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.ChildContent\">\r\n            <summary>\r\n            The content that will be displayed if the user is authorized.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Authorization.AuthenticationState>",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NotAuthorized",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.NotAuthorized\">\r\n            <summary>\r\n            The content that will be displayed if the user is not authorized.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "NotAuthorized",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Authorization.AuthenticationState>",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Authorized",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.Authorized\">\r\n            <summary>\r\n            The content that will be displayed if the user is authorized.\r\n            If you specify a value for this parameter, do not also specify a value for <see cref=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.ChildContent\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Authorized",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Authorization.AuthenticationState>",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Authorizing",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.Authorizing\">\r\n            <summary>\r\n            The content that will be displayed while asynchronous authorization is in progress.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Authorizing",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Resource",
            "TypeName": "System.Object",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.Resource\">\r\n            <summary>\r\n            The resource to which access is being controlled.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Resource",
              "Common.GloballyQualifiedTypeName": "global::System.Object"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView",
          "Common.TypeNameIdentifier": "AuthorizeView",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Authorization",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 1699138873,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.ChildContent\">\r\n            <summary>\r\n            The content that will be displayed if the user is authorized.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "AuthorizeView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ChildContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.ChildContent",
          "Common.TypeNameIdentifier": "AuthorizeView",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Authorization",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -923730687,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.ChildContent\">\r\n            <summary>\r\n            The content that will be displayed if the user is authorized.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ChildContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.ChildContent",
          "Common.TypeNameIdentifier": "AuthorizeView",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Authorization",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1038059526,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.NotAuthorized",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.NotAuthorized\">\r\n            <summary>\r\n            The content that will be displayed if the user is not authorized.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NotAuthorized",
            "ParentTag": "AuthorizeView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'NotAuthorized' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.NotAuthorized",
          "Common.TypeNameIdentifier": "AuthorizeView",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Authorization",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1811028870,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.NotAuthorized",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.NotAuthorized\">\r\n            <summary>\r\n            The content that will be displayed if the user is not authorized.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NotAuthorized",
            "ParentTag": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'NotAuthorized' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.NotAuthorized",
          "Common.TypeNameIdentifier": "AuthorizeView",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Authorization",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -541954701,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorized",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.Authorized\">\r\n            <summary>\r\n            The content that will be displayed if the user is authorized.\r\n            If you specify a value for this parameter, do not also specify a value for <see cref=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.ChildContent\" />.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Authorized",
            "ParentTag": "AuthorizeView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'Authorized' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorized",
          "Common.TypeNameIdentifier": "AuthorizeView",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Authorization",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -2111500670,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorized",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.Authorized\">\r\n            <summary>\r\n            The content that will be displayed if the user is authorized.\r\n            If you specify a value for this parameter, do not also specify a value for <see cref=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.ChildContent\" />.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Authorized",
            "ParentTag": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'Authorized' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorized",
          "Common.TypeNameIdentifier": "AuthorizeView",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Authorization",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 9692354,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorizing",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.Authorizing\">\r\n            <summary>\r\n            The content that will be displayed while asynchronous authorization is in progress.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Authorizing",
            "ParentTag": "AuthorizeView"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorizing",
          "Common.TypeNameIdentifier": "AuthorizeView",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Authorization",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1630033872,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorizing",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.Authorizing\">\r\n            <summary>\r\n            The content that will be displayed while asynchronous authorization is in progress.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Authorizing",
            "ParentTag": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorizing",
          "Common.TypeNameIdentifier": "AuthorizeView",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Authorization",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -149834357,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "CascadingAuthenticationState"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState.ChildContent\">\r\n            <summary>\r\n            The content to which the authentication state should be provided.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState",
          "Common.TypeNameIdentifier": "CascadingAuthenticationState",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Authorization",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -873505946,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState.ChildContent\">\r\n            <summary>\r\n            The content to which the authentication state should be provided.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState",
          "Common.TypeNameIdentifier": "CascadingAuthenticationState",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Authorization",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -574845035,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState.ChildContent\">\r\n            <summary>\r\n            The content to which the authentication state should be provided.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "CascadingAuthenticationState"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState.ChildContent",
          "Common.TypeNameIdentifier": "CascadingAuthenticationState",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Authorization",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 374532372,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState.ChildContent\">\r\n            <summary>\r\n            The content to which the authentication state should be provided.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState.ChildContent",
          "Common.TypeNameIdentifier": "CascadingAuthenticationState",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Authorization",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1628866611,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.CascadingValue<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.CascadingValue`1\">\r\n            <summary>\r\n            A component that provides a cascading value to all descendant components.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "CascadingValue"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.CascadingValue<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.ChildContent\">\r\n            <summary>\r\n            The content to which the value should be provided.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.Value\">\r\n            <summary>\r\n            The value to be provided.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Common.GloballyQualifiedTypeName": "TValue",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Name",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.Name\">\r\n             <summary>\r\n             Optionally gives a name to the provided value. Descendant components\r\n             will be able to receive the value by specifying this name.\r\n            \r\n             If no name is specified, then descendant components will receive the\r\n             value based the type of value they are requesting.\r\n             </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Name",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsFixed",
            "TypeName": "System.Boolean",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.IsFixed\">\r\n            <summary>\r\n            If true, indicates that <see cref=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.Value\" /> will not change. This is a\r\n            performance optimization that allows the framework to skip setting up\r\n            change notifications. Set this flag only if you will not change\r\n            <see cref=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.Value\" /> during the component's lifetime.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "IsFixed",
              "Common.GloballyQualifiedTypeName": "global::System.Boolean"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.CascadingValue<TValue>",
          "Common.TypeNameIdentifier": "CascadingValue",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components",
          "Components.GenericTyped": "True",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -1344397226,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.CascadingValue<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.CascadingValue`1\">\r\n            <summary>\r\n            A component that provides a cascading value to all descendant components.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.CascadingValue"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.CascadingValue<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.ChildContent\">\r\n            <summary>\r\n            The content to which the value should be provided.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.Value\">\r\n            <summary>\r\n            The value to be provided.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Common.GloballyQualifiedTypeName": "TValue",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Name",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.Name\">\r\n             <summary>\r\n             Optionally gives a name to the provided value. Descendant components\r\n             will be able to receive the value by specifying this name.\r\n            \r\n             If no name is specified, then descendant components will receive the\r\n             value based the type of value they are requesting.\r\n             </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Name",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsFixed",
            "TypeName": "System.Boolean",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.IsFixed\">\r\n            <summary>\r\n            If true, indicates that <see cref=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.Value\" /> will not change. This is a\r\n            performance optimization that allows the framework to skip setting up\r\n            change notifications. Set this flag only if you will not change\r\n            <see cref=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.Value\" /> during the component's lifetime.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "IsFixed",
              "Common.GloballyQualifiedTypeName": "global::System.Boolean"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.CascadingValue<TValue>",
          "Common.TypeNameIdentifier": "CascadingValue",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 2095862186,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.CascadingValue<TValue>.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.ChildContent\">\r\n            <summary>\r\n            The content to which the value should be provided.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "CascadingValue"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.CascadingValue<TValue>.ChildContent",
          "Common.TypeNameIdentifier": "CascadingValue",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1135785529,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.CascadingValue<TValue>.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.ChildContent\">\r\n            <summary>\r\n            The content to which the value should be provided.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.CascadingValue"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.CascadingValue<TValue>.ChildContent",
          "Common.TypeNameIdentifier": "CascadingValue",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1625598760,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.DynamicComponent",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.DynamicComponent\">\r\n            <summary>\r\n            A component that renders another component dynamically according to its\r\n            <see cref=\"P:Microsoft.AspNetCore.Components.DynamicComponent.Type\" /> parameter.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "DynamicComponent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Type",
            "TypeName": "System.Type",
            "IsEditorRequired": true,
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.DynamicComponent.Type\">\r\n            <summary>\r\n            Gets or sets the type of the component to be rendered. The supplied type must\r\n            implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Type",
              "Common.GloballyQualifiedTypeName": "global::System.Type"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Parameters",
            "TypeName": "System.Collections.Generic.IDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.DynamicComponent.Parameters\">\r\n            <summary>\r\n            Gets or sets a dictionary of parameters to be passed to the component.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Parameters",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.DynamicComponent",
          "Common.TypeNameIdentifier": "DynamicComponent",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -2099809816,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.DynamicComponent",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.DynamicComponent\">\r\n            <summary>\r\n            A component that renders another component dynamically according to its\r\n            <see cref=\"P:Microsoft.AspNetCore.Components.DynamicComponent.Type\" /> parameter.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.DynamicComponent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Type",
            "TypeName": "System.Type",
            "IsEditorRequired": true,
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.DynamicComponent.Type\">\r\n            <summary>\r\n            Gets or sets the type of the component to be rendered. The supplied type must\r\n            implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Type",
              "Common.GloballyQualifiedTypeName": "global::System.Type"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Parameters",
            "TypeName": "System.Collections.Generic.IDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.DynamicComponent.Parameters\">\r\n            <summary>\r\n            Gets or sets a dictionary of parameters to be passed to the component.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Parameters",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.DynamicComponent",
          "Common.TypeNameIdentifier": "DynamicComponent",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -1224068179,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.LayoutView",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.LayoutView\">\r\n            <summary>\r\n            Displays the specified content inside the specified layout and any further\r\n            nested layouts.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "LayoutView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.LayoutView.ChildContent\">\r\n            <summary>\r\n            Gets or sets the content to display.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Layout",
            "TypeName": "System.Type",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.LayoutView.Layout\">\r\n            <summary>\r\n            Gets or sets the type of the layout in which to display the content.\r\n            The type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" /> and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Layout",
              "Common.GloballyQualifiedTypeName": "global::System.Type"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.LayoutView",
          "Common.TypeNameIdentifier": "LayoutView",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -1306952776,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.LayoutView",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.LayoutView\">\r\n            <summary>\r\n            Displays the specified content inside the specified layout and any further\r\n            nested layouts.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.LayoutView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.LayoutView.ChildContent\">\r\n            <summary>\r\n            Gets or sets the content to display.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Layout",
            "TypeName": "System.Type",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.LayoutView.Layout\">\r\n            <summary>\r\n            Gets or sets the type of the layout in which to display the content.\r\n            The type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" /> and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Layout",
              "Common.GloballyQualifiedTypeName": "global::System.Type"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.LayoutView",
          "Common.TypeNameIdentifier": "LayoutView",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -234087501,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.LayoutView.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.LayoutView.ChildContent\">\r\n            <summary>\r\n            Gets or sets the content to display.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "LayoutView"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.LayoutView.ChildContent",
          "Common.TypeNameIdentifier": "LayoutView",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1332358477,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.LayoutView.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.LayoutView.ChildContent\">\r\n            <summary>\r\n            Gets or sets the content to display.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.LayoutView"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.LayoutView.ChildContent",
          "Common.TypeNameIdentifier": "LayoutView",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1387663788,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.RouteView",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.RouteView\">\r\n            <summary>\r\n            Displays the specified page component, rendering it inside its layout\r\n            and any further nested layouts.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "RouteView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "RouteData",
            "TypeName": "Microsoft.AspNetCore.Components.RouteData",
            "IsEditorRequired": true,
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.RouteView.RouteData\">\r\n            <summary>\r\n            Gets or sets the route data. This determines the page that will be\r\n            displayed and the parameter values that will be supplied to the page.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "RouteData",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RouteData"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DefaultLayout",
            "TypeName": "System.Type",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.RouteView.DefaultLayout\">\r\n            <summary>\r\n            Gets or sets the type of a layout to be used if the page does not\r\n            declare any layout. If specified, the type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />\r\n            and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "DefaultLayout",
              "Common.GloballyQualifiedTypeName": "global::System.Type"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.RouteView",
          "Common.TypeNameIdentifier": "RouteView",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -1257898334,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.RouteView",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.RouteView\">\r\n            <summary>\r\n            Displays the specified page component, rendering it inside its layout\r\n            and any further nested layouts.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.RouteView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "RouteData",
            "TypeName": "Microsoft.AspNetCore.Components.RouteData",
            "IsEditorRequired": true,
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.RouteView.RouteData\">\r\n            <summary>\r\n            Gets or sets the route data. This determines the page that will be\r\n            displayed and the parameter values that will be supplied to the page.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "RouteData",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RouteData"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DefaultLayout",
            "TypeName": "System.Type",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.RouteView.DefaultLayout\">\r\n            <summary>\r\n            Gets or sets the type of a layout to be used if the page does not\r\n            declare any layout. If specified, the type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />\r\n            and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "DefaultLayout",
              "Common.GloballyQualifiedTypeName": "global::System.Type"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.RouteView",
          "Common.TypeNameIdentifier": "RouteView",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -965931346,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Routing.Router",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Routing.Router\">\r\n            <summary>\r\n            A component that supplies route data corresponding to the current navigation state.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Router"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "AppAssembly",
            "TypeName": "System.Reflection.Assembly",
            "IsEditorRequired": true,
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.AppAssembly\">\r\n            <summary>\r\n            Gets or sets the assembly that should be searched for components matching the URI.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AppAssembly",
              "Common.GloballyQualifiedTypeName": "global::System.Reflection.Assembly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAssemblies",
            "TypeName": "System.Collections.Generic.IEnumerable<System.Reflection.Assembly>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.AdditionalAssemblies\">\r\n            <summary>\r\n            Gets or sets a collection of additional assemblies that should be searched for components\r\n            that can match URIs.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAssemblies",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IEnumerable<global::System.Reflection.Assembly>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NotFound",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.NotFound\">\r\n            <summary>\r\n            Gets or sets the content to display when no match is found for the requested route.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "NotFound",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Found",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.RouteData>",
            "IsEditorRequired": true,
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.Found\">\r\n            <summary>\r\n            Gets or sets the content to display when a match is found for the requested route.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Found",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.RouteData>",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Navigating",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.Navigating\">\r\n            <summary>\r\n            Get or sets the content to display when asynchronous navigation is in progress.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Navigating",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnNavigateAsync",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Routing.NavigationContext>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.OnNavigateAsync\">\r\n            <summary>\r\n            Gets or sets a handler that should be called before navigating to a new page.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "OnNavigateAsync",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Routing.NavigationContext>",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PreferExactMatches",
            "TypeName": "System.Boolean",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.PreferExactMatches\">\r\n            <summary>\r\n            Gets or sets a flag to indicate whether route matching should prefer exact matches\r\n            over wildcards.\r\n            <para>This property is obsolete and configuring it does nothing.</para>\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "PreferExactMatches",
              "Common.GloballyQualifiedTypeName": "global::System.Boolean"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.Router",
          "Common.TypeNameIdentifier": "Router",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Routing",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -1096988485,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Routing.Router",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Routing.Router\">\r\n            <summary>\r\n            A component that supplies route data corresponding to the current navigation state.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Routing.Router"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "AppAssembly",
            "TypeName": "System.Reflection.Assembly",
            "IsEditorRequired": true,
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.AppAssembly\">\r\n            <summary>\r\n            Gets or sets the assembly that should be searched for components matching the URI.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AppAssembly",
              "Common.GloballyQualifiedTypeName": "global::System.Reflection.Assembly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAssemblies",
            "TypeName": "System.Collections.Generic.IEnumerable<System.Reflection.Assembly>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.AdditionalAssemblies\">\r\n            <summary>\r\n            Gets or sets a collection of additional assemblies that should be searched for components\r\n            that can match URIs.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAssemblies",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IEnumerable<global::System.Reflection.Assembly>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NotFound",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.NotFound\">\r\n            <summary>\r\n            Gets or sets the content to display when no match is found for the requested route.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "NotFound",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Found",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.RouteData>",
            "IsEditorRequired": true,
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.Found\">\r\n            <summary>\r\n            Gets or sets the content to display when a match is found for the requested route.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Found",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.RouteData>",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Navigating",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.Navigating\">\r\n            <summary>\r\n            Get or sets the content to display when asynchronous navigation is in progress.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Navigating",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnNavigateAsync",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Routing.NavigationContext>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.OnNavigateAsync\">\r\n            <summary>\r\n            Gets or sets a handler that should be called before navigating to a new page.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "OnNavigateAsync",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Routing.NavigationContext>",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PreferExactMatches",
            "TypeName": "System.Boolean",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.PreferExactMatches\">\r\n            <summary>\r\n            Gets or sets a flag to indicate whether route matching should prefer exact matches\r\n            over wildcards.\r\n            <para>This property is obsolete and configuring it does nothing.</para>\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "PreferExactMatches",
              "Common.GloballyQualifiedTypeName": "global::System.Boolean"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.Router",
          "Common.TypeNameIdentifier": "Router",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Routing",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -1325971196,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Routing.Router.NotFound",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.NotFound\">\r\n            <summary>\r\n            Gets or sets the content to display when no match is found for the requested route.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NotFound",
            "ParentTag": "Router"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.Router.NotFound",
          "Common.TypeNameIdentifier": "Router",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Routing",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 62358645,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Routing.Router.NotFound",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.NotFound\">\r\n            <summary>\r\n            Gets or sets the content to display when no match is found for the requested route.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NotFound",
            "ParentTag": "Microsoft.AspNetCore.Components.Routing.Router"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.Router.NotFound",
          "Common.TypeNameIdentifier": "Router",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Routing",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -406620878,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Routing.Router.Found",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.Found\">\r\n            <summary>\r\n            Gets or sets the content to display when a match is found for the requested route.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Found",
            "ParentTag": "Router"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'Found' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.Router.Found",
          "Common.TypeNameIdentifier": "Router",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Routing",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1455066517,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Routing.Router.Found",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.Found\">\r\n            <summary>\r\n            Gets or sets the content to display when a match is found for the requested route.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Found",
            "ParentTag": "Microsoft.AspNetCore.Components.Routing.Router"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'Found' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.Router.Found",
          "Common.TypeNameIdentifier": "Router",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Routing",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -2004882304,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Routing.Router.Navigating",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.Navigating\">\r\n            <summary>\r\n            Get or sets the content to display when asynchronous navigation is in progress.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Navigating",
            "ParentTag": "Router"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.Router.Navigating",
          "Common.TypeNameIdentifier": "Router",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Routing",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 61837358,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Routing.Router.Navigating",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.Navigating\">\r\n            <summary>\r\n            Get or sets the content to display when asynchronous navigation is in progress.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Navigating",
            "ParentTag": "Microsoft.AspNetCore.Components.Routing.Router"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.Router.Navigating",
          "Common.TypeNameIdentifier": "Router",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Routing",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1692998260,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Sections.SectionContent",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Sections.SectionContent\">\r\n            <summary>\r\n            Provides content to <see cref=\"T:Microsoft.AspNetCore.Components.Sections.SectionOutlet\" /> components with matching <see cref=\"P:Microsoft.AspNetCore.Components.Sections.SectionContent.SectionId\" />s.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "SectionContent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "SectionName",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Sections.SectionContent.SectionName\">\r\n            <summary>\r\n            Gets or sets the <see cref=\"T:System.String\" /> ID that determines which <see cref=\"T:Microsoft.AspNetCore.Components.Sections.SectionOutlet\" /> instance will render\r\n            the content of this instance.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "SectionName",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SectionId",
            "TypeName": "System.Object",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Sections.SectionContent.SectionId\">\r\n            <summary>\r\n            Gets or sets the <see cref=\"T:System.Object\" /> ID that determines which <see cref=\"T:Microsoft.AspNetCore.Components.Sections.SectionOutlet\" /> instance will render\r\n            the content of this instance.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "SectionId",
              "Common.GloballyQualifiedTypeName": "global::System.Object"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Sections.SectionContent.ChildContent\">\r\n            <summary>\r\n            Gets or sets the content to be rendered in corresponding <see cref=\"T:Microsoft.AspNetCore.Components.Sections.SectionOutlet\" /> instances.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Sections.SectionContent",
          "Common.TypeNameIdentifier": "SectionContent",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Sections",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 1382314707,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Sections.SectionContent",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Sections.SectionContent\">\r\n            <summary>\r\n            Provides content to <see cref=\"T:Microsoft.AspNetCore.Components.Sections.SectionOutlet\" /> components with matching <see cref=\"P:Microsoft.AspNetCore.Components.Sections.SectionContent.SectionId\" />s.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Sections.SectionContent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "SectionName",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Sections.SectionContent.SectionName\">\r\n            <summary>\r\n            Gets or sets the <see cref=\"T:System.String\" /> ID that determines which <see cref=\"T:Microsoft.AspNetCore.Components.Sections.SectionOutlet\" /> instance will render\r\n            the content of this instance.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "SectionName",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SectionId",
            "TypeName": "System.Object",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Sections.SectionContent.SectionId\">\r\n            <summary>\r\n            Gets or sets the <see cref=\"T:System.Object\" /> ID that determines which <see cref=\"T:Microsoft.AspNetCore.Components.Sections.SectionOutlet\" /> instance will render\r\n            the content of this instance.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "SectionId",
              "Common.GloballyQualifiedTypeName": "global::System.Object"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Sections.SectionContent.ChildContent\">\r\n            <summary>\r\n            Gets or sets the content to be rendered in corresponding <see cref=\"T:Microsoft.AspNetCore.Components.Sections.SectionOutlet\" /> instances.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Sections.SectionContent",
          "Common.TypeNameIdentifier": "SectionContent",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Sections",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -276351151,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Sections.SectionContent.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Sections.SectionContent.ChildContent\">\r\n            <summary>\r\n            Gets or sets the content to be rendered in corresponding <see cref=\"T:Microsoft.AspNetCore.Components.Sections.SectionOutlet\" /> instances.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "SectionContent"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Sections.SectionContent.ChildContent",
          "Common.TypeNameIdentifier": "SectionContent",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Sections",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -2020586564,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Sections.SectionContent.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Sections.SectionContent.ChildContent\">\r\n            <summary>\r\n            Gets or sets the content to be rendered in corresponding <see cref=\"T:Microsoft.AspNetCore.Components.Sections.SectionOutlet\" /> instances.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Sections.SectionContent"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Sections.SectionContent.ChildContent",
          "Common.TypeNameIdentifier": "SectionContent",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Sections",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 173359134,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Sections.SectionOutlet",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Sections.SectionOutlet\">\r\n            <summary>\r\n            Renders content provided by <see cref=\"T:Microsoft.AspNetCore.Components.Sections.SectionContent\" /> components with matching <see cref=\"P:Microsoft.AspNetCore.Components.Sections.SectionOutlet.SectionId\" />s.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "SectionOutlet"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "SectionName",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Sections.SectionOutlet.SectionName\">\r\n            <summary>\r\n            Gets or sets the <see cref=\"T:System.String\" /> ID that determines which <see cref=\"T:Microsoft.AspNetCore.Components.Sections.SectionContent\" /> instances will provide\r\n            content to this instance.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "SectionName",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SectionId",
            "TypeName": "System.Object",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Sections.SectionOutlet.SectionId\">\r\n            <summary>\r\n            Gets or sets the <see cref=\"T:System.Object\" /> ID that determines which <see cref=\"T:Microsoft.AspNetCore.Components.Sections.SectionContent\" /> instances will provide\r\n            content to this instance.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "SectionId",
              "Common.GloballyQualifiedTypeName": "global::System.Object"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Sections.SectionOutlet",
          "Common.TypeNameIdentifier": "SectionOutlet",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Sections",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 1435452694,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Sections.SectionOutlet",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Sections.SectionOutlet\">\r\n            <summary>\r\n            Renders content provided by <see cref=\"T:Microsoft.AspNetCore.Components.Sections.SectionContent\" /> components with matching <see cref=\"P:Microsoft.AspNetCore.Components.Sections.SectionOutlet.SectionId\" />s.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Sections.SectionOutlet"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "SectionName",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Sections.SectionOutlet.SectionName\">\r\n            <summary>\r\n            Gets or sets the <see cref=\"T:System.String\" /> ID that determines which <see cref=\"T:Microsoft.AspNetCore.Components.Sections.SectionContent\" /> instances will provide\r\n            content to this instance.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "SectionName",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SectionId",
            "TypeName": "System.Object",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Sections.SectionOutlet.SectionId\">\r\n            <summary>\r\n            Gets or sets the <see cref=\"T:System.Object\" /> ID that determines which <see cref=\"T:Microsoft.AspNetCore.Components.Sections.SectionContent\" /> instances will provide\r\n            content to this instance.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "SectionId",
              "Common.GloballyQualifiedTypeName": "global::System.Object"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Sections.SectionOutlet",
          "Common.TypeNameIdentifier": "SectionOutlet",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Sections",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 308810417,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator",
        "AssemblyName": "Microsoft.AspNetCore.Components.Forms",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator\">\r\n            <summary>\r\n            Adds Data Annotations validation support to an <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "DataAnnotationsValidator"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator",
          "Common.TypeNameIdentifier": "DataAnnotationsValidator",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 963676790,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator",
        "AssemblyName": "Microsoft.AspNetCore.Components.Forms",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator\">\r\n            <summary>\r\n            Adds Data Annotations validation support to an <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator",
          "Common.TypeNameIdentifier": "DataAnnotationsValidator",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 690615762,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.AntiforgeryToken",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.AntiforgeryToken\">\r\n            <summary>\r\n            Component that renders an antiforgery token as a hidden field.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "AntiforgeryToken"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.AntiforgeryToken",
          "Common.TypeNameIdentifier": "AntiforgeryToken",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 711742627,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.AntiforgeryToken",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.AntiforgeryToken\">\r\n            <summary>\r\n            Component that renders an antiforgery token as a hidden field.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.AntiforgeryToken"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.AntiforgeryToken",
          "Common.TypeNameIdentifier": "AntiforgeryToken",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -2087931697,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.EditForm",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.EditForm\">\r\n            <summary>\r\n            Renders a form element that cascades an <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> to descendants.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "EditForm"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created <c>form</c> element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EditContext",
            "TypeName": "Microsoft.AspNetCore.Components.Forms.EditContext",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\">\r\n            <summary>\r\n            Supplies the edit context explicitly. If using this parameter, do not\r\n            also supply <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.Model\" />, since the model value will be taken\r\n            from the <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditContext.Model\" /> property.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "EditContext",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.Forms.EditContext"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enhance",
            "TypeName": "System.Boolean",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.Enhance\">\r\n             <summary>\r\n             If enabled, form submission is performed without fully reloading the page. This is\r\n             equivalent to adding <code>data-enhance</code> to the form.\r\n            \r\n             This flag is only relevant in server-side rendering (SSR) scenarios. For interactive\r\n             rendering, the flag has no effect since there is no full-page reload on submit anyway.\r\n             </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Enhance",
              "Common.GloballyQualifiedTypeName": "global::System.Boolean"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Model",
            "TypeName": "System.Object",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.Model\">\r\n            <summary>\r\n            Specifies the top-level model object for the form. An edit context will\r\n            be constructed for this model. If using this parameter, do not also supply\r\n            a value for <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Model",
              "Common.GloballyQualifiedTypeName": "global::System.Object"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Forms.EditContext>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.ChildContent\">\r\n            <summary>\r\n            Specifies the content to be rendered inside this <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditForm\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Forms.EditContext>",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnSubmit",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.OnSubmit\">\r\n             <summary>\r\n             A callback that will be invoked when the form is submitted.\r\n            \r\n             If using this parameter, you are responsible for triggering any validation\r\n             manually, e.g., by calling <see cref=\"M:Microsoft.AspNetCore.Components.Forms.EditContext.Validate\" />.\r\n             </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "OnSubmit",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.EditContext>",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnValidSubmit",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.OnValidSubmit\">\r\n            <summary>\r\n            A callback that will be invoked when the form is submitted and the\r\n            <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> is determined to be valid.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "OnValidSubmit",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.EditContext>",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInvalidSubmit",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.OnInvalidSubmit\">\r\n            <summary>\r\n            A callback that will be invoked when the form is submitted and the\r\n            <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> is determined to be invalid.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "OnInvalidSubmit",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.EditContext>",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FormName",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.FormName\">\r\n            <summary>\r\n            Gets or sets the form handler name. This is required for posting it to a server-side endpoint.\r\n            It is not used during interactive rendering.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "FormName",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.EditForm",
          "Common.TypeNameIdentifier": "EditForm",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 1440848616,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.EditForm",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.EditForm\">\r\n            <summary>\r\n            Renders a form element that cascades an <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> to descendants.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.EditForm"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created <c>form</c> element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EditContext",
            "TypeName": "Microsoft.AspNetCore.Components.Forms.EditContext",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\">\r\n            <summary>\r\n            Supplies the edit context explicitly. If using this parameter, do not\r\n            also supply <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.Model\" />, since the model value will be taken\r\n            from the <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditContext.Model\" /> property.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "EditContext",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.Forms.EditContext"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enhance",
            "TypeName": "System.Boolean",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.Enhance\">\r\n             <summary>\r\n             If enabled, form submission is performed without fully reloading the page. This is\r\n             equivalent to adding <code>data-enhance</code> to the form.\r\n            \r\n             This flag is only relevant in server-side rendering (SSR) scenarios. For interactive\r\n             rendering, the flag has no effect since there is no full-page reload on submit anyway.\r\n             </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Enhance",
              "Common.GloballyQualifiedTypeName": "global::System.Boolean"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Model",
            "TypeName": "System.Object",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.Model\">\r\n            <summary>\r\n            Specifies the top-level model object for the form. An edit context will\r\n            be constructed for this model. If using this parameter, do not also supply\r\n            a value for <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Model",
              "Common.GloballyQualifiedTypeName": "global::System.Object"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Forms.EditContext>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.ChildContent\">\r\n            <summary>\r\n            Specifies the content to be rendered inside this <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditForm\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Forms.EditContext>",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnSubmit",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.OnSubmit\">\r\n             <summary>\r\n             A callback that will be invoked when the form is submitted.\r\n            \r\n             If using this parameter, you are responsible for triggering any validation\r\n             manually, e.g., by calling <see cref=\"M:Microsoft.AspNetCore.Components.Forms.EditContext.Validate\" />.\r\n             </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "OnSubmit",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.EditContext>",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnValidSubmit",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.OnValidSubmit\">\r\n            <summary>\r\n            A callback that will be invoked when the form is submitted and the\r\n            <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> is determined to be valid.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "OnValidSubmit",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.EditContext>",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInvalidSubmit",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.OnInvalidSubmit\">\r\n            <summary>\r\n            A callback that will be invoked when the form is submitted and the\r\n            <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> is determined to be invalid.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "OnInvalidSubmit",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.EditContext>",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FormName",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.FormName\">\r\n            <summary>\r\n            Gets or sets the form handler name. This is required for posting it to a server-side endpoint.\r\n            It is not used during interactive rendering.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "FormName",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.EditForm",
          "Common.TypeNameIdentifier": "EditForm",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -587568566,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Forms.EditForm.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.ChildContent\">\r\n            <summary>\r\n            Specifies the content to be rendered inside this <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditForm\" />.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "EditForm"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ChildContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.EditForm.ChildContent",
          "Common.TypeNameIdentifier": "EditForm",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1638366665,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Forms.EditForm.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.ChildContent\">\r\n            <summary>\r\n            Specifies the content to be rendered inside this <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditForm\" />.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Forms.EditForm"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ChildContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.EditForm.ChildContent",
          "Common.TypeNameIdentifier": "EditForm",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1658354733,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputCheckbox",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputCheckbox\">\r\n            <summary>\r\n            An input component for editing <see cref=\"T:System.Boolean\" /> values.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputCheckbox"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.Boolean",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Common.GloballyQualifiedTypeName": "global::System.Boolean"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<global::System.Boolean>",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<System.Boolean>>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Common.GloballyQualifiedTypeName": "global::System.Linq.Expressions.Expression<global::System.Func<global::System.Boolean>>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "DisplayName",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputCheckbox",
          "Common.TypeNameIdentifier": "InputCheckbox",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -1979637404,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputCheckbox",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputCheckbox\">\r\n            <summary>\r\n            An input component for editing <see cref=\"T:System.Boolean\" /> values.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputCheckbox"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.Boolean",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Common.GloballyQualifiedTypeName": "global::System.Boolean"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<global::System.Boolean>",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<System.Boolean>>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Common.GloballyQualifiedTypeName": "global::System.Linq.Expressions.Expression<global::System.Func<global::System.Boolean>>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "DisplayName",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputCheckbox",
          "Common.TypeNameIdentifier": "InputCheckbox",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -837808530,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputDate<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputDate`1\">\r\n            <summary>\r\n            An input component for editing date values.\r\n            The supported types for the date value are:\r\n            <list type=\"bullet\">\r\n            <item><see cref=\"T:System.DateTime\" /></item>\r\n            <item><see cref=\"T:System.DateTimeOffset\" /></item>\r\n            <item><see cref=\"T:System.DateOnly\" /></item>\r\n            <item><see cref=\"T:System.TimeOnly\" /></item>\r\n            </list>\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputDate"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputDate<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Type",
            "TypeName": "Microsoft.AspNetCore.Components.Forms.InputDateType",
            "IsEnum": true,
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputDate`1.Type\">\r\n            <summary>\r\n            Gets or sets the type of HTML input to be rendered.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Type",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.Forms.InputDateType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ParsingErrorMessage",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputDate`1.ParsingErrorMessage\">\r\n            <summary>\r\n            Gets or sets the error message used when displaying an a parsing error.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ParsingErrorMessage",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Common.GloballyQualifiedTypeName": "TValue",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<TValue>",
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Common.GloballyQualifiedTypeName": "global::System.Linq.Expressions.Expression<global::System.Func<TValue>>",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "DisplayName",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputDate<TValue>",
          "Common.TypeNameIdentifier": "InputDate",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.GenericTyped": "True",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -1090270688,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputDate<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputDate`1\">\r\n            <summary>\r\n            An input component for editing date values.\r\n            The supported types for the date value are:\r\n            <list type=\"bullet\">\r\n            <item><see cref=\"T:System.DateTime\" /></item>\r\n            <item><see cref=\"T:System.DateTimeOffset\" /></item>\r\n            <item><see cref=\"T:System.DateOnly\" /></item>\r\n            <item><see cref=\"T:System.TimeOnly\" /></item>\r\n            </list>\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputDate"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputDate<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Type",
            "TypeName": "Microsoft.AspNetCore.Components.Forms.InputDateType",
            "IsEnum": true,
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputDate`1.Type\">\r\n            <summary>\r\n            Gets or sets the type of HTML input to be rendered.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Type",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.Forms.InputDateType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ParsingErrorMessage",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputDate`1.ParsingErrorMessage\">\r\n            <summary>\r\n            Gets or sets the error message used when displaying an a parsing error.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ParsingErrorMessage",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Common.GloballyQualifiedTypeName": "TValue",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<TValue>",
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Common.GloballyQualifiedTypeName": "global::System.Linq.Expressions.Expression<global::System.Func<TValue>>",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "DisplayName",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputDate<TValue>",
          "Common.TypeNameIdentifier": "InputDate",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -1818342894,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputFile",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputFile\">\r\n            <summary>\r\n            A component that wraps the HTML file input element and supplies a <see cref=\"T:System.IO.Stream\" /> for each file's contents.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputFile"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "OnChange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputFile.OnChange\">\r\n            <summary>\r\n            Gets or sets the event callback that will be invoked when the collection of selected files changes.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "OnChange",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputFile.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the input element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputFile",
          "Common.TypeNameIdentifier": "InputFile",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -1825462942,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputFile",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputFile\">\r\n            <summary>\r\n            A component that wraps the HTML file input element and supplies a <see cref=\"T:System.IO.Stream\" /> for each file's contents.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputFile"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "OnChange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputFile.OnChange\">\r\n            <summary>\r\n            Gets or sets the event callback that will be invoked when the collection of selected files changes.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "OnChange",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputFile.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the input element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputFile",
          "Common.TypeNameIdentifier": "InputFile",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -450338366,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputNumber`1\">\r\n            <summary>\r\n            An input component for editing numeric values.\r\n            Supported numeric types are <see cref=\"T:System.Int32\" />, <see cref=\"T:System.Int64\" />, <see cref=\"T:System.Int16\" />, <see cref=\"T:System.Single\" />, <see cref=\"T:System.Double\" />, <see cref=\"T:System.Decimal\" />.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputNumber"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputNumber<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ParsingErrorMessage",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputNumber`1.ParsingErrorMessage\">\r\n            <summary>\r\n            Gets or sets the error message used when displaying an a parsing error.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ParsingErrorMessage",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Common.GloballyQualifiedTypeName": "TValue",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<TValue>",
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Common.GloballyQualifiedTypeName": "global::System.Linq.Expressions.Expression<global::System.Func<TValue>>",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "DisplayName",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>",
          "Common.TypeNameIdentifier": "InputNumber",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.GenericTyped": "True",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 1829857621,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputNumber`1\">\r\n            <summary>\r\n            An input component for editing numeric values.\r\n            Supported numeric types are <see cref=\"T:System.Int32\" />, <see cref=\"T:System.Int64\" />, <see cref=\"T:System.Int16\" />, <see cref=\"T:System.Single\" />, <see cref=\"T:System.Double\" />, <see cref=\"T:System.Decimal\" />.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputNumber"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputNumber<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ParsingErrorMessage",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputNumber`1.ParsingErrorMessage\">\r\n            <summary>\r\n            Gets or sets the error message used when displaying an a parsing error.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ParsingErrorMessage",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Common.GloballyQualifiedTypeName": "TValue",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<TValue>",
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Common.GloballyQualifiedTypeName": "global::System.Linq.Expressions.Expression<global::System.Func<TValue>>",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "DisplayName",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>",
          "Common.TypeNameIdentifier": "InputNumber",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -1082102170,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputRadio<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputRadio`1\">\r\n            <summary>\r\n            An input component used for selecting a value from a group of choices.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputRadio"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputRadio<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputRadio`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the input element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputRadio`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of this input.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Common.GloballyQualifiedTypeName": "TValue",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Name",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputRadio`1.Name\">\r\n            <summary>\r\n            Gets or sets the name of the parent input radio group.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Name",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputRadio<TValue>",
          "Common.TypeNameIdentifier": "InputRadio",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.GenericTyped": "True",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -866469390,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputRadio<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputRadio`1\">\r\n            <summary>\r\n            An input component used for selecting a value from a group of choices.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputRadio"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputRadio<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputRadio`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the input element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputRadio`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of this input.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Common.GloballyQualifiedTypeName": "TValue",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Name",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputRadio`1.Name\">\r\n            <summary>\r\n            Gets or sets the name of the parent input radio group.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Name",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputRadio<TValue>",
          "Common.TypeNameIdentifier": "InputRadio",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -534161028,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1\">\r\n            <summary>\r\n            Groups child <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadio`1\" /> components.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputRadioGroup"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1.ChildContent\">\r\n            <summary>\r\n            Gets or sets the child content to be rendering inside the <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Name",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1.Name\">\r\n            <summary>\r\n            Gets or sets the name of the group.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Name",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Common.GloballyQualifiedTypeName": "TValue",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<TValue>",
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Common.GloballyQualifiedTypeName": "global::System.Linq.Expressions.Expression<global::System.Func<TValue>>",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "DisplayName",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>",
          "Common.TypeNameIdentifier": "InputRadioGroup",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.GenericTyped": "True",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -587594820,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1\">\r\n            <summary>\r\n            Groups child <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadio`1\" /> components.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1.ChildContent\">\r\n            <summary>\r\n            Gets or sets the child content to be rendering inside the <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Name",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1.Name\">\r\n            <summary>\r\n            Gets or sets the name of the group.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Name",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Common.GloballyQualifiedTypeName": "TValue",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<TValue>",
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Common.GloballyQualifiedTypeName": "global::System.Linq.Expressions.Expression<global::System.Func<TValue>>",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "DisplayName",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>",
          "Common.TypeNameIdentifier": "InputRadioGroup",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 1398051254,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1.ChildContent\">\r\n            <summary>\r\n            Gets or sets the child content to be rendering inside the <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1\" />.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "InputRadioGroup"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>.ChildContent",
          "Common.TypeNameIdentifier": "InputRadioGroup",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1458914260,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1.ChildContent\">\r\n            <summary>\r\n            Gets or sets the child content to be rendering inside the <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1\" />.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>.ChildContent",
          "Common.TypeNameIdentifier": "InputRadioGroup",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 194013665,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputSelect`1\">\r\n            <summary>\r\n            A dropdown selection component.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputSelect"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputSelect<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputSelect`1.ChildContent\">\r\n            <summary>\r\n            Gets or sets the child content to be rendering inside the select element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Common.GloballyQualifiedTypeName": "TValue",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<TValue>",
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Common.GloballyQualifiedTypeName": "global::System.Linq.Expressions.Expression<global::System.Func<TValue>>",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "DisplayName",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>",
          "Common.TypeNameIdentifier": "InputSelect",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.GenericTyped": "True",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -1845028633,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputSelect`1\">\r\n            <summary>\r\n            A dropdown selection component.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputSelect"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputSelect<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputSelect`1.ChildContent\">\r\n            <summary>\r\n            Gets or sets the child content to be rendering inside the select element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Common.GloballyQualifiedTypeName": "TValue",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<TValue>",
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Common.GloballyQualifiedTypeName": "global::System.Linq.Expressions.Expression<global::System.Func<TValue>>",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "DisplayName",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>",
          "Common.TypeNameIdentifier": "InputSelect",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -1829275950,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputSelect`1.ChildContent\">\r\n            <summary>\r\n            Gets or sets the child content to be rendering inside the select element.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "InputSelect"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>.ChildContent",
          "Common.TypeNameIdentifier": "InputSelect",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1198735505,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputSelect`1.ChildContent\">\r\n            <summary>\r\n            Gets or sets the child content to be rendering inside the select element.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Forms.InputSelect"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>.ChildContent",
          "Common.TypeNameIdentifier": "InputSelect",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1089705401,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputText",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputText\">\r\n            <summary>\r\n            An input component for editing <see cref=\"T:System.String\" /> values.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputText"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<System.String>>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Common.GloballyQualifiedTypeName": "global::System.Linq.Expressions.Expression<global::System.Func<global::System.String>>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "DisplayName",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputText",
          "Common.TypeNameIdentifier": "InputText",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 867024140,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputText",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputText\">\r\n            <summary>\r\n            An input component for editing <see cref=\"T:System.String\" /> values.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputText"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<System.String>>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Common.GloballyQualifiedTypeName": "global::System.Linq.Expressions.Expression<global::System.Func<global::System.String>>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "DisplayName",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputText",
          "Common.TypeNameIdentifier": "InputText",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -2024197467,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputTextArea",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputTextArea\">\r\n            <summary>\r\n            A multiline input component for editing <see cref=\"T:System.String\" /> values.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputTextArea"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<System.String>>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Common.GloballyQualifiedTypeName": "global::System.Linq.Expressions.Expression<global::System.Func<global::System.String>>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "DisplayName",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputTextArea",
          "Common.TypeNameIdentifier": "InputTextArea",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -152577655,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputTextArea",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputTextArea\">\r\n            <summary>\r\n            A multiline input component for editing <see cref=\"T:System.String\" /> values.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputTextArea"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<System.String>>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Common.GloballyQualifiedTypeName": "global::System.Linq.Expressions.Expression<global::System.Func<global::System.String>>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "DisplayName",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputTextArea",
          "Common.TypeNameIdentifier": "InputTextArea",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -489641684,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.FormMappingScope",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.FormMappingScope\">\r\n            <summary>\r\n            Defines the mapping scope for data received from form posts.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "FormMappingScope"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Name",
            "TypeName": "System.String",
            "IsEditorRequired": true,
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.FormMappingScope.Name\">\r\n            <summary>\r\n            The mapping scope name.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Name",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Forms.FormMappingContext>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.FormMappingScope.ChildContent\">\r\n            <summary>\r\n            Specifies the content to be rendered inside this <see cref=\"T:Microsoft.AspNetCore.Components.Forms.FormMappingScope\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Forms.FormMappingContext>",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.FormMappingScope",
          "Common.TypeNameIdentifier": "FormMappingScope",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 33332046,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.FormMappingScope",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.FormMappingScope\">\r\n            <summary>\r\n            Defines the mapping scope for data received from form posts.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.FormMappingScope"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Name",
            "TypeName": "System.String",
            "IsEditorRequired": true,
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.FormMappingScope.Name\">\r\n            <summary>\r\n            The mapping scope name.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Name",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Forms.FormMappingContext>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.FormMappingScope.ChildContent\">\r\n            <summary>\r\n            Specifies the content to be rendered inside this <see cref=\"T:Microsoft.AspNetCore.Components.Forms.FormMappingScope\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Forms.FormMappingContext>",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.FormMappingScope",
          "Common.TypeNameIdentifier": "FormMappingScope",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 1308038681,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Forms.FormMappingScope.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.FormMappingScope.ChildContent\">\r\n            <summary>\r\n            Specifies the content to be rendered inside this <see cref=\"T:Microsoft.AspNetCore.Components.Forms.FormMappingScope\" />.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "FormMappingScope"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ChildContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.FormMappingScope.ChildContent",
          "Common.TypeNameIdentifier": "FormMappingScope",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -663301093,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Forms.FormMappingScope.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.FormMappingScope.ChildContent\">\r\n            <summary>\r\n            Specifies the content to be rendered inside this <see cref=\"T:Microsoft.AspNetCore.Components.Forms.FormMappingScope\" />.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Forms.FormMappingScope"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ChildContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.FormMappingScope.ChildContent",
          "Common.TypeNameIdentifier": "FormMappingScope",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1443219971,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.ValidationMessage`1\">\r\n            <summary>\r\n            Displays a list of validation messages for a specified field within a cascaded <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ValidationMessage"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.ValidationMessage`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created <c>div</c> element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "For",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.ValidationMessage`1.For\">\r\n            <summary>\r\n            Specifies the field for which validation messages should be displayed.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "For",
              "Common.GloballyQualifiedTypeName": "global::System.Linq.Expressions.Expression<global::System.Func<TValue>>",
              "Components.GenericTyped": "True"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue>",
          "Common.TypeNameIdentifier": "ValidationMessage",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.GenericTyped": "True",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 1312327193,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.ValidationMessage`1\">\r\n            <summary>\r\n            Displays a list of validation messages for a specified field within a cascaded <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.ValidationMessage"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.ValidationMessage`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created <c>div</c> element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "For",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.ValidationMessage`1.For\">\r\n            <summary>\r\n            Specifies the field for which validation messages should be displayed.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "For",
              "Common.GloballyQualifiedTypeName": "global::System.Linq.Expressions.Expression<global::System.Func<TValue>>",
              "Components.GenericTyped": "True"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue>",
          "Common.TypeNameIdentifier": "ValidationMessage",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -520767225,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.ValidationSummary",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.ValidationSummary\">\r\n            <summary>\r\n            Displays a list of validation messages from a cascaded <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ValidationSummary"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Model",
            "TypeName": "System.Object",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.ValidationSummary.Model\">\r\n            <summary>\r\n            Gets or sets the model to produce the list of validation messages for.\r\n            When specified, this lists all errors that are associated with the model instance.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Model",
              "Common.GloballyQualifiedTypeName": "global::System.Object"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.ValidationSummary.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created <c>ul</c> element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.ValidationSummary",
          "Common.TypeNameIdentifier": "ValidationSummary",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 638982476,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.ValidationSummary",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.ValidationSummary\">\r\n            <summary>\r\n            Displays a list of validation messages from a cascaded <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.ValidationSummary"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Model",
            "TypeName": "System.Object",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.ValidationSummary.Model\">\r\n            <summary>\r\n            Gets or sets the model to produce the list of validation messages for.\r\n            When specified, this lists all errors that are associated with the model instance.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Model",
              "Common.GloballyQualifiedTypeName": "global::System.Object"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.ValidationSummary.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created <c>ul</c> element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.ValidationSummary",
          "Common.TypeNameIdentifier": "ValidationSummary",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 279764848,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Routing.FocusOnNavigate",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Routing.FocusOnNavigate\">\r\n            <summary>\r\n            After navigating from one page to another, sets focus to an element\r\n            matching a CSS selector. This can be used to build an accessible\r\n            navigation system compatible with screen readers.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "FocusOnNavigate"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "RouteData",
            "TypeName": "Microsoft.AspNetCore.Components.RouteData",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.FocusOnNavigate.RouteData\">\r\n            <summary>\r\n            Gets or sets the route data. This can be obtained from an enclosing\r\n            <see cref=\"T:Microsoft.AspNetCore.Components.Routing.Router\" /> component.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "RouteData",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RouteData"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Selector",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.FocusOnNavigate.Selector\">\r\n            <summary>\r\n            Gets or sets a CSS selector describing the element to be focused after\r\n            navigation between pages.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Selector",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.FocusOnNavigate",
          "Common.TypeNameIdentifier": "FocusOnNavigate",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Routing",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 1631773875,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Routing.FocusOnNavigate",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Routing.FocusOnNavigate\">\r\n            <summary>\r\n            After navigating from one page to another, sets focus to an element\r\n            matching a CSS selector. This can be used to build an accessible\r\n            navigation system compatible with screen readers.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Routing.FocusOnNavigate"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "RouteData",
            "TypeName": "Microsoft.AspNetCore.Components.RouteData",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.FocusOnNavigate.RouteData\">\r\n            <summary>\r\n            Gets or sets the route data. This can be obtained from an enclosing\r\n            <see cref=\"T:Microsoft.AspNetCore.Components.Routing.Router\" /> component.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "RouteData",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RouteData"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Selector",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.FocusOnNavigate.Selector\">\r\n            <summary>\r\n            Gets or sets a CSS selector describing the element to be focused after\r\n            navigation between pages.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Selector",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.FocusOnNavigate",
          "Common.TypeNameIdentifier": "FocusOnNavigate",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Routing",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 23563075,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Routing.NavigationLock",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Routing.NavigationLock\">\r\n            <summary>\r\n            A component that can be used to intercept navigation events. \r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NavigationLock"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "OnBeforeInternalNavigation",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Routing.LocationChangingContext>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.NavigationLock.OnBeforeInternalNavigation\">\r\n            <summary>\r\n            Gets or sets a callback to be invoked when an internal navigation event occurs.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "OnBeforeInternalNavigation",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Routing.LocationChangingContext>",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ConfirmExternalNavigation",
            "TypeName": "System.Boolean",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.NavigationLock.ConfirmExternalNavigation\">\r\n            <summary>\r\n            Gets or sets whether a browser dialog should prompt the user to either confirm or cancel\r\n            external navigations.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ConfirmExternalNavigation",
              "Common.GloballyQualifiedTypeName": "global::System.Boolean"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.NavigationLock",
          "Common.TypeNameIdentifier": "NavigationLock",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Routing",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -918938730,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Routing.NavigationLock",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Routing.NavigationLock\">\r\n            <summary>\r\n            A component that can be used to intercept navigation events. \r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Routing.NavigationLock"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "OnBeforeInternalNavigation",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Routing.LocationChangingContext>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.NavigationLock.OnBeforeInternalNavigation\">\r\n            <summary>\r\n            Gets or sets a callback to be invoked when an internal navigation event occurs.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "OnBeforeInternalNavigation",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Routing.LocationChangingContext>",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ConfirmExternalNavigation",
            "TypeName": "System.Boolean",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.NavigationLock.ConfirmExternalNavigation\">\r\n            <summary>\r\n            Gets or sets whether a browser dialog should prompt the user to either confirm or cancel\r\n            external navigations.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ConfirmExternalNavigation",
              "Common.GloballyQualifiedTypeName": "global::System.Boolean"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.NavigationLock",
          "Common.TypeNameIdentifier": "NavigationLock",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Routing",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -226789729,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Routing.NavLink",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Routing.NavLink\">\r\n            <summary>\r\n            A component that renders an anchor tag, automatically toggling its 'active'\r\n            class based on whether its 'href' matches the current URI.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NavLink"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ActiveClass",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.NavLink.ActiveClass\">\r\n            <summary>\r\n            Gets or sets the CSS class name applied to the NavLink when the\r\n            current route matches the NavLink href.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ActiveClass",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.NavLink.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be added to the generated\r\n            <c>a</c> element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent\">\r\n            <summary>\r\n            Gets or sets the child content of the component.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Match",
            "TypeName": "Microsoft.AspNetCore.Components.Routing.NavLinkMatch",
            "IsEnum": true,
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.NavLink.Match\">\r\n            <summary>\r\n            Gets or sets a value representing the URL matching behavior.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Match",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.Routing.NavLinkMatch"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.NavLink",
          "Common.TypeNameIdentifier": "NavLink",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Routing",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -782655031,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Routing.NavLink",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Routing.NavLink\">\r\n            <summary>\r\n            A component that renders an anchor tag, automatically toggling its 'active'\r\n            class based on whether its 'href' matches the current URI.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Routing.NavLink"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ActiveClass",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.NavLink.ActiveClass\">\r\n            <summary>\r\n            Gets or sets the CSS class name applied to the NavLink when the\r\n            current route matches the NavLink href.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ActiveClass",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.NavLink.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be added to the generated\r\n            <c>a</c> element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent\">\r\n            <summary>\r\n            Gets or sets the child content of the component.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Match",
            "TypeName": "Microsoft.AspNetCore.Components.Routing.NavLinkMatch",
            "IsEnum": true,
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.NavLink.Match\">\r\n            <summary>\r\n            Gets or sets a value representing the URL matching behavior.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Match",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.Routing.NavLinkMatch"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.NavLink",
          "Common.TypeNameIdentifier": "NavLink",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Routing",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -1798640941,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent\">\r\n            <summary>\r\n            Gets or sets the child content of the component.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "NavLink"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent",
          "Common.TypeNameIdentifier": "NavLink",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Routing",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1150607726,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent\">\r\n            <summary>\r\n            Gets or sets the child content of the component.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Routing.NavLink"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent",
          "Common.TypeNameIdentifier": "NavLink",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Routing",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 2035531439,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Web.HeadContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Web.HeadContent\">\r\n            <summary>\r\n            Provides content to <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> components.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HeadContent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.HeadContent.ChildContent\">\r\n            <summary>\r\n            Gets or sets the content to be rendered in <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> instances.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.HeadContent",
          "Common.TypeNameIdentifier": "HeadContent",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -1071204736,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Web.HeadContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Web.HeadContent\">\r\n            <summary>\r\n            Provides content to <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> components.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Web.HeadContent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.HeadContent.ChildContent\">\r\n            <summary>\r\n            Gets or sets the content to be rendered in <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> instances.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.HeadContent",
          "Common.TypeNameIdentifier": "HeadContent",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 1838997131,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.HeadContent.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.HeadContent.ChildContent\">\r\n            <summary>\r\n            Gets or sets the content to be rendered in <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> instances.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HeadContent"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.HeadContent.ChildContent",
          "Common.TypeNameIdentifier": "HeadContent",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1934415893,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.HeadContent.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.HeadContent.ChildContent\">\r\n            <summary>\r\n            Gets or sets the content to be rendered in <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> instances.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Web.HeadContent"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.HeadContent.ChildContent",
          "Common.TypeNameIdentifier": "HeadContent",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 816391756,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Web.HeadOutlet",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\">\r\n            <summary>\r\n            Renders content provided by <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadContent\" /> components.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HeadOutlet"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.HeadOutlet",
          "Common.TypeNameIdentifier": "HeadOutlet",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -407654687,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Web.HeadOutlet",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\">\r\n            <summary>\r\n            Renders content provided by <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadContent\" /> components.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Web.HeadOutlet"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.HeadOutlet",
          "Common.TypeNameIdentifier": "HeadOutlet",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 513519061,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Web.PageTitle",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Web.PageTitle\">\r\n            <summary>\r\n            Enables rendering an HTML <c>&lt;title&gt;</c> to a <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> component.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "PageTitle"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.PageTitle.ChildContent\">\r\n            <summary>\r\n            Gets or sets the content to be rendered as the document title.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.PageTitle",
          "Common.TypeNameIdentifier": "PageTitle",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 17971821,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Web.PageTitle",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Web.PageTitle\">\r\n            <summary>\r\n            Enables rendering an HTML <c>&lt;title&gt;</c> to a <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> component.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Web.PageTitle"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.PageTitle.ChildContent\">\r\n            <summary>\r\n            Gets or sets the content to be rendered as the document title.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.PageTitle",
          "Common.TypeNameIdentifier": "PageTitle",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -718422063,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.PageTitle.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.PageTitle.ChildContent\">\r\n            <summary>\r\n            Gets or sets the content to be rendered as the document title.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "PageTitle"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.PageTitle.ChildContent",
          "Common.TypeNameIdentifier": "PageTitle",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 914777874,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.PageTitle.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.PageTitle.ChildContent\">\r\n            <summary>\r\n            Gets or sets the content to be rendered as the document title.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Web.PageTitle"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.PageTitle.ChildContent",
          "Common.TypeNameIdentifier": "PageTitle",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1409835899,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Web.ErrorBoundary",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Web.ErrorBoundary\">\r\n            <summary>\r\n            Captures errors thrown from its child content.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ErrorBoundary"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.ErrorBoundaryBase.ChildContent\">\r\n            <summary>\r\n            The content to be displayed when there is no error.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<System.Exception>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.ErrorBoundaryBase.ErrorContent\">\r\n            <summary>\r\n            The content to be displayed when there is an error.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ErrorContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Exception>",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaximumErrorCount",
            "TypeName": "System.Int32",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.ErrorBoundaryBase.MaximumErrorCount\">\r\n            <summary>\r\n            The maximum number of errors that can be handled. If more errors are received,\r\n            they will be treated as fatal. Calling <see cref=\"M:Microsoft.AspNetCore.Components.ErrorBoundaryBase.Recover\" /> resets the count.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "MaximumErrorCount",
              "Common.GloballyQualifiedTypeName": "global::System.Int32"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.ErrorBoundary",
          "Common.TypeNameIdentifier": "ErrorBoundary",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -535588145,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Web.ErrorBoundary",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Web.ErrorBoundary\">\r\n            <summary>\r\n            Captures errors thrown from its child content.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Web.ErrorBoundary"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.ErrorBoundaryBase.ChildContent\">\r\n            <summary>\r\n            The content to be displayed when there is no error.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<System.Exception>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.ErrorBoundaryBase.ErrorContent\">\r\n            <summary>\r\n            The content to be displayed when there is an error.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ErrorContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Exception>",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaximumErrorCount",
            "TypeName": "System.Int32",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.ErrorBoundaryBase.MaximumErrorCount\">\r\n            <summary>\r\n            The maximum number of errors that can be handled. If more errors are received,\r\n            they will be treated as fatal. Calling <see cref=\"M:Microsoft.AspNetCore.Components.ErrorBoundaryBase.Recover\" /> resets the count.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "MaximumErrorCount",
              "Common.GloballyQualifiedTypeName": "global::System.Int32"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.ErrorBoundary",
          "Common.TypeNameIdentifier": "ErrorBoundary",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -1950993612,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.ErrorBoundary.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.ErrorBoundaryBase.ChildContent\">\r\n            <summary>\r\n            The content to be displayed when there is no error.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "ErrorBoundary"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.ErrorBoundary.ChildContent",
          "Common.TypeNameIdentifier": "ErrorBoundary",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1868239127,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.ErrorBoundary.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.ErrorBoundaryBase.ChildContent\">\r\n            <summary>\r\n            The content to be displayed when there is no error.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Web.ErrorBoundary"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.ErrorBoundary.ChildContent",
          "Common.TypeNameIdentifier": "ErrorBoundary",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1447161193,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.ErrorBoundary.ErrorContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.ErrorBoundaryBase.ErrorContent\">\r\n            <summary>\r\n            The content to be displayed when there is an error.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ErrorContent",
            "ParentTag": "ErrorBoundary"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ErrorContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.ErrorBoundary.ErrorContent",
          "Common.TypeNameIdentifier": "ErrorBoundary",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1602867059,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.ErrorBoundary.ErrorContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.ErrorBoundaryBase.ErrorContent\">\r\n            <summary>\r\n            The content to be displayed when there is an error.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ErrorContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Web.ErrorBoundary"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ErrorContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.ErrorBoundary.ErrorContent",
          "Common.TypeNameIdentifier": "ErrorBoundary",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 203795366,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1\">\r\n            <summary>\r\n            Provides functionality for rendering a virtualized list of items.\r\n            </summary>\r\n            <typeparam name=\"TItem\">The <c>context</c> type for the items being rendered.</typeparam>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Virtualize"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TItem",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TItem for the Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem> component.",
            "Metadata": {
              "Common.PropertyName": "TItem",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<TItem>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.ChildContent\">\r\n            <summary>\r\n            Gets or sets the item template for the list.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment<TItem>",
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<TItem>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.ItemContent\">\r\n            <summary>\r\n            Gets or sets the item template for the list.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment<TItem>",
              "Common.PropertyName": "ItemContent",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Web.Virtualization.PlaceholderContext>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.Placeholder\">\r\n            <summary>\r\n            Gets or sets the template for items that have not yet been loaded in memory.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Placeholder",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Web.Virtualization.PlaceholderContext>",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EmptyContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.EmptyContent\">\r\n            <summary>\r\n            Gets or sets the content to show when <see cref=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.Items\" /> is empty\r\n            or when the <see cref=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderResult`1.TotalItemCount\" /> is zero.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "EmptyContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemSize",
            "TypeName": "System.Single",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.ItemSize\">\r\n            <summary>\r\n            Gets the size of each item in pixels. Defaults to 50px.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ItemSize",
              "Common.GloballyQualifiedTypeName": "global::System.Single"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemsProvider",
            "TypeName": "Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderDelegate<TItem>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.ItemsProvider\">\r\n            <summary>\r\n            Gets or sets the function providing items to the list.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderDelegate<TItem>",
              "Common.PropertyName": "ItemsProvider",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True",
              "Components.IsDelegateAwaitableResult": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Items",
            "TypeName": "System.Collections.Generic.ICollection<TItem>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.Items\">\r\n            <summary>\r\n            Gets or sets the fixed item source.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Items",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.ICollection<TItem>",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OverscanCount",
            "TypeName": "System.Int32",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.OverscanCount\">\r\n            <summary>\r\n            Gets or sets a value that determines how many additional items will be rendered\r\n            before and after the visible region. This help to reduce the frequency of rendering\r\n            during scrolling. However, higher values mean that more elements will be present\r\n            in the page.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "OverscanCount",
              "Common.GloballyQualifiedTypeName": "global::System.Int32"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SpacerElement",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.SpacerElement\">\r\n             <summary>\r\n             Gets or sets the tag name of the HTML element that will be used as the virtualization spacer.\r\n             One such element will be rendered before the visible items, and one more after them, using\r\n             an explicit \"height\" style to control the scroll range.\r\n            \r\n             The default value is \"div\". If you are placing the <see cref=\"T:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1\" /> instance inside\r\n             an element that requires a specific child tag name, consider setting that here. For example when\r\n             rendering inside a \"tbody\", consider setting <see cref=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.SpacerElement\" /> to the value \"tr\".\r\n             </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "SpacerElement",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>",
          "Common.TypeNameIdentifier": "Virtualize",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web.Virtualization",
          "Components.GenericTyped": "True",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 171065542,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1\">\r\n            <summary>\r\n            Provides functionality for rendering a virtualized list of items.\r\n            </summary>\r\n            <typeparam name=\"TItem\">The <c>context</c> type for the items being rendered.</typeparam>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TItem",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TItem for the Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem> component.",
            "Metadata": {
              "Common.PropertyName": "TItem",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<TItem>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.ChildContent\">\r\n            <summary>\r\n            Gets or sets the item template for the list.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment<TItem>",
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<TItem>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.ItemContent\">\r\n            <summary>\r\n            Gets or sets the item template for the list.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment<TItem>",
              "Common.PropertyName": "ItemContent",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Web.Virtualization.PlaceholderContext>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.Placeholder\">\r\n            <summary>\r\n            Gets or sets the template for items that have not yet been loaded in memory.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Placeholder",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Web.Virtualization.PlaceholderContext>",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EmptyContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.EmptyContent\">\r\n            <summary>\r\n            Gets or sets the content to show when <see cref=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.Items\" /> is empty\r\n            or when the <see cref=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderResult`1.TotalItemCount\" /> is zero.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "EmptyContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemSize",
            "TypeName": "System.Single",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.ItemSize\">\r\n            <summary>\r\n            Gets the size of each item in pixels. Defaults to 50px.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ItemSize",
              "Common.GloballyQualifiedTypeName": "global::System.Single"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemsProvider",
            "TypeName": "Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderDelegate<TItem>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.ItemsProvider\">\r\n            <summary>\r\n            Gets or sets the function providing items to the list.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderDelegate<TItem>",
              "Common.PropertyName": "ItemsProvider",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True",
              "Components.IsDelegateAwaitableResult": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Items",
            "TypeName": "System.Collections.Generic.ICollection<TItem>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.Items\">\r\n            <summary>\r\n            Gets or sets the fixed item source.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Items",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.ICollection<TItem>",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OverscanCount",
            "TypeName": "System.Int32",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.OverscanCount\">\r\n            <summary>\r\n            Gets or sets a value that determines how many additional items will be rendered\r\n            before and after the visible region. This help to reduce the frequency of rendering\r\n            during scrolling. However, higher values mean that more elements will be present\r\n            in the page.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "OverscanCount",
              "Common.GloballyQualifiedTypeName": "global::System.Int32"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SpacerElement",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.SpacerElement\">\r\n             <summary>\r\n             Gets or sets the tag name of the HTML element that will be used as the virtualization spacer.\r\n             One such element will be rendered before the visible items, and one more after them, using\r\n             an explicit \"height\" style to control the scroll range.\r\n            \r\n             The default value is \"div\". If you are placing the <see cref=\"T:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1\" /> instance inside\r\n             an element that requires a specific child tag name, consider setting that here. For example when\r\n             rendering inside a \"tbody\", consider setting <see cref=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.SpacerElement\" /> to the value \"tr\".\r\n             </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "SpacerElement",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>",
          "Common.TypeNameIdentifier": "Virtualize",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web.Virtualization",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -450476694,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.ChildContent\">\r\n            <summary>\r\n            Gets or sets the item template for the list.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Virtualize"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ChildContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ChildContent",
          "Common.TypeNameIdentifier": "Virtualize",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web.Virtualization",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1344165400,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.ChildContent\">\r\n            <summary>\r\n            Gets or sets the item template for the list.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ChildContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ChildContent",
          "Common.TypeNameIdentifier": "Virtualize",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web.Virtualization",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -234575676,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ItemContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.ItemContent\">\r\n            <summary>\r\n            Gets or sets the item template for the list.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ItemContent",
            "ParentTag": "Virtualize"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ItemContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ItemContent",
          "Common.TypeNameIdentifier": "Virtualize",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web.Virtualization",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1442329471,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ItemContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.ItemContent\">\r\n            <summary>\r\n            Gets or sets the item template for the list.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ItemContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ItemContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ItemContent",
          "Common.TypeNameIdentifier": "Virtualize",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web.Virtualization",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 163231617,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.Placeholder",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.Placeholder\">\r\n            <summary>\r\n            Gets or sets the template for items that have not yet been loaded in memory.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Placeholder",
            "ParentTag": "Virtualize"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'Placeholder' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.Placeholder",
          "Common.TypeNameIdentifier": "Virtualize",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web.Virtualization",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1942416753,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.Placeholder",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.Placeholder\">\r\n            <summary>\r\n            Gets or sets the template for items that have not yet been loaded in memory.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Placeholder",
            "ParentTag": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'Placeholder' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.Placeholder",
          "Common.TypeNameIdentifier": "Virtualize",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web.Virtualization",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1948725454,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.EmptyContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.EmptyContent\">\r\n            <summary>\r\n            Gets or sets the content to show when <see cref=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.Items\" /> is empty\r\n            or when the <see cref=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderResult`1.TotalItemCount\" /> is zero.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "EmptyContent",
            "ParentTag": "Virtualize"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.EmptyContent",
          "Common.TypeNameIdentifier": "Virtualize",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web.Virtualization",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 6556449,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.EmptyContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.EmptyContent\">\r\n            <summary>\r\n            Gets or sets the content to show when <see cref=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.Items\" /> is empty\r\n            or when the <see cref=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderResult`1.TotalItemCount\" /> is zero.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "EmptyContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.EmptyContent",
          "Common.TypeNameIdentifier": "Virtualize",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web.Virtualization",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1399034703,
        "Kind": "Components.EventHandler",
        "Name": "onfocus",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onfocus' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfocus",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfocus:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfocus:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onfocus",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>",
            "Documentation": "Sets the '@onfocus' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onfocus"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onfocus' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onfocus' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.FocusEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1751411248,
        "Kind": "Components.EventHandler",
        "Name": "onblur",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onblur' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onblur",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onblur:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onblur:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onblur",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>",
            "Documentation": "Sets the '@onblur' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onblur"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onblur' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onblur' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.FocusEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1606121204,
        "Kind": "Components.EventHandler",
        "Name": "onfocusin",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onfocusin' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfocusin",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfocusin:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfocusin:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onfocusin",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>",
            "Documentation": "Sets the '@onfocusin' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onfocusin"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onfocusin' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onfocusin' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.FocusEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -532714912,
        "Kind": "Components.EventHandler",
        "Name": "onfocusout",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onfocusout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfocusout",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfocusout:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfocusout:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onfocusout",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>",
            "Documentation": "Sets the '@onfocusout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onfocusout"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onfocusout' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onfocusout' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.FocusEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1868236255,
        "Kind": "Components.EventHandler",
        "Name": "onmouseover",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onmouseover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseover",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseover:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseover:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onmouseover",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "Sets the '@onmouseover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onmouseover"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmouseover' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onmouseover' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.MouseEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 40107905,
        "Kind": "Components.EventHandler",
        "Name": "onmouseout",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onmouseout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseout",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseout:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseout:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onmouseout",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "Sets the '@onmouseout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onmouseout"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmouseout' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onmouseout' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.MouseEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -2130062993,
        "Kind": "Components.EventHandler",
        "Name": "onmouseleave",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onmouseleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseleave",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseleave:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseleave:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onmouseleave",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "Sets the '@onmouseleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onmouseleave"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmouseleave' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onmouseleave' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.MouseEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -931558306,
        "Kind": "Components.EventHandler",
        "Name": "onmouseenter",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onmouseenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseenter",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseenter:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseenter:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onmouseenter",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "Sets the '@onmouseenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onmouseenter"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmouseenter' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onmouseenter' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.MouseEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -2020381819,
        "Kind": "Components.EventHandler",
        "Name": "onmousemove",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onmousemove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmousemove",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmousemove:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmousemove:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onmousemove",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "Sets the '@onmousemove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onmousemove"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmousemove' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onmousemove' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.MouseEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1453152659,
        "Kind": "Components.EventHandler",
        "Name": "onmousedown",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onmousedown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmousedown",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmousedown:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmousedown:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onmousedown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "Sets the '@onmousedown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onmousedown"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmousedown' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onmousedown' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.MouseEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 409750016,
        "Kind": "Components.EventHandler",
        "Name": "onmouseup",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onmouseup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseup",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseup:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseup:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onmouseup",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "Sets the '@onmouseup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onmouseup"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmouseup' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onmouseup' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.MouseEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 990543607,
        "Kind": "Components.EventHandler",
        "Name": "onclick",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onclick' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onclick",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onclick:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onclick:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onclick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "Sets the '@onclick' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onclick"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onclick' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onclick' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.MouseEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -782650563,
        "Kind": "Components.EventHandler",
        "Name": "ondblclick",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ondblclick' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondblclick",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondblclick:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondblclick:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ondblclick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "Sets the '@ondblclick' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ondblclick"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondblclick' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ondblclick' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.MouseEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1111523712,
        "Kind": "Components.EventHandler",
        "Name": "onwheel",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onwheel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.WheelEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onwheel",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onwheel:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onwheel:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onwheel",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.WheelEventArgs>",
            "Documentation": "Sets the '@onwheel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.WheelEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onwheel"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onwheel' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onwheel' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.WheelEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -112630651,
        "Kind": "Components.EventHandler",
        "Name": "onmousewheel",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onmousewheel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.WheelEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmousewheel",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmousewheel:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmousewheel:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onmousewheel",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.WheelEventArgs>",
            "Documentation": "Sets the '@onmousewheel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.WheelEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onmousewheel"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmousewheel' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onmousewheel' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.WheelEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 658685146,
        "Kind": "Components.EventHandler",
        "Name": "oncontextmenu",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@oncontextmenu' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncontextmenu",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncontextmenu:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncontextmenu:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@oncontextmenu",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "Sets the '@oncontextmenu' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "oncontextmenu"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncontextmenu' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@oncontextmenu' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.MouseEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 560284016,
        "Kind": "Components.EventHandler",
        "Name": "ondrag",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ondrag' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondrag",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondrag:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondrag:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ondrag",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>",
            "Documentation": "Sets the '@ondrag' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ondrag"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondrag' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ondrag' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.DragEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 232200801,
        "Kind": "Components.EventHandler",
        "Name": "ondragend",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ondragend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragend",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragend:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragend:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ondragend",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>",
            "Documentation": "Sets the '@ondragend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ondragend"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondragend' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ondragend' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.DragEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 377317133,
        "Kind": "Components.EventHandler",
        "Name": "ondragenter",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ondragenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragenter",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragenter:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragenter:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ondragenter",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>",
            "Documentation": "Sets the '@ondragenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ondragenter"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondragenter' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ondragenter' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.DragEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -2107017503,
        "Kind": "Components.EventHandler",
        "Name": "ondragleave",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ondragleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragleave",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragleave:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragleave:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ondragleave",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>",
            "Documentation": "Sets the '@ondragleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ondragleave"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondragleave' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ondragleave' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.DragEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1276012730,
        "Kind": "Components.EventHandler",
        "Name": "ondragover",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ondragover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragover",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragover:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragover:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ondragover",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>",
            "Documentation": "Sets the '@ondragover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ondragover"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondragover' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ondragover' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.DragEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -450529923,
        "Kind": "Components.EventHandler",
        "Name": "ondragstart",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ondragstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragstart",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragstart:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragstart:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ondragstart",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>",
            "Documentation": "Sets the '@ondragstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ondragstart"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondragstart' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ondragstart' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.DragEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1203455251,
        "Kind": "Components.EventHandler",
        "Name": "ondrop",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ondrop' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondrop",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondrop:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondrop:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ondrop",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>",
            "Documentation": "Sets the '@ondrop' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ondrop"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondrop' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ondrop' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.DragEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1782621474,
        "Kind": "Components.EventHandler",
        "Name": "onkeydown",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onkeydown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onkeydown",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onkeydown:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onkeydown:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onkeydown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "Sets the '@onkeydown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onkeydown"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onkeydown' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onkeydown' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.KeyboardEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1008755930,
        "Kind": "Components.EventHandler",
        "Name": "onkeyup",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onkeyup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onkeyup",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onkeyup:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onkeyup:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onkeyup",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "Sets the '@onkeyup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onkeyup"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onkeyup' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onkeyup' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.KeyboardEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1583573398,
        "Kind": "Components.EventHandler",
        "Name": "onkeypress",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onkeypress' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onkeypress",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onkeypress:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onkeypress:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onkeypress",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "Sets the '@onkeypress' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onkeypress"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onkeypress' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onkeypress' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.KeyboardEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1483817391,
        "Kind": "Components.EventHandler",
        "Name": "onchange",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onchange' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.ChangeEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onchange",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onchange:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onchange:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onchange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>",
            "Documentation": "Sets the '@onchange' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.ChangeEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onchange"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onchange' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onchange' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.ChangeEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -755204545,
        "Kind": "Components.EventHandler",
        "Name": "oninput",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@oninput' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.ChangeEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oninput",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oninput:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oninput:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@oninput",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>",
            "Documentation": "Sets the '@oninput' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.ChangeEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "oninput"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@oninput' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@oninput' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.ChangeEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 217073026,
        "Kind": "Components.EventHandler",
        "Name": "oninvalid",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@oninvalid' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oninvalid",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oninvalid:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oninvalid:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@oninvalid",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@oninvalid' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "oninvalid"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@oninvalid' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@oninvalid' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -407382820,
        "Kind": "Components.EventHandler",
        "Name": "onreset",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onreset' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onreset",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onreset:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onreset:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onreset",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onreset' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onreset"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onreset' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onreset' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -562978570,
        "Kind": "Components.EventHandler",
        "Name": "onselect",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onselect' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onselect",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onselect:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onselect:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onselect",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onselect' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onselect"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onselect' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onselect' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -612428015,
        "Kind": "Components.EventHandler",
        "Name": "onselectstart",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onselectstart' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onselectstart",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onselectstart:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onselectstart:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onselectstart",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onselectstart' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onselectstart"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onselectstart' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onselectstart' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1326554228,
        "Kind": "Components.EventHandler",
        "Name": "onselectionchange",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onselectionchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onselectionchange",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onselectionchange:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onselectionchange:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onselectionchange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onselectionchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onselectionchange"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onselectionchange' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onselectionchange' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1518871094,
        "Kind": "Components.EventHandler",
        "Name": "onsubmit",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onsubmit' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onsubmit",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onsubmit:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onsubmit:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onsubmit",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onsubmit' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onsubmit"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onsubmit' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onsubmit' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 299791796,
        "Kind": "Components.EventHandler",
        "Name": "onbeforecopy",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onbeforecopy' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforecopy",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforecopy:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforecopy:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onbeforecopy",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onbeforecopy' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onbeforecopy"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onbeforecopy' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onbeforecopy' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1516017036,
        "Kind": "Components.EventHandler",
        "Name": "onbeforecut",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onbeforecut' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforecut",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforecut:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforecut:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onbeforecut",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onbeforecut' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onbeforecut"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onbeforecut' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onbeforecut' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1378882504,
        "Kind": "Components.EventHandler",
        "Name": "onbeforepaste",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onbeforepaste' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforepaste",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforepaste:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforepaste:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onbeforepaste",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onbeforepaste' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onbeforepaste"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onbeforepaste' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onbeforepaste' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -2015733801,
        "Kind": "Components.EventHandler",
        "Name": "oncopy",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@oncopy' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncopy",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncopy:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncopy:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@oncopy",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>",
            "Documentation": "Sets the '@oncopy' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "oncopy"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncopy' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@oncopy' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.ClipboardEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -799881749,
        "Kind": "Components.EventHandler",
        "Name": "oncut",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@oncut' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncut",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncut:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncut:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@oncut",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>",
            "Documentation": "Sets the '@oncut' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "oncut"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncut' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@oncut' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.ClipboardEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 488197444,
        "Kind": "Components.EventHandler",
        "Name": "onpaste",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onpaste' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpaste",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpaste:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpaste:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onpaste",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>",
            "Documentation": "Sets the '@onpaste' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onpaste"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpaste' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onpaste' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.ClipboardEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 620237184,
        "Kind": "Components.EventHandler",
        "Name": "ontouchcancel",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ontouchcancel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchcancel",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchcancel:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchcancel:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ontouchcancel",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>",
            "Documentation": "Sets the '@ontouchcancel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ontouchcancel"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchcancel' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ontouchcancel' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.TouchEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1402060012,
        "Kind": "Components.EventHandler",
        "Name": "ontouchend",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ontouchend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchend",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchend:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchend:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ontouchend",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>",
            "Documentation": "Sets the '@ontouchend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ontouchend"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchend' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ontouchend' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.TouchEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1287410035,
        "Kind": "Components.EventHandler",
        "Name": "ontouchmove",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ontouchmove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchmove",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchmove:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchmove:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ontouchmove",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>",
            "Documentation": "Sets the '@ontouchmove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ontouchmove"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchmove' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ontouchmove' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.TouchEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1375257910,
        "Kind": "Components.EventHandler",
        "Name": "ontouchstart",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ontouchstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchstart",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchstart:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchstart:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ontouchstart",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>",
            "Documentation": "Sets the '@ontouchstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ontouchstart"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchstart' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ontouchstart' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.TouchEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 348060781,
        "Kind": "Components.EventHandler",
        "Name": "ontouchenter",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ontouchenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchenter",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchenter:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchenter:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ontouchenter",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>",
            "Documentation": "Sets the '@ontouchenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ontouchenter"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchenter' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ontouchenter' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.TouchEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 878454258,
        "Kind": "Components.EventHandler",
        "Name": "ontouchleave",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ontouchleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchleave",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchleave:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchleave:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ontouchleave",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>",
            "Documentation": "Sets the '@ontouchleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ontouchleave"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchleave' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ontouchleave' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.TouchEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1812323425,
        "Kind": "Components.EventHandler",
        "Name": "ongotpointercapture",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ongotpointercapture' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ongotpointercapture",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ongotpointercapture:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ongotpointercapture:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ongotpointercapture",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>",
            "Documentation": "Sets the '@ongotpointercapture' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ongotpointercapture"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ongotpointercapture' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ongotpointercapture' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.PointerEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -475986002,
        "Kind": "Components.EventHandler",
        "Name": "onlostpointercapture",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onlostpointercapture' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onlostpointercapture",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onlostpointercapture:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onlostpointercapture:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onlostpointercapture",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>",
            "Documentation": "Sets the '@onlostpointercapture' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onlostpointercapture"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onlostpointercapture' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onlostpointercapture' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.PointerEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1815297801,
        "Kind": "Components.EventHandler",
        "Name": "onpointercancel",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onpointercancel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointercancel",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointercancel:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointercancel:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onpointercancel",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>",
            "Documentation": "Sets the '@onpointercancel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onpointercancel"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointercancel' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onpointercancel' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.PointerEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -213216706,
        "Kind": "Components.EventHandler",
        "Name": "onpointerdown",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onpointerdown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerdown",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerdown:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerdown:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onpointerdown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>",
            "Documentation": "Sets the '@onpointerdown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onpointerdown"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerdown' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onpointerdown' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.PointerEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 191034168,
        "Kind": "Components.EventHandler",
        "Name": "onpointerenter",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onpointerenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerenter",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerenter:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerenter:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onpointerenter",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>",
            "Documentation": "Sets the '@onpointerenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onpointerenter"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerenter' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onpointerenter' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.PointerEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 777826356,
        "Kind": "Components.EventHandler",
        "Name": "onpointerleave",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onpointerleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerleave",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerleave:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerleave:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onpointerleave",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>",
            "Documentation": "Sets the '@onpointerleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onpointerleave"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerleave' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onpointerleave' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.PointerEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 216326149,
        "Kind": "Components.EventHandler",
        "Name": "onpointermove",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onpointermove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointermove",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointermove:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointermove:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onpointermove",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>",
            "Documentation": "Sets the '@onpointermove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onpointermove"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointermove' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onpointermove' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.PointerEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -949007065,
        "Kind": "Components.EventHandler",
        "Name": "onpointerout",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onpointerout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerout",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerout:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerout:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onpointerout",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>",
            "Documentation": "Sets the '@onpointerout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onpointerout"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerout' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onpointerout' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.PointerEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1069923850,
        "Kind": "Components.EventHandler",
        "Name": "onpointerover",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onpointerover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerover",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerover:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerover:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onpointerover",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>",
            "Documentation": "Sets the '@onpointerover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onpointerover"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerover' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onpointerover' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.PointerEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1926689187,
        "Kind": "Components.EventHandler",
        "Name": "onpointerup",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onpointerup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerup",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerup:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerup:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onpointerup",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>",
            "Documentation": "Sets the '@onpointerup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onpointerup"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerup' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onpointerup' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.PointerEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1630408330,
        "Kind": "Components.EventHandler",
        "Name": "oncanplay",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@oncanplay' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncanplay",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncanplay:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncanplay:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@oncanplay",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@oncanplay' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "oncanplay"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncanplay' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@oncanplay' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 2070224893,
        "Kind": "Components.EventHandler",
        "Name": "oncanplaythrough",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@oncanplaythrough' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncanplaythrough",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncanplaythrough:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncanplaythrough:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@oncanplaythrough",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@oncanplaythrough' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "oncanplaythrough"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncanplaythrough' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@oncanplaythrough' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1667533498,
        "Kind": "Components.EventHandler",
        "Name": "oncuechange",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@oncuechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncuechange",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncuechange:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncuechange:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@oncuechange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@oncuechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "oncuechange"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncuechange' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@oncuechange' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -23902154,
        "Kind": "Components.EventHandler",
        "Name": "ondurationchange",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ondurationchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondurationchange",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondurationchange:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondurationchange:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ondurationchange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@ondurationchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ondurationchange"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondurationchange' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ondurationchange' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 718741342,
        "Kind": "Components.EventHandler",
        "Name": "onemptied",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onemptied' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onemptied",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onemptied:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onemptied:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onemptied",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onemptied' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onemptied"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onemptied' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onemptied' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1899194867,
        "Kind": "Components.EventHandler",
        "Name": "onpause",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onpause' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpause",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpause:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpause:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onpause",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onpause' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onpause"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpause' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onpause' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1618615466,
        "Kind": "Components.EventHandler",
        "Name": "onplay",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onplay' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onplay",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onplay:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onplay:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onplay",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onplay' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onplay"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onplay' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onplay' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1262164451,
        "Kind": "Components.EventHandler",
        "Name": "onplaying",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onplaying' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onplaying",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onplaying:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onplaying:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onplaying",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onplaying' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onplaying"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onplaying' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onplaying' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1253162280,
        "Kind": "Components.EventHandler",
        "Name": "onratechange",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onratechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onratechange",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onratechange:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onratechange:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onratechange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onratechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onratechange"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onratechange' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onratechange' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -940525593,
        "Kind": "Components.EventHandler",
        "Name": "onseeked",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onseeked' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onseeked",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onseeked:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onseeked:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onseeked",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onseeked' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onseeked"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onseeked' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onseeked' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 359387500,
        "Kind": "Components.EventHandler",
        "Name": "onseeking",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onseeking' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onseeking",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onseeking:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onseeking:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onseeking",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onseeking' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onseeking"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onseeking' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onseeking' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1944733893,
        "Kind": "Components.EventHandler",
        "Name": "onstalled",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onstalled' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onstalled",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onstalled:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onstalled:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onstalled",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onstalled' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onstalled"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onstalled' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onstalled' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 2018420546,
        "Kind": "Components.EventHandler",
        "Name": "onstop",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onstop' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onstop",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onstop:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onstop:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onstop",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onstop' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onstop"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onstop' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onstop' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1273102692,
        "Kind": "Components.EventHandler",
        "Name": "onsuspend",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onsuspend' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onsuspend",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onsuspend:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onsuspend:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onsuspend",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onsuspend' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onsuspend"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onsuspend' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onsuspend' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1400624220,
        "Kind": "Components.EventHandler",
        "Name": "ontimeupdate",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ontimeupdate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontimeupdate",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontimeupdate:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontimeupdate:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ontimeupdate",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@ontimeupdate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ontimeupdate"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontimeupdate' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ontimeupdate' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1570454282,
        "Kind": "Components.EventHandler",
        "Name": "onvolumechange",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onvolumechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onvolumechange",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onvolumechange:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onvolumechange:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onvolumechange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onvolumechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onvolumechange"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onvolumechange' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onvolumechange' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1587987273,
        "Kind": "Components.EventHandler",
        "Name": "onwaiting",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onwaiting' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onwaiting",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onwaiting:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onwaiting:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onwaiting",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onwaiting' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onwaiting"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onwaiting' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onwaiting' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1992844042,
        "Kind": "Components.EventHandler",
        "Name": "onloadstart",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onloadstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onloadstart",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onloadstart:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onloadstart:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onloadstart",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>",
            "Documentation": "Sets the '@onloadstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onloadstart"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onloadstart' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onloadstart' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.ProgressEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1615519298,
        "Kind": "Components.EventHandler",
        "Name": "ontimeout",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ontimeout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontimeout",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontimeout:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontimeout:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ontimeout",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>",
            "Documentation": "Sets the '@ontimeout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ontimeout"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontimeout' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ontimeout' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.ProgressEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -338828295,
        "Kind": "Components.EventHandler",
        "Name": "onabort",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onabort' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onabort",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onabort:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onabort:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onabort",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>",
            "Documentation": "Sets the '@onabort' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onabort"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onabort' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onabort' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.ProgressEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1754065535,
        "Kind": "Components.EventHandler",
        "Name": "onload",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onload' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onload",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onload:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onload:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onload",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>",
            "Documentation": "Sets the '@onload' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onload"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onload' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onload' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.ProgressEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1245527580,
        "Kind": "Components.EventHandler",
        "Name": "onloadend",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onloadend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onloadend",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onloadend:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onloadend:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onloadend",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>",
            "Documentation": "Sets the '@onloadend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onloadend"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onloadend' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onloadend' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.ProgressEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -86829840,
        "Kind": "Components.EventHandler",
        "Name": "onprogress",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onprogress' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onprogress",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onprogress:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onprogress:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onprogress",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>",
            "Documentation": "Sets the '@onprogress' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onprogress"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onprogress' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onprogress' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.ProgressEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 86851824,
        "Kind": "Components.EventHandler",
        "Name": "onerror",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onerror' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ErrorEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onerror",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onerror:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onerror:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onerror",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ErrorEventArgs>",
            "Documentation": "Sets the '@onerror' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ErrorEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onerror"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onerror' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onerror' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.ErrorEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -909229911,
        "Kind": "Components.EventHandler",
        "Name": "onactivate",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onactivate",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onactivate:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onactivate:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onactivate",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onactivate"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onactivate' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onactivate' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -789399766,
        "Kind": "Components.EventHandler",
        "Name": "onbeforeactivate",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onbeforeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforeactivate",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforeactivate:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforeactivate:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onbeforeactivate",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onbeforeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onbeforeactivate"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onbeforeactivate' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onbeforeactivate' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1311074011,
        "Kind": "Components.EventHandler",
        "Name": "onbeforedeactivate",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onbeforedeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforedeactivate",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforedeactivate:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforedeactivate:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onbeforedeactivate",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onbeforedeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onbeforedeactivate"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onbeforedeactivate' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onbeforedeactivate' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 2079298715,
        "Kind": "Components.EventHandler",
        "Name": "ondeactivate",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ondeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondeactivate",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondeactivate:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondeactivate:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ondeactivate",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@ondeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ondeactivate"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondeactivate' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ondeactivate' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1466872314,
        "Kind": "Components.EventHandler",
        "Name": "onended",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onended' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onended",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onended:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onended:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onended",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onended' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onended"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onended' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onended' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -471052969,
        "Kind": "Components.EventHandler",
        "Name": "onfullscreenchange",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onfullscreenchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfullscreenchange",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfullscreenchange:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfullscreenchange:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onfullscreenchange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onfullscreenchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onfullscreenchange"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onfullscreenchange' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onfullscreenchange' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -889032448,
        "Kind": "Components.EventHandler",
        "Name": "onfullscreenerror",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onfullscreenerror' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfullscreenerror",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfullscreenerror:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfullscreenerror:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onfullscreenerror",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onfullscreenerror' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onfullscreenerror"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onfullscreenerror' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onfullscreenerror' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1402779484,
        "Kind": "Components.EventHandler",
        "Name": "onloadeddata",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onloadeddata' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onloadeddata",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onloadeddata:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onloadeddata:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onloadeddata",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onloadeddata' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onloadeddata"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onloadeddata' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onloadeddata' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 229926430,
        "Kind": "Components.EventHandler",
        "Name": "onloadedmetadata",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onloadedmetadata' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onloadedmetadata",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onloadedmetadata:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onloadedmetadata:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onloadedmetadata",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onloadedmetadata' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onloadedmetadata"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onloadedmetadata' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onloadedmetadata' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1515127215,
        "Kind": "Components.EventHandler",
        "Name": "onpointerlockchange",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onpointerlockchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerlockchange",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerlockchange:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerlockchange:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onpointerlockchange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onpointerlockchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onpointerlockchange"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerlockchange' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onpointerlockchange' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 912025349,
        "Kind": "Components.EventHandler",
        "Name": "onpointerlockerror",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onpointerlockerror' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerlockerror",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerlockerror:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerlockerror:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onpointerlockerror",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onpointerlockerror' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onpointerlockerror"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerlockerror' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onpointerlockerror' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 510052933,
        "Kind": "Components.EventHandler",
        "Name": "onreadystatechange",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onreadystatechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onreadystatechange",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onreadystatechange:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onreadystatechange:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onreadystatechange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onreadystatechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onreadystatechange"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onreadystatechange' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onreadystatechange' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1669158536,
        "Kind": "Components.EventHandler",
        "Name": "onscroll",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onscroll' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onscroll",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onscroll:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onscroll:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onscroll",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onscroll' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onscroll"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onscroll' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onscroll' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 829278138,
        "Kind": "Components.EventHandler",
        "Name": "ontoggle",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ontoggle' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontoggle",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontoggle:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontoggle:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ontoggle",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@ontoggle' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ontoggle"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontoggle' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ontoggle' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 973234166,
        "Kind": "Components.EventHandler",
        "Name": "oncancel",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@oncancel' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncancel",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncancel:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@oncancel",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@oncancel' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "oncancel"
            },
            "BoundAttributeParameters": [
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@oncancel' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1308630502,
        "Kind": "Components.EventHandler",
        "Name": "onclose",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onclose' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onclose",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onclose:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onclose",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onclose' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onclose"
            },
            "BoundAttributeParameters": [
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onclose' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1158550806,
        "Kind": "Components.Splat",
        "Name": "Attributes",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Merges a collection of attributes into the current element or component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@attributes",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Splat",
            "Name": "@attributes",
            "TypeName": "System.Object",
            "Documentation": "Merges a collection of attributes into the current element or component.",
            "Metadata": {
              "Common.PropertyName": "Attributes",
              "Common.DirectiveAttribute": "True"
            }
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Attributes",
          "Components.IsSpecialKind": "Components.Splat",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 556384540,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.Razor",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting elements containing attributes with URL expected values.\r\n            </summary>\r\n            <remarks>Resolves URLs starting with '~/' (relative to the application's 'webroot' setting) that are not\r\n            targeted by other <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" />s. Runs prior to other <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" />s to ensure\r\n            application-relative URLs are resolved.</remarks>\r\n        </member>",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "itemid",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "a",
            "Attributes": [
              {
                "Name": "href",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "applet",
            "Attributes": [
              {
                "Name": "archive",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "area",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "href",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "audio",
            "Attributes": [
              {
                "Name": "src",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "base",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "href",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "blockquote",
            "Attributes": [
              {
                "Name": "cite",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "button",
            "Attributes": [
              {
                "Name": "formaction",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "del",
            "Attributes": [
              {
                "Name": "cite",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "embed",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "src",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "form",
            "Attributes": [
              {
                "Name": "action",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "html",
            "Attributes": [
              {
                "Name": "manifest",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "iframe",
            "Attributes": [
              {
                "Name": "src",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "img",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "src",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "img",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "srcset",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "src",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "formaction",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "ins",
            "Attributes": [
              {
                "Name": "cite",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "link",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "href",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "menuitem",
            "Attributes": [
              {
                "Name": "icon",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "object",
            "Attributes": [
              {
                "Name": "archive",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "object",
            "Attributes": [
              {
                "Name": "data",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "q",
            "Attributes": [
              {
                "Name": "cite",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "script",
            "Attributes": [
              {
                "Name": "src",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "source",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "src",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "source",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "srcset",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "track",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "src",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "video",
            "Attributes": [
              {
                "Name": "src",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "video",
            "Attributes": [
              {
                "Name": "poster",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper",
          "Common.TypeNameIdentifier": "UrlResolutionTagHelper",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Mvc.Razor.TagHelpers",
          "Runtime.Name": "ITagHelper"
        }
      },
      {
        "HashCode": -1584359546,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;a&gt; elements.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "a",
            "Attributes": [
              {
                "Name": "asp-action"
              }
            ]
          },
          {
            "TagName": "a",
            "Attributes": [
              {
                "Name": "asp-controller"
              }
            ]
          },
          {
            "TagName": "a",
            "Attributes": [
              {
                "Name": "asp-area"
              }
            ]
          },
          {
            "TagName": "a",
            "Attributes": [
              {
                "Name": "asp-page"
              }
            ]
          },
          {
            "TagName": "a",
            "Attributes": [
              {
                "Name": "asp-page-handler"
              }
            ]
          },
          {
            "TagName": "a",
            "Attributes": [
              {
                "Name": "asp-fragment"
              }
            ]
          },
          {
            "TagName": "a",
            "Attributes": [
              {
                "Name": "asp-host"
              }
            ]
          },
          {
            "TagName": "a",
            "Attributes": [
              {
                "Name": "asp-protocol"
              }
            ]
          },
          {
            "TagName": "a",
            "Attributes": [
              {
                "Name": "asp-route"
              }
            ]
          },
          {
            "TagName": "a",
            "Attributes": [
              {
                "Name": "asp-all-route-data"
              }
            ]
          },
          {
            "TagName": "a",
            "Attributes": [
              {
                "Name": "asp-route-",
                "NameComparison": 1
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "asp-action",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Action\">\r\n            <summary>\r\n            The name of the action method.\r\n            </summary>\r\n            <remarks>\r\n            Must be <c>null</c> if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Route\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Page\" /> is non-<c>null</c>.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Action"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-controller",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Controller\">\r\n            <summary>\r\n            The name of the controller.\r\n            </summary>\r\n            <remarks>\r\n            Must be <c>null</c> if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Route\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Page\" /> is non-<c>null</c>.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Controller"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-area",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Area\">\r\n            <summary>\r\n            The name of the area.\r\n            </summary>\r\n            <remarks>\r\n            Must be <c>null</c> if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Route\" /> is non-<c>null</c>.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Area"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-page",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Page\">\r\n            <summary>\r\n            The name of the page.\r\n            </summary>\r\n            <remarks>\r\n            Must be <c>null</c> if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Route\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Action\" />, <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Controller\" />\r\n            is non-<c>null</c>.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Page"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-page-handler",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.PageHandler\">\r\n            <summary>\r\n            The name of the page handler.\r\n            </summary>\r\n            <remarks>\r\n            Must be <c>null</c> if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Route\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Action\" />, or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Controller\" />\r\n            is non-<c>null</c>.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "PageHandler"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-protocol",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Protocol\">\r\n            <summary>\r\n            The protocol for the URL, such as \"http\" or \"https\".\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Protocol"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-host",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Host\">\r\n            <summary>\r\n            The host name.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Host"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fragment",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Fragment\">\r\n            <summary>\r\n            The URL fragment name.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Fragment"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-route",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Route\">\r\n            <summary>\r\n            Name of the route.\r\n            </summary>\r\n            <remarks>\r\n            Must be <c>null</c> if one of <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Action\" />, <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Controller\" />, <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Area\" />\r\n            or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Page\" /> is non-<c>null</c>.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Route"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-all-route-data",
            "TypeName": "System.Collections.Generic.IDictionary<System.String, System.String>",
            "IndexerNamePrefix": "asp-route-",
            "IndexerTypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.RouteValues\">\r\n            <summary>\r\n            Additional parameters for the route.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "RouteValues"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper",
          "Common.TypeNameIdentifier": "AnchorTagHelper",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Mvc.TagHelpers",
          "Runtime.Name": "ITagHelper"
        }
      },
      {
        "HashCode": 1874533593,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.TagHelper\" /> implementation targeting &lt;cache&gt; elements.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "cache"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "priority",
            "TypeName": "Microsoft.Extensions.Caching.Memory.CacheItemPriority?",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelper.Priority\">\r\n            <summary>\r\n            Gets or sets the <see cref=\"T:Microsoft.Extensions.Caching.Memory.CacheItemPriority\" /> policy for the cache entry.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Priority"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.VaryBy\">\r\n            <summary>\r\n            Gets or sets a <see cref=\"T:System.String\" /> to vary the cached result by.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "VaryBy"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by-header",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.VaryByHeader\">\r\n            <summary>\r\n            Gets or sets a comma-delimited set of HTTP request headers to vary the cached result by.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "VaryByHeader"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by-query",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.VaryByQuery\">\r\n            <summary>\r\n            Gets or sets a comma-delimited set of query parameters to vary the cached result by.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "VaryByQuery"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by-route",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.VaryByRoute\">\r\n            <summary>\r\n            Gets or sets a comma-delimited set of route data parameters to vary the cached result by.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "VaryByRoute"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by-cookie",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.VaryByCookie\">\r\n            <summary>\r\n            Gets or sets a comma-delimited set of cookie names to vary the cached result by.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "VaryByCookie"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by-user",
            "TypeName": "System.Boolean",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.VaryByUser\">\r\n            <summary>\r\n            Gets or sets a value that determines if the cached result is to be varied by the Identity for the logged in\r\n            <see cref=\"P:Microsoft.AspNetCore.Http.HttpContext.User\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "VaryByUser"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by-culture",
            "TypeName": "System.Boolean",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.VaryByCulture\">\r\n            <summary>\r\n            Gets or sets a value that determines if the cached result is to be varied by request culture.\r\n            <para>\r\n            Setting this to <c>true</c> would result in the result to be varied by <see cref=\"P:System.Globalization.CultureInfo.CurrentCulture\" />\r\n            and <see cref=\"P:System.Globalization.CultureInfo.CurrentUICulture\" />.\r\n            </para>\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "VaryByCulture"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "expires-on",
            "TypeName": "System.DateTimeOffset?",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.ExpiresOn\">\r\n            <summary>\r\n            Gets or sets the exact <see cref=\"T:System.DateTimeOffset\" /> the cache entry should be evicted.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ExpiresOn"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "expires-after",
            "TypeName": "System.TimeSpan?",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.ExpiresAfter\">\r\n            <summary>\r\n            Gets or sets the duration, from the time the cache entry was added, when it should be evicted.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ExpiresAfter"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "expires-sliding",
            "TypeName": "System.TimeSpan?",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.ExpiresSliding\">\r\n            <summary>\r\n            Gets or sets the duration from last access that the cache entry should be evicted.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ExpiresSliding"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "enabled",
            "TypeName": "System.Boolean",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.Enabled\">\r\n            <summary>\r\n            Gets or sets the value which determines if the tag helper is enabled or not.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelper",
          "Common.TypeNameIdentifier": "CacheTagHelper",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Mvc.TagHelpers",
          "Runtime.Name": "ITagHelper"
        }
      },
      {
        "HashCode": 745758319,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.ComponentTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.ComponentTagHelper\">\r\n            <summary>\r\n            A <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.TagHelper\" /> that renders a Razor component.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "component",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type"
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "params",
            "TypeName": "System.Collections.Generic.IDictionary<System.String, System.Object>",
            "IndexerNamePrefix": "param-",
            "IndexerTypeName": "System.Object",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ComponentTagHelper.Parameters\">\r\n            <summary>\r\n            Gets or sets values for component parameters.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Parameters"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "type",
            "TypeName": "System.Type",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ComponentTagHelper.ComponentType\">\r\n            <summary>\r\n            Gets or sets the component type. This value is required.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ComponentType"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "render-mode",
            "TypeName": "Microsoft.AspNetCore.Mvc.Rendering.RenderMode",
            "IsEnum": true,
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ComponentTagHelper.RenderMode\">\r\n            <summary>\r\n            Gets or sets the <see cref=\"T:Microsoft.AspNetCore.Mvc.Rendering.RenderMode\" />\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "RenderMode"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.ComponentTagHelper",
          "Common.TypeNameIdentifier": "ComponentTagHelper",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Mvc.TagHelpers",
          "Runtime.Name": "ITagHelper"
        }
      },
      {
        "HashCode": -767596600,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.DistributedCacheTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.DistributedCacheTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.TagHelper\" /> implementation targeting &lt;distributed-cache&gt; elements.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "distributed-cache",
            "Attributes": [
              {
                "Name": "name"
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "name",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.DistributedCacheTagHelper.Name\">\r\n            <summary>\r\n            Gets or sets a unique name to discriminate cached entries.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Name"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.VaryBy\">\r\n            <summary>\r\n            Gets or sets a <see cref=\"T:System.String\" /> to vary the cached result by.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "VaryBy"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by-header",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.VaryByHeader\">\r\n            <summary>\r\n            Gets or sets a comma-delimited set of HTTP request headers to vary the cached result by.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "VaryByHeader"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by-query",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.VaryByQuery\">\r\n            <summary>\r\n            Gets or sets a comma-delimited set of query parameters to vary the cached result by.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "VaryByQuery"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by-route",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.VaryByRoute\">\r\n            <summary>\r\n            Gets or sets a comma-delimited set of route data parameters to vary the cached result by.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "VaryByRoute"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by-cookie",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.VaryByCookie\">\r\n            <summary>\r\n            Gets or sets a comma-delimited set of cookie names to vary the cached result by.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "VaryByCookie"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by-user",
            "TypeName": "System.Boolean",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.VaryByUser\">\r\n            <summary>\r\n            Gets or sets a value that determines if the cached result is to be varied by the Identity for the logged in\r\n            <see cref=\"P:Microsoft.AspNetCore.Http.HttpContext.User\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "VaryByUser"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by-culture",
            "TypeName": "System.Boolean",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.VaryByCulture\">\r\n            <summary>\r\n            Gets or sets a value that determines if the cached result is to be varied by request culture.\r\n            <para>\r\n            Setting this to <c>true</c> would result in the result to be varied by <see cref=\"P:System.Globalization.CultureInfo.CurrentCulture\" />\r\n            and <see cref=\"P:System.Globalization.CultureInfo.CurrentUICulture\" />.\r\n            </para>\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "VaryByCulture"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "expires-on",
            "TypeName": "System.DateTimeOffset?",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.ExpiresOn\">\r\n            <summary>\r\n            Gets or sets the exact <see cref=\"T:System.DateTimeOffset\" /> the cache entry should be evicted.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ExpiresOn"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "expires-after",
            "TypeName": "System.TimeSpan?",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.ExpiresAfter\">\r\n            <summary>\r\n            Gets or sets the duration, from the time the cache entry was added, when it should be evicted.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ExpiresAfter"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "expires-sliding",
            "TypeName": "System.TimeSpan?",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.ExpiresSliding\">\r\n            <summary>\r\n            Gets or sets the duration from last access that the cache entry should be evicted.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ExpiresSliding"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "enabled",
            "TypeName": "System.Boolean",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.Enabled\">\r\n            <summary>\r\n            Gets or sets the value which determines if the tag helper is enabled or not.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.DistributedCacheTagHelper",
          "Common.TypeNameIdentifier": "DistributedCacheTagHelper",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Mvc.TagHelpers",
          "Runtime.Name": "ITagHelper"
        }
      },
      {
        "HashCode": 1452772882,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;environment&gt; elements that conditionally renders\r\n            content based on the current value of <see cref=\"P:Microsoft.AspNetCore.Hosting.IHostingEnvironment.EnvironmentName\" />.\r\n            If the environment is not listed in the specified <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.Names\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.Include\" />,\r\n            or if it is in <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.Exclude\" />, the content will not be rendered.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "environment"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "names",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.Names\">\r\n            <summary>\r\n            A comma separated list of environment names in which the content should be rendered.\r\n            If the current environment is also in the <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.Exclude\" /> list, the content will not be rendered.\r\n            </summary>\r\n            <remarks>\r\n            The specified environment names are compared case insensitively to the current value of\r\n            <see cref=\"P:Microsoft.AspNetCore.Hosting.IHostingEnvironment.EnvironmentName\" />.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Names"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "include",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.Include\">\r\n            <summary>\r\n            A comma separated list of environment names in which the content should be rendered.\r\n            If the current environment is also in the <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.Exclude\" /> list, the content will not be rendered.\r\n            </summary>\r\n            <remarks>\r\n            The specified environment names are compared case insensitively to the current value of\r\n            <see cref=\"P:Microsoft.AspNetCore.Hosting.IHostingEnvironment.EnvironmentName\" />.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Include"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "exclude",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.Exclude\">\r\n            <summary>\r\n            A comma separated list of environment names in which the content will not be rendered.\r\n            </summary>\r\n            <remarks>\r\n            The specified environment names are compared case insensitively to the current value of\r\n            <see cref=\"P:Microsoft.AspNetCore.Hosting.IHostingEnvironment.EnvironmentName\" />.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Exclude"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper",
          "Common.TypeNameIdentifier": "EnvironmentTagHelper",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Mvc.TagHelpers",
          "Runtime.Name": "ITagHelper"
        }
      },
      {
        "HashCode": -1382706788,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;button&gt; elements and &lt;input&gt; elements with\r\n            their <c>type</c> attribute set to <c>image</c> or <c>submit</c>.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "button",
            "Attributes": [
              {
                "Name": "asp-action"
              }
            ]
          },
          {
            "TagName": "button",
            "Attributes": [
              {
                "Name": "asp-controller"
              }
            ]
          },
          {
            "TagName": "button",
            "Attributes": [
              {
                "Name": "asp-area"
              }
            ]
          },
          {
            "TagName": "button",
            "Attributes": [
              {
                "Name": "asp-page"
              }
            ]
          },
          {
            "TagName": "button",
            "Attributes": [
              {
                "Name": "asp-page-handler"
              }
            ]
          },
          {
            "TagName": "button",
            "Attributes": [
              {
                "Name": "asp-fragment"
              }
            ]
          },
          {
            "TagName": "button",
            "Attributes": [
              {
                "Name": "asp-route"
              }
            ]
          },
          {
            "TagName": "button",
            "Attributes": [
              {
                "Name": "asp-all-route-data"
              }
            ]
          },
          {
            "TagName": "button",
            "Attributes": [
              {
                "Name": "asp-route-",
                "NameComparison": 1
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "image",
                "ValueComparison": 1
              },
              {
                "Name": "asp-action"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "image",
                "ValueComparison": 1
              },
              {
                "Name": "asp-controller"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "image",
                "ValueComparison": 1
              },
              {
                "Name": "asp-area"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "image",
                "ValueComparison": 1
              },
              {
                "Name": "asp-page"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "image",
                "ValueComparison": 1
              },
              {
                "Name": "asp-page-handler"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "image",
                "ValueComparison": 1
              },
              {
                "Name": "asp-fragment"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "image",
                "ValueComparison": 1
              },
              {
                "Name": "asp-route"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "image",
                "ValueComparison": 1
              },
              {
                "Name": "asp-all-route-data"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "image",
                "ValueComparison": 1
              },
              {
                "Name": "asp-route-",
                "NameComparison": 1
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "submit",
                "ValueComparison": 1
              },
              {
                "Name": "asp-action"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "submit",
                "ValueComparison": 1
              },
              {
                "Name": "asp-controller"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "submit",
                "ValueComparison": 1
              },
              {
                "Name": "asp-area"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "submit",
                "ValueComparison": 1
              },
              {
                "Name": "asp-page"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "submit",
                "ValueComparison": 1
              },
              {
                "Name": "asp-page-handler"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "submit",
                "ValueComparison": 1
              },
              {
                "Name": "asp-fragment"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "submit",
                "ValueComparison": 1
              },
              {
                "Name": "asp-route"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "submit",
                "ValueComparison": 1
              },
              {
                "Name": "asp-all-route-data"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "submit",
                "ValueComparison": 1
              },
              {
                "Name": "asp-route-",
                "NameComparison": 1
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "asp-action",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.Action\">\r\n            <summary>\r\n            The name of the action method.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Action"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-controller",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.Controller\">\r\n            <summary>\r\n            The name of the controller.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Controller"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-area",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.Area\">\r\n            <summary>\r\n            The name of the area.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Area"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-page",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.Page\">\r\n            <summary>\r\n            The name of the page.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Page"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-page-handler",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.PageHandler\">\r\n            <summary>\r\n            The name of the page handler.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "PageHandler"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fragment",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.Fragment\">\r\n            <summary>\r\n            Gets or sets the URL fragment.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Fragment"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-route",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.Route\">\r\n            <summary>\r\n            Name of the route.\r\n            </summary>\r\n            <remarks>\r\n            Must be <c>null</c> if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.Action\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.Controller\" /> is non-<c>null</c>.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Route"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-all-route-data",
            "TypeName": "System.Collections.Generic.IDictionary<System.String, System.String>",
            "IndexerNamePrefix": "asp-route-",
            "IndexerTypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.RouteValues\">\r\n            <summary>\r\n            Additional parameters for the route.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "RouteValues"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper",
          "Common.TypeNameIdentifier": "FormActionTagHelper",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Mvc.TagHelpers",
          "Runtime.Name": "ITagHelper"
        }
      },
      {
        "HashCode": 1981330840,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;form&gt; elements.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "form"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "asp-action",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.Action\">\r\n            <summary>\r\n            The name of the action method.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Action"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-controller",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.Controller\">\r\n            <summary>\r\n            The name of the controller.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Controller"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-area",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.Area\">\r\n            <summary>\r\n            The name of the area.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Area"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-page",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.Page\">\r\n            <summary>\r\n            The name of the page.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Page"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-page-handler",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.PageHandler\">\r\n            <summary>\r\n            The name of the page handler.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "PageHandler"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-antiforgery",
            "TypeName": "System.Boolean?",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.Antiforgery\">\r\n            <summary>\r\n            Whether the antiforgery token should be generated.\r\n            </summary>\r\n            <value>Defaults to <c>false</c> if user provides an <c>action</c> attribute\r\n            or if the <c>method</c> is <see cref=\"F:Microsoft.AspNetCore.Mvc.Rendering.FormMethod.Get\" />; <c>true</c> otherwise.</value>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Antiforgery"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fragment",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.Fragment\">\r\n            <summary>\r\n            Gets or sets the URL fragment.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Fragment"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-route",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.Route\">\r\n            <summary>\r\n            Name of the route.\r\n            </summary>\r\n            <remarks>\r\n            Must be <c>null</c> if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.Action\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.Controller\" /> is non-<c>null</c>.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Route"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-all-route-data",
            "TypeName": "System.Collections.Generic.IDictionary<System.String, System.String>",
            "IndexerNamePrefix": "asp-route-",
            "IndexerTypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.RouteValues\">\r\n            <summary>\r\n            Additional parameters for the route.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "RouteValues"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper",
          "Common.TypeNameIdentifier": "FormTagHelper",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Mvc.TagHelpers",
          "Runtime.Name": "ITagHelper"
        }
      },
      {
        "HashCode": -1800086886,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.ImageTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.ImageTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;img&gt; elements that supports file versioning.\r\n            </summary>\r\n            <remarks>\r\n            The tag helper won't process for cases with just the 'src' attribute.\r\n            </remarks>\r\n        </member>",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "img",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "asp-append-version"
              },
              {
                "Name": "src"
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "src",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ImageTagHelper.Src\">\r\n            <summary>\r\n            Source of the image.\r\n            </summary>\r\n            <remarks>\r\n            Passed through to the generated HTML in all cases.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Src"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-append-version",
            "TypeName": "System.Boolean",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ImageTagHelper.AppendVersion\">\r\n            <summary>\r\n            Value indicating if file version should be appended to the src urls.\r\n            </summary>\r\n            <remarks>\r\n            If <c>true</c> then a query string \"v\" with the encoded content of the file is added.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AppendVersion"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.ImageTagHelper",
          "Common.TypeNameIdentifier": "ImageTagHelper",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Mvc.TagHelpers",
          "Runtime.Name": "ITagHelper"
        }
      },
      {
        "HashCode": -1600560343,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;input&gt; elements with an <c>asp-for</c> attribute.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "asp-for"
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "asp-for",
            "TypeName": "Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.For\">\r\n            <summary>\r\n            An expression to be evaluated against the current model.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "For"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-format",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.Format\">\r\n            <summary>\r\n            The format string (see <see href=\"https://msdn.microsoft.com/en-us/library/txafckwd.aspx\" />) used to format the\r\n            <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.For\" /> result. Sets the generated \"value\" attribute to that formatted string.\r\n            </summary>\r\n            <remarks>\r\n            Not used if the provided (see <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.InputTypeName\" />) or calculated \"type\" attribute value is\r\n            <c>checkbox</c>, <c>password</c>, or <c>radio</c>. That is, <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.Format\" /> is used when calling\r\n            <see cref=\"M:Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator.GenerateTextBox(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer,System.String,System.Object,System.String,System.Object)\" />.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Format"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "type",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.InputTypeName\">\r\n            <summary>\r\n            The type of the &lt;input&gt; element.\r\n            </summary>\r\n            <remarks>\r\n            Passed through to the generated HTML in all cases. Also used to determine the <see cref=\"T:Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator\" />\r\n            helper to call and the default <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.Format\" /> value. A default <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.Format\" /> is not calculated\r\n            if the provided (see <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.InputTypeName\" />) or calculated \"type\" attribute value is <c>checkbox</c>,\r\n            <c>hidden</c>, <c>password</c>, or <c>radio</c>.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "InputTypeName"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "form",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.FormName\">\r\n            <summary>\r\n            The name of the associated form\r\n            </summary>\r\n            <remarks>\r\n            Used to associate a hidden checkbox tag to the respecting form when <see cref=\"T:Microsoft.AspNetCore.Mvc.Rendering.CheckBoxHiddenInputRenderMode\" /> is not <see cref=\"F:Microsoft.AspNetCore.Mvc.Rendering.CheckBoxHiddenInputRenderMode.None\" />.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "FormName"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "name",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.Name\">\r\n            <summary>\r\n            The name of the &lt;input&gt; element.\r\n            </summary>\r\n            <remarks>\r\n            Passed through to the generated HTML in all cases. Also used to determine whether <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.For\" /> is\r\n            valid with an empty <see cref=\"P:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression.Name\" />.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Name"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "value",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.Value\">\r\n            <summary>\r\n            The value of the &lt;input&gt; element.\r\n            </summary>\r\n            <remarks>\r\n            Passed through to the generated HTML in all cases. Also used to determine the generated \"checked\" attribute\r\n            if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.InputTypeName\" /> is \"radio\". Must not be <c>null</c> in that case.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper",
          "Common.TypeNameIdentifier": "InputTagHelper",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Mvc.TagHelpers",
          "Runtime.Name": "ITagHelper"
        }
      },
      {
        "HashCode": -1392187597,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.LabelTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.LabelTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;label&gt; elements with an <c>asp-for</c> attribute.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "label",
            "Attributes": [
              {
                "Name": "asp-for"
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "asp-for",
            "TypeName": "Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LabelTagHelper.For\">\r\n            <summary>\r\n            An expression to be evaluated against the current model.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "For"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.LabelTagHelper",
          "Common.TypeNameIdentifier": "LabelTagHelper",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Mvc.TagHelpers",
          "Runtime.Name": "ITagHelper"
        }
      },
      {
        "HashCode": -349681119,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;link&gt; elements that supports fallback href paths.\r\n            </summary>\r\n            <remarks>\r\n            The tag helper won't process for cases with just the 'href' attribute.\r\n            </remarks>\r\n        </member>",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "link",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "asp-href-include"
              }
            ]
          },
          {
            "TagName": "link",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "asp-href-exclude"
              }
            ]
          },
          {
            "TagName": "link",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "asp-fallback-href"
              }
            ]
          },
          {
            "TagName": "link",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "asp-fallback-href-include"
              }
            ]
          },
          {
            "TagName": "link",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "asp-fallback-href-exclude"
              }
            ]
          },
          {
            "TagName": "link",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "asp-fallback-test-class"
              }
            ]
          },
          {
            "TagName": "link",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "asp-fallback-test-property"
              }
            ]
          },
          {
            "TagName": "link",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "asp-fallback-test-value"
              }
            ]
          },
          {
            "TagName": "link",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "asp-append-version"
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "href",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.Href\">\r\n            <summary>\r\n            Address of the linked resource.\r\n            </summary>\r\n            <remarks>\r\n            Passed through to the generated HTML in all cases.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Href"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-href-include",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.HrefInclude\">\r\n            <summary>\r\n            A comma separated list of globbed file patterns of CSS stylesheets to load.\r\n            The glob patterns are assessed relative to the application's 'webroot' setting.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "HrefInclude"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-href-exclude",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.HrefExclude\">\r\n            <summary>\r\n            A comma separated list of globbed file patterns of CSS stylesheets to exclude from loading.\r\n            The glob patterns are assessed relative to the application's 'webroot' setting.\r\n            Must be used in conjunction with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.HrefInclude\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "HrefExclude"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fallback-href",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHref\">\r\n            <summary>\r\n            The URL of a CSS stylesheet to fallback to in the case the primary one fails.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "FallbackHref"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-suppress-fallback-integrity",
            "TypeName": "System.Boolean",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.SuppressFallbackIntegrity\">\r\n            <summary>\r\n            Boolean value that determines if an integrity hash will be compared with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHref\" /> value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "SuppressFallbackIntegrity"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-append-version",
            "TypeName": "System.Boolean?",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.AppendVersion\">\r\n            <summary>\r\n            Value indicating if file version should be appended to the href urls.\r\n            </summary>\r\n            <remarks>\r\n            If <c>true</c> then a query string \"v\" with the encoded content of the file is added.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AppendVersion"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fallback-href-include",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHrefInclude\">\r\n            <summary>\r\n            A comma separated list of globbed file patterns of CSS stylesheets to fallback to in the case the primary\r\n            one fails.\r\n            The glob patterns are assessed relative to the application's 'webroot' setting.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "FallbackHrefInclude"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fallback-href-exclude",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHrefExclude\">\r\n            <summary>\r\n            A comma separated list of globbed file patterns of CSS stylesheets to exclude from the fallback list, in\r\n            the case the primary one fails.\r\n            The glob patterns are assessed relative to the application's 'webroot' setting.\r\n            Must be used in conjunction with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHrefInclude\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "FallbackHrefExclude"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fallback-test-class",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestClass\">\r\n            <summary>\r\n            The class name defined in the stylesheet to use for the fallback test.\r\n            Must be used in conjunction with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestProperty\" /> and <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestValue\" />,\r\n            and either <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHref\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHrefInclude\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "FallbackTestClass"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fallback-test-property",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestProperty\">\r\n            <summary>\r\n            The CSS property name to use for the fallback test.\r\n            Must be used in conjunction with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestClass\" /> and <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestValue\" />,\r\n            and either <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHref\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHrefInclude\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "FallbackTestProperty"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fallback-test-value",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestValue\">\r\n            <summary>\r\n            The CSS property value to use for the fallback test.\r\n            Must be used in conjunction with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestClass\" /> and <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestProperty\" />,\r\n            and either <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHref\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHrefInclude\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "FallbackTestValue"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper",
          "Common.TypeNameIdentifier": "LinkTagHelper",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Mvc.TagHelpers",
          "Runtime.Name": "ITagHelper"
        }
      },
      {
        "HashCode": 1369540700,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;option&gt; elements.\r\n            </summary>\r\n            <remarks>\r\n            This <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> works in conjunction with <see cref=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper\" />. It reads elements\r\n            content but does not modify that content. The only modification it makes is to add a <c>selected</c> attribute\r\n            in some cases.\r\n            </remarks>\r\n        </member>",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "option"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "value",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper.Value\">\r\n            <summary>\r\n            Specifies a value for the &lt;option&gt; element.\r\n            </summary>\r\n            <remarks>\r\n            Passed through to the generated HTML in all cases.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper",
          "Common.TypeNameIdentifier": "OptionTagHelper",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Mvc.TagHelpers",
          "Runtime.Name": "ITagHelper"
        }
      },
      {
        "HashCode": 1902456264,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper\">\r\n            <summary>\r\n            Renders a partial view.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "partial",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "name"
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "name",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.Name\">\r\n            <summary>\r\n            The name or path of the partial view that is rendered to the response.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Name"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "for",
            "TypeName": "Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.For\">\r\n            <summary>\r\n            An expression to be evaluated against the current model. Cannot be used together with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.Model\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "For"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "model",
            "TypeName": "System.Object",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.Model\">\r\n            <summary>\r\n            The model to pass into the partial view. Cannot be used together with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.For\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Model"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "optional",
            "TypeName": "System.Boolean",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.Optional\">\r\n            <summary>\r\n            When optional, executing the tag helper will no-op if the view cannot be located.\r\n            Otherwise will throw stating the view could not be found.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Optional"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "fallback-name",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.FallbackName\">\r\n            <summary>\r\n            View to lookup if the view specified by <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.Name\" /> cannot be located.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "FallbackName"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "view-data",
            "TypeName": "Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary",
            "IndexerNamePrefix": "view-data-",
            "IndexerTypeName": "System.Object",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.ViewData\">\r\n            <summary>\r\n            A <see cref=\"T:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary\" /> to pass into the partial view.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ViewData"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper",
          "Common.TypeNameIdentifier": "PartialTagHelper",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Mvc.TagHelpers",
          "Runtime.Name": "ITagHelper"
        }
      },
      {
        "HashCode": 1200013868,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.PersistComponentStateTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.PersistComponentStateTagHelper\">\r\n            <summary>\r\n            A <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.TagHelper\" /> that saves the state of Razor components rendered on the page up to that point.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "persist-component-state",
            "TagStructure": 2
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "persist-mode",
            "TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.PersistenceMode?",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.PersistComponentStateTagHelper.PersistenceMode\">\r\n            <summary>\r\n            Gets or sets the <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.PersistComponentStateTagHelper.PersistenceMode\" /> for the state to persist.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "PersistenceMode"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.PersistComponentStateTagHelper",
          "Common.TypeNameIdentifier": "PersistComponentStateTagHelper",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Mvc.TagHelpers",
          "Runtime.Name": "ITagHelper"
        }
      },
      {
        "HashCode": 907343810,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;script&gt; elements that supports fallback src paths.\r\n            </summary>\r\n            <remarks>\r\n            The tag helper won't process for cases with just the 'src' attribute.\r\n            </remarks>\r\n        </member>",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "script",
            "Attributes": [
              {
                "Name": "asp-src-include"
              }
            ]
          },
          {
            "TagName": "script",
            "Attributes": [
              {
                "Name": "asp-src-exclude"
              }
            ]
          },
          {
            "TagName": "script",
            "Attributes": [
              {
                "Name": "asp-fallback-src"
              }
            ]
          },
          {
            "TagName": "script",
            "Attributes": [
              {
                "Name": "asp-fallback-src-include"
              }
            ]
          },
          {
            "TagName": "script",
            "Attributes": [
              {
                "Name": "asp-fallback-src-exclude"
              }
            ]
          },
          {
            "TagName": "script",
            "Attributes": [
              {
                "Name": "asp-fallback-test"
              }
            ]
          },
          {
            "TagName": "script",
            "Attributes": [
              {
                "Name": "asp-append-version"
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "src",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.Src\">\r\n            <summary>\r\n            Address of the external script to use.\r\n            </summary>\r\n            <remarks>\r\n            Passed through to the generated HTML in all cases.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Src"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-src-include",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.SrcInclude\">\r\n            <summary>\r\n            A comma separated list of globbed file patterns of JavaScript scripts to load.\r\n            The glob patterns are assessed relative to the application's 'webroot' setting.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "SrcInclude"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-src-exclude",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.SrcExclude\">\r\n            <summary>\r\n            A comma separated list of globbed file patterns of JavaScript scripts to exclude from loading.\r\n            The glob patterns are assessed relative to the application's 'webroot' setting.\r\n            Must be used in conjunction with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.SrcInclude\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "SrcExclude"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fallback-src",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.FallbackSrc\">\r\n            <summary>\r\n            The URL of a Script tag to fallback to in the case the primary one fails.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "FallbackSrc"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-suppress-fallback-integrity",
            "TypeName": "System.Boolean",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.SuppressFallbackIntegrity\">\r\n            <summary>\r\n            Boolean value that determines if an integrity hash will be compared with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.FallbackSrc\" /> value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "SuppressFallbackIntegrity"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-append-version",
            "TypeName": "System.Boolean?",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.AppendVersion\">\r\n            <summary>\r\n            Value indicating if file version should be appended to src urls.\r\n            </summary>\r\n            <remarks>\r\n            A query string \"v\" with the encoded content of the file is added.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AppendVersion"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fallback-src-include",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.FallbackSrcInclude\">\r\n            <summary>\r\n            A comma separated list of globbed file patterns of JavaScript scripts to fallback to in the case the\r\n            primary one fails.\r\n            The glob patterns are assessed relative to the application's 'webroot' setting.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "FallbackSrcInclude"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fallback-src-exclude",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.FallbackSrcExclude\">\r\n            <summary>\r\n            A comma separated list of globbed file patterns of JavaScript scripts to exclude from the fallback list, in\r\n            the case the primary one fails.\r\n            The glob patterns are assessed relative to the application's 'webroot' setting.\r\n            Must be used in conjunction with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.FallbackSrcInclude\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "FallbackSrcExclude"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fallback-test",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.FallbackTestExpression\">\r\n            <summary>\r\n            The script method defined in the primary script to use for the fallback test.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "FallbackTestExpression"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper",
          "Common.TypeNameIdentifier": "ScriptTagHelper",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Mvc.TagHelpers",
          "Runtime.Name": "ITagHelper"
        }
      },
      {
        "HashCode": 126353325,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;select&gt; elements with <c>asp-for</c> and/or\r\n            <c>asp-items</c> attribute(s).\r\n            </summary>\r\n        </member>",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "select",
            "Attributes": [
              {
                "Name": "asp-for"
              }
            ]
          },
          {
            "TagName": "select",
            "Attributes": [
              {
                "Name": "asp-items"
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "asp-for",
            "TypeName": "Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper.For\">\r\n            <summary>\r\n            An expression to be evaluated against the current model.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "For"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-items",
            "TypeName": "System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper.Items\">\r\n            <summary>\r\n            A collection of <see cref=\"T:Microsoft.AspNetCore.Mvc.Rendering.SelectListItem\" /> objects used to populate the &lt;select&gt; element with\r\n            &lt;optgroup&gt; and &lt;option&gt; elements.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Items"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "name",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper.Name\">\r\n            <summary>\r\n            The name of the &lt;input&gt; element.\r\n            </summary>\r\n            <remarks>\r\n            Passed through to the generated HTML in all cases. Also used to determine whether <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper.For\" /> is\r\n            valid with an empty <see cref=\"P:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression.Name\" />.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Name"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper",
          "Common.TypeNameIdentifier": "SelectTagHelper",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Mvc.TagHelpers",
          "Runtime.Name": "ITagHelper"
        }
      },
      {
        "HashCode": 2043928231,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.TextAreaTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.TextAreaTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;textarea&gt; elements with an <c>asp-for</c> attribute.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "textarea",
            "Attributes": [
              {
                "Name": "asp-for"
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "asp-for",
            "TypeName": "Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.TextAreaTagHelper.For\">\r\n            <summary>\r\n            An expression to be evaluated against the current model.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "For"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "name",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.TextAreaTagHelper.Name\">\r\n            <summary>\r\n            The name of the &lt;input&gt; element.\r\n            </summary>\r\n            <remarks>\r\n            Passed through to the generated HTML in all cases. Also used to determine whether <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.TextAreaTagHelper.For\" /> is\r\n            valid with an empty <see cref=\"P:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression.Name\" />.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Name"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.TextAreaTagHelper",
          "Common.TypeNameIdentifier": "TextAreaTagHelper",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Mvc.TagHelpers",
          "Runtime.Name": "ITagHelper"
        }
      },
      {
        "HashCode": 566600842,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.ValidationMessageTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.ValidationMessageTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;span&gt; elements with an <c>asp-validation-for</c>\r\n            attribute.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "span",
            "Attributes": [
              {
                "Name": "asp-validation-for"
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "asp-validation-for",
            "TypeName": "Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ValidationMessageTagHelper.For\">\r\n            <summary>\r\n            Gets an expression to be evaluated against the current model.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "For"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.ValidationMessageTagHelper",
          "Common.TypeNameIdentifier": "ValidationMessageTagHelper",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Mvc.TagHelpers",
          "Runtime.Name": "ITagHelper"
        }
      },
      {
        "HashCode": 55715716,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.ValidationSummaryTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.ValidationSummaryTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;div&gt; elements with an <c>asp-validation-summary</c>\r\n            attribute.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "div",
            "Attributes": [
              {
                "Name": "asp-validation-summary"
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "asp-validation-summary",
            "TypeName": "Microsoft.AspNetCore.Mvc.Rendering.ValidationSummary",
            "IsEnum": true,
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ValidationSummaryTagHelper.ValidationSummary\">\r\n            <summary>\r\n            If <see cref=\"F:Microsoft.AspNetCore.Mvc.Rendering.ValidationSummary.All\" /> or <see cref=\"F:Microsoft.AspNetCore.Mvc.Rendering.ValidationSummary.ModelOnly\" />, appends a validation\r\n            summary. Otherwise (<see cref=\"F:Microsoft.AspNetCore.Mvc.Rendering.ValidationSummary.None\" />, the default), this tag helper does nothing.\r\n            </summary>\r\n            <exception cref=\"T:System.ArgumentException\">\r\n            Thrown if setter is called with an undefined <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ValidationSummaryTagHelper.ValidationSummary\" /> value e.g.\r\n            <c>(ValidationSummary)23</c>.\r\n            </exception>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ValidationSummary"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.ValidationSummaryTagHelper",
          "Common.TypeNameIdentifier": "ValidationSummaryTagHelper",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Mvc.TagHelpers",
          "Runtime.Name": "ITagHelper"
        }
      },
      {
        "HashCode": -1382653229,
        "Kind": "Components.Bind",
        "Name": "Bind",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to an attribute and a change event, based on the naming of the bind attribute. For example: <code>@bind-value=\"...\"</code> and <code>@bind-value:event=\"onchange\"</code> will assign the current value of the expression to the 'value' attribute, and assign a delegate that attempts to set the value to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@bind-",
                "NameComparison": 1,
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-...",
            "TypeName": "System.Collections.Generic.Dictionary<string, object>",
            "IndexerNamePrefix": "@bind-",
            "IndexerTypeName": "System.Object",
            "Documentation": "Binds the provided expression to an attribute and a change event, based on the naming of the bind attribute. For example: <code>@bind-value=\"...\"</code> and <code>@bind-value:event=\"onchange\"</code> will assign the current value of the expression to the 'value' attribute, and assign a delegate that attempts to set the value to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the corresponding bind attribute. For example: <code>@bind-value:format=\"...\"</code> will apply a format string to the value specified in <code>@bind-value=\"...\"</code>. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind-...' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              },
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Bind",
          "Common.TypeNameIdentifier": "Bind",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components",
          "Components.Bind.Fallback": "True",
          "Components.IsSpecialKind": "Components.Bind",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1096137618,
        "Kind": "Components.Bind",
        "Name": "Bind",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "@bind",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "@bind:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              },
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes",
          "Common.TypeNameIdentifier": "BindAttributes",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.Format": null,
          "Components.Bind.IsInvariantCulture": "False",
          "Components.Bind.ValueAttribute": "value",
          "Components.IsSpecialKind": "Components.Bind",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 890597271,
        "Kind": "Components.Bind",
        "Name": "Bind_value",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "@bind-value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "@bind-value:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind-value:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-value",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind_value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              },
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes",
          "Common.TypeNameIdentifier": "BindAttributes",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.Format": null,
          "Components.Bind.IsInvariantCulture": "False",
          "Components.Bind.ValueAttribute": "value",
          "Components.IsSpecialKind": "Components.Bind",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1919205144,
        "Kind": "Components.Bind",
        "Name": "Bind",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'checked' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "checkbox",
                "ValueComparison": 1
              },
              {
                "Name": "@bind",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "checkbox",
                "ValueComparison": 1
              },
              {
                "Name": "@bind:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'checked' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_checked"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_checked"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              },
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-checked",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_checked"
            }
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes",
          "Common.TypeNameIdentifier": "BindAttributes",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.Format": null,
          "Components.Bind.IsInvariantCulture": "False",
          "Components.Bind.TypeAttribute": "checkbox",
          "Components.Bind.ValueAttribute": "checked",
          "Components.IsSpecialKind": "Components.Bind",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1039477799,
        "Kind": "Components.Bind",
        "Name": "Bind",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "text",
                "ValueComparison": 1
              },
              {
                "Name": "@bind",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "text",
                "ValueComparison": 1
              },
              {
                "Name": "@bind:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              },
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes",
          "Common.TypeNameIdentifier": "BindAttributes",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.Format": null,
          "Components.Bind.IsInvariantCulture": "False",
          "Components.Bind.TypeAttribute": "text",
          "Components.Bind.ValueAttribute": "value",
          "Components.IsSpecialKind": "Components.Bind",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1655183411,
        "Kind": "Components.Bind",
        "Name": "Bind",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "number",
                "ValueComparison": 1
              },
              {
                "Name": "@bind",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "number",
                "ValueComparison": 1
              },
              {
                "Name": "@bind:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              },
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes",
          "Common.TypeNameIdentifier": "BindAttributes",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.Format": null,
          "Components.Bind.IsInvariantCulture": "True",
          "Components.Bind.TypeAttribute": "number",
          "Components.Bind.ValueAttribute": "value",
          "Components.IsSpecialKind": "Components.Bind",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1104395781,
        "Kind": "Components.Bind",
        "Name": "Bind_value",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "number",
                "ValueComparison": 1
              },
              {
                "Name": "@bind-value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "number",
                "ValueComparison": 1
              },
              {
                "Name": "@bind-value:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind-value:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-value",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind_value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              },
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes",
          "Common.TypeNameIdentifier": "BindAttributes",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.Format": null,
          "Components.Bind.IsInvariantCulture": "True",
          "Components.Bind.TypeAttribute": "number",
          "Components.Bind.ValueAttribute": "value",
          "Components.IsSpecialKind": "Components.Bind",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 806936462,
        "Kind": "Components.Bind",
        "Name": "Bind",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "date",
                "ValueComparison": 1
              },
              {
                "Name": "@bind",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "date",
                "ValueComparison": 1
              },
              {
                "Name": "@bind:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              },
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes",
          "Common.TypeNameIdentifier": "BindAttributes",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.Format": "yyyy-MM-dd",
          "Components.Bind.IsInvariantCulture": "True",
          "Components.Bind.TypeAttribute": "date",
          "Components.Bind.ValueAttribute": "value",
          "Components.IsSpecialKind": "Components.Bind",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 110597550,
        "Kind": "Components.Bind",
        "Name": "Bind_value",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "date",
                "ValueComparison": 1
              },
              {
                "Name": "@bind-value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "date",
                "ValueComparison": 1
              },
              {
                "Name": "@bind-value:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind-value:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-value",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind_value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              },
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes",
          "Common.TypeNameIdentifier": "BindAttributes",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.Format": "yyyy-MM-dd",
          "Components.Bind.IsInvariantCulture": "True",
          "Components.Bind.TypeAttribute": "date",
          "Components.Bind.ValueAttribute": "value",
          "Components.IsSpecialKind": "Components.Bind",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1130126713,
        "Kind": "Components.Bind",
        "Name": "Bind",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "datetime-local",
                "ValueComparison": 1
              },
              {
                "Name": "@bind",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "datetime-local",
                "ValueComparison": 1
              },
              {
                "Name": "@bind:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              },
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes",
          "Common.TypeNameIdentifier": "BindAttributes",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.Format": "yyyy-MM-ddTHH:mm:ss",
          "Components.Bind.IsInvariantCulture": "True",
          "Components.Bind.TypeAttribute": "datetime-local",
          "Components.Bind.ValueAttribute": "value",
          "Components.IsSpecialKind": "Components.Bind",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -2093778510,
        "Kind": "Components.Bind",
        "Name": "Bind_value",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "datetime-local",
                "ValueComparison": 1
              },
              {
                "Name": "@bind-value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "datetime-local",
                "ValueComparison": 1
              },
              {
                "Name": "@bind-value:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind-value:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-value",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind_value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              },
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes",
          "Common.TypeNameIdentifier": "BindAttributes",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.Format": "yyyy-MM-ddTHH:mm:ss",
          "Components.Bind.IsInvariantCulture": "True",
          "Components.Bind.TypeAttribute": "datetime-local",
          "Components.Bind.ValueAttribute": "value",
          "Components.IsSpecialKind": "Components.Bind",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1220117906,
        "Kind": "Components.Bind",
        "Name": "Bind",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "month",
                "ValueComparison": 1
              },
              {
                "Name": "@bind",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "month",
                "ValueComparison": 1
              },
              {
                "Name": "@bind:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              },
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes",
          "Common.TypeNameIdentifier": "BindAttributes",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.Format": "yyyy-MM",
          "Components.Bind.IsInvariantCulture": "True",
          "Components.Bind.TypeAttribute": "month",
          "Components.Bind.ValueAttribute": "value",
          "Components.IsSpecialKind": "Components.Bind",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1462064405,
        "Kind": "Components.Bind",
        "Name": "Bind_value",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "month",
                "ValueComparison": 1
              },
              {
                "Name": "@bind-value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "month",
                "ValueComparison": 1
              },
              {
                "Name": "@bind-value:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind-value:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-value",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind_value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              },
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes",
          "Common.TypeNameIdentifier": "BindAttributes",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.Format": "yyyy-MM",
          "Components.Bind.IsInvariantCulture": "True",
          "Components.Bind.TypeAttribute": "month",
          "Components.Bind.ValueAttribute": "value",
          "Components.IsSpecialKind": "Components.Bind",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1467871543,
        "Kind": "Components.Bind",
        "Name": "Bind",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "time",
                "ValueComparison": 1
              },
              {
                "Name": "@bind",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "time",
                "ValueComparison": 1
              },
              {
                "Name": "@bind:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              },
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes",
          "Common.TypeNameIdentifier": "BindAttributes",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.Format": "HH:mm:ss",
          "Components.Bind.IsInvariantCulture": "True",
          "Components.Bind.TypeAttribute": "time",
          "Components.Bind.ValueAttribute": "value",
          "Components.IsSpecialKind": "Components.Bind",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1532802030,
        "Kind": "Components.Bind",
        "Name": "Bind_value",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "time",
                "ValueComparison": 1
              },
              {
                "Name": "@bind-value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "time",
                "ValueComparison": 1
              },
              {
                "Name": "@bind-value:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind-value:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-value",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind_value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              },
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes",
          "Common.TypeNameIdentifier": "BindAttributes",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.Format": "HH:mm:ss",
          "Components.Bind.IsInvariantCulture": "True",
          "Components.Bind.TypeAttribute": "time",
          "Components.Bind.ValueAttribute": "value",
          "Components.IsSpecialKind": "Components.Bind",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -173624853,
        "Kind": "Components.Bind",
        "Name": "Bind",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "select",
            "Attributes": [
              {
                "Name": "@bind",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "select",
            "Attributes": [
              {
                "Name": "@bind:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              },
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes",
          "Common.TypeNameIdentifier": "BindAttributes",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.Format": null,
          "Components.Bind.IsInvariantCulture": "False",
          "Components.Bind.ValueAttribute": "value",
          "Components.IsSpecialKind": "Components.Bind",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 169244191,
        "Kind": "Components.Bind",
        "Name": "Bind",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "textarea",
            "Attributes": [
              {
                "Name": "@bind",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "textarea",
            "Attributes": [
              {
                "Name": "@bind:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              },
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes",
          "Common.TypeNameIdentifier": "BindAttributes",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.Format": null,
          "Components.Bind.IsInvariantCulture": "False",
          "Components.Bind.ValueAttribute": "value",
          "Components.IsSpecialKind": "Components.Bind",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1599845879,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputCheckbox",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputCheckbox",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "InputCheckbox",
            "Attributes": [
              {
                "Name": "@bind-Value:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind-Value:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputCheckbox",
          "Common.TypeNameIdentifier": "InputCheckbox",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Components.Bind.ValueAttribute": "Value",
          "Components.IsSpecialKind": "Components.Bind",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -639923078,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputCheckbox",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputCheckbox",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputCheckbox",
            "Attributes": [
              {
                "Name": "@bind-Value:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind-Value:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputCheckbox",
          "Common.TypeNameIdentifier": "InputCheckbox",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Components.Bind.ValueAttribute": "Value",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -334782467,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputDate<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputDate",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "InputDate",
            "Attributes": [
              {
                "Name": "@bind-Value:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind-Value:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputDate<TValue>",
          "Common.TypeNameIdentifier": "InputDate",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Components.Bind.ValueAttribute": "Value",
          "Components.IsSpecialKind": "Components.Bind",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 2053802327,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputDate<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputDate",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputDate",
            "Attributes": [
              {
                "Name": "@bind-Value:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind-Value:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputDate<TValue>",
          "Common.TypeNameIdentifier": "InputDate",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Components.Bind.ValueAttribute": "Value",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1152594640,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputNumber",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "InputNumber",
            "Attributes": [
              {
                "Name": "@bind-Value:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind-Value:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>",
          "Common.TypeNameIdentifier": "InputNumber",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Components.Bind.ValueAttribute": "Value",
          "Components.IsSpecialKind": "Components.Bind",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -342683177,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputNumber",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputNumber",
            "Attributes": [
              {
                "Name": "@bind-Value:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind-Value:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>",
          "Common.TypeNameIdentifier": "InputNumber",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Components.Bind.ValueAttribute": "Value",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1466761918,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputRadioGroup",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "InputRadioGroup",
            "Attributes": [
              {
                "Name": "@bind-Value:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind-Value:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>",
          "Common.TypeNameIdentifier": "InputRadioGroup",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Components.Bind.ValueAttribute": "Value",
          "Components.IsSpecialKind": "Components.Bind",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -650029601,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup",
            "Attributes": [
              {
                "Name": "@bind-Value:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind-Value:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>",
          "Common.TypeNameIdentifier": "InputRadioGroup",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Components.Bind.ValueAttribute": "Value",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 246533251,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputSelect",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "InputSelect",
            "Attributes": [
              {
                "Name": "@bind-Value:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind-Value:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>",
          "Common.TypeNameIdentifier": "InputSelect",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Components.Bind.ValueAttribute": "Value",
          "Components.IsSpecialKind": "Components.Bind",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 2066178277,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputSelect",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputSelect",
            "Attributes": [
              {
                "Name": "@bind-Value:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind-Value:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>",
          "Common.TypeNameIdentifier": "InputSelect",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Components.Bind.ValueAttribute": "Value",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -274536875,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputText",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputText",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "InputText",
            "Attributes": [
              {
                "Name": "@bind-Value:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind-Value:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputText",
          "Common.TypeNameIdentifier": "InputText",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Components.Bind.ValueAttribute": "Value",
          "Components.IsSpecialKind": "Components.Bind",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1348803695,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputText",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputText",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputText",
            "Attributes": [
              {
                "Name": "@bind-Value:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind-Value:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputText",
          "Common.TypeNameIdentifier": "InputText",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Components.Bind.ValueAttribute": "Value",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -483524170,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputTextArea",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputTextArea",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "InputTextArea",
            "Attributes": [
              {
                "Name": "@bind-Value:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind-Value:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputTextArea",
          "Common.TypeNameIdentifier": "InputTextArea",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Components.Bind.ValueAttribute": "Value",
          "Components.IsSpecialKind": "Components.Bind",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1217608005,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputTextArea",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputTextArea",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputTextArea",
            "Attributes": [
              {
                "Name": "@bind-Value:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind-Value:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputTextArea",
          "Common.TypeNameIdentifier": "InputTextArea",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Components.Bind.ValueAttribute": "Value",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1146980447,
        "Kind": "Components.Ref",
        "Name": "Ref",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Populates the specified field or property with a reference to the element or component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ref",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Ref",
            "Name": "@ref",
            "TypeName": "System.Object",
            "Documentation": "Populates the specified field or property with a reference to the element or component.",
            "Metadata": {
              "Common.PropertyName": "Ref",
              "Common.DirectiveAttribute": "True"
            }
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Ref",
          "Components.IsSpecialKind": "Components.Ref",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1999863073,
        "Kind": "Components.Key",
        "Name": "Key",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Ensures that the component or element will be preserved across renders if (and only if) the supplied key value matches.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@key",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Key",
            "Name": "@key",
            "TypeName": "System.Object",
            "Documentation": "Ensures that the component or element will be preserved across renders if (and only if) the supplied key value matches.",
            "Metadata": {
              "Common.PropertyName": "Key",
              "Common.DirectiveAttribute": "True"
            }
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Key",
          "Components.IsSpecialKind": "Components.Key",
          "Runtime.Name": "Components.None"
        }
      }
    ],
    "CSharpLanguageVersion": 1200
  },
  "RootNamespace": "Portfolio.WebApi",
  "Documents": [],
  "SerializationFormat": "0.3"
}

================
File: src/Portfolio.WebApi/obj/Debug/net8.0/staticwebassets.build.endpoints.json
================
{
  "Version": 1,
  "ManifestType": "Build",
  "Endpoints": []
}

================
File: src/Portfolio.WebApi/obj/Debug/net8.0/staticwebassets.build.json
================
{
  "Version": 1,
  "Hash": "5doUAfICUDPH0UaqE1AmNQC0wJHTMN7fDSaRQlkiqxg=",
  "Source": "Portfolio.WebApi",
  "BasePath": "_content/Portfolio.WebApi",
  "Mode": "Default",
  "ManifestType": "Build",
  "ReferencedProjectsConfiguration": [],
  "DiscoveryPatterns": [],
  "Assets": [],
  "Endpoints": []
}

================
File: src/Portfolio.WebApi/obj/Debug/net8.0/staticwebassets/msbuild.build.Portfolio.WebApi.props
================
<Project>
  <Import Project="Microsoft.AspNetCore.StaticWebAssetEndpoints.props" />
  <Import Project="Microsoft.AspNetCore.StaticWebAssets.props" />
</Project>

================
File: src/Portfolio.WebApi/obj/Debug/net8.0/staticwebassets/msbuild.buildMultiTargeting.Portfolio.WebApi.props
================
<Project>
  <Import Project="..\build\Portfolio.WebApi.props" />
</Project>

================
File: src/Portfolio.WebApi/obj/Debug/net8.0/staticwebassets/msbuild.buildTransitive.Portfolio.WebApi.props
================
<Project>
  <Import Project="..\buildMultiTargeting\Portfolio.WebApi.props" />
</Project>

================
File: src/Portfolio.WebApi/obj/Debug/net9.0/.NETCoreApp,Version=v9.0.AssemblyAttributes.cs
================
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v9.0", FrameworkDisplayName = ".NET 9.0")]

================
File: src/Portfolio.WebApi/obj/Debug/net9.0/Portfolio.WebApi.AssemblyInfo.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Portfolio.WebApi")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+209cdd74c3729e95afd49ec84484da63e8f9678b")]
[assembly: System.Reflection.AssemblyProductAttribute("Portfolio.WebApi")]
[assembly: System.Reflection.AssemblyTitleAttribute("Portfolio.WebApi")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Généré par la classe MSBuild WriteCodeFragment.

================
File: src/Portfolio.WebApi/obj/Debug/net9.0/Portfolio.WebApi.AssemblyInfoInputs.cache
================
4d16efe1dc7b457896fc6e80eeef1b34ac668978edd374ef2020b1639c9b3ba5

================
File: src/Portfolio.WebApi/obj/Debug/net9.0/Portfolio.WebApi.csproj.CoreCompileInputs.cache
================
a0a0ca6bd4892a33d6153e39b1b1fbb8f7eef28801cb6e746be40df3da0ada75

================
File: src/Portfolio.WebApi/obj/Debug/net9.0/Portfolio.WebApi.csproj.FileListAbsolute.txt
================
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net9.0\Portfolio.WebApi.csproj.AssemblyReference.cache
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net9.0\Portfolio.WebApi.GeneratedMSBuildEditorConfig.editorconfig
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net9.0\Portfolio.WebApi.AssemblyInfoInputs.cache
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net9.0\Portfolio.WebApi.AssemblyInfo.cs
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net9.0\Portfolio.WebApi.csproj.CoreCompileInputs.cache
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net9.0\Portfolio.WebApi.MvcApplicationPartsAssemblyInfo.cache
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net9.0\Portfolio.WebApi.sourcelink.json
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net9.0\appsettings.Development.json
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net9.0\appsettings.json
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net9.0\Portfolio.WebApi.staticwebassets.endpoints.json
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net9.0\Portfolio.WebApi.exe
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net9.0\Portfolio.WebApi.deps.json
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net9.0\Portfolio.WebApi.runtimeconfig.json
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net9.0\Portfolio.WebApi.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net9.0\Portfolio.WebApi.pdb
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net9.0\AutoMapper.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net9.0\FluentValidation.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net9.0\FluentValidation.DependencyInjectionExtensions.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net9.0\MediatR.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net9.0\MediatR.Contracts.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net9.0\Microsoft.AspNetCore.OpenApi.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net9.0\Microsoft.EntityFrameworkCore.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net9.0\Microsoft.EntityFrameworkCore.Abstractions.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net9.0\Microsoft.EntityFrameworkCore.Relational.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net9.0\Microsoft.OpenApi.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net9.0\Namotion.Reflection.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net9.0\Newtonsoft.Json.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net9.0\NJsonSchema.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net9.0\NJsonSchema.Annotations.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net9.0\NJsonSchema.NewtonsoftJson.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net9.0\NJsonSchema.Yaml.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net9.0\Npgsql.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net9.0\Npgsql.EntityFrameworkCore.PostgreSQL.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net9.0\NSwag.Annotations.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net9.0\NSwag.AspNetCore.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net9.0\NSwag.Core.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net9.0\NSwag.Core.Yaml.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net9.0\NSwag.Generation.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net9.0\NSwag.Generation.AspNetCore.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net9.0\YamlDotNet.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net9.0\Portfolio.Application.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net9.0\Portfolio.Domain.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net9.0\Portfolio.Infrastructure.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net9.0\Portfolio.Application.pdb
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net9.0\Portfolio.Infrastructure.pdb
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\bin\Debug\net9.0\Portfolio.Domain.pdb
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net9.0\Portfolio.WebApi.MvcApplicationPartsAssemblyInfo.cs
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net9.0\scopedcss\bundle\Portfolio.WebApi.styles.css
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net9.0\staticwebassets.build.json
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net9.0\staticwebassets.development.json
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net9.0\staticwebassets.build.endpoints.json
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net9.0\staticwebassets\msbuild.Portfolio.WebApi.Microsoft.AspNetCore.StaticWebAssets.props
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net9.0\staticwebassets\msbuild.Portfolio.WebApi.Microsoft.AspNetCore.StaticWebAssetEndpoints.props
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net9.0\staticwebassets\msbuild.build.Portfolio.WebApi.props
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net9.0\staticwebassets\msbuild.buildMultiTargeting.Portfolio.WebApi.props
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net9.0\staticwebassets\msbuild.buildTransitive.Portfolio.WebApi.props
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net9.0\staticwebassets.pack.json
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net9.0\Portfoli.1BF16BEA.Up2Date
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net9.0\Portfolio.WebApi.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net9.0\refint\Portfolio.WebApi.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net9.0\Portfolio.WebApi.pdb
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net9.0\Portfolio.WebApi.genruntimeconfig.cache
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net9.0\ref\Portfolio.WebApi.dll
C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\obj\Debug\net9.0\staticwebassets.upToDateCheck.txt

================
File: src/Portfolio.WebApi/obj/Debug/net9.0/Portfolio.WebApi.GeneratedMSBuildEditorConfig.editorconfig
================
is_global = true
build_property.TargetFramework = net9.0
build_property.TargetPlatformMinVersion = 
build_property.UsingMicrosoftNETSdkWeb = true
build_property.ProjectTypeGuids = 
build_property.InvariantGlobalization = 
build_property.PlatformNeutralAssembly = 
build_property.EnforceExtendedAnalyzerRules = 
build_property._SupportedPlatformList = Linux,macOS,Windows
build_property.RootNamespace = Portfolio.WebApi
build_property.RootNamespace = Portfolio.WebApi
build_property.ProjectDir = C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi\
build_property.EnableComHosting = 
build_property.EnableGeneratedComInterfaceComImportInterop = 
build_property.RazorLangVersion = 9.0
build_property.SupportLocalizedComponentNames = 
build_property.GenerateRazorMetadataSourceChecksumAttributes = 
build_property.MSBuildProjectDirectory = C:\dev\portfolio\portfolio.net\src\Portfolio.WebApi
build_property._RazorSourceGeneratorDebug = 
build_property.EffectiveAnalysisLevelStyle = 9.0
build_property.EnableCodeStyleSeverity =

================
File: src/Portfolio.WebApi/obj/Debug/net9.0/Portfolio.WebApi.genruntimeconfig.cache
================
c8246917024500ac33ba30cbe746af507bdfcbe99c9f3b0d739a1b290daa4bcb

================
File: src/Portfolio.WebApi/obj/Debug/net9.0/Portfolio.WebApi.GlobalUsings.g.cs
================
// <auto-generated/>
global using global::Microsoft.AspNetCore.Builder;
global using global::Microsoft.AspNetCore.Hosting;
global using global::Microsoft.AspNetCore.Http;
global using global::Microsoft.AspNetCore.Routing;
global using global::Microsoft.Extensions.Configuration;
global using global::Microsoft.Extensions.DependencyInjection;
global using global::Microsoft.Extensions.Hosting;
global using global::Microsoft.Extensions.Logging;
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Net.Http.Json;
global using global::System.Threading;
global using global::System.Threading.Tasks;

================
File: src/Portfolio.WebApi/obj/Debug/net9.0/Portfolio.WebApi.MvcApplicationPartsAssemblyInfo.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute("Microsoft.AspNetCore.OpenApi")]
[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute("NSwag.AspNetCore")]
[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute("NSwag.Generation.AspNetCore")]

// Généré par la classe MSBuild WriteCodeFragment.

================
File: src/Portfolio.WebApi/obj/Debug/net9.0/Portfolio.WebApi.sourcelink.json
================
{"documents":{"C:\\dev\\portfolio\\*":"https://raw.githubusercontent.com/michelroberge/portfolio/209cdd74c3729e95afd49ec84484da63e8f9678b/*"}}

================
File: src/Portfolio.WebApi/obj/Debug/net9.0/project.razor.json
================
{
  "SerializedFilePath": "c:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.WebApi\\obj\\Debug\\net9.0\\project.razor.json",
  "FilePath": "c:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.WebApi\\Portfolio.WebApi.csproj",
  "Configuration": {
    "ConfigurationName": "MVC-3.0",
    "LanguageVersion": "8.0",
    "Extensions": [
      {
        "ExtensionName": "MVC-3.0"
      }
    ]
  },
  "ProjectWorkspaceState": {
    "TagHelpers": [
      {
        "HashCode": -1831776268,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView\">\r\n             <summary>\r\n             Combines the behaviors of <see cref=\"T:Microsoft.AspNetCore.Components.Authorization.AuthorizeView\" /> and <see cref=\"T:Microsoft.AspNetCore.Components.RouteView\" />,\r\n             so that it displays the page matching the specified route but only if the user\r\n             is authorized to see it.\r\n            \r\n             Additionally, this component supplies a cascading parameter of type <see cref=\"T:System.Threading.Tasks.Task`1\" />,\r\n             which makes the user's current authentication state available to descendants.\r\n             </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "AuthorizeRouteView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "NotAuthorized",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.NotAuthorized\">\r\n            <summary>\r\n            The content that will be displayed if the user is not authorized.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "NotAuthorized",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Authorization.AuthenticationState>",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Authorizing",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.Authorizing\">\r\n            <summary>\r\n            The content that will be displayed while asynchronous authorization is in progress.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Authorizing",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Resource",
            "TypeName": "System.Object",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.Resource\">\r\n            <summary>\r\n            The resource to which access is being controlled.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Resource",
              "Common.GloballyQualifiedTypeName": "global::System.Object"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RouteData",
            "TypeName": "Microsoft.AspNetCore.Components.RouteData",
            "IsEditorRequired": true,
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.RouteView.RouteData\">\r\n            <summary>\r\n            Gets or sets the route data. This determines the page that will be\r\n            displayed and the parameter values that will be supplied to the page.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "RouteData",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RouteData"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DefaultLayout",
            "TypeName": "System.Type",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.RouteView.DefaultLayout\">\r\n            <summary>\r\n            Gets or sets the type of a layout to be used if the page does not\r\n            declare any layout. If specified, the type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />\r\n            and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "DefaultLayout",
              "Common.GloballyQualifiedTypeName": "global::System.Type"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView",
          "Common.TypeNameIdentifier": "AuthorizeRouteView",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Authorization",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 2094174132,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView\">\r\n             <summary>\r\n             Combines the behaviors of <see cref=\"T:Microsoft.AspNetCore.Components.Authorization.AuthorizeView\" /> and <see cref=\"T:Microsoft.AspNetCore.Components.RouteView\" />,\r\n             so that it displays the page matching the specified route but only if the user\r\n             is authorized to see it.\r\n            \r\n             Additionally, this component supplies a cascading parameter of type <see cref=\"T:System.Threading.Tasks.Task`1\" />,\r\n             which makes the user's current authentication state available to descendants.\r\n             </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "NotAuthorized",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.NotAuthorized\">\r\n            <summary>\r\n            The content that will be displayed if the user is not authorized.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "NotAuthorized",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Authorization.AuthenticationState>",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Authorizing",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.Authorizing\">\r\n            <summary>\r\n            The content that will be displayed while asynchronous authorization is in progress.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Authorizing",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Resource",
            "TypeName": "System.Object",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.Resource\">\r\n            <summary>\r\n            The resource to which access is being controlled.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Resource",
              "Common.GloballyQualifiedTypeName": "global::System.Object"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "RouteData",
            "TypeName": "Microsoft.AspNetCore.Components.RouteData",
            "IsEditorRequired": true,
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.RouteView.RouteData\">\r\n            <summary>\r\n            Gets or sets the route data. This determines the page that will be\r\n            displayed and the parameter values that will be supplied to the page.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "RouteData",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RouteData"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DefaultLayout",
            "TypeName": "System.Type",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.RouteView.DefaultLayout\">\r\n            <summary>\r\n            Gets or sets the type of a layout to be used if the page does not\r\n            declare any layout. If specified, the type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />\r\n            and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "DefaultLayout",
              "Common.GloballyQualifiedTypeName": "global::System.Type"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView",
          "Common.TypeNameIdentifier": "AuthorizeRouteView",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Authorization",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -1558400539,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.NotAuthorized",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.NotAuthorized\">\r\n            <summary>\r\n            The content that will be displayed if the user is not authorized.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NotAuthorized",
            "ParentTag": "AuthorizeRouteView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'NotAuthorized' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.NotAuthorized",
          "Common.TypeNameIdentifier": "AuthorizeRouteView",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Authorization",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1590813696,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.NotAuthorized",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.NotAuthorized\">\r\n            <summary>\r\n            The content that will be displayed if the user is not authorized.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NotAuthorized",
            "ParentTag": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'NotAuthorized' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.NotAuthorized",
          "Common.TypeNameIdentifier": "AuthorizeRouteView",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Authorization",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -901132857,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.Authorizing",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.Authorizing\">\r\n            <summary>\r\n            The content that will be displayed while asynchronous authorization is in progress.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Authorizing",
            "ParentTag": "AuthorizeRouteView"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.Authorizing",
          "Common.TypeNameIdentifier": "AuthorizeRouteView",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Authorization",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 281332321,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.Authorizing",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.Authorizing\">\r\n            <summary>\r\n            The content that will be displayed while asynchronous authorization is in progress.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Authorizing",
            "ParentTag": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.Authorizing",
          "Common.TypeNameIdentifier": "AuthorizeRouteView",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Authorization",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1808768648,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Authorization.AuthorizeView\">\r\n            <summary>\r\n            Displays differing content depending on the user's authorization status.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "AuthorizeView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Policy",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Policy\">\r\n            <summary>\r\n            The policy name that determines whether the content can be displayed.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Policy",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Roles",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Roles\">\r\n            <summary>\r\n            A comma delimited list of roles that are allowed to display the content.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Roles",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.ChildContent\">\r\n            <summary>\r\n            The content that will be displayed if the user is authorized.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Authorization.AuthenticationState>",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NotAuthorized",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.NotAuthorized\">\r\n            <summary>\r\n            The content that will be displayed if the user is not authorized.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "NotAuthorized",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Authorization.AuthenticationState>",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Authorized",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.Authorized\">\r\n            <summary>\r\n            The content that will be displayed if the user is authorized.\r\n            If you specify a value for this parameter, do not also specify a value for <see cref=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.ChildContent\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Authorized",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Authorization.AuthenticationState>",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Authorizing",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.Authorizing\">\r\n            <summary>\r\n            The content that will be displayed while asynchronous authorization is in progress.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Authorizing",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Resource",
            "TypeName": "System.Object",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.Resource\">\r\n            <summary>\r\n            The resource to which access is being controlled.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Resource",
              "Common.GloballyQualifiedTypeName": "global::System.Object"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView",
          "Common.TypeNameIdentifier": "AuthorizeView",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Authorization",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -1324026628,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Authorization.AuthorizeView\">\r\n            <summary>\r\n            Displays differing content depending on the user's authorization status.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Policy",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Policy\">\r\n            <summary>\r\n            The policy name that determines whether the content can be displayed.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Policy",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Roles",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Roles\">\r\n            <summary>\r\n            A comma delimited list of roles that are allowed to display the content.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Roles",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.ChildContent\">\r\n            <summary>\r\n            The content that will be displayed if the user is authorized.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Authorization.AuthenticationState>",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NotAuthorized",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.NotAuthorized\">\r\n            <summary>\r\n            The content that will be displayed if the user is not authorized.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "NotAuthorized",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Authorization.AuthenticationState>",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Authorized",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.Authorized\">\r\n            <summary>\r\n            The content that will be displayed if the user is authorized.\r\n            If you specify a value for this parameter, do not also specify a value for <see cref=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.ChildContent\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Authorized",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Authorization.AuthenticationState>",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Authorizing",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.Authorizing\">\r\n            <summary>\r\n            The content that will be displayed while asynchronous authorization is in progress.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Authorizing",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Resource",
            "TypeName": "System.Object",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.Resource\">\r\n            <summary>\r\n            The resource to which access is being controlled.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Resource",
              "Common.GloballyQualifiedTypeName": "global::System.Object"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView",
          "Common.TypeNameIdentifier": "AuthorizeView",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Authorization",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 220862315,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.ChildContent\">\r\n            <summary>\r\n            The content that will be displayed if the user is authorized.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "AuthorizeView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ChildContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.ChildContent",
          "Common.TypeNameIdentifier": "AuthorizeView",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Authorization",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1331734195,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.ChildContent\">\r\n            <summary>\r\n            The content that will be displayed if the user is authorized.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ChildContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.ChildContent",
          "Common.TypeNameIdentifier": "AuthorizeView",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Authorization",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 6554319,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.NotAuthorized",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.NotAuthorized\">\r\n            <summary>\r\n            The content that will be displayed if the user is not authorized.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NotAuthorized",
            "ParentTag": "AuthorizeView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'NotAuthorized' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.NotAuthorized",
          "Common.TypeNameIdentifier": "AuthorizeView",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Authorization",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1803698943,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.NotAuthorized",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.NotAuthorized\">\r\n            <summary>\r\n            The content that will be displayed if the user is not authorized.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NotAuthorized",
            "ParentTag": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'NotAuthorized' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.NotAuthorized",
          "Common.TypeNameIdentifier": "AuthorizeView",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Authorization",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -491609512,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorized",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.Authorized\">\r\n            <summary>\r\n            The content that will be displayed if the user is authorized.\r\n            If you specify a value for this parameter, do not also specify a value for <see cref=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.ChildContent\" />.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Authorized",
            "ParentTag": "AuthorizeView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'Authorized' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorized",
          "Common.TypeNameIdentifier": "AuthorizeView",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Authorization",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 251126957,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorized",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.Authorized\">\r\n            <summary>\r\n            The content that will be displayed if the user is authorized.\r\n            If you specify a value for this parameter, do not also specify a value for <see cref=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.ChildContent\" />.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Authorized",
            "ParentTag": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'Authorized' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorized",
          "Common.TypeNameIdentifier": "AuthorizeView",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Authorization",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1572181723,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorizing",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.Authorizing\">\r\n            <summary>\r\n            The content that will be displayed while asynchronous authorization is in progress.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Authorizing",
            "ParentTag": "AuthorizeView"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorizing",
          "Common.TypeNameIdentifier": "AuthorizeView",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Authorization",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 2129340695,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorizing",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.Authorizing\">\r\n            <summary>\r\n            The content that will be displayed while asynchronous authorization is in progress.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Authorizing",
            "ParentTag": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorizing",
          "Common.TypeNameIdentifier": "AuthorizeView",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Authorization",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -541884306,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "CascadingAuthenticationState"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState.ChildContent\">\r\n            <summary>\r\n            The content to which the authentication state should be provided.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState",
          "Common.TypeNameIdentifier": "CascadingAuthenticationState",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Authorization",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -1865646654,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState.ChildContent\">\r\n            <summary>\r\n            The content to which the authentication state should be provided.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState",
          "Common.TypeNameIdentifier": "CascadingAuthenticationState",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Authorization",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -1874551505,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState.ChildContent\">\r\n            <summary>\r\n            The content to which the authentication state should be provided.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "CascadingAuthenticationState"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState.ChildContent",
          "Common.TypeNameIdentifier": "CascadingAuthenticationState",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Authorization",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1496845165,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Authorization",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState.ChildContent\">\r\n            <summary>\r\n            The content to which the authentication state should be provided.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState.ChildContent",
          "Common.TypeNameIdentifier": "CascadingAuthenticationState",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Authorization",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 615081035,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.CascadingValue<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.CascadingValue`1\">\r\n            <summary>\r\n            A component that provides a cascading value to all descendant components.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "CascadingValue"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.CascadingValue<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.ChildContent\">\r\n            <summary>\r\n            The content to which the value should be provided.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.Value\">\r\n            <summary>\r\n            The value to be provided.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Common.GloballyQualifiedTypeName": "TValue",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Name",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.Name\">\r\n             <summary>\r\n             Optionally gives a name to the provided value. Descendant components\r\n             will be able to receive the value by specifying this name.\r\n            \r\n             If no name is specified, then descendant components will receive the\r\n             value based the type of value they are requesting.\r\n             </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Name",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsFixed",
            "TypeName": "System.Boolean",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.IsFixed\">\r\n            <summary>\r\n            If true, indicates that <see cref=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.Value\" /> will not change. This is a\r\n            performance optimization that allows the framework to skip setting up\r\n            change notifications. Set this flag only if you will not change\r\n            <see cref=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.Value\" /> during the component's lifetime.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "IsFixed",
              "Common.GloballyQualifiedTypeName": "global::System.Boolean"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.CascadingValue<TValue>",
          "Common.TypeNameIdentifier": "CascadingValue",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components",
          "Components.GenericTyped": "True",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 38184031,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.CascadingValue<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.CascadingValue`1\">\r\n            <summary>\r\n            A component that provides a cascading value to all descendant components.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.CascadingValue"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.CascadingValue<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.ChildContent\">\r\n            <summary>\r\n            The content to which the value should be provided.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.Value\">\r\n            <summary>\r\n            The value to be provided.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Common.GloballyQualifiedTypeName": "TValue",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Name",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.Name\">\r\n             <summary>\r\n             Optionally gives a name to the provided value. Descendant components\r\n             will be able to receive the value by specifying this name.\r\n            \r\n             If no name is specified, then descendant components will receive the\r\n             value based the type of value they are requesting.\r\n             </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Name",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "IsFixed",
            "TypeName": "System.Boolean",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.IsFixed\">\r\n            <summary>\r\n            If true, indicates that <see cref=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.Value\" /> will not change. This is a\r\n            performance optimization that allows the framework to skip setting up\r\n            change notifications. Set this flag only if you will not change\r\n            <see cref=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.Value\" /> during the component's lifetime.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "IsFixed",
              "Common.GloballyQualifiedTypeName": "global::System.Boolean"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.CascadingValue<TValue>",
          "Common.TypeNameIdentifier": "CascadingValue",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -1425495662,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.CascadingValue<TValue>.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.ChildContent\">\r\n            <summary>\r\n            The content to which the value should be provided.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "CascadingValue"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.CascadingValue<TValue>.ChildContent",
          "Common.TypeNameIdentifier": "CascadingValue",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1047908649,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.CascadingValue<TValue>.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.ChildContent\">\r\n            <summary>\r\n            The content to which the value should be provided.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.CascadingValue"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.CascadingValue<TValue>.ChildContent",
          "Common.TypeNameIdentifier": "CascadingValue",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 833196881,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.DynamicComponent",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.DynamicComponent\">\r\n            <summary>\r\n            A component that renders another component dynamically according to its\r\n            <see cref=\"P:Microsoft.AspNetCore.Components.DynamicComponent.Type\" /> parameter.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "DynamicComponent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Type",
            "TypeName": "System.Type",
            "IsEditorRequired": true,
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.DynamicComponent.Type\">\r\n            <summary>\r\n            Gets or sets the type of the component to be rendered. The supplied type must\r\n            implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Type",
              "Common.GloballyQualifiedTypeName": "global::System.Type"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Parameters",
            "TypeName": "System.Collections.Generic.IDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.DynamicComponent.Parameters\">\r\n            <summary>\r\n            Gets or sets a dictionary of parameters to be passed to the component.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Parameters",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.DynamicComponent",
          "Common.TypeNameIdentifier": "DynamicComponent",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -254164803,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.DynamicComponent",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.DynamicComponent\">\r\n            <summary>\r\n            A component that renders another component dynamically according to its\r\n            <see cref=\"P:Microsoft.AspNetCore.Components.DynamicComponent.Type\" /> parameter.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.DynamicComponent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Type",
            "TypeName": "System.Type",
            "IsEditorRequired": true,
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.DynamicComponent.Type\">\r\n            <summary>\r\n            Gets or sets the type of the component to be rendered. The supplied type must\r\n            implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Type",
              "Common.GloballyQualifiedTypeName": "global::System.Type"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Parameters",
            "TypeName": "System.Collections.Generic.IDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.DynamicComponent.Parameters\">\r\n            <summary>\r\n            Gets or sets a dictionary of parameters to be passed to the component.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Parameters",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.DynamicComponent",
          "Common.TypeNameIdentifier": "DynamicComponent",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -1596169366,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.LayoutView",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.LayoutView\">\r\n            <summary>\r\n            Displays the specified content inside the specified layout and any further\r\n            nested layouts.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "LayoutView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.LayoutView.ChildContent\">\r\n            <summary>\r\n            Gets or sets the content to display.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Layout",
            "TypeName": "System.Type",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.LayoutView.Layout\">\r\n            <summary>\r\n            Gets or sets the type of the layout in which to display the content.\r\n            The type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" /> and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Layout",
              "Common.GloballyQualifiedTypeName": "global::System.Type"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.LayoutView",
          "Common.TypeNameIdentifier": "LayoutView",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 1955625806,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.LayoutView",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.LayoutView\">\r\n            <summary>\r\n            Displays the specified content inside the specified layout and any further\r\n            nested layouts.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.LayoutView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.LayoutView.ChildContent\">\r\n            <summary>\r\n            Gets or sets the content to display.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Layout",
            "TypeName": "System.Type",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.LayoutView.Layout\">\r\n            <summary>\r\n            Gets or sets the type of the layout in which to display the content.\r\n            The type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" /> and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Layout",
              "Common.GloballyQualifiedTypeName": "global::System.Type"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.LayoutView",
          "Common.TypeNameIdentifier": "LayoutView",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 280315622,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.LayoutView.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.LayoutView.ChildContent\">\r\n            <summary>\r\n            Gets or sets the content to display.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "LayoutView"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.LayoutView.ChildContent",
          "Common.TypeNameIdentifier": "LayoutView",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 759940071,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.LayoutView.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.LayoutView.ChildContent\">\r\n            <summary>\r\n            Gets or sets the content to display.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.LayoutView"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.LayoutView.ChildContent",
          "Common.TypeNameIdentifier": "LayoutView",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -21799781,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.RouteView",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.RouteView\">\r\n            <summary>\r\n            Displays the specified page component, rendering it inside its layout\r\n            and any further nested layouts.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "RouteView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "RouteData",
            "TypeName": "Microsoft.AspNetCore.Components.RouteData",
            "IsEditorRequired": true,
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.RouteView.RouteData\">\r\n            <summary>\r\n            Gets or sets the route data. This determines the page that will be\r\n            displayed and the parameter values that will be supplied to the page.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "RouteData",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RouteData"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DefaultLayout",
            "TypeName": "System.Type",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.RouteView.DefaultLayout\">\r\n            <summary>\r\n            Gets or sets the type of a layout to be used if the page does not\r\n            declare any layout. If specified, the type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />\r\n            and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "DefaultLayout",
              "Common.GloballyQualifiedTypeName": "global::System.Type"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.RouteView",
          "Common.TypeNameIdentifier": "RouteView",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -2086946101,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.RouteView",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.RouteView\">\r\n            <summary>\r\n            Displays the specified page component, rendering it inside its layout\r\n            and any further nested layouts.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.RouteView"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "RouteData",
            "TypeName": "Microsoft.AspNetCore.Components.RouteData",
            "IsEditorRequired": true,
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.RouteView.RouteData\">\r\n            <summary>\r\n            Gets or sets the route data. This determines the page that will be\r\n            displayed and the parameter values that will be supplied to the page.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "RouteData",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RouteData"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DefaultLayout",
            "TypeName": "System.Type",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.RouteView.DefaultLayout\">\r\n            <summary>\r\n            Gets or sets the type of a layout to be used if the page does not\r\n            declare any layout. If specified, the type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />\r\n            and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "DefaultLayout",
              "Common.GloballyQualifiedTypeName": "global::System.Type"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.RouteView",
          "Common.TypeNameIdentifier": "RouteView",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -596645837,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Routing.Router",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Routing.Router\">\r\n            <summary>\r\n            A component that supplies route data corresponding to the current navigation state.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Router"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "AppAssembly",
            "TypeName": "System.Reflection.Assembly",
            "IsEditorRequired": true,
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.AppAssembly\">\r\n            <summary>\r\n            Gets or sets the assembly that should be searched for components matching the URI.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AppAssembly",
              "Common.GloballyQualifiedTypeName": "global::System.Reflection.Assembly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAssemblies",
            "TypeName": "System.Collections.Generic.IEnumerable<System.Reflection.Assembly>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.AdditionalAssemblies\">\r\n            <summary>\r\n            Gets or sets a collection of additional assemblies that should be searched for components\r\n            that can match URIs.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAssemblies",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IEnumerable<global::System.Reflection.Assembly>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NotFound",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.NotFound\">\r\n            <summary>\r\n            Gets or sets the content to display when no match is found for the requested route.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "NotFound",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Found",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.RouteData>",
            "IsEditorRequired": true,
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.Found\">\r\n            <summary>\r\n            Gets or sets the content to display when a match is found for the requested route.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Found",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.RouteData>",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Navigating",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.Navigating\">\r\n            <summary>\r\n            Get or sets the content to display when asynchronous navigation is in progress.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Navigating",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnNavigateAsync",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Routing.NavigationContext>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.OnNavigateAsync\">\r\n            <summary>\r\n            Gets or sets a handler that should be called before navigating to a new page.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "OnNavigateAsync",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Routing.NavigationContext>",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PreferExactMatches",
            "TypeName": "System.Boolean",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.PreferExactMatches\">\r\n            <summary>\r\n            Gets or sets a flag to indicate whether route matching should prefer exact matches\r\n            over wildcards.\r\n            <para>This property is obsolete and configuring it does nothing.</para>\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "PreferExactMatches",
              "Common.GloballyQualifiedTypeName": "global::System.Boolean"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.Router",
          "Common.TypeNameIdentifier": "Router",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Routing",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 204980701,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Routing.Router",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Routing.Router\">\r\n            <summary>\r\n            A component that supplies route data corresponding to the current navigation state.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Routing.Router"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "AppAssembly",
            "TypeName": "System.Reflection.Assembly",
            "IsEditorRequired": true,
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.AppAssembly\">\r\n            <summary>\r\n            Gets or sets the assembly that should be searched for components matching the URI.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AppAssembly",
              "Common.GloballyQualifiedTypeName": "global::System.Reflection.Assembly"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAssemblies",
            "TypeName": "System.Collections.Generic.IEnumerable<System.Reflection.Assembly>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.AdditionalAssemblies\">\r\n            <summary>\r\n            Gets or sets a collection of additional assemblies that should be searched for components\r\n            that can match URIs.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAssemblies",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IEnumerable<global::System.Reflection.Assembly>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "NotFound",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.NotFound\">\r\n            <summary>\r\n            Gets or sets the content to display when no match is found for the requested route.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "NotFound",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Found",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.RouteData>",
            "IsEditorRequired": true,
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.Found\">\r\n            <summary>\r\n            Gets or sets the content to display when a match is found for the requested route.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Found",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.RouteData>",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Navigating",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.Navigating\">\r\n            <summary>\r\n            Get or sets the content to display when asynchronous navigation is in progress.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Navigating",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnNavigateAsync",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Routing.NavigationContext>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.OnNavigateAsync\">\r\n            <summary>\r\n            Gets or sets a handler that should be called before navigating to a new page.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "OnNavigateAsync",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Routing.NavigationContext>",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "PreferExactMatches",
            "TypeName": "System.Boolean",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.PreferExactMatches\">\r\n            <summary>\r\n            Gets or sets a flag to indicate whether route matching should prefer exact matches\r\n            over wildcards.\r\n            <para>This property is obsolete and configuring it does nothing.</para>\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "PreferExactMatches",
              "Common.GloballyQualifiedTypeName": "global::System.Boolean"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.Router",
          "Common.TypeNameIdentifier": "Router",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Routing",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 1657241935,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Routing.Router.NotFound",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.NotFound\">\r\n            <summary>\r\n            Gets or sets the content to display when no match is found for the requested route.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NotFound",
            "ParentTag": "Router"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.Router.NotFound",
          "Common.TypeNameIdentifier": "Router",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Routing",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1155190894,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Routing.Router.NotFound",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.NotFound\">\r\n            <summary>\r\n            Gets or sets the content to display when no match is found for the requested route.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NotFound",
            "ParentTag": "Microsoft.AspNetCore.Components.Routing.Router"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.Router.NotFound",
          "Common.TypeNameIdentifier": "Router",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Routing",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 402569593,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Routing.Router.Found",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.Found\">\r\n            <summary>\r\n            Gets or sets the content to display when a match is found for the requested route.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Found",
            "ParentTag": "Router"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'Found' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.Router.Found",
          "Common.TypeNameIdentifier": "Router",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Routing",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1982521022,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Routing.Router.Found",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.Found\">\r\n            <summary>\r\n            Gets or sets the content to display when a match is found for the requested route.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Found",
            "ParentTag": "Microsoft.AspNetCore.Components.Routing.Router"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'Found' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.Router.Found",
          "Common.TypeNameIdentifier": "Router",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Routing",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1691413060,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Routing.Router.Navigating",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.Navigating\">\r\n            <summary>\r\n            Get or sets the content to display when asynchronous navigation is in progress.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Navigating",
            "ParentTag": "Router"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.Router.Navigating",
          "Common.TypeNameIdentifier": "Router",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Routing",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -927367913,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Routing.Router.Navigating",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.Navigating\">\r\n            <summary>\r\n            Get or sets the content to display when asynchronous navigation is in progress.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Navigating",
            "ParentTag": "Microsoft.AspNetCore.Components.Routing.Router"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.Router.Navigating",
          "Common.TypeNameIdentifier": "Router",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Routing",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -50531594,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Sections.SectionContent",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Sections.SectionContent\">\r\n            <summary>\r\n            Provides content to <see cref=\"T:Microsoft.AspNetCore.Components.Sections.SectionOutlet\" /> components with matching <see cref=\"P:Microsoft.AspNetCore.Components.Sections.SectionContent.SectionId\" />s.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "SectionContent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "SectionName",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Sections.SectionContent.SectionName\">\r\n            <summary>\r\n            Gets or sets the <see cref=\"T:System.String\" /> ID that determines which <see cref=\"T:Microsoft.AspNetCore.Components.Sections.SectionOutlet\" /> instance will render\r\n            the content of this instance.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "SectionName",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SectionId",
            "TypeName": "System.Object",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Sections.SectionContent.SectionId\">\r\n            <summary>\r\n            Gets or sets the <see cref=\"T:System.Object\" /> ID that determines which <see cref=\"T:Microsoft.AspNetCore.Components.Sections.SectionOutlet\" /> instance will render\r\n            the content of this instance.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "SectionId",
              "Common.GloballyQualifiedTypeName": "global::System.Object"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Sections.SectionContent.ChildContent\">\r\n            <summary>\r\n            Gets or sets the content to be rendered in corresponding <see cref=\"T:Microsoft.AspNetCore.Components.Sections.SectionOutlet\" /> instances.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Sections.SectionContent",
          "Common.TypeNameIdentifier": "SectionContent",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Sections",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 1385879270,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Sections.SectionContent",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Sections.SectionContent\">\r\n            <summary>\r\n            Provides content to <see cref=\"T:Microsoft.AspNetCore.Components.Sections.SectionOutlet\" /> components with matching <see cref=\"P:Microsoft.AspNetCore.Components.Sections.SectionContent.SectionId\" />s.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Sections.SectionContent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "SectionName",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Sections.SectionContent.SectionName\">\r\n            <summary>\r\n            Gets or sets the <see cref=\"T:System.String\" /> ID that determines which <see cref=\"T:Microsoft.AspNetCore.Components.Sections.SectionOutlet\" /> instance will render\r\n            the content of this instance.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "SectionName",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SectionId",
            "TypeName": "System.Object",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Sections.SectionContent.SectionId\">\r\n            <summary>\r\n            Gets or sets the <see cref=\"T:System.Object\" /> ID that determines which <see cref=\"T:Microsoft.AspNetCore.Components.Sections.SectionOutlet\" /> instance will render\r\n            the content of this instance.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "SectionId",
              "Common.GloballyQualifiedTypeName": "global::System.Object"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Sections.SectionContent.ChildContent\">\r\n            <summary>\r\n            Gets or sets the content to be rendered in corresponding <see cref=\"T:Microsoft.AspNetCore.Components.Sections.SectionOutlet\" /> instances.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Sections.SectionContent",
          "Common.TypeNameIdentifier": "SectionContent",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Sections",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 1580041131,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Sections.SectionContent.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Sections.SectionContent.ChildContent\">\r\n            <summary>\r\n            Gets or sets the content to be rendered in corresponding <see cref=\"T:Microsoft.AspNetCore.Components.Sections.SectionOutlet\" /> instances.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "SectionContent"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Sections.SectionContent.ChildContent",
          "Common.TypeNameIdentifier": "SectionContent",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Sections",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1540796309,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Sections.SectionContent.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Sections.SectionContent.ChildContent\">\r\n            <summary>\r\n            Gets or sets the content to be rendered in corresponding <see cref=\"T:Microsoft.AspNetCore.Components.Sections.SectionOutlet\" /> instances.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Sections.SectionContent"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Sections.SectionContent.ChildContent",
          "Common.TypeNameIdentifier": "SectionContent",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Sections",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 112059716,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Sections.SectionOutlet",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Sections.SectionOutlet\">\r\n            <summary>\r\n            Renders content provided by <see cref=\"T:Microsoft.AspNetCore.Components.Sections.SectionContent\" /> components with matching <see cref=\"P:Microsoft.AspNetCore.Components.Sections.SectionOutlet.SectionId\" />s.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "SectionOutlet"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "SectionName",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Sections.SectionOutlet.SectionName\">\r\n            <summary>\r\n            Gets or sets the <see cref=\"T:System.String\" /> ID that determines which <see cref=\"T:Microsoft.AspNetCore.Components.Sections.SectionContent\" /> instances will provide\r\n            content to this instance.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "SectionName",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SectionId",
            "TypeName": "System.Object",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Sections.SectionOutlet.SectionId\">\r\n            <summary>\r\n            Gets or sets the <see cref=\"T:System.Object\" /> ID that determines which <see cref=\"T:Microsoft.AspNetCore.Components.Sections.SectionContent\" /> instances will provide\r\n            content to this instance.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "SectionId",
              "Common.GloballyQualifiedTypeName": "global::System.Object"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Sections.SectionOutlet",
          "Common.TypeNameIdentifier": "SectionOutlet",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Sections",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -90950353,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Sections.SectionOutlet",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Sections.SectionOutlet\">\r\n            <summary>\r\n            Renders content provided by <see cref=\"T:Microsoft.AspNetCore.Components.Sections.SectionContent\" /> components with matching <see cref=\"P:Microsoft.AspNetCore.Components.Sections.SectionOutlet.SectionId\" />s.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Sections.SectionOutlet"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "SectionName",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Sections.SectionOutlet.SectionName\">\r\n            <summary>\r\n            Gets or sets the <see cref=\"T:System.String\" /> ID that determines which <see cref=\"T:Microsoft.AspNetCore.Components.Sections.SectionContent\" /> instances will provide\r\n            content to this instance.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "SectionName",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SectionId",
            "TypeName": "System.Object",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Sections.SectionOutlet.SectionId\">\r\n            <summary>\r\n            Gets or sets the <see cref=\"T:System.Object\" /> ID that determines which <see cref=\"T:Microsoft.AspNetCore.Components.Sections.SectionContent\" /> instances will provide\r\n            content to this instance.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "SectionId",
              "Common.GloballyQualifiedTypeName": "global::System.Object"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Sections.SectionOutlet",
          "Common.TypeNameIdentifier": "SectionOutlet",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Sections",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -452689110,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.ImportMap",
        "AssemblyName": "Microsoft.AspNetCore.Components.Endpoints",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.ImportMap\">\r\n            <summary>\r\n            Represents an <c><script type=\"importmap\"></script></c> element that defines the import map for module scripts\r\n            in the application.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ImportMap"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ImportMapDefinition",
            "TypeName": "Microsoft.AspNetCore.Components.ImportMapDefinition",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.ImportMap.ImportMapDefinition\">\r\n            <summary>\r\n            Gets or sets the import map definition to use for the component. If not set\r\n            the component will generate the import map based on the assets defined for this\r\n            application.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ImportMapDefinition",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.ImportMapDefinition"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.ImportMap.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created <c>script</c> element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.ImportMap",
          "Common.TypeNameIdentifier": "ImportMap",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 1945072328,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.ImportMap",
        "AssemblyName": "Microsoft.AspNetCore.Components.Endpoints",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.ImportMap\">\r\n            <summary>\r\n            Represents an <c><script type=\"importmap\"></script></c> element that defines the import map for module scripts\r\n            in the application.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.ImportMap"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ImportMapDefinition",
            "TypeName": "Microsoft.AspNetCore.Components.ImportMapDefinition",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.ImportMap.ImportMapDefinition\">\r\n            <summary>\r\n            Gets or sets the import map definition to use for the component. If not set\r\n            the component will generate the import map based on the assets defined for this\r\n            application.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ImportMapDefinition",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.ImportMapDefinition"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.ImportMap.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created <c>script</c> element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.ImportMap",
          "Common.TypeNameIdentifier": "ImportMap",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 1138013792,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator",
        "AssemblyName": "Microsoft.AspNetCore.Components.Forms",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator\">\r\n            <summary>\r\n            Adds Data Annotations validation support to an <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "DataAnnotationsValidator"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator",
          "Common.TypeNameIdentifier": "DataAnnotationsValidator",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 1886191991,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator",
        "AssemblyName": "Microsoft.AspNetCore.Components.Forms",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator\">\r\n            <summary>\r\n            Adds Data Annotations validation support to an <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator",
          "Common.TypeNameIdentifier": "DataAnnotationsValidator",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 1025770383,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.AntiforgeryToken",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.AntiforgeryToken\">\r\n            <summary>\r\n            Component that renders an antiforgery token as a hidden field.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "AntiforgeryToken"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.AntiforgeryToken",
          "Common.TypeNameIdentifier": "AntiforgeryToken",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 677861751,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.AntiforgeryToken",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.AntiforgeryToken\">\r\n            <summary>\r\n            Component that renders an antiforgery token as a hidden field.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.AntiforgeryToken"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.AntiforgeryToken",
          "Common.TypeNameIdentifier": "AntiforgeryToken",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -2052228623,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.EditForm",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.EditForm\">\r\n            <summary>\r\n            Renders a form element that cascades an <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> to descendants.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "EditForm"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created <c>form</c> element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EditContext",
            "TypeName": "Microsoft.AspNetCore.Components.Forms.EditContext",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\">\r\n            <summary>\r\n            Supplies the edit context explicitly. If using this parameter, do not\r\n            also supply <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.Model\" />, since the model value will be taken\r\n            from the <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditContext.Model\" /> property.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "EditContext",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.Forms.EditContext"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enhance",
            "TypeName": "System.Boolean",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.Enhance\">\r\n             <summary>\r\n             If enabled, form submission is performed without fully reloading the page. This is\r\n             equivalent to adding <code>data-enhance</code> to the form.\r\n            \r\n             This flag is only relevant in server-side rendering (SSR) scenarios. For interactive\r\n             rendering, the flag has no effect since there is no full-page reload on submit anyway.\r\n             </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Enhance",
              "Common.GloballyQualifiedTypeName": "global::System.Boolean"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Model",
            "TypeName": "System.Object",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.Model\">\r\n            <summary>\r\n            Specifies the top-level model object for the form. An edit context will\r\n            be constructed for this model. If using this parameter, do not also supply\r\n            a value for <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Model",
              "Common.GloballyQualifiedTypeName": "global::System.Object"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Forms.EditContext>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.ChildContent\">\r\n            <summary>\r\n            Specifies the content to be rendered inside this <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditForm\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Forms.EditContext>",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnSubmit",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.OnSubmit\">\r\n             <summary>\r\n             A callback that will be invoked when the form is submitted.\r\n            \r\n             If using this parameter, you are responsible for triggering any validation\r\n             manually, e.g., by calling <see cref=\"M:Microsoft.AspNetCore.Components.Forms.EditContext.Validate\" />.\r\n             </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "OnSubmit",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.EditContext>",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnValidSubmit",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.OnValidSubmit\">\r\n            <summary>\r\n            A callback that will be invoked when the form is submitted and the\r\n            <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> is determined to be valid.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "OnValidSubmit",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.EditContext>",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInvalidSubmit",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.OnInvalidSubmit\">\r\n            <summary>\r\n            A callback that will be invoked when the form is submitted and the\r\n            <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> is determined to be invalid.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "OnInvalidSubmit",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.EditContext>",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FormName",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.FormName\">\r\n            <summary>\r\n            Gets or sets the form handler name. This is required for posting it to a server-side endpoint.\r\n            It is not used during interactive rendering.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "FormName",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.EditForm",
          "Common.TypeNameIdentifier": "EditForm",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -1133225889,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.EditForm",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.EditForm\">\r\n            <summary>\r\n            Renders a form element that cascades an <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> to descendants.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.EditForm"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created <c>form</c> element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EditContext",
            "TypeName": "Microsoft.AspNetCore.Components.Forms.EditContext",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\">\r\n            <summary>\r\n            Supplies the edit context explicitly. If using this parameter, do not\r\n            also supply <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.Model\" />, since the model value will be taken\r\n            from the <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditContext.Model\" /> property.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "EditContext",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.Forms.EditContext"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Enhance",
            "TypeName": "System.Boolean",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.Enhance\">\r\n             <summary>\r\n             If enabled, form submission is performed without fully reloading the page. This is\r\n             equivalent to adding <code>data-enhance</code> to the form.\r\n            \r\n             This flag is only relevant in server-side rendering (SSR) scenarios. For interactive\r\n             rendering, the flag has no effect since there is no full-page reload on submit anyway.\r\n             </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Enhance",
              "Common.GloballyQualifiedTypeName": "global::System.Boolean"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Model",
            "TypeName": "System.Object",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.Model\">\r\n            <summary>\r\n            Specifies the top-level model object for the form. An edit context will\r\n            be constructed for this model. If using this parameter, do not also supply\r\n            a value for <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Model",
              "Common.GloballyQualifiedTypeName": "global::System.Object"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Forms.EditContext>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.ChildContent\">\r\n            <summary>\r\n            Specifies the content to be rendered inside this <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditForm\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Forms.EditContext>",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnSubmit",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.OnSubmit\">\r\n             <summary>\r\n             A callback that will be invoked when the form is submitted.\r\n            \r\n             If using this parameter, you are responsible for triggering any validation\r\n             manually, e.g., by calling <see cref=\"M:Microsoft.AspNetCore.Components.Forms.EditContext.Validate\" />.\r\n             </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "OnSubmit",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.EditContext>",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnValidSubmit",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.OnValidSubmit\">\r\n            <summary>\r\n            A callback that will be invoked when the form is submitted and the\r\n            <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> is determined to be valid.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "OnValidSubmit",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.EditContext>",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OnInvalidSubmit",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.OnInvalidSubmit\">\r\n            <summary>\r\n            A callback that will be invoked when the form is submitted and the\r\n            <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> is determined to be invalid.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "OnInvalidSubmit",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.EditContext>",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "FormName",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.FormName\">\r\n            <summary>\r\n            Gets or sets the form handler name. This is required for posting it to a server-side endpoint.\r\n            It is not used during interactive rendering.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "FormName",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.EditForm",
          "Common.TypeNameIdentifier": "EditForm",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 278883885,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Forms.EditForm.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.ChildContent\">\r\n            <summary>\r\n            Specifies the content to be rendered inside this <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditForm\" />.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "EditForm"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ChildContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.EditForm.ChildContent",
          "Common.TypeNameIdentifier": "EditForm",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1166832162,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Forms.EditForm.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.ChildContent\">\r\n            <summary>\r\n            Specifies the content to be rendered inside this <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditForm\" />.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Forms.EditForm"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ChildContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.EditForm.ChildContent",
          "Common.TypeNameIdentifier": "EditForm",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -258269787,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputCheckbox",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputCheckbox\">\r\n            <summary>\r\n            An input component for editing <see cref=\"T:System.Boolean\" /> values.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputCheckbox"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.Boolean",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Common.GloballyQualifiedTypeName": "global::System.Boolean"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<global::System.Boolean>",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<System.Boolean>>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Common.GloballyQualifiedTypeName": "global::System.Linq.Expressions.Expression<global::System.Func<global::System.Boolean>>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "DisplayName",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputCheckbox",
          "Common.TypeNameIdentifier": "InputCheckbox",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -981546056,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputCheckbox",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputCheckbox\">\r\n            <summary>\r\n            An input component for editing <see cref=\"T:System.Boolean\" /> values.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputCheckbox"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.Boolean",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Common.GloballyQualifiedTypeName": "global::System.Boolean"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<global::System.Boolean>",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<System.Boolean>>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Common.GloballyQualifiedTypeName": "global::System.Linq.Expressions.Expression<global::System.Func<global::System.Boolean>>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "DisplayName",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputCheckbox",
          "Common.TypeNameIdentifier": "InputCheckbox",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -2040376331,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputDate<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputDate`1\">\r\n            <summary>\r\n            An input component for editing date values.\r\n            The supported types for the date value are:\r\n            <list type=\"bullet\">\r\n            <item><see cref=\"T:System.DateTime\" /></item>\r\n            <item><see cref=\"T:System.DateTimeOffset\" /></item>\r\n            <item><see cref=\"T:System.DateOnly\" /></item>\r\n            <item><see cref=\"T:System.TimeOnly\" /></item>\r\n            </list>\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputDate"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputDate<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Type",
            "TypeName": "Microsoft.AspNetCore.Components.Forms.InputDateType",
            "IsEnum": true,
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputDate`1.Type\">\r\n            <summary>\r\n            Gets or sets the type of HTML input to be rendered.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Type",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.Forms.InputDateType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ParsingErrorMessage",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputDate`1.ParsingErrorMessage\">\r\n            <summary>\r\n            Gets or sets the error message used when displaying an a parsing error.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ParsingErrorMessage",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Common.GloballyQualifiedTypeName": "TValue",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<TValue>",
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Common.GloballyQualifiedTypeName": "global::System.Linq.Expressions.Expression<global::System.Func<TValue>>",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "DisplayName",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputDate<TValue>",
          "Common.TypeNameIdentifier": "InputDate",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.GenericTyped": "True",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 1982161022,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputDate<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputDate`1\">\r\n            <summary>\r\n            An input component for editing date values.\r\n            The supported types for the date value are:\r\n            <list type=\"bullet\">\r\n            <item><see cref=\"T:System.DateTime\" /></item>\r\n            <item><see cref=\"T:System.DateTimeOffset\" /></item>\r\n            <item><see cref=\"T:System.DateOnly\" /></item>\r\n            <item><see cref=\"T:System.TimeOnly\" /></item>\r\n            </list>\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputDate"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputDate<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Type",
            "TypeName": "Microsoft.AspNetCore.Components.Forms.InputDateType",
            "IsEnum": true,
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputDate`1.Type\">\r\n            <summary>\r\n            Gets or sets the type of HTML input to be rendered.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Type",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.Forms.InputDateType"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ParsingErrorMessage",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputDate`1.ParsingErrorMessage\">\r\n            <summary>\r\n            Gets or sets the error message used when displaying an a parsing error.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ParsingErrorMessage",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Common.GloballyQualifiedTypeName": "TValue",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<TValue>",
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Common.GloballyQualifiedTypeName": "global::System.Linq.Expressions.Expression<global::System.Func<TValue>>",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "DisplayName",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputDate<TValue>",
          "Common.TypeNameIdentifier": "InputDate",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -1482009248,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputFile",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputFile\">\r\n            <summary>\r\n            A component that wraps the HTML file input element and supplies a <see cref=\"T:System.IO.Stream\" /> for each file's contents.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputFile"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "OnChange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputFile.OnChange\">\r\n            <summary>\r\n            Gets or sets the event callback that will be invoked when the collection of selected files changes.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "OnChange",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputFile.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the input element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputFile",
          "Common.TypeNameIdentifier": "InputFile",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -843193415,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputFile",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputFile\">\r\n            <summary>\r\n            A component that wraps the HTML file input element and supplies a <see cref=\"T:System.IO.Stream\" /> for each file's contents.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputFile"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "OnChange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputFile.OnChange\">\r\n            <summary>\r\n            Gets or sets the event callback that will be invoked when the collection of selected files changes.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "OnChange",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputFile.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the input element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputFile",
          "Common.TypeNameIdentifier": "InputFile",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 1283219976,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputNumber`1\">\r\n            <summary>\r\n            An input component for editing numeric values.\r\n            Supported numeric types are <see cref=\"T:System.Int32\" />, <see cref=\"T:System.Int64\" />, <see cref=\"T:System.Int16\" />, <see cref=\"T:System.Single\" />, <see cref=\"T:System.Double\" />, <see cref=\"T:System.Decimal\" />.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputNumber"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputNumber<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ParsingErrorMessage",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputNumber`1.ParsingErrorMessage\">\r\n            <summary>\r\n            Gets or sets the error message used when displaying an a parsing error.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ParsingErrorMessage",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Common.GloballyQualifiedTypeName": "TValue",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<TValue>",
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Common.GloballyQualifiedTypeName": "global::System.Linq.Expressions.Expression<global::System.Func<TValue>>",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "DisplayName",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>",
          "Common.TypeNameIdentifier": "InputNumber",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.GenericTyped": "True",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -1721718994,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputNumber`1\">\r\n            <summary>\r\n            An input component for editing numeric values.\r\n            Supported numeric types are <see cref=\"T:System.Int32\" />, <see cref=\"T:System.Int64\" />, <see cref=\"T:System.Int16\" />, <see cref=\"T:System.Single\" />, <see cref=\"T:System.Double\" />, <see cref=\"T:System.Decimal\" />.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputNumber"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputNumber<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ParsingErrorMessage",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputNumber`1.ParsingErrorMessage\">\r\n            <summary>\r\n            Gets or sets the error message used when displaying an a parsing error.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ParsingErrorMessage",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Common.GloballyQualifiedTypeName": "TValue",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<TValue>",
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Common.GloballyQualifiedTypeName": "global::System.Linq.Expressions.Expression<global::System.Func<TValue>>",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "DisplayName",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>",
          "Common.TypeNameIdentifier": "InputNumber",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 582859106,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputRadio<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputRadio`1\">\r\n            <summary>\r\n            An input component used for selecting a value from a group of choices.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputRadio"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputRadio<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputRadio`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the input element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputRadio`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of this input.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Common.GloballyQualifiedTypeName": "TValue",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Name",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputRadio`1.Name\">\r\n            <summary>\r\n            Gets or sets the name of the parent input radio group.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Name",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputRadio<TValue>",
          "Common.TypeNameIdentifier": "InputRadio",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.GenericTyped": "True",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 2000614972,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputRadio<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputRadio`1\">\r\n            <summary>\r\n            An input component used for selecting a value from a group of choices.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputRadio"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputRadio<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputRadio`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the input element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputRadio`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of this input.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Common.GloballyQualifiedTypeName": "TValue",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Name",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputRadio`1.Name\">\r\n            <summary>\r\n            Gets or sets the name of the parent input radio group.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Name",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputRadio<TValue>",
          "Common.TypeNameIdentifier": "InputRadio",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -1493876326,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1\">\r\n            <summary>\r\n            Groups child <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadio`1\" /> components.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputRadioGroup"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1.ChildContent\">\r\n            <summary>\r\n            Gets or sets the child content to be rendering inside the <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Name",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1.Name\">\r\n            <summary>\r\n            Gets or sets the name of the group.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Name",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Common.GloballyQualifiedTypeName": "TValue",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<TValue>",
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Common.GloballyQualifiedTypeName": "global::System.Linq.Expressions.Expression<global::System.Func<TValue>>",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "DisplayName",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>",
          "Common.TypeNameIdentifier": "InputRadioGroup",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.GenericTyped": "True",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -78085001,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1\">\r\n            <summary>\r\n            Groups child <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadio`1\" /> components.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1.ChildContent\">\r\n            <summary>\r\n            Gets or sets the child content to be rendering inside the <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Name",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1.Name\">\r\n            <summary>\r\n            Gets or sets the name of the group.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Name",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Common.GloballyQualifiedTypeName": "TValue",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<TValue>",
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Common.GloballyQualifiedTypeName": "global::System.Linq.Expressions.Expression<global::System.Func<TValue>>",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "DisplayName",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>",
          "Common.TypeNameIdentifier": "InputRadioGroup",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 997010714,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1.ChildContent\">\r\n            <summary>\r\n            Gets or sets the child content to be rendering inside the <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1\" />.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "InputRadioGroup"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>.ChildContent",
          "Common.TypeNameIdentifier": "InputRadioGroup",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1038861235,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1.ChildContent\">\r\n            <summary>\r\n            Gets or sets the child content to be rendering inside the <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1\" />.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>.ChildContent",
          "Common.TypeNameIdentifier": "InputRadioGroup",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1076301145,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputSelect`1\">\r\n            <summary>\r\n            A dropdown selection component.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputSelect"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputSelect<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputSelect`1.ChildContent\">\r\n            <summary>\r\n            Gets or sets the child content to be rendering inside the select element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Common.GloballyQualifiedTypeName": "TValue",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<TValue>",
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Common.GloballyQualifiedTypeName": "global::System.Linq.Expressions.Expression<global::System.Func<TValue>>",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "DisplayName",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>",
          "Common.TypeNameIdentifier": "InputSelect",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.GenericTyped": "True",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -817675180,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputSelect`1\">\r\n            <summary>\r\n            A dropdown selection component.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputSelect"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputSelect<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputSelect`1.ChildContent\">\r\n            <summary>\r\n            Gets or sets the child content to be rendering inside the select element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "TValue",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Common.GloballyQualifiedTypeName": "TValue",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<TValue>",
              "Common.PropertyName": "ValueChanged",
              "Components.EventCallback": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Common.GloballyQualifiedTypeName": "global::System.Linq.Expressions.Expression<global::System.Func<TValue>>",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "DisplayName",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>",
          "Common.TypeNameIdentifier": "InputSelect",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 1359418894,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputSelect`1.ChildContent\">\r\n            <summary>\r\n            Gets or sets the child content to be rendering inside the select element.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "InputSelect"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>.ChildContent",
          "Common.TypeNameIdentifier": "InputSelect",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 171677077,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputSelect`1.ChildContent\">\r\n            <summary>\r\n            Gets or sets the child content to be rendering inside the select element.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Forms.InputSelect"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>.ChildContent",
          "Common.TypeNameIdentifier": "InputSelect",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -176323727,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputText",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputText\">\r\n            <summary>\r\n            An input component for editing <see cref=\"T:System.String\" /> values.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputText"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<System.String>>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Common.GloballyQualifiedTypeName": "global::System.Linq.Expressions.Expression<global::System.Func<global::System.String>>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "DisplayName",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputText",
          "Common.TypeNameIdentifier": "InputText",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 1956821605,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputText",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputText\">\r\n            <summary>\r\n            An input component for editing <see cref=\"T:System.String\" /> values.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputText"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<System.String>>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Common.GloballyQualifiedTypeName": "global::System.Linq.Expressions.Expression<global::System.Func<global::System.String>>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "DisplayName",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputText",
          "Common.TypeNameIdentifier": "InputText",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 1924205863,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputTextArea",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputTextArea\">\r\n            <summary>\r\n            A multiline input component for editing <see cref=\"T:System.String\" /> values.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputTextArea"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<System.String>>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Common.GloballyQualifiedTypeName": "global::System.Linq.Expressions.Expression<global::System.Func<global::System.String>>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "DisplayName",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputTextArea",
          "Common.TypeNameIdentifier": "InputTextArea",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -1679340323,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputTextArea",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputTextArea\">\r\n            <summary>\r\n            A multiline input component for editing <see cref=\"T:System.String\" /> values.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputTextArea"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Value",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Value",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueChanged",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ValueChanged",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ValueExpression",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<System.String>>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ValueExpression",
              "Common.GloballyQualifiedTypeName": "global::System.Linq.Expressions.Expression<global::System.Func<global::System.String>>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "DisplayName",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "DisplayName",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputTextArea",
          "Common.TypeNameIdentifier": "InputTextArea",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -1736424201,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.FormMappingScope",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.FormMappingScope\">\r\n            <summary>\r\n            Defines the mapping scope for data received from form posts.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "FormMappingScope"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Name",
            "TypeName": "System.String",
            "IsEditorRequired": true,
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.FormMappingScope.Name\">\r\n            <summary>\r\n            The mapping scope name.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Name",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Forms.FormMappingContext>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.FormMappingScope.ChildContent\">\r\n            <summary>\r\n            Specifies the content to be rendered inside this <see cref=\"T:Microsoft.AspNetCore.Components.Forms.FormMappingScope\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Forms.FormMappingContext>",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.FormMappingScope",
          "Common.TypeNameIdentifier": "FormMappingScope",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 1414597344,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.FormMappingScope",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.FormMappingScope\">\r\n            <summary>\r\n            Defines the mapping scope for data received from form posts.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.FormMappingScope"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Name",
            "TypeName": "System.String",
            "IsEditorRequired": true,
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.FormMappingScope.Name\">\r\n            <summary>\r\n            The mapping scope name.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Name",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Forms.FormMappingContext>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.FormMappingScope.ChildContent\">\r\n            <summary>\r\n            Specifies the content to be rendered inside this <see cref=\"T:Microsoft.AspNetCore.Components.Forms.FormMappingScope\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Forms.FormMappingContext>",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.FormMappingScope",
          "Common.TypeNameIdentifier": "FormMappingScope",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -96811078,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Forms.FormMappingScope.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.FormMappingScope.ChildContent\">\r\n            <summary>\r\n            Specifies the content to be rendered inside this <see cref=\"T:Microsoft.AspNetCore.Components.Forms.FormMappingScope\" />.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "FormMappingScope"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ChildContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.FormMappingScope.ChildContent",
          "Common.TypeNameIdentifier": "FormMappingScope",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1092425883,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Forms.FormMappingScope.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.FormMappingScope.ChildContent\">\r\n            <summary>\r\n            Specifies the content to be rendered inside this <see cref=\"T:Microsoft.AspNetCore.Components.Forms.FormMappingScope\" />.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Forms.FormMappingScope"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ChildContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.FormMappingScope.ChildContent",
          "Common.TypeNameIdentifier": "FormMappingScope",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1592815741,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.ValidationMessage`1\">\r\n            <summary>\r\n            Displays a list of validation messages for a specified field within a cascaded <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ValidationMessage"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.ValidationMessage`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created <c>div</c> element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "For",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.ValidationMessage`1.For\">\r\n            <summary>\r\n            Specifies the field for which validation messages should be displayed.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "For",
              "Common.GloballyQualifiedTypeName": "global::System.Linq.Expressions.Expression<global::System.Func<TValue>>",
              "Components.GenericTyped": "True"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue>",
          "Common.TypeNameIdentifier": "ValidationMessage",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.GenericTyped": "True",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 138837849,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.ValidationMessage`1\">\r\n            <summary>\r\n            Displays a list of validation messages for a specified field within a cascaded <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.ValidationMessage"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TValue",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue> component.",
            "Metadata": {
              "Common.PropertyName": "TValue",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.ValidationMessage`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created <c>div</c> element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "For",
            "TypeName": "System.Linq.Expressions.Expression<System.Func<TValue>>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.ValidationMessage`1.For\">\r\n            <summary>\r\n            Specifies the field for which validation messages should be displayed.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "For",
              "Common.GloballyQualifiedTypeName": "global::System.Linq.Expressions.Expression<global::System.Func<TValue>>",
              "Components.GenericTyped": "True"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue>",
          "Common.TypeNameIdentifier": "ValidationMessage",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -28650456,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.ValidationSummary",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.ValidationSummary\">\r\n            <summary>\r\n            Displays a list of validation messages from a cascaded <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ValidationSummary"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Model",
            "TypeName": "System.Object",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.ValidationSummary.Model\">\r\n            <summary>\r\n            Gets or sets the model to produce the list of validation messages for.\r\n            When specified, this lists all errors that are associated with the model instance.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Model",
              "Common.GloballyQualifiedTypeName": "global::System.Object"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.ValidationSummary.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created <c>ul</c> element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.ValidationSummary",
          "Common.TypeNameIdentifier": "ValidationSummary",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -768734720,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Forms.ValidationSummary",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Forms.ValidationSummary\">\r\n            <summary>\r\n            Displays a list of validation messages from a cascaded <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.ValidationSummary"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "Model",
            "TypeName": "System.Object",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.ValidationSummary.Model\">\r\n            <summary>\r\n            Gets or sets the model to produce the list of validation messages for.\r\n            When specified, this lists all errors that are associated with the model instance.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Model",
              "Common.GloballyQualifiedTypeName": "global::System.Object"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Forms.ValidationSummary.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created <c>ul</c> element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.ValidationSummary",
          "Common.TypeNameIdentifier": "ValidationSummary",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -251989120,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Routing.FocusOnNavigate",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Routing.FocusOnNavigate\">\r\n            <summary>\r\n            After navigating from one page to another, sets focus to an element\r\n            matching a CSS selector. This can be used to build an accessible\r\n            navigation system compatible with screen readers.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "FocusOnNavigate"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "RouteData",
            "TypeName": "Microsoft.AspNetCore.Components.RouteData",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.FocusOnNavigate.RouteData\">\r\n            <summary>\r\n            Gets or sets the route data. This can be obtained from an enclosing\r\n            <see cref=\"T:Microsoft.AspNetCore.Components.Routing.Router\" /> component.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "RouteData",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RouteData"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Selector",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.FocusOnNavigate.Selector\">\r\n            <summary>\r\n            Gets or sets a CSS selector describing the element to be focused after\r\n            navigation between pages.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Selector",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.FocusOnNavigate",
          "Common.TypeNameIdentifier": "FocusOnNavigate",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Routing",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -137631456,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Routing.FocusOnNavigate",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Routing.FocusOnNavigate\">\r\n            <summary>\r\n            After navigating from one page to another, sets focus to an element\r\n            matching a CSS selector. This can be used to build an accessible\r\n            navigation system compatible with screen readers.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Routing.FocusOnNavigate"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "RouteData",
            "TypeName": "Microsoft.AspNetCore.Components.RouteData",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.FocusOnNavigate.RouteData\">\r\n            <summary>\r\n            Gets or sets the route data. This can be obtained from an enclosing\r\n            <see cref=\"T:Microsoft.AspNetCore.Components.Routing.Router\" /> component.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "RouteData",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RouteData"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Selector",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.FocusOnNavigate.Selector\">\r\n            <summary>\r\n            Gets or sets a CSS selector describing the element to be focused after\r\n            navigation between pages.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Selector",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.FocusOnNavigate",
          "Common.TypeNameIdentifier": "FocusOnNavigate",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Routing",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -879399954,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Routing.NavigationLock",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Routing.NavigationLock\">\r\n            <summary>\r\n            A component that can be used to intercept navigation events. \r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NavigationLock"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "OnBeforeInternalNavigation",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Routing.LocationChangingContext>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.NavigationLock.OnBeforeInternalNavigation\">\r\n            <summary>\r\n            Gets or sets a callback to be invoked when an internal navigation event occurs.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "OnBeforeInternalNavigation",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Routing.LocationChangingContext>",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ConfirmExternalNavigation",
            "TypeName": "System.Boolean",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.NavigationLock.ConfirmExternalNavigation\">\r\n            <summary>\r\n            Gets or sets whether a browser dialog should prompt the user to either confirm or cancel\r\n            external navigations.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ConfirmExternalNavigation",
              "Common.GloballyQualifiedTypeName": "global::System.Boolean"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.NavigationLock",
          "Common.TypeNameIdentifier": "NavigationLock",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Routing",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 1995326238,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Routing.NavigationLock",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Routing.NavigationLock\">\r\n            <summary>\r\n            A component that can be used to intercept navigation events. \r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Routing.NavigationLock"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "OnBeforeInternalNavigation",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Routing.LocationChangingContext>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.NavigationLock.OnBeforeInternalNavigation\">\r\n            <summary>\r\n            Gets or sets a callback to be invoked when an internal navigation event occurs.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "OnBeforeInternalNavigation",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Routing.LocationChangingContext>",
              "Components.EventCallback": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ConfirmExternalNavigation",
            "TypeName": "System.Boolean",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.NavigationLock.ConfirmExternalNavigation\">\r\n            <summary>\r\n            Gets or sets whether a browser dialog should prompt the user to either confirm or cancel\r\n            external navigations.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ConfirmExternalNavigation",
              "Common.GloballyQualifiedTypeName": "global::System.Boolean"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.NavigationLock",
          "Common.TypeNameIdentifier": "NavigationLock",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Routing",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -1294666548,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Routing.NavLink",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Routing.NavLink\">\r\n            <summary>\r\n            A component that renders an anchor tag, automatically toggling its 'active'\r\n            class based on whether its 'href' matches the current URI.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "NavLink"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ActiveClass",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.NavLink.ActiveClass\">\r\n            <summary>\r\n            Gets or sets the CSS class name applied to the NavLink when the\r\n            current route matches the NavLink href.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ActiveClass",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.NavLink.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be added to the generated\r\n            <c>a</c> element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent\">\r\n            <summary>\r\n            Gets or sets the child content of the component.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Match",
            "TypeName": "Microsoft.AspNetCore.Components.Routing.NavLinkMatch",
            "IsEnum": true,
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.NavLink.Match\">\r\n            <summary>\r\n            Gets or sets a value representing the URL matching behavior.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Match",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.Routing.NavLinkMatch"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.NavLink",
          "Common.TypeNameIdentifier": "NavLink",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Routing",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -43886924,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Routing.NavLink",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Routing.NavLink\">\r\n            <summary>\r\n            A component that renders an anchor tag, automatically toggling its 'active'\r\n            class based on whether its 'href' matches the current URI.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Routing.NavLink"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ActiveClass",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.NavLink.ActiveClass\">\r\n            <summary>\r\n            Gets or sets the CSS class name applied to the NavLink when the\r\n            current route matches the NavLink href.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ActiveClass",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "AdditionalAttributes",
            "TypeName": "System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.NavLink.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be added to the generated\r\n            <c>a</c> element.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AdditionalAttributes",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent\">\r\n            <summary>\r\n            Gets or sets the child content of the component.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Match",
            "TypeName": "Microsoft.AspNetCore.Components.Routing.NavLinkMatch",
            "IsEnum": true,
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.NavLink.Match\">\r\n            <summary>\r\n            Gets or sets a value representing the URL matching behavior.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Match",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.Routing.NavLinkMatch"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.NavLink",
          "Common.TypeNameIdentifier": "NavLink",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Routing",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 366824328,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent\">\r\n            <summary>\r\n            Gets or sets the child content of the component.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "NavLink"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent",
          "Common.TypeNameIdentifier": "NavLink",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Routing",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 350550,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent\">\r\n            <summary>\r\n            Gets or sets the child content of the component.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Routing.NavLink"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent",
          "Common.TypeNameIdentifier": "NavLink",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Routing",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1455567977,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Web.HeadContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Web.HeadContent\">\r\n            <summary>\r\n            Provides content to <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> components.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HeadContent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.HeadContent.ChildContent\">\r\n            <summary>\r\n            Gets or sets the content to be rendered in <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> instances.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.HeadContent",
          "Common.TypeNameIdentifier": "HeadContent",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 1431234526,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Web.HeadContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Web.HeadContent\">\r\n            <summary>\r\n            Provides content to <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> components.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Web.HeadContent"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.HeadContent.ChildContent\">\r\n            <summary>\r\n            Gets or sets the content to be rendered in <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> instances.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.HeadContent",
          "Common.TypeNameIdentifier": "HeadContent",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -1429498682,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.HeadContent.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.HeadContent.ChildContent\">\r\n            <summary>\r\n            Gets or sets the content to be rendered in <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> instances.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "HeadContent"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.HeadContent.ChildContent",
          "Common.TypeNameIdentifier": "HeadContent",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -451048452,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.HeadContent.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.HeadContent.ChildContent\">\r\n            <summary>\r\n            Gets or sets the content to be rendered in <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> instances.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Web.HeadContent"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.HeadContent.ChildContent",
          "Common.TypeNameIdentifier": "HeadContent",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1107386965,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Web.HeadOutlet",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\">\r\n            <summary>\r\n            Renders content provided by <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadContent\" /> components.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "HeadOutlet"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.HeadOutlet",
          "Common.TypeNameIdentifier": "HeadOutlet",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -1706203968,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Web.HeadOutlet",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\">\r\n            <summary>\r\n            Renders content provided by <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadContent\" /> components.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Web.HeadOutlet"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.HeadOutlet",
          "Common.TypeNameIdentifier": "HeadOutlet",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -601666478,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Web.PageTitle",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Web.PageTitle\">\r\n            <summary>\r\n            Enables rendering an HTML <c>&lt;title&gt;</c> to a <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> component.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "PageTitle"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.PageTitle.ChildContent\">\r\n            <summary>\r\n            Gets or sets the content to be rendered as the document title.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.PageTitle",
          "Common.TypeNameIdentifier": "PageTitle",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -604065299,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Web.PageTitle",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Web.PageTitle\">\r\n            <summary>\r\n            Enables rendering an HTML <c>&lt;title&gt;</c> to a <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> component.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Web.PageTitle"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.PageTitle.ChildContent\">\r\n            <summary>\r\n            Gets or sets the content to be rendered as the document title.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.PageTitle",
          "Common.TypeNameIdentifier": "PageTitle",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 259215669,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.PageTitle.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.PageTitle.ChildContent\">\r\n            <summary>\r\n            Gets or sets the content to be rendered as the document title.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "PageTitle"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.PageTitle.ChildContent",
          "Common.TypeNameIdentifier": "PageTitle",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1532166581,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.PageTitle.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.PageTitle.ChildContent\">\r\n            <summary>\r\n            Gets or sets the content to be rendered as the document title.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Web.PageTitle"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.PageTitle.ChildContent",
          "Common.TypeNameIdentifier": "PageTitle",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -2022679609,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Web.ErrorBoundary",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Web.ErrorBoundary\">\r\n            <summary>\r\n            Captures errors thrown from its child content.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ErrorBoundary"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.ErrorBoundaryBase.ChildContent\">\r\n            <summary>\r\n            The content to be displayed when there is no error.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<System.Exception>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.ErrorBoundaryBase.ErrorContent\">\r\n            <summary>\r\n            The content to be displayed when there is an error.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ErrorContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Exception>",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaximumErrorCount",
            "TypeName": "System.Int32",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.ErrorBoundaryBase.MaximumErrorCount\">\r\n            <summary>\r\n            The maximum number of errors that can be handled. If more errors are received,\r\n            they will be treated as fatal. Calling <see cref=\"M:Microsoft.AspNetCore.Components.ErrorBoundaryBase.Recover\" /> resets the count.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "MaximumErrorCount",
              "Common.GloballyQualifiedTypeName": "global::System.Int32"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.ErrorBoundary",
          "Common.TypeNameIdentifier": "ErrorBoundary",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -1009592485,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Web.ErrorBoundary",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Web.ErrorBoundary\">\r\n            <summary>\r\n            Captures errors thrown from its child content.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Web.ErrorBoundary"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.ErrorBoundaryBase.ChildContent\">\r\n            <summary>\r\n            The content to be displayed when there is no error.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ChildContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ErrorContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<System.Exception>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.ErrorBoundaryBase.ErrorContent\">\r\n            <summary>\r\n            The content to be displayed when there is an error.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ErrorContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Exception>",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaximumErrorCount",
            "TypeName": "System.Int32",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.ErrorBoundaryBase.MaximumErrorCount\">\r\n            <summary>\r\n            The maximum number of errors that can be handled. If more errors are received,\r\n            they will be treated as fatal. Calling <see cref=\"M:Microsoft.AspNetCore.Components.ErrorBoundaryBase.Recover\" /> resets the count.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "MaximumErrorCount",
              "Common.GloballyQualifiedTypeName": "global::System.Int32"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.ErrorBoundary",
          "Common.TypeNameIdentifier": "ErrorBoundary",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 16949433,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.ErrorBoundary.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.ErrorBoundaryBase.ChildContent\">\r\n            <summary>\r\n            The content to be displayed when there is no error.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "ErrorBoundary"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.ErrorBoundary.ChildContent",
          "Common.TypeNameIdentifier": "ErrorBoundary",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1918976312,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.ErrorBoundary.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.ErrorBoundaryBase.ChildContent\">\r\n            <summary>\r\n            The content to be displayed when there is no error.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Web.ErrorBoundary"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.ErrorBoundary.ChildContent",
          "Common.TypeNameIdentifier": "ErrorBoundary",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1495757901,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.ErrorBoundary.ErrorContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.ErrorBoundaryBase.ErrorContent\">\r\n            <summary>\r\n            The content to be displayed when there is an error.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ErrorContent",
            "ParentTag": "ErrorBoundary"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ErrorContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.ErrorBoundary.ErrorContent",
          "Common.TypeNameIdentifier": "ErrorBoundary",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 194193645,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.ErrorBoundary.ErrorContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.ErrorBoundaryBase.ErrorContent\">\r\n            <summary>\r\n            The content to be displayed when there is an error.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ErrorContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Web.ErrorBoundary"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ErrorContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.ErrorBoundary.ErrorContent",
          "Common.TypeNameIdentifier": "ErrorBoundary",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 346743306,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1\">\r\n            <summary>\r\n            Provides functionality for rendering a virtualized list of items.\r\n            </summary>\r\n            <typeparam name=\"TItem\">The <c>context</c> type for the items being rendered.</typeparam>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Virtualize"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TItem",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TItem for the Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem> component.",
            "Metadata": {
              "Common.PropertyName": "TItem",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<TItem>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.ChildContent\">\r\n            <summary>\r\n            Gets or sets the item template for the list.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment<TItem>",
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<TItem>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.ItemContent\">\r\n            <summary>\r\n            Gets or sets the item template for the list.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment<TItem>",
              "Common.PropertyName": "ItemContent",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Web.Virtualization.PlaceholderContext>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.Placeholder\">\r\n            <summary>\r\n            Gets or sets the template for items that have not yet been loaded in memory.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Placeholder",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Web.Virtualization.PlaceholderContext>",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EmptyContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.EmptyContent\">\r\n            <summary>\r\n            Gets or sets the content to show when <see cref=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.Items\" /> is empty\r\n            or when the <see cref=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderResult`1.TotalItemCount\" /> is zero.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "EmptyContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemSize",
            "TypeName": "System.Single",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.ItemSize\">\r\n            <summary>\r\n            Gets the size of each item in pixels. Defaults to 50px.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ItemSize",
              "Common.GloballyQualifiedTypeName": "global::System.Single"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemsProvider",
            "TypeName": "Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderDelegate<TItem>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.ItemsProvider\">\r\n            <summary>\r\n            Gets or sets the function providing items to the list.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderDelegate<TItem>",
              "Common.PropertyName": "ItemsProvider",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True",
              "Components.IsDelegateAwaitableResult": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Items",
            "TypeName": "System.Collections.Generic.ICollection<TItem>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.Items\">\r\n            <summary>\r\n            Gets or sets the fixed item source.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Items",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.ICollection<TItem>",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OverscanCount",
            "TypeName": "System.Int32",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.OverscanCount\">\r\n            <summary>\r\n            Gets or sets a value that determines how many additional items will be rendered\r\n            before and after the visible region. This help to reduce the frequency of rendering\r\n            during scrolling. However, higher values mean that more elements will be present\r\n            in the page.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "OverscanCount",
              "Common.GloballyQualifiedTypeName": "global::System.Int32"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SpacerElement",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.SpacerElement\">\r\n             <summary>\r\n             Gets or sets the tag name of the HTML element that will be used as the virtualization spacer.\r\n             One such element will be rendered before the visible items, and one more after them, using\r\n             an explicit \"height\" style to control the scroll range.\r\n            \r\n             The default value is \"div\". If you are placing the <see cref=\"T:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1\" /> instance inside\r\n             an element that requires a specific child tag name, consider setting that here. For example when\r\n             rendering inside a \"tbody\", consider setting <see cref=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.SpacerElement\" /> to the value \"tr\".\r\n             </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "SpacerElement",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxItemCount",
            "TypeName": "System.Int32",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.MaxItemCount\">\r\n             <summary>\r\n             Gets or sets the maximum number of items that will be rendered, even if the client reports\r\n             that its viewport is large enough to show more. The default value is 100.\r\n            \r\n             This should only be used as a safeguard against excessive memory usage or large data loads.\r\n             Do not set this to a smaller number than you expect to fit on a realistic-sized window, because\r\n             that will leave a blank gap below and the user may not be able to see the rest of the content.\r\n             </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "MaxItemCount",
              "Common.GloballyQualifiedTypeName": "global::System.Int32"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>",
          "Common.TypeNameIdentifier": "Virtualize",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web.Virtualization",
          "Components.GenericTyped": "True",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": -1459814785,
        "Kind": "Components.Component",
        "Name": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1\">\r\n            <summary>\r\n            Provides functionality for rendering a virtualized list of items.\r\n            </summary>\r\n            <typeparam name=\"TItem\">The <c>context</c> type for the items being rendered.</typeparam>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Component",
            "Name": "TItem",
            "TypeName": "System.Type",
            "Documentation": "Specifies the type of the type parameter TItem for the Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem> component.",
            "Metadata": {
              "Common.PropertyName": "TItem",
              "Components.TypeParameter": "True",
              "Components.TypeParameterIsCascading": "False"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ChildContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<TItem>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.ChildContent\">\r\n            <summary>\r\n            Gets or sets the item template for the list.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment<TItem>",
              "Common.PropertyName": "ChildContent",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<TItem>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.ItemContent\">\r\n            <summary>\r\n            Gets or sets the item template for the list.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment<TItem>",
              "Common.PropertyName": "ItemContent",
              "Components.ChildContent": "True",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Placeholder",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Web.Virtualization.PlaceholderContext>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.Placeholder\">\r\n            <summary>\r\n            Gets or sets the template for items that have not yet been loaded in memory.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Placeholder",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Web.Virtualization.PlaceholderContext>",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "EmptyContent",
            "TypeName": "Microsoft.AspNetCore.Components.RenderFragment",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.EmptyContent\">\r\n            <summary>\r\n            Gets or sets the content to show when <see cref=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.Items\" /> is empty\r\n            or when the <see cref=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderResult`1.TotalItemCount\" /> is zero.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "EmptyContent",
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.RenderFragment",
              "Components.ChildContent": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemSize",
            "TypeName": "System.Single",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.ItemSize\">\r\n            <summary>\r\n            Gets the size of each item in pixels. Defaults to 50px.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ItemSize",
              "Common.GloballyQualifiedTypeName": "global::System.Single"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "ItemsProvider",
            "TypeName": "Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderDelegate<TItem>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.ItemsProvider\">\r\n            <summary>\r\n            Gets or sets the function providing items to the list.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.GloballyQualifiedTypeName": "global::Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderDelegate<TItem>",
              "Common.PropertyName": "ItemsProvider",
              "Components.DelegateSignature": "True",
              "Components.GenericTyped": "True",
              "Components.IsDelegateAwaitableResult": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Items",
            "TypeName": "System.Collections.Generic.ICollection<TItem>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.Items\">\r\n            <summary>\r\n            Gets or sets the fixed item source.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Items",
              "Common.GloballyQualifiedTypeName": "global::System.Collections.Generic.ICollection<TItem>",
              "Components.GenericTyped": "True"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "OverscanCount",
            "TypeName": "System.Int32",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.OverscanCount\">\r\n            <summary>\r\n            Gets or sets a value that determines how many additional items will be rendered\r\n            before and after the visible region. This help to reduce the frequency of rendering\r\n            during scrolling. However, higher values mean that more elements will be present\r\n            in the page.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "OverscanCount",
              "Common.GloballyQualifiedTypeName": "global::System.Int32"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "SpacerElement",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.SpacerElement\">\r\n             <summary>\r\n             Gets or sets the tag name of the HTML element that will be used as the virtualization spacer.\r\n             One such element will be rendered before the visible items, and one more after them, using\r\n             an explicit \"height\" style to control the scroll range.\r\n            \r\n             The default value is \"div\". If you are placing the <see cref=\"T:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1\" /> instance inside\r\n             an element that requires a specific child tag name, consider setting that here. For example when\r\n             rendering inside a \"tbody\", consider setting <see cref=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.SpacerElement\" /> to the value \"tr\".\r\n             </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "SpacerElement",
              "Common.GloballyQualifiedTypeName": "global::System.String"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "MaxItemCount",
            "TypeName": "System.Int32",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.MaxItemCount\">\r\n             <summary>\r\n             Gets or sets the maximum number of items that will be rendered, even if the client reports\r\n             that its viewport is large enough to show more. The default value is 100.\r\n            \r\n             This should only be used as a safeguard against excessive memory usage or large data loads.\r\n             Do not set this to a smaller number than you expect to fit on a realistic-sized window, because\r\n             that will leave a blank gap below and the user may not be able to see the rest of the content.\r\n             </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "MaxItemCount",
              "Common.GloballyQualifiedTypeName": "global::System.Int32"
            }
          },
          {
            "Kind": "Components.Component",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for all child content expressions.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>",
          "Common.TypeNameIdentifier": "Virtualize",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web.Virtualization",
          "Components.GenericTyped": "True",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.IComponent"
        }
      },
      {
        "HashCode": 1151203404,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.ChildContent\">\r\n            <summary>\r\n            Gets or sets the item template for the list.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Virtualize"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ChildContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ChildContent",
          "Common.TypeNameIdentifier": "Virtualize",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web.Virtualization",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -863376264,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ChildContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.ChildContent\">\r\n            <summary>\r\n            Gets or sets the item template for the list.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ChildContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ChildContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ChildContent",
          "Common.TypeNameIdentifier": "Virtualize",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web.Virtualization",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1168311769,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ItemContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.ItemContent\">\r\n            <summary>\r\n            Gets or sets the item template for the list.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ItemContent",
            "ParentTag": "Virtualize"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ItemContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ItemContent",
          "Common.TypeNameIdentifier": "Virtualize",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web.Virtualization",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1188823214,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ItemContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.ItemContent\">\r\n            <summary>\r\n            Gets or sets the item template for the list.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "ItemContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'ItemContent' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ItemContent",
          "Common.TypeNameIdentifier": "Virtualize",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web.Virtualization",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -543250318,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.Placeholder",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.Placeholder\">\r\n            <summary>\r\n            Gets or sets the template for items that have not yet been loaded in memory.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Placeholder",
            "ParentTag": "Virtualize"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'Placeholder' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.Placeholder",
          "Common.TypeNameIdentifier": "Virtualize",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web.Virtualization",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 329211714,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.Placeholder",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.Placeholder\">\r\n            <summary>\r\n            Gets or sets the template for items that have not yet been loaded in memory.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Placeholder",
            "ParentTag": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.ChildContent",
            "Name": "Context",
            "TypeName": "System.String",
            "Documentation": "Specifies the parameter name for the 'Placeholder' child content expression.",
            "Metadata": {
              "Components.ChildContentParameterName": "True",
              "Common.PropertyName": "Context"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.Placeholder",
          "Common.TypeNameIdentifier": "Virtualize",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web.Virtualization",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1226007040,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.EmptyContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.EmptyContent\">\r\n            <summary>\r\n            Gets or sets the content to show when <see cref=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.Items\" /> is empty\r\n            or when the <see cref=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderResult`1.TotalItemCount\" /> is zero.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "EmptyContent",
            "ParentTag": "Virtualize"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.EmptyContent",
          "Common.TypeNameIdentifier": "Virtualize",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web.Virtualization",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -88299785,
        "Kind": "Components.ChildContent",
        "Name": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.EmptyContent",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.EmptyContent\">\r\n            <summary>\r\n            Gets or sets the content to show when <see cref=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.Items\" /> is empty\r\n            or when the <see cref=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderResult`1.TotalItemCount\" /> is zero.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "EmptyContent",
            "ParentTag": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize"
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.EmptyContent",
          "Common.TypeNameIdentifier": "Virtualize",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web.Virtualization",
          "Components.IsSpecialKind": "Components.ChildContent",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 2015910154,
        "Kind": "Components.EventHandler",
        "Name": "onfocus",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onfocus' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfocus",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfocus:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfocus:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onfocus",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>",
            "Documentation": "Sets the '@onfocus' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onfocus"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onfocus' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onfocus' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.FocusEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 714096968,
        "Kind": "Components.EventHandler",
        "Name": "onblur",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onblur' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onblur",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onblur:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onblur:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onblur",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>",
            "Documentation": "Sets the '@onblur' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onblur"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onblur' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onblur' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.FocusEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1413810592,
        "Kind": "Components.EventHandler",
        "Name": "onfocusin",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onfocusin' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfocusin",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfocusin:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfocusin:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onfocusin",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>",
            "Documentation": "Sets the '@onfocusin' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onfocusin"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onfocusin' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onfocusin' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.FocusEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1355144775,
        "Kind": "Components.EventHandler",
        "Name": "onfocusout",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onfocusout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfocusout",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfocusout:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfocusout:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onfocusout",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>",
            "Documentation": "Sets the '@onfocusout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onfocusout"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onfocusout' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onfocusout' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.FocusEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -61136869,
        "Kind": "Components.EventHandler",
        "Name": "onmouseover",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onmouseover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseover",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseover:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseover:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onmouseover",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "Sets the '@onmouseover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onmouseover"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmouseover' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onmouseover' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.MouseEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -448381066,
        "Kind": "Components.EventHandler",
        "Name": "onmouseout",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onmouseout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseout",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseout:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseout:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onmouseout",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "Sets the '@onmouseout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onmouseout"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmouseout' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onmouseout' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.MouseEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -658548214,
        "Kind": "Components.EventHandler",
        "Name": "onmouseleave",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onmouseleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseleave",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseleave:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseleave:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onmouseleave",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "Sets the '@onmouseleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onmouseleave"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmouseleave' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onmouseleave' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.MouseEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 487183420,
        "Kind": "Components.EventHandler",
        "Name": "onmouseenter",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onmouseenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseenter",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseenter:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseenter:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onmouseenter",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "Sets the '@onmouseenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onmouseenter"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmouseenter' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onmouseenter' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.MouseEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1197755747,
        "Kind": "Components.EventHandler",
        "Name": "onmousemove",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onmousemove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmousemove",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmousemove:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmousemove:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onmousemove",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "Sets the '@onmousemove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onmousemove"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmousemove' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onmousemove' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.MouseEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 60714308,
        "Kind": "Components.EventHandler",
        "Name": "onmousedown",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onmousedown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmousedown",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmousedown:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmousedown:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onmousedown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "Sets the '@onmousedown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onmousedown"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmousedown' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onmousedown' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.MouseEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1233826458,
        "Kind": "Components.EventHandler",
        "Name": "onmouseup",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onmouseup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseup",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseup:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmouseup:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onmouseup",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "Sets the '@onmouseup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onmouseup"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmouseup' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onmouseup' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.MouseEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1101597133,
        "Kind": "Components.EventHandler",
        "Name": "onclick",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onclick' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onclick",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onclick:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onclick:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onclick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "Sets the '@onclick' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onclick"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onclick' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onclick' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.MouseEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1012804600,
        "Kind": "Components.EventHandler",
        "Name": "ondblclick",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ondblclick' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondblclick",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondblclick:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondblclick:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ondblclick",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "Sets the '@ondblclick' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ondblclick"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondblclick' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ondblclick' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.MouseEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1831308940,
        "Kind": "Components.EventHandler",
        "Name": "onwheel",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onwheel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.WheelEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onwheel",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onwheel:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onwheel:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onwheel",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.WheelEventArgs>",
            "Documentation": "Sets the '@onwheel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.WheelEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onwheel"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onwheel' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onwheel' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.WheelEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1598875569,
        "Kind": "Components.EventHandler",
        "Name": "onmousewheel",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onmousewheel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.WheelEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmousewheel",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmousewheel:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onmousewheel:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onmousewheel",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.WheelEventArgs>",
            "Documentation": "Sets the '@onmousewheel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.WheelEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onmousewheel"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmousewheel' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onmousewheel' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.WheelEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 188779971,
        "Kind": "Components.EventHandler",
        "Name": "oncontextmenu",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@oncontextmenu' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncontextmenu",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncontextmenu:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncontextmenu:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@oncontextmenu",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>",
            "Documentation": "Sets the '@oncontextmenu' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "oncontextmenu"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncontextmenu' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@oncontextmenu' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.MouseEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -145913669,
        "Kind": "Components.EventHandler",
        "Name": "ondrag",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ondrag' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondrag",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondrag:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondrag:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ondrag",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>",
            "Documentation": "Sets the '@ondrag' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ondrag"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondrag' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ondrag' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.DragEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 628878646,
        "Kind": "Components.EventHandler",
        "Name": "ondragend",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ondragend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragend",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragend:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragend:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ondragend",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>",
            "Documentation": "Sets the '@ondragend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ondragend"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondragend' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ondragend' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.DragEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1848918184,
        "Kind": "Components.EventHandler",
        "Name": "ondragenter",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ondragenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragenter",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragenter:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragenter:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ondragenter",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>",
            "Documentation": "Sets the '@ondragenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ondragenter"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondragenter' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ondragenter' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.DragEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 2138582240,
        "Kind": "Components.EventHandler",
        "Name": "ondragleave",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ondragleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragleave",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragleave:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragleave:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ondragleave",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>",
            "Documentation": "Sets the '@ondragleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ondragleave"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondragleave' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ondragleave' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.DragEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 848600518,
        "Kind": "Components.EventHandler",
        "Name": "ondragover",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ondragover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragover",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragover:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragover:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ondragover",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>",
            "Documentation": "Sets the '@ondragover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ondragover"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondragover' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ondragover' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.DragEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1112143767,
        "Kind": "Components.EventHandler",
        "Name": "ondragstart",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ondragstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragstart",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragstart:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondragstart:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ondragstart",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>",
            "Documentation": "Sets the '@ondragstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ondragstart"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondragstart' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ondragstart' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.DragEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 530594807,
        "Kind": "Components.EventHandler",
        "Name": "ondrop",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ondrop' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondrop",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondrop:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondrop:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ondrop",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>",
            "Documentation": "Sets the '@ondrop' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ondrop"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondrop' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ondrop' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.DragEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 892408206,
        "Kind": "Components.EventHandler",
        "Name": "onkeydown",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onkeydown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onkeydown",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onkeydown:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onkeydown:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onkeydown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "Sets the '@onkeydown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onkeydown"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onkeydown' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onkeydown' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.KeyboardEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 982369431,
        "Kind": "Components.EventHandler",
        "Name": "onkeyup",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onkeyup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onkeyup",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onkeyup:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onkeyup:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onkeyup",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "Sets the '@onkeyup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onkeyup"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onkeyup' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onkeyup' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.KeyboardEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 371379316,
        "Kind": "Components.EventHandler",
        "Name": "onkeypress",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onkeypress' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onkeypress",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onkeypress:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onkeypress:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onkeypress",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>",
            "Documentation": "Sets the '@onkeypress' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onkeypress"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onkeypress' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onkeypress' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.KeyboardEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -433462972,
        "Kind": "Components.EventHandler",
        "Name": "onchange",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onchange' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.ChangeEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onchange",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onchange:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onchange:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onchange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>",
            "Documentation": "Sets the '@onchange' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.ChangeEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onchange"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onchange' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onchange' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.ChangeEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 569748141,
        "Kind": "Components.EventHandler",
        "Name": "oninput",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@oninput' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.ChangeEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oninput",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oninput:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oninput:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@oninput",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>",
            "Documentation": "Sets the '@oninput' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.ChangeEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "oninput"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@oninput' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@oninput' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.ChangeEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1781995916,
        "Kind": "Components.EventHandler",
        "Name": "oninvalid",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@oninvalid' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oninvalid",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oninvalid:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oninvalid:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@oninvalid",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@oninvalid' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "oninvalid"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@oninvalid' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@oninvalid' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1683370556,
        "Kind": "Components.EventHandler",
        "Name": "onreset",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onreset' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onreset",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onreset:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onreset:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onreset",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onreset' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onreset"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onreset' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onreset' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1929254964,
        "Kind": "Components.EventHandler",
        "Name": "onselect",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onselect' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onselect",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onselect:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onselect:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onselect",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onselect' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onselect"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onselect' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onselect' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -127867544,
        "Kind": "Components.EventHandler",
        "Name": "onselectstart",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onselectstart' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onselectstart",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onselectstart:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onselectstart:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onselectstart",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onselectstart' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onselectstart"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onselectstart' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onselectstart' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1708973700,
        "Kind": "Components.EventHandler",
        "Name": "onselectionchange",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onselectionchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onselectionchange",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onselectionchange:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onselectionchange:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onselectionchange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onselectionchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onselectionchange"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onselectionchange' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onselectionchange' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1031147286,
        "Kind": "Components.EventHandler",
        "Name": "onsubmit",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onsubmit' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onsubmit",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onsubmit:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onsubmit:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onsubmit",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onsubmit' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onsubmit"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onsubmit' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onsubmit' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 611851358,
        "Kind": "Components.EventHandler",
        "Name": "onbeforecopy",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onbeforecopy' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforecopy",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforecopy:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforecopy:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onbeforecopy",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onbeforecopy' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onbeforecopy"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onbeforecopy' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onbeforecopy' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 2056738415,
        "Kind": "Components.EventHandler",
        "Name": "onbeforecut",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onbeforecut' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforecut",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforecut:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforecut:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onbeforecut",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onbeforecut' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onbeforecut"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onbeforecut' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onbeforecut' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -748532628,
        "Kind": "Components.EventHandler",
        "Name": "onbeforepaste",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onbeforepaste' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforepaste",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforepaste:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforepaste:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onbeforepaste",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onbeforepaste' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onbeforepaste"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onbeforepaste' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onbeforepaste' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 777129280,
        "Kind": "Components.EventHandler",
        "Name": "oncopy",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@oncopy' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncopy",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncopy:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncopy:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@oncopy",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>",
            "Documentation": "Sets the '@oncopy' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "oncopy"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncopy' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@oncopy' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.ClipboardEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -716822628,
        "Kind": "Components.EventHandler",
        "Name": "oncut",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@oncut' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncut",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncut:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncut:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@oncut",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>",
            "Documentation": "Sets the '@oncut' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "oncut"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncut' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@oncut' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.ClipboardEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -284839852,
        "Kind": "Components.EventHandler",
        "Name": "onpaste",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onpaste' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpaste",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpaste:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpaste:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onpaste",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>",
            "Documentation": "Sets the '@onpaste' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onpaste"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpaste' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onpaste' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.ClipboardEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -385923091,
        "Kind": "Components.EventHandler",
        "Name": "ontouchcancel",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ontouchcancel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchcancel",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchcancel:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchcancel:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ontouchcancel",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>",
            "Documentation": "Sets the '@ontouchcancel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ontouchcancel"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchcancel' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ontouchcancel' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.TouchEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1064686104,
        "Kind": "Components.EventHandler",
        "Name": "ontouchend",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ontouchend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchend",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchend:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchend:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ontouchend",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>",
            "Documentation": "Sets the '@ontouchend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ontouchend"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchend' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ontouchend' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.TouchEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1659168084,
        "Kind": "Components.EventHandler",
        "Name": "ontouchmove",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ontouchmove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchmove",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchmove:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchmove:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ontouchmove",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>",
            "Documentation": "Sets the '@ontouchmove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ontouchmove"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchmove' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ontouchmove' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.TouchEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 632434408,
        "Kind": "Components.EventHandler",
        "Name": "ontouchstart",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ontouchstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchstart",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchstart:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchstart:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ontouchstart",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>",
            "Documentation": "Sets the '@ontouchstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ontouchstart"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchstart' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ontouchstart' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.TouchEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1520481824,
        "Kind": "Components.EventHandler",
        "Name": "ontouchenter",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ontouchenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchenter",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchenter:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchenter:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ontouchenter",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>",
            "Documentation": "Sets the '@ontouchenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ontouchenter"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchenter' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ontouchenter' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.TouchEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1940765906,
        "Kind": "Components.EventHandler",
        "Name": "ontouchleave",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ontouchleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchleave",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchleave:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontouchleave:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ontouchleave",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>",
            "Documentation": "Sets the '@ontouchleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ontouchleave"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchleave' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ontouchleave' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.TouchEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1566095605,
        "Kind": "Components.EventHandler",
        "Name": "ongotpointercapture",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ongotpointercapture' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ongotpointercapture",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ongotpointercapture:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ongotpointercapture:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ongotpointercapture",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>",
            "Documentation": "Sets the '@ongotpointercapture' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ongotpointercapture"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ongotpointercapture' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ongotpointercapture' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.PointerEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1507308672,
        "Kind": "Components.EventHandler",
        "Name": "onlostpointercapture",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onlostpointercapture' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onlostpointercapture",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onlostpointercapture:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onlostpointercapture:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onlostpointercapture",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>",
            "Documentation": "Sets the '@onlostpointercapture' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onlostpointercapture"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onlostpointercapture' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onlostpointercapture' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.PointerEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1618338588,
        "Kind": "Components.EventHandler",
        "Name": "onpointercancel",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onpointercancel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointercancel",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointercancel:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointercancel:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onpointercancel",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>",
            "Documentation": "Sets the '@onpointercancel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onpointercancel"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointercancel' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onpointercancel' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.PointerEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 522955686,
        "Kind": "Components.EventHandler",
        "Name": "onpointerdown",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onpointerdown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerdown",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerdown:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerdown:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onpointerdown",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>",
            "Documentation": "Sets the '@onpointerdown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onpointerdown"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerdown' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onpointerdown' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.PointerEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 894758802,
        "Kind": "Components.EventHandler",
        "Name": "onpointerenter",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onpointerenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerenter",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerenter:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerenter:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onpointerenter",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>",
            "Documentation": "Sets the '@onpointerenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onpointerenter"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerenter' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onpointerenter' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.PointerEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -95078142,
        "Kind": "Components.EventHandler",
        "Name": "onpointerleave",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onpointerleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerleave",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerleave:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerleave:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onpointerleave",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>",
            "Documentation": "Sets the '@onpointerleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onpointerleave"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerleave' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onpointerleave' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.PointerEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1910050859,
        "Kind": "Components.EventHandler",
        "Name": "onpointermove",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onpointermove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointermove",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointermove:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointermove:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onpointermove",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>",
            "Documentation": "Sets the '@onpointermove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onpointermove"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointermove' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onpointermove' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.PointerEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -389431665,
        "Kind": "Components.EventHandler",
        "Name": "onpointerout",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onpointerout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerout",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerout:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerout:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onpointerout",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>",
            "Documentation": "Sets the '@onpointerout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onpointerout"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerout' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onpointerout' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.PointerEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1811686982,
        "Kind": "Components.EventHandler",
        "Name": "onpointerover",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onpointerover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerover",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerover:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerover:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onpointerover",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>",
            "Documentation": "Sets the '@onpointerover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onpointerover"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerover' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onpointerover' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.PointerEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1680395579,
        "Kind": "Components.EventHandler",
        "Name": "onpointerup",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onpointerup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerup",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerup:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerup:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onpointerup",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>",
            "Documentation": "Sets the '@onpointerup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onpointerup"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerup' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onpointerup' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.PointerEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 180133058,
        "Kind": "Components.EventHandler",
        "Name": "oncanplay",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@oncanplay' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncanplay",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncanplay:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncanplay:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@oncanplay",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@oncanplay' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "oncanplay"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncanplay' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@oncanplay' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1950984289,
        "Kind": "Components.EventHandler",
        "Name": "oncanplaythrough",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@oncanplaythrough' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncanplaythrough",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncanplaythrough:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncanplaythrough:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@oncanplaythrough",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@oncanplaythrough' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "oncanplaythrough"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncanplaythrough' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@oncanplaythrough' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 944153845,
        "Kind": "Components.EventHandler",
        "Name": "oncuechange",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@oncuechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncuechange",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncuechange:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncuechange:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@oncuechange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@oncuechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "oncuechange"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncuechange' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@oncuechange' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 482025430,
        "Kind": "Components.EventHandler",
        "Name": "ondurationchange",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ondurationchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondurationchange",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondurationchange:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondurationchange:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ondurationchange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@ondurationchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ondurationchange"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondurationchange' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ondurationchange' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1175080471,
        "Kind": "Components.EventHandler",
        "Name": "onemptied",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onemptied' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onemptied",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onemptied:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onemptied:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onemptied",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onemptied' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onemptied"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onemptied' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onemptied' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1745535243,
        "Kind": "Components.EventHandler",
        "Name": "onpause",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onpause' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpause",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpause:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpause:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onpause",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onpause' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onpause"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpause' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onpause' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1050945337,
        "Kind": "Components.EventHandler",
        "Name": "onplay",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onplay' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onplay",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onplay:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onplay:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onplay",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onplay' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onplay"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onplay' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onplay' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -639785127,
        "Kind": "Components.EventHandler",
        "Name": "onplaying",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onplaying' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onplaying",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onplaying:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onplaying:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onplaying",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onplaying' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onplaying"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onplaying' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onplaying' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1731360215,
        "Kind": "Components.EventHandler",
        "Name": "onratechange",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onratechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onratechange",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onratechange:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onratechange:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onratechange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onratechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onratechange"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onratechange' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onratechange' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1080470798,
        "Kind": "Components.EventHandler",
        "Name": "onseeked",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onseeked' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onseeked",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onseeked:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onseeked:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onseeked",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onseeked' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onseeked"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onseeked' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onseeked' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -702184591,
        "Kind": "Components.EventHandler",
        "Name": "onseeking",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onseeking' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onseeking",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onseeking:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onseeking:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onseeking",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onseeking' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onseeking"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onseeking' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onseeking' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -307012370,
        "Kind": "Components.EventHandler",
        "Name": "onstalled",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onstalled' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onstalled",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onstalled:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onstalled:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onstalled",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onstalled' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onstalled"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onstalled' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onstalled' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 851889410,
        "Kind": "Components.EventHandler",
        "Name": "onstop",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onstop' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onstop",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onstop:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onstop:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onstop",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onstop' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onstop"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onstop' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onstop' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -189650800,
        "Kind": "Components.EventHandler",
        "Name": "onsuspend",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onsuspend' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onsuspend",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onsuspend:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onsuspend:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onsuspend",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onsuspend' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onsuspend"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onsuspend' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onsuspend' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 503433230,
        "Kind": "Components.EventHandler",
        "Name": "ontimeupdate",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ontimeupdate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontimeupdate",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontimeupdate:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontimeupdate:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ontimeupdate",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@ontimeupdate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ontimeupdate"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontimeupdate' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ontimeupdate' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1072637309,
        "Kind": "Components.EventHandler",
        "Name": "onvolumechange",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onvolumechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onvolumechange",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onvolumechange:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onvolumechange:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onvolumechange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onvolumechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onvolumechange"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onvolumechange' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onvolumechange' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 2085463416,
        "Kind": "Components.EventHandler",
        "Name": "onwaiting",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onwaiting' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onwaiting",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onwaiting:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onwaiting:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onwaiting",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onwaiting' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onwaiting"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onwaiting' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onwaiting' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -284399704,
        "Kind": "Components.EventHandler",
        "Name": "onloadstart",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onloadstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onloadstart",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onloadstart:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onloadstart:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onloadstart",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>",
            "Documentation": "Sets the '@onloadstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onloadstart"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onloadstart' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onloadstart' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.ProgressEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1054779799,
        "Kind": "Components.EventHandler",
        "Name": "ontimeout",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ontimeout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontimeout",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontimeout:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontimeout:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ontimeout",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>",
            "Documentation": "Sets the '@ontimeout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ontimeout"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontimeout' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ontimeout' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.ProgressEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1150330633,
        "Kind": "Components.EventHandler",
        "Name": "onabort",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onabort' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onabort",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onabort:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onabort:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onabort",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>",
            "Documentation": "Sets the '@onabort' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onabort"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onabort' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onabort' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.ProgressEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -571805595,
        "Kind": "Components.EventHandler",
        "Name": "onload",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onload' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onload",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onload:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onload:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onload",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>",
            "Documentation": "Sets the '@onload' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onload"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onload' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onload' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.ProgressEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1303769370,
        "Kind": "Components.EventHandler",
        "Name": "onloadend",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onloadend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onloadend",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onloadend:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onloadend:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onloadend",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>",
            "Documentation": "Sets the '@onloadend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onloadend"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onloadend' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onloadend' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.ProgressEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -190115250,
        "Kind": "Components.EventHandler",
        "Name": "onprogress",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onprogress' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onprogress",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onprogress:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onprogress:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onprogress",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>",
            "Documentation": "Sets the '@onprogress' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onprogress"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onprogress' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onprogress' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.ProgressEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 410354474,
        "Kind": "Components.EventHandler",
        "Name": "onerror",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onerror' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ErrorEventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onerror",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onerror:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onerror:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onerror",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ErrorEventArgs>",
            "Documentation": "Sets the '@onerror' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ErrorEventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onerror"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onerror' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onerror' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "Microsoft.AspNetCore.Components.Web.ErrorEventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -415229050,
        "Kind": "Components.EventHandler",
        "Name": "onactivate",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onactivate",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onactivate:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onactivate:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onactivate",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onactivate"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onactivate' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onactivate' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 724501357,
        "Kind": "Components.EventHandler",
        "Name": "onbeforeactivate",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onbeforeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforeactivate",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforeactivate:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforeactivate:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onbeforeactivate",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onbeforeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onbeforeactivate"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onbeforeactivate' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onbeforeactivate' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 425000447,
        "Kind": "Components.EventHandler",
        "Name": "onbeforedeactivate",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onbeforedeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforedeactivate",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforedeactivate:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onbeforedeactivate:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onbeforedeactivate",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onbeforedeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onbeforedeactivate"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onbeforedeactivate' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onbeforedeactivate' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1781270285,
        "Kind": "Components.EventHandler",
        "Name": "ondeactivate",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ondeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondeactivate",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondeactivate:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ondeactivate:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ondeactivate",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@ondeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ondeactivate"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondeactivate' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ondeactivate' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1667577841,
        "Kind": "Components.EventHandler",
        "Name": "onended",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onended' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onended",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onended:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onended:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onended",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onended' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onended"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onended' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onended' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1098105443,
        "Kind": "Components.EventHandler",
        "Name": "onfullscreenchange",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onfullscreenchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfullscreenchange",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfullscreenchange:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfullscreenchange:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onfullscreenchange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onfullscreenchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onfullscreenchange"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onfullscreenchange' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onfullscreenchange' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1086187041,
        "Kind": "Components.EventHandler",
        "Name": "onfullscreenerror",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onfullscreenerror' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfullscreenerror",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfullscreenerror:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onfullscreenerror:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onfullscreenerror",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onfullscreenerror' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onfullscreenerror"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onfullscreenerror' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onfullscreenerror' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1348629448,
        "Kind": "Components.EventHandler",
        "Name": "onloadeddata",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onloadeddata' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onloadeddata",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onloadeddata:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onloadeddata:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onloadeddata",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onloadeddata' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onloadeddata"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onloadeddata' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onloadeddata' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1640647663,
        "Kind": "Components.EventHandler",
        "Name": "onloadedmetadata",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onloadedmetadata' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onloadedmetadata",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onloadedmetadata:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onloadedmetadata:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onloadedmetadata",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onloadedmetadata' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onloadedmetadata"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onloadedmetadata' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onloadedmetadata' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1323873607,
        "Kind": "Components.EventHandler",
        "Name": "onpointerlockchange",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onpointerlockchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerlockchange",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerlockchange:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerlockchange:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onpointerlockchange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onpointerlockchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onpointerlockchange"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerlockchange' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onpointerlockchange' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 309002301,
        "Kind": "Components.EventHandler",
        "Name": "onpointerlockerror",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onpointerlockerror' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerlockerror",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerlockerror:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onpointerlockerror:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onpointerlockerror",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onpointerlockerror' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onpointerlockerror"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerlockerror' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onpointerlockerror' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -2948158,
        "Kind": "Components.EventHandler",
        "Name": "onreadystatechange",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onreadystatechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onreadystatechange",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onreadystatechange:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onreadystatechange:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onreadystatechange",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onreadystatechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onreadystatechange"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onreadystatechange' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onreadystatechange' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 555917832,
        "Kind": "Components.EventHandler",
        "Name": "onscroll",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onscroll' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onscroll",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onscroll:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onscroll:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onscroll",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onscroll' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onscroll"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@onscroll' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onscroll' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1821514787,
        "Kind": "Components.EventHandler",
        "Name": "ontoggle",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@ontoggle' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontoggle",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontoggle:preventDefault",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ontoggle:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@ontoggle",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@ontoggle' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "ontoggle"
            },
            "BoundAttributeParameters": [
              {
                "Name": "preventDefault",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontoggle' event.",
                "Metadata": {
                  "Common.PropertyName": "PreventDefault"
                }
              },
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@ontoggle' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1944229385,
        "Kind": "Components.EventHandler",
        "Name": "oncancel",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@oncancel' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncancel",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@oncancel:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@oncancel",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@oncancel' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "oncancel"
            },
            "BoundAttributeParameters": [
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@oncancel' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1079329031,
        "Kind": "Components.EventHandler",
        "Name": "onclose",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Sets the '@onclose' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onclose",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@onclose:stopPropagation",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.EventHandler",
            "Name": "@onclose",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>",
            "Documentation": "Sets the '@onclose' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.",
            "Metadata": {
              "Components.IsWeaklyTyped": "True",
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "onclose"
            },
            "BoundAttributeParameters": [
              {
                "Name": "stopPropagation",
                "TypeName": "System.Boolean",
                "Documentation": "Specifies whether to prevent further propagation of the '@onclose' event in the capturing and bubbling phases.",
                "Metadata": {
                  "Common.PropertyName": "StopPropagation"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.EventHandlers",
          "Common.TypeNameIdentifier": "EventHandlers",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.EventHandler.EventArgs": "System.EventArgs",
          "Components.IsSpecialKind": "Components.EventHandler",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -2035306830,
        "Kind": "Components.Splat",
        "Name": "Attributes",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Merges a collection of attributes into the current element or component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@attributes",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Splat",
            "Name": "@attributes",
            "TypeName": "System.Object",
            "Documentation": "Merges a collection of attributes into the current element or component.",
            "Metadata": {
              "Common.PropertyName": "Attributes",
              "Common.DirectiveAttribute": "True"
            }
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Attributes",
          "Components.IsSpecialKind": "Components.Splat",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 774665309,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.Razor",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting elements containing attributes with URL expected values.\r\n            </summary>\r\n            <remarks>Resolves URLs starting with '~/' (relative to the application's 'webroot' setting) that are not\r\n            targeted by other <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" />s. Runs prior to other <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" />s to ensure\r\n            application-relative URLs are resolved.</remarks>\r\n        </member>",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "itemid",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "a",
            "Attributes": [
              {
                "Name": "href",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "applet",
            "Attributes": [
              {
                "Name": "archive",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "area",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "href",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "audio",
            "Attributes": [
              {
                "Name": "src",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "base",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "href",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "blockquote",
            "Attributes": [
              {
                "Name": "cite",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "button",
            "Attributes": [
              {
                "Name": "formaction",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "del",
            "Attributes": [
              {
                "Name": "cite",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "embed",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "src",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "form",
            "Attributes": [
              {
                "Name": "action",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "html",
            "Attributes": [
              {
                "Name": "manifest",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "iframe",
            "Attributes": [
              {
                "Name": "src",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "img",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "src",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "img",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "srcset",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "src",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "formaction",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "ins",
            "Attributes": [
              {
                "Name": "cite",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "link",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "href",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "menuitem",
            "Attributes": [
              {
                "Name": "icon",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "object",
            "Attributes": [
              {
                "Name": "archive",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "object",
            "Attributes": [
              {
                "Name": "data",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "q",
            "Attributes": [
              {
                "Name": "cite",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "script",
            "Attributes": [
              {
                "Name": "src",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "source",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "src",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "source",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "srcset",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "track",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "src",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "video",
            "Attributes": [
              {
                "Name": "src",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          },
          {
            "TagName": "video",
            "Attributes": [
              {
                "Name": "poster",
                "Value": "~/",
                "ValueComparison": 2
              }
            ]
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper",
          "Common.TypeNameIdentifier": "UrlResolutionTagHelper",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Mvc.Razor.TagHelpers",
          "Runtime.Name": "ITagHelper"
        }
      },
      {
        "HashCode": 555124031,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;a&gt; elements.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "a",
            "Attributes": [
              {
                "Name": "asp-action"
              }
            ]
          },
          {
            "TagName": "a",
            "Attributes": [
              {
                "Name": "asp-controller"
              }
            ]
          },
          {
            "TagName": "a",
            "Attributes": [
              {
                "Name": "asp-area"
              }
            ]
          },
          {
            "TagName": "a",
            "Attributes": [
              {
                "Name": "asp-page"
              }
            ]
          },
          {
            "TagName": "a",
            "Attributes": [
              {
                "Name": "asp-page-handler"
              }
            ]
          },
          {
            "TagName": "a",
            "Attributes": [
              {
                "Name": "asp-fragment"
              }
            ]
          },
          {
            "TagName": "a",
            "Attributes": [
              {
                "Name": "asp-host"
              }
            ]
          },
          {
            "TagName": "a",
            "Attributes": [
              {
                "Name": "asp-protocol"
              }
            ]
          },
          {
            "TagName": "a",
            "Attributes": [
              {
                "Name": "asp-route"
              }
            ]
          },
          {
            "TagName": "a",
            "Attributes": [
              {
                "Name": "asp-all-route-data"
              }
            ]
          },
          {
            "TagName": "a",
            "Attributes": [
              {
                "Name": "asp-route-",
                "NameComparison": 1
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "asp-action",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Action\">\r\n            <summary>\r\n            The name of the action method.\r\n            </summary>\r\n            <remarks>\r\n            Must be <c>null</c> if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Route\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Page\" /> is non-<c>null</c>.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Action"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-controller",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Controller\">\r\n            <summary>\r\n            The name of the controller.\r\n            </summary>\r\n            <remarks>\r\n            Must be <c>null</c> if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Route\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Page\" /> is non-<c>null</c>.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Controller"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-area",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Area\">\r\n            <summary>\r\n            The name of the area.\r\n            </summary>\r\n            <remarks>\r\n            Must be <c>null</c> if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Route\" /> is non-<c>null</c>.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Area"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-page",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Page\">\r\n            <summary>\r\n            The name of the page.\r\n            </summary>\r\n            <remarks>\r\n            Must be <c>null</c> if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Route\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Action\" />, <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Controller\" />\r\n            is non-<c>null</c>.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Page"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-page-handler",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.PageHandler\">\r\n            <summary>\r\n            The name of the page handler.\r\n            </summary>\r\n            <remarks>\r\n            Must be <c>null</c> if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Route\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Action\" />, or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Controller\" />\r\n            is non-<c>null</c>.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "PageHandler"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-protocol",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Protocol\">\r\n            <summary>\r\n            The protocol for the URL, such as \"http\" or \"https\".\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Protocol"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-host",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Host\">\r\n            <summary>\r\n            The host name.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Host"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fragment",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Fragment\">\r\n            <summary>\r\n            The URL fragment name.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Fragment"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-route",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Route\">\r\n            <summary>\r\n            Name of the route.\r\n            </summary>\r\n            <remarks>\r\n            Must be <c>null</c> if one of <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Action\" />, <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Controller\" />, <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Area\" />\r\n            or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Page\" /> is non-<c>null</c>.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Route"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-all-route-data",
            "TypeName": "System.Collections.Generic.IDictionary<System.String, System.String>",
            "IndexerNamePrefix": "asp-route-",
            "IndexerTypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.RouteValues\">\r\n            <summary>\r\n            Additional parameters for the route.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "RouteValues"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper",
          "Common.TypeNameIdentifier": "AnchorTagHelper",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Mvc.TagHelpers",
          "Runtime.Name": "ITagHelper"
        }
      },
      {
        "HashCode": -1496214440,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.TagHelper\" /> implementation targeting &lt;cache&gt; elements.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "cache"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "priority",
            "TypeName": "Microsoft.Extensions.Caching.Memory.CacheItemPriority?",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelper.Priority\">\r\n            <summary>\r\n            Gets or sets the <see cref=\"T:Microsoft.Extensions.Caching.Memory.CacheItemPriority\" /> policy for the cache entry.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Priority"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.VaryBy\">\r\n            <summary>\r\n            Gets or sets a <see cref=\"T:System.String\" /> to vary the cached result by.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "VaryBy"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by-header",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.VaryByHeader\">\r\n            <summary>\r\n            Gets or sets a comma-delimited set of HTTP request headers to vary the cached result by.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "VaryByHeader"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by-query",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.VaryByQuery\">\r\n            <summary>\r\n            Gets or sets a comma-delimited set of query parameters to vary the cached result by.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "VaryByQuery"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by-route",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.VaryByRoute\">\r\n            <summary>\r\n            Gets or sets a comma-delimited set of route data parameters to vary the cached result by.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "VaryByRoute"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by-cookie",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.VaryByCookie\">\r\n            <summary>\r\n            Gets or sets a comma-delimited set of cookie names to vary the cached result by.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "VaryByCookie"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by-user",
            "TypeName": "System.Boolean",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.VaryByUser\">\r\n            <summary>\r\n            Gets or sets a value that determines if the cached result is to be varied by the Identity for the logged in\r\n            <see cref=\"P:Microsoft.AspNetCore.Http.HttpContext.User\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "VaryByUser"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by-culture",
            "TypeName": "System.Boolean",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.VaryByCulture\">\r\n            <summary>\r\n            Gets or sets a value that determines if the cached result is to be varied by request culture.\r\n            <para>\r\n            Setting this to <c>true</c> would result in the result to be varied by <see cref=\"P:System.Globalization.CultureInfo.CurrentCulture\" />\r\n            and <see cref=\"P:System.Globalization.CultureInfo.CurrentUICulture\" />.\r\n            </para>\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "VaryByCulture"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "expires-on",
            "TypeName": "System.DateTimeOffset?",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.ExpiresOn\">\r\n            <summary>\r\n            Gets or sets the exact <see cref=\"T:System.DateTimeOffset\" /> the cache entry should be evicted.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ExpiresOn"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "expires-after",
            "TypeName": "System.TimeSpan?",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.ExpiresAfter\">\r\n            <summary>\r\n            Gets or sets the duration, from the time the cache entry was added, when it should be evicted.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ExpiresAfter"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "expires-sliding",
            "TypeName": "System.TimeSpan?",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.ExpiresSliding\">\r\n            <summary>\r\n            Gets or sets the duration from last access that the cache entry should be evicted.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ExpiresSliding"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "enabled",
            "TypeName": "System.Boolean",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.Enabled\">\r\n            <summary>\r\n            Gets or sets the value which determines if the tag helper is enabled or not.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelper",
          "Common.TypeNameIdentifier": "CacheTagHelper",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Mvc.TagHelpers",
          "Runtime.Name": "ITagHelper"
        }
      },
      {
        "HashCode": 1380109326,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.ComponentTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.ComponentTagHelper\">\r\n            <summary>\r\n            A <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.TagHelper\" /> that renders a Razor component.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "component",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type"
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "params",
            "TypeName": "System.Collections.Generic.IDictionary<System.String, System.Object>",
            "IndexerNamePrefix": "param-",
            "IndexerTypeName": "System.Object",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ComponentTagHelper.Parameters\">\r\n            <summary>\r\n            Gets or sets values for component parameters.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Parameters"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "type",
            "TypeName": "System.Type",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ComponentTagHelper.ComponentType\">\r\n            <summary>\r\n            Gets or sets the component type. This value is required.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ComponentType"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "render-mode",
            "TypeName": "Microsoft.AspNetCore.Mvc.Rendering.RenderMode",
            "IsEnum": true,
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ComponentTagHelper.RenderMode\">\r\n            <summary>\r\n            Gets or sets the <see cref=\"T:Microsoft.AspNetCore.Mvc.Rendering.RenderMode\" />\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "RenderMode"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.ComponentTagHelper",
          "Common.TypeNameIdentifier": "ComponentTagHelper",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Mvc.TagHelpers",
          "Runtime.Name": "ITagHelper"
        }
      },
      {
        "HashCode": 328948350,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.DistributedCacheTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.DistributedCacheTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.TagHelper\" /> implementation targeting &lt;distributed-cache&gt; elements.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "distributed-cache",
            "Attributes": [
              {
                "Name": "name"
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "name",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.DistributedCacheTagHelper.Name\">\r\n            <summary>\r\n            Gets or sets a unique name to discriminate cached entries.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Name"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.VaryBy\">\r\n            <summary>\r\n            Gets or sets a <see cref=\"T:System.String\" /> to vary the cached result by.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "VaryBy"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by-header",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.VaryByHeader\">\r\n            <summary>\r\n            Gets or sets a comma-delimited set of HTTP request headers to vary the cached result by.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "VaryByHeader"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by-query",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.VaryByQuery\">\r\n            <summary>\r\n            Gets or sets a comma-delimited set of query parameters to vary the cached result by.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "VaryByQuery"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by-route",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.VaryByRoute\">\r\n            <summary>\r\n            Gets or sets a comma-delimited set of route data parameters to vary the cached result by.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "VaryByRoute"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by-cookie",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.VaryByCookie\">\r\n            <summary>\r\n            Gets or sets a comma-delimited set of cookie names to vary the cached result by.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "VaryByCookie"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by-user",
            "TypeName": "System.Boolean",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.VaryByUser\">\r\n            <summary>\r\n            Gets or sets a value that determines if the cached result is to be varied by the Identity for the logged in\r\n            <see cref=\"P:Microsoft.AspNetCore.Http.HttpContext.User\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "VaryByUser"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "vary-by-culture",
            "TypeName": "System.Boolean",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.VaryByCulture\">\r\n            <summary>\r\n            Gets or sets a value that determines if the cached result is to be varied by request culture.\r\n            <para>\r\n            Setting this to <c>true</c> would result in the result to be varied by <see cref=\"P:System.Globalization.CultureInfo.CurrentCulture\" />\r\n            and <see cref=\"P:System.Globalization.CultureInfo.CurrentUICulture\" />.\r\n            </para>\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "VaryByCulture"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "expires-on",
            "TypeName": "System.DateTimeOffset?",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.ExpiresOn\">\r\n            <summary>\r\n            Gets or sets the exact <see cref=\"T:System.DateTimeOffset\" /> the cache entry should be evicted.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ExpiresOn"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "expires-after",
            "TypeName": "System.TimeSpan?",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.ExpiresAfter\">\r\n            <summary>\r\n            Gets or sets the duration, from the time the cache entry was added, when it should be evicted.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ExpiresAfter"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "expires-sliding",
            "TypeName": "System.TimeSpan?",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.ExpiresSliding\">\r\n            <summary>\r\n            Gets or sets the duration from last access that the cache entry should be evicted.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ExpiresSliding"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "enabled",
            "TypeName": "System.Boolean",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.Enabled\">\r\n            <summary>\r\n            Gets or sets the value which determines if the tag helper is enabled or not.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Enabled"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.DistributedCacheTagHelper",
          "Common.TypeNameIdentifier": "DistributedCacheTagHelper",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Mvc.TagHelpers",
          "Runtime.Name": "ITagHelper"
        }
      },
      {
        "HashCode": -277807289,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;environment&gt; elements that conditionally renders\r\n            content based on the current value of <see cref=\"P:Microsoft.AspNetCore.Hosting.IHostingEnvironment.EnvironmentName\" />.\r\n            If the environment is not listed in the specified <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.Names\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.Include\" />,\r\n            or if it is in <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.Exclude\" />, the content will not be rendered.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "environment"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "names",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.Names\">\r\n            <summary>\r\n            A comma separated list of environment names in which the content should be rendered.\r\n            If the current environment is also in the <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.Exclude\" /> list, the content will not be rendered.\r\n            </summary>\r\n            <remarks>\r\n            The specified environment names are compared case insensitively to the current value of\r\n            <see cref=\"P:Microsoft.AspNetCore.Hosting.IHostingEnvironment.EnvironmentName\" />.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Names"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "include",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.Include\">\r\n            <summary>\r\n            A comma separated list of environment names in which the content should be rendered.\r\n            If the current environment is also in the <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.Exclude\" /> list, the content will not be rendered.\r\n            </summary>\r\n            <remarks>\r\n            The specified environment names are compared case insensitively to the current value of\r\n            <see cref=\"P:Microsoft.AspNetCore.Hosting.IHostingEnvironment.EnvironmentName\" />.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Include"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "exclude",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.Exclude\">\r\n            <summary>\r\n            A comma separated list of environment names in which the content will not be rendered.\r\n            </summary>\r\n            <remarks>\r\n            The specified environment names are compared case insensitively to the current value of\r\n            <see cref=\"P:Microsoft.AspNetCore.Hosting.IHostingEnvironment.EnvironmentName\" />.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Exclude"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper",
          "Common.TypeNameIdentifier": "EnvironmentTagHelper",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Mvc.TagHelpers",
          "Runtime.Name": "ITagHelper"
        }
      },
      {
        "HashCode": 1146940289,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;button&gt; elements and &lt;input&gt; elements with\r\n            their <c>type</c> attribute set to <c>image</c> or <c>submit</c>.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "button",
            "Attributes": [
              {
                "Name": "asp-action"
              }
            ]
          },
          {
            "TagName": "button",
            "Attributes": [
              {
                "Name": "asp-controller"
              }
            ]
          },
          {
            "TagName": "button",
            "Attributes": [
              {
                "Name": "asp-area"
              }
            ]
          },
          {
            "TagName": "button",
            "Attributes": [
              {
                "Name": "asp-page"
              }
            ]
          },
          {
            "TagName": "button",
            "Attributes": [
              {
                "Name": "asp-page-handler"
              }
            ]
          },
          {
            "TagName": "button",
            "Attributes": [
              {
                "Name": "asp-fragment"
              }
            ]
          },
          {
            "TagName": "button",
            "Attributes": [
              {
                "Name": "asp-route"
              }
            ]
          },
          {
            "TagName": "button",
            "Attributes": [
              {
                "Name": "asp-all-route-data"
              }
            ]
          },
          {
            "TagName": "button",
            "Attributes": [
              {
                "Name": "asp-route-",
                "NameComparison": 1
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "image",
                "ValueComparison": 1
              },
              {
                "Name": "asp-action"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "image",
                "ValueComparison": 1
              },
              {
                "Name": "asp-controller"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "image",
                "ValueComparison": 1
              },
              {
                "Name": "asp-area"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "image",
                "ValueComparison": 1
              },
              {
                "Name": "asp-page"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "image",
                "ValueComparison": 1
              },
              {
                "Name": "asp-page-handler"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "image",
                "ValueComparison": 1
              },
              {
                "Name": "asp-fragment"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "image",
                "ValueComparison": 1
              },
              {
                "Name": "asp-route"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "image",
                "ValueComparison": 1
              },
              {
                "Name": "asp-all-route-data"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "image",
                "ValueComparison": 1
              },
              {
                "Name": "asp-route-",
                "NameComparison": 1
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "submit",
                "ValueComparison": 1
              },
              {
                "Name": "asp-action"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "submit",
                "ValueComparison": 1
              },
              {
                "Name": "asp-controller"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "submit",
                "ValueComparison": 1
              },
              {
                "Name": "asp-area"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "submit",
                "ValueComparison": 1
              },
              {
                "Name": "asp-page"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "submit",
                "ValueComparison": 1
              },
              {
                "Name": "asp-page-handler"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "submit",
                "ValueComparison": 1
              },
              {
                "Name": "asp-fragment"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "submit",
                "ValueComparison": 1
              },
              {
                "Name": "asp-route"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "submit",
                "ValueComparison": 1
              },
              {
                "Name": "asp-all-route-data"
              }
            ]
          },
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "type",
                "Value": "submit",
                "ValueComparison": 1
              },
              {
                "Name": "asp-route-",
                "NameComparison": 1
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "asp-action",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.Action\">\r\n            <summary>\r\n            The name of the action method.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Action"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-controller",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.Controller\">\r\n            <summary>\r\n            The name of the controller.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Controller"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-area",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.Area\">\r\n            <summary>\r\n            The name of the area.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Area"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-page",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.Page\">\r\n            <summary>\r\n            The name of the page.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Page"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-page-handler",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.PageHandler\">\r\n            <summary>\r\n            The name of the page handler.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "PageHandler"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fragment",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.Fragment\">\r\n            <summary>\r\n            Gets or sets the URL fragment.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Fragment"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-route",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.Route\">\r\n            <summary>\r\n            Name of the route.\r\n            </summary>\r\n            <remarks>\r\n            Must be <c>null</c> if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.Action\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.Controller\" /> is non-<c>null</c>.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Route"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-all-route-data",
            "TypeName": "System.Collections.Generic.IDictionary<System.String, System.String>",
            "IndexerNamePrefix": "asp-route-",
            "IndexerTypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.RouteValues\">\r\n            <summary>\r\n            Additional parameters for the route.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "RouteValues"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper",
          "Common.TypeNameIdentifier": "FormActionTagHelper",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Mvc.TagHelpers",
          "Runtime.Name": "ITagHelper"
        }
      },
      {
        "HashCode": -1220852708,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;form&gt; elements.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "form"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "asp-action",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.Action\">\r\n            <summary>\r\n            The name of the action method.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Action"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-controller",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.Controller\">\r\n            <summary>\r\n            The name of the controller.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Controller"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-area",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.Area\">\r\n            <summary>\r\n            The name of the area.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Area"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-page",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.Page\">\r\n            <summary>\r\n            The name of the page.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Page"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-page-handler",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.PageHandler\">\r\n            <summary>\r\n            The name of the page handler.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "PageHandler"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-antiforgery",
            "TypeName": "System.Boolean?",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.Antiforgery\">\r\n            <summary>\r\n            Whether the antiforgery token should be generated.\r\n            </summary>\r\n            <value>Defaults to <c>false</c> if user provides an <c>action</c> attribute\r\n            or if the <c>method</c> is <see cref=\"F:Microsoft.AspNetCore.Mvc.Rendering.FormMethod.Get\" />; <c>true</c> otherwise.</value>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Antiforgery"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fragment",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.Fragment\">\r\n            <summary>\r\n            Gets or sets the URL fragment.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Fragment"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-route",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.Route\">\r\n            <summary>\r\n            Name of the route.\r\n            </summary>\r\n            <remarks>\r\n            Must be <c>null</c> if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.Action\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.Controller\" /> is non-<c>null</c>.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Route"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-all-route-data",
            "TypeName": "System.Collections.Generic.IDictionary<System.String, System.String>",
            "IndexerNamePrefix": "asp-route-",
            "IndexerTypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.RouteValues\">\r\n            <summary>\r\n            Additional parameters for the route.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "RouteValues"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper",
          "Common.TypeNameIdentifier": "FormTagHelper",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Mvc.TagHelpers",
          "Runtime.Name": "ITagHelper"
        }
      },
      {
        "HashCode": -362425999,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.ImageTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.ImageTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;img&gt; elements that supports file versioning.\r\n            </summary>\r\n            <remarks>\r\n            The tag helper won't process for cases with just the 'src' attribute.\r\n            </remarks>\r\n        </member>",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "img",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "asp-append-version"
              },
              {
                "Name": "src"
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "src",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ImageTagHelper.Src\">\r\n            <summary>\r\n            Source of the image.\r\n            </summary>\r\n            <remarks>\r\n            Passed through to the generated HTML in all cases.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Src"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-append-version",
            "TypeName": "System.Boolean",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ImageTagHelper.AppendVersion\">\r\n            <summary>\r\n            Value indicating if file version should be appended to the src urls.\r\n            </summary>\r\n            <remarks>\r\n            If <c>true</c> then a query string \"v\" with the encoded content of the file is added.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AppendVersion"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.ImageTagHelper",
          "Common.TypeNameIdentifier": "ImageTagHelper",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Mvc.TagHelpers",
          "Runtime.Name": "ITagHelper"
        }
      },
      {
        "HashCode": 1949568036,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;input&gt; elements with an <c>asp-for</c> attribute.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "asp-for"
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "asp-for",
            "TypeName": "Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.For\">\r\n            <summary>\r\n            An expression to be evaluated against the current model.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "For"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-format",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.Format\">\r\n            <summary>\r\n            The format string (see <see href=\"https://msdn.microsoft.com/en-us/library/txafckwd.aspx\" />) used to format the\r\n            <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.For\" /> result. Sets the generated \"value\" attribute to that formatted string.\r\n            </summary>\r\n            <remarks>\r\n            Not used if the provided (see <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.InputTypeName\" />) or calculated \"type\" attribute value is\r\n            <c>checkbox</c>, <c>password</c>, or <c>radio</c>. That is, <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.Format\" /> is used when calling\r\n            <see cref=\"M:Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator.GenerateTextBox(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer,System.String,System.Object,System.String,System.Object)\" />.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Format"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "type",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.InputTypeName\">\r\n            <summary>\r\n            The type of the &lt;input&gt; element.\r\n            </summary>\r\n            <remarks>\r\n            Passed through to the generated HTML in all cases. Also used to determine the <see cref=\"T:Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator\" />\r\n            helper to call and the default <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.Format\" /> value. A default <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.Format\" /> is not calculated\r\n            if the provided (see <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.InputTypeName\" />) or calculated \"type\" attribute value is <c>checkbox</c>,\r\n            <c>hidden</c>, <c>password</c>, or <c>radio</c>.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "InputTypeName"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "form",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.FormName\">\r\n            <summary>\r\n            The name of the associated form\r\n            </summary>\r\n            <remarks>\r\n            Used to associate a hidden checkbox tag to the respecting form when <see cref=\"T:Microsoft.AspNetCore.Mvc.Rendering.CheckBoxHiddenInputRenderMode\" /> is not <see cref=\"F:Microsoft.AspNetCore.Mvc.Rendering.CheckBoxHiddenInputRenderMode.None\" />.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "FormName"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "name",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.Name\">\r\n            <summary>\r\n            The name of the &lt;input&gt; element.\r\n            </summary>\r\n            <remarks>\r\n            Passed through to the generated HTML in all cases. Also used to determine whether <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.For\" /> is\r\n            valid with an empty <see cref=\"P:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression.Name\" />.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Name"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "value",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.Value\">\r\n            <summary>\r\n            The value of the &lt;input&gt; element.\r\n            </summary>\r\n            <remarks>\r\n            Passed through to the generated HTML in all cases. Also used to determine the generated \"checked\" attribute\r\n            if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.InputTypeName\" /> is \"radio\". Must not be <c>null</c> in that case.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper",
          "Common.TypeNameIdentifier": "InputTagHelper",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Mvc.TagHelpers",
          "Runtime.Name": "ITagHelper"
        }
      },
      {
        "HashCode": -362116616,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.LabelTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.LabelTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;label&gt; elements with an <c>asp-for</c> attribute.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "label",
            "Attributes": [
              {
                "Name": "asp-for"
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "asp-for",
            "TypeName": "Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LabelTagHelper.For\">\r\n            <summary>\r\n            An expression to be evaluated against the current model.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "For"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.LabelTagHelper",
          "Common.TypeNameIdentifier": "LabelTagHelper",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Mvc.TagHelpers",
          "Runtime.Name": "ITagHelper"
        }
      },
      {
        "HashCode": -1420528402,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;link&gt; elements that supports fallback href paths.\r\n            </summary>\r\n            <remarks>\r\n            The tag helper won't process for cases with just the 'href' attribute.\r\n            </remarks>\r\n        </member>",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "link",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "asp-href-include"
              }
            ]
          },
          {
            "TagName": "link",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "asp-href-exclude"
              }
            ]
          },
          {
            "TagName": "link",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "asp-fallback-href"
              }
            ]
          },
          {
            "TagName": "link",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "asp-fallback-href-include"
              }
            ]
          },
          {
            "TagName": "link",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "asp-fallback-href-exclude"
              }
            ]
          },
          {
            "TagName": "link",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "asp-fallback-test-class"
              }
            ]
          },
          {
            "TagName": "link",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "asp-fallback-test-property"
              }
            ]
          },
          {
            "TagName": "link",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "asp-fallback-test-value"
              }
            ]
          },
          {
            "TagName": "link",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "asp-append-version"
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "href",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.Href\">\r\n            <summary>\r\n            Address of the linked resource.\r\n            </summary>\r\n            <remarks>\r\n            Passed through to the generated HTML in all cases.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Href"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-href-include",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.HrefInclude\">\r\n            <summary>\r\n            A comma separated list of globbed file patterns of CSS stylesheets to load.\r\n            The glob patterns are assessed relative to the application's 'webroot' setting.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "HrefInclude"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-href-exclude",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.HrefExclude\">\r\n            <summary>\r\n            A comma separated list of globbed file patterns of CSS stylesheets to exclude from loading.\r\n            The glob patterns are assessed relative to the application's 'webroot' setting.\r\n            Must be used in conjunction with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.HrefInclude\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "HrefExclude"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fallback-href",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHref\">\r\n            <summary>\r\n            The URL of a CSS stylesheet to fallback to in the case the primary one fails.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "FallbackHref"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-suppress-fallback-integrity",
            "TypeName": "System.Boolean",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.SuppressFallbackIntegrity\">\r\n            <summary>\r\n            Boolean value that determines if an integrity hash will be compared with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHref\" /> value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "SuppressFallbackIntegrity"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-append-version",
            "TypeName": "System.Boolean?",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.AppendVersion\">\r\n            <summary>\r\n            Value indicating if file version should be appended to the href urls.\r\n            </summary>\r\n            <remarks>\r\n            If <c>true</c> then a query string \"v\" with the encoded content of the file is added.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AppendVersion"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fallback-href-include",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHrefInclude\">\r\n            <summary>\r\n            A comma separated list of globbed file patterns of CSS stylesheets to fallback to in the case the primary\r\n            one fails.\r\n            The glob patterns are assessed relative to the application's 'webroot' setting.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "FallbackHrefInclude"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fallback-href-exclude",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHrefExclude\">\r\n            <summary>\r\n            A comma separated list of globbed file patterns of CSS stylesheets to exclude from the fallback list, in\r\n            the case the primary one fails.\r\n            The glob patterns are assessed relative to the application's 'webroot' setting.\r\n            Must be used in conjunction with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHrefInclude\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "FallbackHrefExclude"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fallback-test-class",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestClass\">\r\n            <summary>\r\n            The class name defined in the stylesheet to use for the fallback test.\r\n            Must be used in conjunction with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestProperty\" /> and <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestValue\" />,\r\n            and either <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHref\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHrefInclude\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "FallbackTestClass"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fallback-test-property",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestProperty\">\r\n            <summary>\r\n            The CSS property name to use for the fallback test.\r\n            Must be used in conjunction with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestClass\" /> and <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestValue\" />,\r\n            and either <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHref\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHrefInclude\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "FallbackTestProperty"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fallback-test-value",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestValue\">\r\n            <summary>\r\n            The CSS property value to use for the fallback test.\r\n            Must be used in conjunction with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestClass\" /> and <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestProperty\" />,\r\n            and either <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHref\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHrefInclude\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "FallbackTestValue"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper",
          "Common.TypeNameIdentifier": "LinkTagHelper",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Mvc.TagHelpers",
          "Runtime.Name": "ITagHelper"
        }
      },
      {
        "HashCode": 1118616662,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;option&gt; elements.\r\n            </summary>\r\n            <remarks>\r\n            This <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> works in conjunction with <see cref=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper\" />. It reads elements\r\n            content but does not modify that content. The only modification it makes is to add a <c>selected</c> attribute\r\n            in some cases.\r\n            </remarks>\r\n        </member>",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "option"
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "value",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper.Value\">\r\n            <summary>\r\n            Specifies a value for the &lt;option&gt; element.\r\n            </summary>\r\n            <remarks>\r\n            Passed through to the generated HTML in all cases.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Value"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper",
          "Common.TypeNameIdentifier": "OptionTagHelper",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Mvc.TagHelpers",
          "Runtime.Name": "ITagHelper"
        }
      },
      {
        "HashCode": -1977548026,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper\">\r\n            <summary>\r\n            Renders a partial view.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "partial",
            "TagStructure": 2,
            "Attributes": [
              {
                "Name": "name"
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "name",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.Name\">\r\n            <summary>\r\n            The name or path of the partial view that is rendered to the response.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Name"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "for",
            "TypeName": "Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.For\">\r\n            <summary>\r\n            An expression to be evaluated against the current model. Cannot be used together with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.Model\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "For"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "model",
            "TypeName": "System.Object",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.Model\">\r\n            <summary>\r\n            The model to pass into the partial view. Cannot be used together with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.For\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Model"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "optional",
            "TypeName": "System.Boolean",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.Optional\">\r\n            <summary>\r\n            When optional, executing the tag helper will no-op if the view cannot be located.\r\n            Otherwise will throw stating the view could not be found.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Optional"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "fallback-name",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.FallbackName\">\r\n            <summary>\r\n            View to lookup if the view specified by <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.Name\" /> cannot be located.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "FallbackName"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "view-data",
            "TypeName": "Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary",
            "IndexerNamePrefix": "view-data-",
            "IndexerTypeName": "System.Object",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.ViewData\">\r\n            <summary>\r\n            A <see cref=\"T:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary\" /> to pass into the partial view.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ViewData"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper",
          "Common.TypeNameIdentifier": "PartialTagHelper",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Mvc.TagHelpers",
          "Runtime.Name": "ITagHelper"
        }
      },
      {
        "HashCode": -959784435,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.PersistComponentStateTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.PersistComponentStateTagHelper\">\r\n            <summary>\r\n            A <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.TagHelper\" /> that saves the state of Razor components rendered on the page up to that point.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "persist-component-state",
            "TagStructure": 2
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "persist-mode",
            "TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.PersistenceMode?",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.PersistComponentStateTagHelper.PersistenceMode\">\r\n            <summary>\r\n            Gets or sets the <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.PersistComponentStateTagHelper.PersistenceMode\" /> for the state to persist.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "PersistenceMode"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.PersistComponentStateTagHelper",
          "Common.TypeNameIdentifier": "PersistComponentStateTagHelper",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Mvc.TagHelpers",
          "Runtime.Name": "ITagHelper"
        }
      },
      {
        "HashCode": 1859100389,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;script&gt; elements that supports fallback src paths.\r\n            </summary>\r\n            <remarks>\r\n            The tag helper won't process for cases with just the 'src' attribute.\r\n            </remarks>\r\n        </member>",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "script",
            "Attributes": [
              {
                "Name": "asp-src-include"
              }
            ]
          },
          {
            "TagName": "script",
            "Attributes": [
              {
                "Name": "asp-src-exclude"
              }
            ]
          },
          {
            "TagName": "script",
            "Attributes": [
              {
                "Name": "asp-fallback-src"
              }
            ]
          },
          {
            "TagName": "script",
            "Attributes": [
              {
                "Name": "asp-fallback-src-include"
              }
            ]
          },
          {
            "TagName": "script",
            "Attributes": [
              {
                "Name": "asp-fallback-src-exclude"
              }
            ]
          },
          {
            "TagName": "script",
            "Attributes": [
              {
                "Name": "asp-fallback-test"
              }
            ]
          },
          {
            "TagName": "script",
            "Attributes": [
              {
                "Name": "asp-append-version"
              }
            ]
          },
          {
            "TagName": "script",
            "Attributes": [
              {
                "Name": "type"
              }
            ]
          },
          {
            "TagName": "script",
            "Attributes": [
              {
                "Name": "asp-importmap"
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "src",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.Src\">\r\n            <summary>\r\n            Address of the external script to use.\r\n            </summary>\r\n            <remarks>\r\n            Passed through to the generated HTML in all cases.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Src"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "type",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.Type\">\r\n            <summary>\r\n            Type of the script.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Type"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-src-include",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.SrcInclude\">\r\n            <summary>\r\n            A comma separated list of globbed file patterns of JavaScript scripts to load.\r\n            The glob patterns are assessed relative to the application's 'webroot' setting.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "SrcInclude"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-src-exclude",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.SrcExclude\">\r\n            <summary>\r\n            A comma separated list of globbed file patterns of JavaScript scripts to exclude from loading.\r\n            The glob patterns are assessed relative to the application's 'webroot' setting.\r\n            Must be used in conjunction with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.SrcInclude\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "SrcExclude"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fallback-src",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.FallbackSrc\">\r\n            <summary>\r\n            The URL of a Script tag to fallback to in the case the primary one fails.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "FallbackSrc"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-suppress-fallback-integrity",
            "TypeName": "System.Boolean",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.SuppressFallbackIntegrity\">\r\n            <summary>\r\n            Boolean value that determines if an integrity hash will be compared with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.FallbackSrc\" /> value.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "SuppressFallbackIntegrity"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-append-version",
            "TypeName": "System.Boolean?",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.AppendVersion\">\r\n            <summary>\r\n            Value indicating if file version should be appended to src urls.\r\n            </summary>\r\n            <remarks>\r\n            A query string \"v\" with the encoded content of the file is added.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "AppendVersion"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fallback-src-include",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.FallbackSrcInclude\">\r\n            <summary>\r\n            A comma separated list of globbed file patterns of JavaScript scripts to fallback to in the case the\r\n            primary one fails.\r\n            The glob patterns are assessed relative to the application's 'webroot' setting.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "FallbackSrcInclude"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fallback-src-exclude",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.FallbackSrcExclude\">\r\n            <summary>\r\n            A comma separated list of globbed file patterns of JavaScript scripts to exclude from the fallback list, in\r\n            the case the primary one fails.\r\n            The glob patterns are assessed relative to the application's 'webroot' setting.\r\n            Must be used in conjunction with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.FallbackSrcInclude\" />.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "FallbackSrcExclude"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-fallback-test",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.FallbackTestExpression\">\r\n            <summary>\r\n            The script method defined in the primary script to use for the fallback test.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "FallbackTestExpression"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-importmap",
            "TypeName": "Microsoft.AspNetCore.Components.ImportMapDefinition",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.ImportMap\">\r\n            <summary>\r\n            The <see cref=\"T:Microsoft.AspNetCore.Components.ImportMapDefinition\" /> to use for the document.\r\n            </summary>\r\n            <remarks>\r\n            If this is not set and the type value is \"importmap\",\r\n            the import map will be retrieved by default from the current <see cref=\"P:Microsoft.AspNetCore.Http.Endpoint.Metadata\" />.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ImportMap"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper",
          "Common.TypeNameIdentifier": "ScriptTagHelper",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Mvc.TagHelpers",
          "Runtime.Name": "ITagHelper"
        }
      },
      {
        "HashCode": 905931638,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;select&gt; elements with <c>asp-for</c> and/or\r\n            <c>asp-items</c> attribute(s).\r\n            </summary>\r\n        </member>",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "select",
            "Attributes": [
              {
                "Name": "asp-for"
              }
            ]
          },
          {
            "TagName": "select",
            "Attributes": [
              {
                "Name": "asp-items"
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "asp-for",
            "TypeName": "Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper.For\">\r\n            <summary>\r\n            An expression to be evaluated against the current model.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "For"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "asp-items",
            "TypeName": "System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper.Items\">\r\n            <summary>\r\n            A collection of <see cref=\"T:Microsoft.AspNetCore.Mvc.Rendering.SelectListItem\" /> objects used to populate the &lt;select&gt; element with\r\n            &lt;optgroup&gt; and &lt;option&gt; elements.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Items"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "name",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper.Name\">\r\n            <summary>\r\n            The name of the &lt;input&gt; element.\r\n            </summary>\r\n            <remarks>\r\n            Passed through to the generated HTML in all cases. Also used to determine whether <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper.For\" /> is\r\n            valid with an empty <see cref=\"P:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression.Name\" />.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Name"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper",
          "Common.TypeNameIdentifier": "SelectTagHelper",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Mvc.TagHelpers",
          "Runtime.Name": "ITagHelper"
        }
      },
      {
        "HashCode": 978186894,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.TextAreaTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.TextAreaTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;textarea&gt; elements with an <c>asp-for</c> attribute.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "textarea",
            "Attributes": [
              {
                "Name": "asp-for"
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "asp-for",
            "TypeName": "Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.TextAreaTagHelper.For\">\r\n            <summary>\r\n            An expression to be evaluated against the current model.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "For"
            }
          },
          {
            "Kind": "ITagHelper",
            "Name": "name",
            "TypeName": "System.String",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.TextAreaTagHelper.Name\">\r\n            <summary>\r\n            The name of the &lt;input&gt; element.\r\n            </summary>\r\n            <remarks>\r\n            Passed through to the generated HTML in all cases. Also used to determine whether <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.TextAreaTagHelper.For\" /> is\r\n            valid with an empty <see cref=\"P:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression.Name\" />.\r\n            </remarks>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "Name"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.TextAreaTagHelper",
          "Common.TypeNameIdentifier": "TextAreaTagHelper",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Mvc.TagHelpers",
          "Runtime.Name": "ITagHelper"
        }
      },
      {
        "HashCode": -1353191710,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.ValidationMessageTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.ValidationMessageTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;span&gt; elements with an <c>asp-validation-for</c>\r\n            attribute.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "span",
            "Attributes": [
              {
                "Name": "asp-validation-for"
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "asp-validation-for",
            "TypeName": "Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression",
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ValidationMessageTagHelper.For\">\r\n            <summary>\r\n            Gets an expression to be evaluated against the current model.\r\n            </summary>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "For"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.ValidationMessageTagHelper",
          "Common.TypeNameIdentifier": "ValidationMessageTagHelper",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Mvc.TagHelpers",
          "Runtime.Name": "ITagHelper"
        }
      },
      {
        "HashCode": -1010718607,
        "Kind": "ITagHelper",
        "Name": "Microsoft.AspNetCore.Mvc.TagHelpers.ValidationSummaryTagHelper",
        "AssemblyName": "Microsoft.AspNetCore.Mvc.TagHelpers",
        "Documentation": "<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.ValidationSummaryTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;div&gt; elements with an <c>asp-validation-summary</c>\r\n            attribute.\r\n            </summary>\r\n        </member>",
        "CaseSensitive": false,
        "TagMatchingRules": [
          {
            "TagName": "div",
            "Attributes": [
              {
                "Name": "asp-validation-summary"
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "ITagHelper",
            "Name": "asp-validation-summary",
            "TypeName": "Microsoft.AspNetCore.Mvc.Rendering.ValidationSummary",
            "IsEnum": true,
            "Documentation": "<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ValidationSummaryTagHelper.ValidationSummary\">\r\n            <summary>\r\n            If <see cref=\"F:Microsoft.AspNetCore.Mvc.Rendering.ValidationSummary.All\" /> or <see cref=\"F:Microsoft.AspNetCore.Mvc.Rendering.ValidationSummary.ModelOnly\" />, appends a validation\r\n            summary. Otherwise (<see cref=\"F:Microsoft.AspNetCore.Mvc.Rendering.ValidationSummary.None\" />, the default), this tag helper does nothing.\r\n            </summary>\r\n            <exception cref=\"T:System.ArgumentException\">\r\n            Thrown if setter is called with an undefined <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ValidationSummaryTagHelper.ValidationSummary\" /> value e.g.\r\n            <c>(ValidationSummary)23</c>.\r\n            </exception>\r\n        </member>",
            "Metadata": {
              "Common.PropertyName": "ValidationSummary"
            }
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Mvc.TagHelpers.ValidationSummaryTagHelper",
          "Common.TypeNameIdentifier": "ValidationSummaryTagHelper",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Mvc.TagHelpers",
          "Runtime.Name": "ITagHelper"
        }
      },
      {
        "HashCode": 1200052579,
        "Kind": "Components.Bind",
        "Name": "Bind",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to an attribute and a change event, based on the naming of the bind attribute. For example: <code>@bind-value=\"...\"</code> and <code>@bind-value:event=\"onchange\"</code> will assign the current value of the expression to the 'value' attribute, and assign a delegate that attempts to set the value to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@bind-",
                "NameComparison": 1,
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-...",
            "TypeName": "System.Collections.Generic.Dictionary<string, object>",
            "IndexerNamePrefix": "@bind-",
            "IndexerTypeName": "System.Object",
            "Documentation": "Binds the provided expression to an attribute and a change event, based on the naming of the bind attribute. For example: <code>@bind-value=\"...\"</code> and <code>@bind-value:event=\"onchange\"</code> will assign the current value of the expression to the 'value' attribute, and assign a delegate that attempts to set the value to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the corresponding bind attribute. For example: <code>@bind-value:format=\"...\"</code> will apply a format string to the value specified in <code>@bind-value=\"...\"</code>. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind-...' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              },
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Bind",
          "Common.TypeNameIdentifier": "Bind",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components",
          "Components.Bind.Fallback": "True",
          "Components.IsSpecialKind": "Components.Bind",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 946147553,
        "Kind": "Components.Bind",
        "Name": "Bind",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "@bind",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "@bind:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              },
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes",
          "Common.TypeNameIdentifier": "BindAttributes",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.Format": null,
          "Components.Bind.IsInvariantCulture": "False",
          "Components.Bind.ValueAttribute": "value",
          "Components.IsSpecialKind": "Components.Bind",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 581848811,
        "Kind": "Components.Bind",
        "Name": "Bind_value",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "@bind-value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "@bind-value:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind-value:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-value",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind_value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              },
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes",
          "Common.TypeNameIdentifier": "BindAttributes",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.Format": null,
          "Components.Bind.IsInvariantCulture": "False",
          "Components.Bind.ValueAttribute": "value",
          "Components.IsSpecialKind": "Components.Bind",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 854761574,
        "Kind": "Components.Bind",
        "Name": "Bind",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'checked' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "checkbox",
                "ValueComparison": 1
              },
              {
                "Name": "@bind",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "checkbox",
                "ValueComparison": 1
              },
              {
                "Name": "@bind:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'checked' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_checked"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_checked"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              },
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-checked",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_checked"
            }
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes",
          "Common.TypeNameIdentifier": "BindAttributes",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.Format": null,
          "Components.Bind.IsInvariantCulture": "False",
          "Components.Bind.TypeAttribute": "checkbox",
          "Components.Bind.ValueAttribute": "checked",
          "Components.IsSpecialKind": "Components.Bind",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1715752505,
        "Kind": "Components.Bind",
        "Name": "Bind",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "text",
                "ValueComparison": 1
              },
              {
                "Name": "@bind",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "text",
                "ValueComparison": 1
              },
              {
                "Name": "@bind:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              },
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes",
          "Common.TypeNameIdentifier": "BindAttributes",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.Format": null,
          "Components.Bind.IsInvariantCulture": "False",
          "Components.Bind.TypeAttribute": "text",
          "Components.Bind.ValueAttribute": "value",
          "Components.IsSpecialKind": "Components.Bind",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -926741859,
        "Kind": "Components.Bind",
        "Name": "Bind",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "number",
                "ValueComparison": 1
              },
              {
                "Name": "@bind",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "number",
                "ValueComparison": 1
              },
              {
                "Name": "@bind:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              },
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes",
          "Common.TypeNameIdentifier": "BindAttributes",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.Format": null,
          "Components.Bind.IsInvariantCulture": "True",
          "Components.Bind.TypeAttribute": "number",
          "Components.Bind.ValueAttribute": "value",
          "Components.IsSpecialKind": "Components.Bind",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1168986054,
        "Kind": "Components.Bind",
        "Name": "Bind_value",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "number",
                "ValueComparison": 1
              },
              {
                "Name": "@bind-value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "number",
                "ValueComparison": 1
              },
              {
                "Name": "@bind-value:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind-value:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-value",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind_value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              },
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes",
          "Common.TypeNameIdentifier": "BindAttributes",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.Format": null,
          "Components.Bind.IsInvariantCulture": "True",
          "Components.Bind.TypeAttribute": "number",
          "Components.Bind.ValueAttribute": "value",
          "Components.IsSpecialKind": "Components.Bind",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1521694085,
        "Kind": "Components.Bind",
        "Name": "Bind",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "date",
                "ValueComparison": 1
              },
              {
                "Name": "@bind",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "date",
                "ValueComparison": 1
              },
              {
                "Name": "@bind:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              },
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes",
          "Common.TypeNameIdentifier": "BindAttributes",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.Format": "yyyy-MM-dd",
          "Components.Bind.IsInvariantCulture": "True",
          "Components.Bind.TypeAttribute": "date",
          "Components.Bind.ValueAttribute": "value",
          "Components.IsSpecialKind": "Components.Bind",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -2115359939,
        "Kind": "Components.Bind",
        "Name": "Bind_value",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "date",
                "ValueComparison": 1
              },
              {
                "Name": "@bind-value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "date",
                "ValueComparison": 1
              },
              {
                "Name": "@bind-value:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind-value:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-value",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind_value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              },
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes",
          "Common.TypeNameIdentifier": "BindAttributes",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.Format": "yyyy-MM-dd",
          "Components.Bind.IsInvariantCulture": "True",
          "Components.Bind.TypeAttribute": "date",
          "Components.Bind.ValueAttribute": "value",
          "Components.IsSpecialKind": "Components.Bind",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -837629054,
        "Kind": "Components.Bind",
        "Name": "Bind",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "datetime-local",
                "ValueComparison": 1
              },
              {
                "Name": "@bind",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "datetime-local",
                "ValueComparison": 1
              },
              {
                "Name": "@bind:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              },
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes",
          "Common.TypeNameIdentifier": "BindAttributes",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.Format": "yyyy-MM-ddTHH:mm:ss",
          "Components.Bind.IsInvariantCulture": "True",
          "Components.Bind.TypeAttribute": "datetime-local",
          "Components.Bind.ValueAttribute": "value",
          "Components.IsSpecialKind": "Components.Bind",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1823960933,
        "Kind": "Components.Bind",
        "Name": "Bind_value",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "datetime-local",
                "ValueComparison": 1
              },
              {
                "Name": "@bind-value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "datetime-local",
                "ValueComparison": 1
              },
              {
                "Name": "@bind-value:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind-value:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-value",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind_value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              },
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes",
          "Common.TypeNameIdentifier": "BindAttributes",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.Format": "yyyy-MM-ddTHH:mm:ss",
          "Components.Bind.IsInvariantCulture": "True",
          "Components.Bind.TypeAttribute": "datetime-local",
          "Components.Bind.ValueAttribute": "value",
          "Components.IsSpecialKind": "Components.Bind",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -979141007,
        "Kind": "Components.Bind",
        "Name": "Bind",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "month",
                "ValueComparison": 1
              },
              {
                "Name": "@bind",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "month",
                "ValueComparison": 1
              },
              {
                "Name": "@bind:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              },
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes",
          "Common.TypeNameIdentifier": "BindAttributes",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.Format": "yyyy-MM",
          "Components.Bind.IsInvariantCulture": "True",
          "Components.Bind.TypeAttribute": "month",
          "Components.Bind.ValueAttribute": "value",
          "Components.IsSpecialKind": "Components.Bind",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1681510272,
        "Kind": "Components.Bind",
        "Name": "Bind_value",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "month",
                "ValueComparison": 1
              },
              {
                "Name": "@bind-value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "month",
                "ValueComparison": 1
              },
              {
                "Name": "@bind-value:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind-value:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-value",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind_value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              },
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes",
          "Common.TypeNameIdentifier": "BindAttributes",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.Format": "yyyy-MM",
          "Components.Bind.IsInvariantCulture": "True",
          "Components.Bind.TypeAttribute": "month",
          "Components.Bind.ValueAttribute": "value",
          "Components.IsSpecialKind": "Components.Bind",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 239735026,
        "Kind": "Components.Bind",
        "Name": "Bind",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "time",
                "ValueComparison": 1
              },
              {
                "Name": "@bind",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "time",
                "ValueComparison": 1
              },
              {
                "Name": "@bind:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              },
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes",
          "Common.TypeNameIdentifier": "BindAttributes",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.Format": "HH:mm:ss",
          "Components.Bind.IsInvariantCulture": "True",
          "Components.Bind.TypeAttribute": "time",
          "Components.Bind.ValueAttribute": "value",
          "Components.IsSpecialKind": "Components.Bind",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 284843267,
        "Kind": "Components.Bind",
        "Name": "Bind_value",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "time",
                "ValueComparison": 1
              },
              {
                "Name": "@bind-value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "input",
            "Attributes": [
              {
                "Name": "type",
                "Value": "time",
                "ValueComparison": 1
              },
              {
                "Name": "@bind-value:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind-value:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-value",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind_value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              },
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes",
          "Common.TypeNameIdentifier": "BindAttributes",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.Format": "HH:mm:ss",
          "Components.Bind.IsInvariantCulture": "True",
          "Components.Bind.TypeAttribute": "time",
          "Components.Bind.ValueAttribute": "value",
          "Components.IsSpecialKind": "Components.Bind",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1479066801,
        "Kind": "Components.Bind",
        "Name": "Bind",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "select",
            "Attributes": [
              {
                "Name": "@bind",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "select",
            "Attributes": [
              {
                "Name": "@bind:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              },
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes",
          "Common.TypeNameIdentifier": "BindAttributes",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.Format": null,
          "Components.Bind.IsInvariantCulture": "False",
          "Components.Bind.ValueAttribute": "value",
          "Components.IsSpecialKind": "Components.Bind",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1142493317,
        "Kind": "Components.Bind",
        "Name": "Bind",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "textarea",
            "Attributes": [
              {
                "Name": "@bind",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "textarea",
            "Attributes": [
              {
                "Name": "@bind:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind",
            "TypeName": "System.Object",
            "Documentation": "Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Bind"
            },
            "BoundAttributeParameters": [
              {
                "Name": "format",
                "TypeName": "System.String",
                "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
                "Metadata": {
                  "Common.PropertyName": "Format_value"
                }
              },
              {
                "Name": "event",
                "TypeName": "System.String",
                "Documentation": "Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.",
                "Metadata": {
                  "Common.PropertyName": "Event_value"
                }
              },
              {
                "Name": "culture",
                "TypeName": "System.Globalization.CultureInfo",
                "Documentation": "Specifies the culture to use for conversions.",
                "Metadata": {
                  "Common.PropertyName": "Culture"
                }
              },
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          },
          {
            "Kind": "Components.Bind",
            "Name": "format-value",
            "TypeName": "System.String",
            "Documentation": "Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.",
            "Metadata": {
              "Common.PropertyName": "Format_value"
            }
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Web.BindAttributes",
          "Common.TypeNameIdentifier": "BindAttributes",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Web",
          "Components.Bind.ChangeAttribute": "onchange",
          "Components.Bind.Format": null,
          "Components.Bind.IsInvariantCulture": "False",
          "Components.Bind.ValueAttribute": "value",
          "Components.IsSpecialKind": "Components.Bind",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 79224521,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputCheckbox",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputCheckbox",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "InputCheckbox",
            "Attributes": [
              {
                "Name": "@bind-Value:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind-Value:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputCheckbox",
          "Common.TypeNameIdentifier": "InputCheckbox",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Components.Bind.ValueAttribute": "Value",
          "Components.IsSpecialKind": "Components.Bind",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 229194520,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputCheckbox",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputCheckbox",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputCheckbox",
            "Attributes": [
              {
                "Name": "@bind-Value:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind-Value:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.Boolean>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputCheckbox",
          "Common.TypeNameIdentifier": "InputCheckbox",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Components.Bind.ValueAttribute": "Value",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -944706181,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputDate<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputDate",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "InputDate",
            "Attributes": [
              {
                "Name": "@bind-Value:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind-Value:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputDate<TValue>",
          "Common.TypeNameIdentifier": "InputDate",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Components.Bind.ValueAttribute": "Value",
          "Components.IsSpecialKind": "Components.Bind",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1160623408,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputDate<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputDate",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputDate",
            "Attributes": [
              {
                "Name": "@bind-Value:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind-Value:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputDate<TValue>",
          "Common.TypeNameIdentifier": "InputDate",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Components.Bind.ValueAttribute": "Value",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1547538621,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputNumber",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "InputNumber",
            "Attributes": [
              {
                "Name": "@bind-Value:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind-Value:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>",
          "Common.TypeNameIdentifier": "InputNumber",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Components.Bind.ValueAttribute": "Value",
          "Components.IsSpecialKind": "Components.Bind",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 349322308,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputNumber",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputNumber",
            "Attributes": [
              {
                "Name": "@bind-Value:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind-Value:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>",
          "Common.TypeNameIdentifier": "InputNumber",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Components.Bind.ValueAttribute": "Value",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -359889834,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputRadioGroup",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "InputRadioGroup",
            "Attributes": [
              {
                "Name": "@bind-Value:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind-Value:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>",
          "Common.TypeNameIdentifier": "InputRadioGroup",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Components.Bind.ValueAttribute": "Value",
          "Components.IsSpecialKind": "Components.Bind",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 996455707,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup",
            "Attributes": [
              {
                "Name": "@bind-Value:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind-Value:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>",
          "Common.TypeNameIdentifier": "InputRadioGroup",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Components.Bind.ValueAttribute": "Value",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -936274755,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputSelect",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "InputSelect",
            "Attributes": [
              {
                "Name": "@bind-Value:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind-Value:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>",
          "Common.TypeNameIdentifier": "InputSelect",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Components.Bind.ValueAttribute": "Value",
          "Components.IsSpecialKind": "Components.Bind",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1576278430,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputSelect",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputSelect",
            "Attributes": [
              {
                "Name": "@bind-Value:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind-Value:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<TValue>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>",
          "Common.TypeNameIdentifier": "InputSelect",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Components.Bind.ValueAttribute": "Value",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -282593025,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputText",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputText",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "InputText",
            "Attributes": [
              {
                "Name": "@bind-Value:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind-Value:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputText",
          "Common.TypeNameIdentifier": "InputText",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Components.Bind.ValueAttribute": "Value",
          "Components.IsSpecialKind": "Components.Bind",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1103860736,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputText",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputText",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputText",
            "Attributes": [
              {
                "Name": "@bind-Value:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind-Value:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputText",
          "Common.TypeNameIdentifier": "InputText",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Components.Bind.ValueAttribute": "Value",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -1588129985,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputTextArea",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "InputTextArea",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "InputTextArea",
            "Attributes": [
              {
                "Name": "@bind-Value:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind-Value:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputTextArea",
          "Common.TypeNameIdentifier": "InputTextArea",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Components.Bind.ValueAttribute": "Value",
          "Components.IsSpecialKind": "Components.Bind",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 768817914,
        "Kind": "Components.Bind",
        "Name": "Microsoft.AspNetCore.Components.Forms.InputTextArea",
        "AssemblyName": "Microsoft.AspNetCore.Components.Web",
        "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputTextArea",
            "Attributes": [
              {
                "Name": "@bind-Value",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          },
          {
            "TagName": "Microsoft.AspNetCore.Components.Forms.InputTextArea",
            "Attributes": [
              {
                "Name": "@bind-Value:get",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              },
              {
                "Name": "@bind-Value:set",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Bind",
            "Name": "@bind-Value",
            "TypeName": "Microsoft.AspNetCore.Components.EventCallback<System.String>",
            "Documentation": "Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.",
            "Metadata": {
              "Common.DirectiveAttribute": "True",
              "Common.PropertyName": "Value"
            },
            "BoundAttributeParameters": [
              {
                "Name": "get",
                "TypeName": "System.Object",
                "Documentation": "Specifies the expression to use for binding the value to the attribute.",
                "Metadata": {
                  "Common.PropertyName": "Get",
                  "Components.Bind.AlternativeNotation": "True"
                }
              },
              {
                "Name": "set",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies the expression to use for updating the bound value when a new value is available.",
                "Metadata": {
                  "Common.PropertyName": "Set"
                }
              },
              {
                "Name": "after",
                "TypeName": "System.Delegate",
                "Documentation": "Specifies an action to run after the new value has been set.",
                "Metadata": {
                  "Common.PropertyName": "After"
                }
              }
            ]
          }
        ],
        "Metadata": {
          "Common.TypeName": "Microsoft.AspNetCore.Components.Forms.InputTextArea",
          "Common.TypeNameIdentifier": "InputTextArea",
          "Common.TypeNamespace": "Microsoft.AspNetCore.Components.Forms",
          "Components.Bind.ChangeAttribute": "ValueChanged",
          "Components.Bind.ExpressionAttribute": "ValueExpression",
          "Components.Bind.ValueAttribute": "Value",
          "Components.IsSpecialKind": "Components.Bind",
          "Components.NameMatch": "Components.FullyQualifiedNameMatch",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": 1391814375,
        "Kind": "Components.Ref",
        "Name": "Ref",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Populates the specified field or property with a reference to the element or component.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@ref",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Ref",
            "Name": "@ref",
            "TypeName": "System.Object",
            "Documentation": "Populates the specified field or property with a reference to the element or component.",
            "Metadata": {
              "Common.PropertyName": "Ref",
              "Common.DirectiveAttribute": "True"
            }
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Ref",
          "Components.IsSpecialKind": "Components.Ref",
          "Runtime.Name": "Components.None"
        }
      },
      {
        "HashCode": -134743120,
        "Kind": "Components.Key",
        "Name": "Key",
        "AssemblyName": "Microsoft.AspNetCore.Components",
        "Documentation": "Ensures that the component or element will be preserved across renders if (and only if) the supplied key value matches.",
        "CaseSensitive": true,
        "TagMatchingRules": [
          {
            "TagName": "*",
            "Attributes": [
              {
                "Name": "@key",
                "Metadata": {
                  "Common.DirectiveAttribute": "True"
                }
              }
            ]
          }
        ],
        "BoundAttributes": [
          {
            "Kind": "Components.Key",
            "Name": "@key",
            "TypeName": "System.Object",
            "Documentation": "Ensures that the component or element will be preserved across renders if (and only if) the supplied key value matches.",
            "Metadata": {
              "Common.PropertyName": "Key",
              "Common.DirectiveAttribute": "True"
            }
          }
        ],
        "Metadata": {
          "Common.ClassifyAttributesOnly": "True",
          "Common.TypeName": "Microsoft.AspNetCore.Components.Key",
          "Components.IsSpecialKind": "Components.Key",
          "Runtime.Name": "Components.None"
        }
      }
    ],
    "CSharpLanguageVersion": 1300
  },
  "RootNamespace": "Portfolio.WebApi",
  "Documents": [],
  "SerializationFormat": "0.3"
}

================
File: src/Portfolio.WebApi/obj/Debug/net9.0/staticwebassets.build.endpoints.json
================
{
  "Version": 1,
  "ManifestType": "Build",
  "Endpoints": []
}

================
File: src/Portfolio.WebApi/obj/Debug/net9.0/staticwebassets.build.json
================
{
  "Version": 1,
  "Hash": "5doUAfICUDPH0UaqE1AmNQC0wJHTMN7fDSaRQlkiqxg=",
  "Source": "Portfolio.WebApi",
  "BasePath": "_content/Portfolio.WebApi",
  "Mode": "Default",
  "ManifestType": "Build",
  "ReferencedProjectsConfiguration": [],
  "DiscoveryPatterns": [],
  "Assets": [],
  "Endpoints": []
}

================
File: src/Portfolio.WebApi/obj/Debug/net9.0/staticwebassets/msbuild.build.Portfolio.WebApi.props
================
<Project>
  <Import Project="Microsoft.AspNetCore.StaticWebAssetEndpoints.props" />
  <Import Project="Microsoft.AspNetCore.StaticWebAssets.props" />
</Project>

================
File: src/Portfolio.WebApi/obj/Debug/net9.0/staticwebassets/msbuild.buildMultiTargeting.Portfolio.WebApi.props
================
<Project>
  <Import Project="..\build\Portfolio.WebApi.props" />
</Project>

================
File: src/Portfolio.WebApi/obj/Debug/net9.0/staticwebassets/msbuild.buildTransitive.Portfolio.WebApi.props
================
<Project>
  <Import Project="..\buildMultiTargeting\Portfolio.WebApi.props" />
</Project>

================
File: src/Portfolio.WebApi/obj/Portfolio.WebApi.csproj.nuget.dgspec.json
================
{
  "format": 1,
  "restore": {
    "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.WebApi\\Portfolio.WebApi.csproj": {}
  },
  "projects": {
    "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\Portfolio.Application.csproj": {
      "version": "1.0.0",
      "restore": {
        "projectUniqueName": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\Portfolio.Application.csproj",
        "projectName": "Portfolio.Application",
        "projectPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\Portfolio.Application.csproj",
        "packagesPath": "C:\\Users\\miche\\.nuget\\packages\\",
        "outputPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\obj\\",
        "projectStyle": "PackageReference",
        "fallbackFolders": [
          "C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\NuGetPackages"
        ],
        "configFilePaths": [
          "C:\\Users\\miche\\AppData\\Roaming\\NuGet\\NuGet.Config",
          "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.FallbackLocation.config",
          "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.Offline.config"
        ],
        "originalTargetFrameworks": [
          "net8.0"
        ],
        "sources": {
          "C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackages\\": {},
          "https://api.nuget.org/v3/index.json": {}
        },
        "frameworks": {
          "net8.0": {
            "targetAlias": "net8.0",
            "projectReferences": {
              "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\Portfolio.Domain.csproj": {
                "projectPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\Portfolio.Domain.csproj"
              }
            }
          }
        },
        "warningProperties": {
          "warnAsError": [
            "NU1605"
          ]
        },
        "restoreAuditProperties": {
          "enableAudit": "true",
          "auditLevel": "low",
          "auditMode": "direct"
        },
        "SdkAnalysisLevel": "9.0.100"
      },
      "frameworks": {
        "net8.0": {
          "targetAlias": "net8.0",
          "dependencies": {
            "AutoMapper": {
              "target": "Package",
              "version": "[13.0.1, )"
            },
            "FluentValidation": {
              "target": "Package",
              "version": "[11.9.0, )"
            },
            "FluentValidation.DependencyInjectionExtensions": {
              "target": "Package",
              "version": "[11.9.0, )"
            },
            "MediatR": {
              "target": "Package",
              "version": "[12.2.0, )"
            },
            "Microsoft.Extensions.Logging.Abstractions": {
              "target": "Package",
              "version": "[8.0.0, )"
            }
          },
          "imports": [
            "net461",
            "net462",
            "net47",
            "net471",
            "net472",
            "net48",
            "net481"
          ],
          "assetTargetFallback": true,
          "warn": true,
          "frameworkReferences": {
            "Microsoft.NETCore.App": {
              "privateAssets": "all"
            }
          },
          "runtimeIdentifierGraphPath": "C:\\Program Files\\dotnet\\sdk\\9.0.102/PortableRuntimeIdentifierGraph.json"
        }
      }
    },
    "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\Portfolio.Domain.csproj": {
      "version": "1.0.0",
      "restore": {
        "projectUniqueName": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\Portfolio.Domain.csproj",
        "projectName": "Portfolio.Domain",
        "projectPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\Portfolio.Domain.csproj",
        "packagesPath": "C:\\Users\\miche\\.nuget\\packages\\",
        "outputPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\obj\\",
        "projectStyle": "PackageReference",
        "fallbackFolders": [
          "C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\NuGetPackages"
        ],
        "configFilePaths": [
          "C:\\Users\\miche\\AppData\\Roaming\\NuGet\\NuGet.Config",
          "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.FallbackLocation.config",
          "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.Offline.config"
        ],
        "originalTargetFrameworks": [
          "net8.0"
        ],
        "sources": {
          "C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackages\\": {},
          "https://api.nuget.org/v3/index.json": {}
        },
        "frameworks": {
          "net8.0": {
            "targetAlias": "net8.0",
            "projectReferences": {}
          }
        },
        "warningProperties": {
          "warnAsError": [
            "NU1605"
          ]
        },
        "restoreAuditProperties": {
          "enableAudit": "true",
          "auditLevel": "low",
          "auditMode": "direct"
        },
        "SdkAnalysisLevel": "9.0.100"
      },
      "frameworks": {
        "net8.0": {
          "targetAlias": "net8.0",
          "imports": [
            "net461",
            "net462",
            "net47",
            "net471",
            "net472",
            "net48",
            "net481"
          ],
          "assetTargetFallback": true,
          "warn": true,
          "frameworkReferences": {
            "Microsoft.NETCore.App": {
              "privateAssets": "all"
            }
          },
          "runtimeIdentifierGraphPath": "C:\\Program Files\\dotnet\\sdk\\9.0.102/PortableRuntimeIdentifierGraph.json"
        }
      }
    },
    "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Infrastructure\\Portfolio.Infrastructure.csproj": {
      "version": "1.0.0",
      "restore": {
        "projectUniqueName": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Infrastructure\\Portfolio.Infrastructure.csproj",
        "projectName": "Portfolio.Infrastructure",
        "projectPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Infrastructure\\Portfolio.Infrastructure.csproj",
        "packagesPath": "C:\\Users\\miche\\.nuget\\packages\\",
        "outputPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Infrastructure\\obj\\",
        "projectStyle": "PackageReference",
        "fallbackFolders": [
          "C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\NuGetPackages"
        ],
        "configFilePaths": [
          "C:\\Users\\miche\\AppData\\Roaming\\NuGet\\NuGet.Config",
          "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.FallbackLocation.config",
          "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.Offline.config"
        ],
        "originalTargetFrameworks": [
          "net8.0"
        ],
        "sources": {
          "C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackages\\": {},
          "https://api.nuget.org/v3/index.json": {}
        },
        "frameworks": {
          "net8.0": {
            "targetAlias": "net8.0",
            "projectReferences": {
              "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\Portfolio.Application.csproj": {
                "projectPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\Portfolio.Application.csproj"
              }
            }
          }
        },
        "warningProperties": {
          "warnAsError": [
            "NU1605"
          ]
        },
        "restoreAuditProperties": {
          "enableAudit": "true",
          "auditLevel": "low",
          "auditMode": "direct"
        },
        "SdkAnalysisLevel": "9.0.100"
      },
      "frameworks": {
        "net8.0": {
          "targetAlias": "net8.0",
          "dependencies": {
            "AutoMapper": {
              "target": "Package",
              "version": "[13.0.1, )"
            },
            "MediatR": {
              "target": "Package",
              "version": "[12.2.0, )"
            },
            "Microsoft.EntityFrameworkCore": {
              "target": "Package",
              "version": "[8.0.2, )"
            },
            "Microsoft.EntityFrameworkCore.Design": {
              "include": "Runtime, Build, Native, ContentFiles, Analyzers, BuildTransitive",
              "suppressParent": "All",
              "target": "Package",
              "version": "[8.0.2, )"
            },
            "Microsoft.EntityFrameworkCore.Tools": {
              "include": "Runtime, Build, Native, ContentFiles, Analyzers, BuildTransitive",
              "suppressParent": "All",
              "target": "Package",
              "version": "[8.0.2, )"
            },
            "Microsoft.Extensions.Configuration.Abstractions": {
              "target": "Package",
              "version": "[8.0.0, )"
            },
            "Microsoft.Extensions.DependencyInjection.Abstractions": {
              "target": "Package",
              "version": "[8.0.0, )"
            },
            "Npgsql.EntityFrameworkCore.PostgreSQL": {
              "target": "Package",
              "version": "[8.0.2, )"
            }
          },
          "imports": [
            "net461",
            "net462",
            "net47",
            "net471",
            "net472",
            "net48",
            "net481"
          ],
          "assetTargetFallback": true,
          "warn": true,
          "frameworkReferences": {
            "Microsoft.NETCore.App": {
              "privateAssets": "all"
            }
          },
          "runtimeIdentifierGraphPath": "C:\\Program Files\\dotnet\\sdk\\9.0.102/PortableRuntimeIdentifierGraph.json"
        }
      }
    },
    "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.WebApi\\Portfolio.WebApi.csproj": {
      "version": "1.0.0",
      "restore": {
        "projectUniqueName": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.WebApi\\Portfolio.WebApi.csproj",
        "projectName": "Portfolio.WebApi",
        "projectPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.WebApi\\Portfolio.WebApi.csproj",
        "packagesPath": "C:\\Users\\miche\\.nuget\\packages\\",
        "outputPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.WebApi\\obj\\",
        "projectStyle": "PackageReference",
        "fallbackFolders": [
          "C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\NuGetPackages"
        ],
        "configFilePaths": [
          "C:\\Users\\miche\\AppData\\Roaming\\NuGet\\NuGet.Config",
          "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.FallbackLocation.config",
          "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.Offline.config"
        ],
        "originalTargetFrameworks": [
          "net8.0"
        ],
        "sources": {
          "C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackages\\": {},
          "https://api.nuget.org/v3/index.json": {}
        },
        "frameworks": {
          "net8.0": {
            "targetAlias": "net8.0",
            "projectReferences": {
              "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Infrastructure\\Portfolio.Infrastructure.csproj": {
                "projectPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Infrastructure\\Portfolio.Infrastructure.csproj"
              }
            }
          }
        },
        "warningProperties": {
          "warnAsError": [
            "NU1605"
          ]
        },
        "restoreAuditProperties": {
          "enableAudit": "true",
          "auditLevel": "low",
          "auditMode": "direct"
        },
        "SdkAnalysisLevel": "9.0.100"
      },
      "frameworks": {
        "net8.0": {
          "targetAlias": "net8.0",
          "dependencies": {
            "AutoMapper": {
              "target": "Package",
              "version": "[13.0.1, )"
            },
            "MediatR": {
              "target": "Package",
              "version": "[12.2.0, )"
            },
            "Microsoft.AspNetCore.OpenApi": {
              "target": "Package",
              "version": "[8.0.0, )"
            },
            "Microsoft.Extensions.DependencyInjection": {
              "target": "Package",
              "version": "[8.0.0, )"
            },
            "Swashbuckle.AspNetCore": {
              "target": "Package",
              "version": "[6.5.0, )"
            }
          },
          "imports": [
            "net461",
            "net462",
            "net47",
            "net471",
            "net472",
            "net48",
            "net481"
          ],
          "assetTargetFallback": true,
          "warn": true,
          "frameworkReferences": {
            "Microsoft.AspNetCore.App": {
              "privateAssets": "none"
            },
            "Microsoft.NETCore.App": {
              "privateAssets": "all"
            }
          },
          "runtimeIdentifierGraphPath": "C:\\Program Files\\dotnet\\sdk\\9.0.102/PortableRuntimeIdentifierGraph.json"
        }
      }
    }
  }
}

================
File: src/Portfolio.WebApi/obj/Portfolio.WebApi.csproj.nuget.g.props
================
<?xml version="1.0" encoding="utf-8" standalone="no"?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup Condition=" '$(ExcludeRestorePackageImports)' != 'true' ">
    <RestoreSuccess Condition=" '$(RestoreSuccess)' == '' ">True</RestoreSuccess>
    <RestoreTool Condition=" '$(RestoreTool)' == '' ">NuGet</RestoreTool>
    <ProjectAssetsFile Condition=" '$(ProjectAssetsFile)' == '' ">$(MSBuildThisFileDirectory)project.assets.json</ProjectAssetsFile>
    <NuGetPackageRoot Condition=" '$(NuGetPackageRoot)' == '' ">$(UserProfile)\.nuget\packages\</NuGetPackageRoot>
    <NuGetPackageFolders Condition=" '$(NuGetPackageFolders)' == '' ">C:\Users\miche\.nuget\packages\;C:\Program Files (x86)\Microsoft Visual Studio\Shared\NuGetPackages</NuGetPackageFolders>
    <NuGetProjectStyle Condition=" '$(NuGetProjectStyle)' == '' ">PackageReference</NuGetProjectStyle>
    <NuGetToolVersion Condition=" '$(NuGetToolVersion)' == '' ">6.12.3</NuGetToolVersion>
  </PropertyGroup>
  <ItemGroup Condition=" '$(ExcludeRestorePackageImports)' != 'true' ">
    <SourceRoot Include="C:\Users\miche\.nuget\packages\" />
    <SourceRoot Include="C:\Program Files (x86)\Microsoft Visual Studio\Shared\NuGetPackages\" />
  </ItemGroup>
  <ImportGroup Condition=" '$(ExcludeRestorePackageImports)' != 'true' ">
    <Import Project="$(NuGetPackageRoot)microsoft.extensions.apidescription.server\6.0.5\build\Microsoft.Extensions.ApiDescription.Server.props" Condition="Exists('$(NuGetPackageRoot)microsoft.extensions.apidescription.server\6.0.5\build\Microsoft.Extensions.ApiDescription.Server.props')" />
    <Import Project="$(NuGetPackageRoot)swashbuckle.aspnetcore\6.5.0\build\Swashbuckle.AspNetCore.props" Condition="Exists('$(NuGetPackageRoot)swashbuckle.aspnetcore\6.5.0\build\Swashbuckle.AspNetCore.props')" />
    <Import Project="$(NuGetPackageRoot)microsoft.entityframeworkcore\8.0.2\buildTransitive\net8.0\Microsoft.EntityFrameworkCore.props" Condition="Exists('$(NuGetPackageRoot)microsoft.entityframeworkcore\8.0.2\buildTransitive\net8.0\Microsoft.EntityFrameworkCore.props')" />
  </ImportGroup>
  <PropertyGroup Condition=" '$(ExcludeRestorePackageImports)' != 'true' ">
    <PkgMicrosoft_Extensions_ApiDescription_Server Condition=" '$(PkgMicrosoft_Extensions_ApiDescription_Server)' == '' ">C:\Users\miche\.nuget\packages\microsoft.extensions.apidescription.server\6.0.5</PkgMicrosoft_Extensions_ApiDescription_Server>
  </PropertyGroup>
</Project>

================
File: src/Portfolio.WebApi/obj/Portfolio.WebApi.csproj.nuget.g.targets
================
<?xml version="1.0" encoding="utf-8" standalone="no"?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ImportGroup Condition=" '$(ExcludeRestorePackageImports)' != 'true' ">
    <Import Project="$(NuGetPackageRoot)microsoft.extensions.apidescription.server\6.0.5\build\Microsoft.Extensions.ApiDescription.Server.targets" Condition="Exists('$(NuGetPackageRoot)microsoft.extensions.apidescription.server\6.0.5\build\Microsoft.Extensions.ApiDescription.Server.targets')" />
    <Import Project="$(NuGetPackageRoot)microsoft.extensions.options\8.0.0\buildTransitive\net6.0\Microsoft.Extensions.Options.targets" Condition="Exists('$(NuGetPackageRoot)microsoft.extensions.options\8.0.0\buildTransitive\net6.0\Microsoft.Extensions.Options.targets')" />
    <Import Project="$(NuGetPackageRoot)microsoft.extensions.logging.abstractions\8.0.0\buildTransitive\net6.0\Microsoft.Extensions.Logging.Abstractions.targets" Condition="Exists('$(NuGetPackageRoot)microsoft.extensions.logging.abstractions\8.0.0\buildTransitive\net6.0\Microsoft.Extensions.Logging.Abstractions.targets')" />
  </ImportGroup>
</Project>

================
File: src/Portfolio.WebApi/obj/project.assets.json
================
{
  "version": 3,
  "targets": {
    "net8.0": {
      "AutoMapper/13.0.1": {
        "type": "package",
        "dependencies": {
          "Microsoft.Extensions.Options": "6.0.0"
        },
        "compile": {
          "lib/net6.0/AutoMapper.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net6.0/AutoMapper.dll": {
            "related": ".xml"
          }
        }
      },
      "FluentValidation/11.9.0": {
        "type": "package",
        "compile": {
          "lib/net8.0/FluentValidation.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/FluentValidation.dll": {
            "related": ".xml"
          }
        }
      },
      "FluentValidation.DependencyInjectionExtensions/11.9.0": {
        "type": "package",
        "dependencies": {
          "FluentValidation": "11.9.0",
          "Microsoft.Extensions.Dependencyinjection.Abstractions": "2.1.0"
        },
        "compile": {
          "lib/netstandard2.1/FluentValidation.DependencyInjectionExtensions.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/netstandard2.1/FluentValidation.DependencyInjectionExtensions.dll": {
            "related": ".xml"
          }
        }
      },
      "MediatR/12.2.0": {
        "type": "package",
        "dependencies": {
          "MediatR.Contracts": "[2.0.1, 3.0.0)",
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0"
        },
        "compile": {
          "lib/net6.0/MediatR.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net6.0/MediatR.dll": {
            "related": ".xml"
          }
        }
      },
      "MediatR.Contracts/2.0.1": {
        "type": "package",
        "compile": {
          "lib/netstandard2.0/MediatR.Contracts.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/netstandard2.0/MediatR.Contracts.dll": {
            "related": ".xml"
          }
        }
      },
      "Microsoft.AspNetCore.OpenApi/8.0.0": {
        "type": "package",
        "dependencies": {
          "Microsoft.OpenApi": "1.4.3"
        },
        "compile": {
          "lib/net8.0/Microsoft.AspNetCore.OpenApi.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.AspNetCore.OpenApi.dll": {
            "related": ".xml"
          }
        },
        "frameworkReferences": [
          "Microsoft.AspNetCore.App"
        ]
      },
      "Microsoft.EntityFrameworkCore/8.0.2": {
        "type": "package",
        "dependencies": {
          "Microsoft.EntityFrameworkCore.Abstractions": "8.0.2",
          "Microsoft.EntityFrameworkCore.Analyzers": "8.0.2",
          "Microsoft.Extensions.Caching.Memory": "8.0.0",
          "Microsoft.Extensions.Logging": "8.0.0"
        },
        "compile": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net8.0/Microsoft.EntityFrameworkCore.props": {}
        }
      },
      "Microsoft.EntityFrameworkCore.Abstractions/8.0.2": {
        "type": "package",
        "compile": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.Abstractions.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.Abstractions.dll": {
            "related": ".xml"
          }
        }
      },
      "Microsoft.EntityFrameworkCore.Analyzers/8.0.2": {
        "type": "package",
        "compile": {
          "lib/netstandard2.0/_._": {}
        },
        "runtime": {
          "lib/netstandard2.0/_._": {}
        }
      },
      "Microsoft.EntityFrameworkCore.Relational/8.0.2": {
        "type": "package",
        "dependencies": {
          "Microsoft.EntityFrameworkCore": "8.0.2",
          "Microsoft.Extensions.Configuration.Abstractions": "8.0.0"
        },
        "compile": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.Relational.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.Relational.dll": {
            "related": ".xml"
          }
        }
      },
      "Microsoft.Extensions.ApiDescription.Server/6.0.5": {
        "type": "package",
        "build": {
          "build/Microsoft.Extensions.ApiDescription.Server.props": {},
          "build/Microsoft.Extensions.ApiDescription.Server.targets": {}
        },
        "buildMultiTargeting": {
          "buildMultiTargeting/Microsoft.Extensions.ApiDescription.Server.props": {},
          "buildMultiTargeting/Microsoft.Extensions.ApiDescription.Server.targets": {}
        }
      },
      "Microsoft.Extensions.Caching.Abstractions/8.0.0": {
        "type": "package",
        "dependencies": {
          "Microsoft.Extensions.Primitives": "8.0.0"
        },
        "compile": {
          "lib/net8.0/Microsoft.Extensions.Caching.Abstractions.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Caching.Abstractions.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net6.0/_._": {}
        }
      },
      "Microsoft.Extensions.Caching.Memory/8.0.0": {
        "type": "package",
        "dependencies": {
          "Microsoft.Extensions.Caching.Abstractions": "8.0.0",
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0",
          "Microsoft.Extensions.Logging.Abstractions": "8.0.0",
          "Microsoft.Extensions.Options": "8.0.0",
          "Microsoft.Extensions.Primitives": "8.0.0"
        },
        "compile": {
          "lib/net8.0/Microsoft.Extensions.Caching.Memory.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Caching.Memory.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net6.0/_._": {}
        }
      },
      "Microsoft.Extensions.Configuration.Abstractions/8.0.0": {
        "type": "package",
        "dependencies": {
          "Microsoft.Extensions.Primitives": "8.0.0"
        },
        "compile": {
          "lib/net8.0/Microsoft.Extensions.Configuration.Abstractions.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Configuration.Abstractions.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net6.0/_._": {}
        }
      },
      "Microsoft.Extensions.DependencyInjection/8.0.0": {
        "type": "package",
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0"
        },
        "compile": {
          "lib/net8.0/Microsoft.Extensions.DependencyInjection.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.DependencyInjection.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net6.0/_._": {}
        }
      },
      "Microsoft.Extensions.DependencyInjection.Abstractions/8.0.0": {
        "type": "package",
        "compile": {
          "lib/net8.0/Microsoft.Extensions.DependencyInjection.Abstractions.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.DependencyInjection.Abstractions.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net6.0/_._": {}
        }
      },
      "Microsoft.Extensions.Logging/8.0.0": {
        "type": "package",
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection": "8.0.0",
          "Microsoft.Extensions.Logging.Abstractions": "8.0.0",
          "Microsoft.Extensions.Options": "8.0.0"
        },
        "compile": {
          "lib/net8.0/Microsoft.Extensions.Logging.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Logging.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net6.0/_._": {}
        }
      },
      "Microsoft.Extensions.Logging.Abstractions/8.0.0": {
        "type": "package",
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0"
        },
        "compile": {
          "lib/net8.0/Microsoft.Extensions.Logging.Abstractions.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Logging.Abstractions.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net6.0/Microsoft.Extensions.Logging.Abstractions.targets": {}
        }
      },
      "Microsoft.Extensions.Options/8.0.0": {
        "type": "package",
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0",
          "Microsoft.Extensions.Primitives": "8.0.0"
        },
        "compile": {
          "lib/net8.0/Microsoft.Extensions.Options.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Options.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net6.0/Microsoft.Extensions.Options.targets": {}
        }
      },
      "Microsoft.Extensions.Primitives/8.0.0": {
        "type": "package",
        "compile": {
          "lib/net8.0/Microsoft.Extensions.Primitives.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Primitives.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net6.0/_._": {}
        }
      },
      "Microsoft.OpenApi/1.4.3": {
        "type": "package",
        "compile": {
          "lib/netstandard2.0/Microsoft.OpenApi.dll": {
            "related": ".pdb;.xml"
          }
        },
        "runtime": {
          "lib/netstandard2.0/Microsoft.OpenApi.dll": {
            "related": ".pdb;.xml"
          }
        }
      },
      "Npgsql/8.0.2": {
        "type": "package",
        "dependencies": {
          "Microsoft.Extensions.Logging.Abstractions": "8.0.0"
        },
        "compile": {
          "lib/net8.0/Npgsql.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Npgsql.dll": {
            "related": ".xml"
          }
        }
      },
      "Npgsql.EntityFrameworkCore.PostgreSQL/8.0.2": {
        "type": "package",
        "dependencies": {
          "Microsoft.EntityFrameworkCore": "8.0.2",
          "Microsoft.EntityFrameworkCore.Abstractions": "8.0.2",
          "Microsoft.EntityFrameworkCore.Relational": "8.0.2",
          "Npgsql": "8.0.2"
        },
        "compile": {
          "lib/net8.0/Npgsql.EntityFrameworkCore.PostgreSQL.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Npgsql.EntityFrameworkCore.PostgreSQL.dll": {
            "related": ".xml"
          }
        }
      },
      "Swashbuckle.AspNetCore/6.5.0": {
        "type": "package",
        "dependencies": {
          "Microsoft.Extensions.ApiDescription.Server": "6.0.5",
          "Swashbuckle.AspNetCore.Swagger": "6.5.0",
          "Swashbuckle.AspNetCore.SwaggerGen": "6.5.0",
          "Swashbuckle.AspNetCore.SwaggerUI": "6.5.0"
        },
        "build": {
          "build/Swashbuckle.AspNetCore.props": {}
        }
      },
      "Swashbuckle.AspNetCore.Swagger/6.5.0": {
        "type": "package",
        "dependencies": {
          "Microsoft.OpenApi": "1.2.3"
        },
        "compile": {
          "lib/net7.0/Swashbuckle.AspNetCore.Swagger.dll": {
            "related": ".pdb;.xml"
          }
        },
        "runtime": {
          "lib/net7.0/Swashbuckle.AspNetCore.Swagger.dll": {
            "related": ".pdb;.xml"
          }
        },
        "frameworkReferences": [
          "Microsoft.AspNetCore.App"
        ]
      },
      "Swashbuckle.AspNetCore.SwaggerGen/6.5.0": {
        "type": "package",
        "dependencies": {
          "Swashbuckle.AspNetCore.Swagger": "6.5.0"
        },
        "compile": {
          "lib/net7.0/Swashbuckle.AspNetCore.SwaggerGen.dll": {
            "related": ".pdb;.xml"
          }
        },
        "runtime": {
          "lib/net7.0/Swashbuckle.AspNetCore.SwaggerGen.dll": {
            "related": ".pdb;.xml"
          }
        }
      },
      "Swashbuckle.AspNetCore.SwaggerUI/6.5.0": {
        "type": "package",
        "compile": {
          "lib/net7.0/Swashbuckle.AspNetCore.SwaggerUI.dll": {
            "related": ".pdb;.xml"
          }
        },
        "runtime": {
          "lib/net7.0/Swashbuckle.AspNetCore.SwaggerUI.dll": {
            "related": ".pdb;.xml"
          }
        },
        "frameworkReferences": [
          "Microsoft.AspNetCore.App"
        ]
      },
      "Portfolio.Application/1.0.0": {
        "type": "project",
        "framework": ".NETCoreApp,Version=v8.0",
        "dependencies": {
          "AutoMapper": "13.0.1",
          "FluentValidation": "11.9.0",
          "FluentValidation.DependencyInjectionExtensions": "11.9.0",
          "MediatR": "12.2.0",
          "Microsoft.Extensions.Logging.Abstractions": "8.0.0",
          "Portfolio.Domain": "1.0.0"
        },
        "compile": {
          "bin/placeholder/Portfolio.Application.dll": {}
        },
        "runtime": {
          "bin/placeholder/Portfolio.Application.dll": {}
        }
      },
      "Portfolio.Domain/1.0.0": {
        "type": "project",
        "framework": ".NETCoreApp,Version=v8.0",
        "compile": {
          "bin/placeholder/Portfolio.Domain.dll": {}
        },
        "runtime": {
          "bin/placeholder/Portfolio.Domain.dll": {}
        }
      },
      "Portfolio.Infrastructure/1.0.0": {
        "type": "project",
        "framework": ".NETCoreApp,Version=v8.0",
        "dependencies": {
          "AutoMapper": "13.0.1",
          "MediatR": "12.2.0",
          "Microsoft.EntityFrameworkCore": "8.0.2",
          "Microsoft.Extensions.Configuration.Abstractions": "8.0.0",
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0",
          "Npgsql.EntityFrameworkCore.PostgreSQL": "8.0.2",
          "Portfolio.Application": "1.0.0"
        },
        "compile": {
          "bin/placeholder/Portfolio.Infrastructure.dll": {}
        },
        "runtime": {
          "bin/placeholder/Portfolio.Infrastructure.dll": {}
        }
      }
    }
  },
  "libraries": {
    "AutoMapper/13.0.1": {
      "sha512": "/Fx1SbJ16qS7dU4i604Sle+U9VLX+WSNVJggk6MupKVkYvvBm4XqYaeFuf67diHefHKHs50uQIS2YEDFhPCakQ==",
      "type": "package",
      "path": "automapper/13.0.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "README.md",
        "automapper.13.0.1.nupkg.sha512",
        "automapper.nuspec",
        "icon.png",
        "lib/net6.0/AutoMapper.dll",
        "lib/net6.0/AutoMapper.xml"
      ]
    },
    "FluentValidation/11.9.0": {
      "sha512": "VneVlTvwYDkfHV5av3QrQ0amALgrLX6LV94wlYyEsh0B/klJBW7C8y2eAtj5tOZ3jH6CAVpr4s1ZGgew/QWyig==",
      "type": "package",
      "path": "fluentvalidation/11.9.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "README.md",
        "fluent-validation-icon.png",
        "fluentvalidation.11.9.0.nupkg.sha512",
        "fluentvalidation.nuspec",
        "lib/net5.0/FluentValidation.dll",
        "lib/net5.0/FluentValidation.xml",
        "lib/net6.0/FluentValidation.dll",
        "lib/net6.0/FluentValidation.xml",
        "lib/net7.0/FluentValidation.dll",
        "lib/net7.0/FluentValidation.xml",
        "lib/net8.0/FluentValidation.dll",
        "lib/net8.0/FluentValidation.xml",
        "lib/netstandard2.0/FluentValidation.dll",
        "lib/netstandard2.0/FluentValidation.xml",
        "lib/netstandard2.1/FluentValidation.dll",
        "lib/netstandard2.1/FluentValidation.xml"
      ]
    },
    "FluentValidation.DependencyInjectionExtensions/11.9.0": {
      "sha512": "Ko++xvN7HUf4WlHJL6bhsybUj/uho8ApOYIdxGjpF8Ot7Fukz6LRfRJ06H0KXhWqmMHWEbu89hJbjKJHtg7b9g==",
      "type": "package",
      "path": "fluentvalidation.dependencyinjectionextensions/11.9.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "README.md",
        "fluent-validation-icon.png",
        "fluentvalidation.dependencyinjectionextensions.11.9.0.nupkg.sha512",
        "fluentvalidation.dependencyinjectionextensions.nuspec",
        "lib/netstandard2.0/FluentValidation.DependencyInjectionExtensions.dll",
        "lib/netstandard2.0/FluentValidation.DependencyInjectionExtensions.xml",
        "lib/netstandard2.1/FluentValidation.DependencyInjectionExtensions.dll",
        "lib/netstandard2.1/FluentValidation.DependencyInjectionExtensions.xml"
      ]
    },
    "MediatR/12.2.0": {
      "sha512": "8TUFrHapKi6D74PhnSNEguRsH91HNGyP3R4ZQdgDorJgl9Wac5Prh0vA33QfrniAaS6L2xNNhc6vxzg+5AIbwA==",
      "type": "package",
      "path": "mediatr/12.2.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "gradient_128x128.png",
        "lib/net6.0/MediatR.dll",
        "lib/net6.0/MediatR.xml",
        "lib/netstandard2.0/MediatR.dll",
        "lib/netstandard2.0/MediatR.xml",
        "mediatr.12.2.0.nupkg.sha512",
        "mediatr.nuspec"
      ]
    },
    "MediatR.Contracts/2.0.1": {
      "sha512": "FYv95bNT4UwcNA+G/J1oX5OpRiSUxteXaUt2BJbRSdRNiIUNbggJF69wy6mnk2wYToaanpdXZdCwVylt96MpwQ==",
      "type": "package",
      "path": "mediatr.contracts/2.0.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "gradient_128x128.png",
        "lib/netstandard2.0/MediatR.Contracts.dll",
        "lib/netstandard2.0/MediatR.Contracts.xml",
        "mediatr.contracts.2.0.1.nupkg.sha512",
        "mediatr.contracts.nuspec"
      ]
    },
    "Microsoft.AspNetCore.OpenApi/8.0.0": {
      "sha512": "T4mwMvPSOYAp+KeQ4xO8H2rxpiOMJ9W/7yBBkUTMp96AHtGlPN4s7hbax2tM61LxTY775JKL4fiv5grn41EHXw==",
      "type": "package",
      "path": "microsoft.aspnetcore.openapi/8.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "THIRD-PARTY-NOTICES.TXT",
        "lib/net8.0/Microsoft.AspNetCore.OpenApi.dll",
        "lib/net8.0/Microsoft.AspNetCore.OpenApi.xml",
        "microsoft.aspnetcore.openapi.8.0.0.nupkg.sha512",
        "microsoft.aspnetcore.openapi.nuspec"
      ]
    },
    "Microsoft.EntityFrameworkCore/8.0.2": {
      "sha512": "6QlvBx4rdawW3AkkCsGVV+8qRLk34aknV5JD40s1hbVR18vKmT2KDl2DW83nHcPX7f4oebQ3BD1UMNCI/gkE0g==",
      "type": "package",
      "path": "microsoft.entityframeworkcore/8.0.2",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "buildTransitive/net8.0/Microsoft.EntityFrameworkCore.props",
        "lib/net8.0/Microsoft.EntityFrameworkCore.dll",
        "lib/net8.0/Microsoft.EntityFrameworkCore.xml",
        "microsoft.entityframeworkcore.8.0.2.nupkg.sha512",
        "microsoft.entityframeworkcore.nuspec"
      ]
    },
    "Microsoft.EntityFrameworkCore.Abstractions/8.0.2": {
      "sha512": "DjDKp++BTKFZmX+xLTow7grQTY+pImKfhGW68Zf8myiL3zyJ3b8RZbnLsWGNCqKQIF6hJIz/zA/zmERobFwV0A==",
      "type": "package",
      "path": "microsoft.entityframeworkcore.abstractions/8.0.2",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "lib/net8.0/Microsoft.EntityFrameworkCore.Abstractions.dll",
        "lib/net8.0/Microsoft.EntityFrameworkCore.Abstractions.xml",
        "microsoft.entityframeworkcore.abstractions.8.0.2.nupkg.sha512",
        "microsoft.entityframeworkcore.abstractions.nuspec"
      ]
    },
    "Microsoft.EntityFrameworkCore.Analyzers/8.0.2": {
      "sha512": "LI7awhc0fiAKvcUemsqxXUWqzAH9ywTSyM1rpC1un4p5SE1bhr5nRLvyRVbKRzKakmnNNY3to8NPDnoySEkxVw==",
      "type": "package",
      "path": "microsoft.entityframeworkcore.analyzers/8.0.2",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "analyzers/dotnet/cs/Microsoft.EntityFrameworkCore.Analyzers.dll",
        "lib/netstandard2.0/_._",
        "microsoft.entityframeworkcore.analyzers.8.0.2.nupkg.sha512",
        "microsoft.entityframeworkcore.analyzers.nuspec"
      ]
    },
    "Microsoft.EntityFrameworkCore.Relational/8.0.2": {
      "sha512": "NoGfcq2OPw0z8XAPf74YFwGlTKjedWdsIEJqq4SvKcPjcu+B+/XDDNrDRxTvILfz4Ug8POSF49s1jz1JvUqTAg==",
      "type": "package",
      "path": "microsoft.entityframeworkcore.relational/8.0.2",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "lib/net8.0/Microsoft.EntityFrameworkCore.Relational.dll",
        "lib/net8.0/Microsoft.EntityFrameworkCore.Relational.xml",
        "microsoft.entityframeworkcore.relational.8.0.2.nupkg.sha512",
        "microsoft.entityframeworkcore.relational.nuspec"
      ]
    },
    "Microsoft.Extensions.ApiDescription.Server/6.0.5": {
      "sha512": "Ckb5EDBUNJdFWyajfXzUIMRkhf52fHZOQuuZg/oiu8y7zDCVwD0iHhew6MnThjHmevanpxL3f5ci2TtHQEN6bw==",
      "type": "package",
      "path": "microsoft.extensions.apidescription.server/6.0.5",
      "hasTools": true,
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "build/Microsoft.Extensions.ApiDescription.Server.props",
        "build/Microsoft.Extensions.ApiDescription.Server.targets",
        "buildMultiTargeting/Microsoft.Extensions.ApiDescription.Server.props",
        "buildMultiTargeting/Microsoft.Extensions.ApiDescription.Server.targets",
        "microsoft.extensions.apidescription.server.6.0.5.nupkg.sha512",
        "microsoft.extensions.apidescription.server.nuspec",
        "tools/Newtonsoft.Json.dll",
        "tools/dotnet-getdocument.deps.json",
        "tools/dotnet-getdocument.dll",
        "tools/dotnet-getdocument.runtimeconfig.json",
        "tools/net461-x86/GetDocument.Insider.exe",
        "tools/net461-x86/GetDocument.Insider.exe.config",
        "tools/net461-x86/Microsoft.Win32.Primitives.dll",
        "tools/net461-x86/System.AppContext.dll",
        "tools/net461-x86/System.Buffers.dll",
        "tools/net461-x86/System.Collections.Concurrent.dll",
        "tools/net461-x86/System.Collections.NonGeneric.dll",
        "tools/net461-x86/System.Collections.Specialized.dll",
        "tools/net461-x86/System.Collections.dll",
        "tools/net461-x86/System.ComponentModel.EventBasedAsync.dll",
        "tools/net461-x86/System.ComponentModel.Primitives.dll",
        "tools/net461-x86/System.ComponentModel.TypeConverter.dll",
        "tools/net461-x86/System.ComponentModel.dll",
        "tools/net461-x86/System.Console.dll",
        "tools/net461-x86/System.Data.Common.dll",
        "tools/net461-x86/System.Diagnostics.Contracts.dll",
        "tools/net461-x86/System.Diagnostics.Debug.dll",
        "tools/net461-x86/System.Diagnostics.DiagnosticSource.dll",
        "tools/net461-x86/System.Diagnostics.FileVersionInfo.dll",
        "tools/net461-x86/System.Diagnostics.Process.dll",
        "tools/net461-x86/System.Diagnostics.StackTrace.dll",
        "tools/net461-x86/System.Diagnostics.TextWriterTraceListener.dll",
        "tools/net461-x86/System.Diagnostics.Tools.dll",
        "tools/net461-x86/System.Diagnostics.TraceSource.dll",
        "tools/net461-x86/System.Diagnostics.Tracing.dll",
        "tools/net461-x86/System.Drawing.Primitives.dll",
        "tools/net461-x86/System.Dynamic.Runtime.dll",
        "tools/net461-x86/System.Globalization.Calendars.dll",
        "tools/net461-x86/System.Globalization.Extensions.dll",
        "tools/net461-x86/System.Globalization.dll",
        "tools/net461-x86/System.IO.Compression.ZipFile.dll",
        "tools/net461-x86/System.IO.Compression.dll",
        "tools/net461-x86/System.IO.FileSystem.DriveInfo.dll",
        "tools/net461-x86/System.IO.FileSystem.Primitives.dll",
        "tools/net461-x86/System.IO.FileSystem.Watcher.dll",
        "tools/net461-x86/System.IO.FileSystem.dll",
        "tools/net461-x86/System.IO.IsolatedStorage.dll",
        "tools/net461-x86/System.IO.MemoryMappedFiles.dll",
        "tools/net461-x86/System.IO.Pipes.dll",
        "tools/net461-x86/System.IO.UnmanagedMemoryStream.dll",
        "tools/net461-x86/System.IO.dll",
        "tools/net461-x86/System.Linq.Expressions.dll",
        "tools/net461-x86/System.Linq.Parallel.dll",
        "tools/net461-x86/System.Linq.Queryable.dll",
        "tools/net461-x86/System.Linq.dll",
        "tools/net461-x86/System.Memory.dll",
        "tools/net461-x86/System.Net.Http.dll",
        "tools/net461-x86/System.Net.NameResolution.dll",
        "tools/net461-x86/System.Net.NetworkInformation.dll",
        "tools/net461-x86/System.Net.Ping.dll",
        "tools/net461-x86/System.Net.Primitives.dll",
        "tools/net461-x86/System.Net.Requests.dll",
        "tools/net461-x86/System.Net.Security.dll",
        "tools/net461-x86/System.Net.Sockets.dll",
        "tools/net461-x86/System.Net.WebHeaderCollection.dll",
        "tools/net461-x86/System.Net.WebSockets.Client.dll",
        "tools/net461-x86/System.Net.WebSockets.dll",
        "tools/net461-x86/System.Numerics.Vectors.dll",
        "tools/net461-x86/System.ObjectModel.dll",
        "tools/net461-x86/System.Reflection.Extensions.dll",
        "tools/net461-x86/System.Reflection.Primitives.dll",
        "tools/net461-x86/System.Reflection.dll",
        "tools/net461-x86/System.Resources.Reader.dll",
        "tools/net461-x86/System.Resources.ResourceManager.dll",
        "tools/net461-x86/System.Resources.Writer.dll",
        "tools/net461-x86/System.Runtime.CompilerServices.Unsafe.dll",
        "tools/net461-x86/System.Runtime.CompilerServices.VisualC.dll",
        "tools/net461-x86/System.Runtime.Extensions.dll",
        "tools/net461-x86/System.Runtime.Handles.dll",
        "tools/net461-x86/System.Runtime.InteropServices.RuntimeInformation.dll",
        "tools/net461-x86/System.Runtime.InteropServices.dll",
        "tools/net461-x86/System.Runtime.Numerics.dll",
        "tools/net461-x86/System.Runtime.Serialization.Formatters.dll",
        "tools/net461-x86/System.Runtime.Serialization.Json.dll",
        "tools/net461-x86/System.Runtime.Serialization.Primitives.dll",
        "tools/net461-x86/System.Runtime.Serialization.Xml.dll",
        "tools/net461-x86/System.Runtime.dll",
        "tools/net461-x86/System.Security.Claims.dll",
        "tools/net461-x86/System.Security.Cryptography.Algorithms.dll",
        "tools/net461-x86/System.Security.Cryptography.Csp.dll",
        "tools/net461-x86/System.Security.Cryptography.Encoding.dll",
        "tools/net461-x86/System.Security.Cryptography.Primitives.dll",
        "tools/net461-x86/System.Security.Cryptography.X509Certificates.dll",
        "tools/net461-x86/System.Security.Principal.dll",
        "tools/net461-x86/System.Security.SecureString.dll",
        "tools/net461-x86/System.Text.Encoding.Extensions.dll",
        "tools/net461-x86/System.Text.Encoding.dll",
        "tools/net461-x86/System.Text.RegularExpressions.dll",
        "tools/net461-x86/System.Threading.Overlapped.dll",
        "tools/net461-x86/System.Threading.Tasks.Parallel.dll",
        "tools/net461-x86/System.Threading.Tasks.dll",
        "tools/net461-x86/System.Threading.Thread.dll",
        "tools/net461-x86/System.Threading.ThreadPool.dll",
        "tools/net461-x86/System.Threading.Timer.dll",
        "tools/net461-x86/System.Threading.dll",
        "tools/net461-x86/System.ValueTuple.dll",
        "tools/net461-x86/System.Xml.ReaderWriter.dll",
        "tools/net461-x86/System.Xml.XDocument.dll",
        "tools/net461-x86/System.Xml.XPath.XDocument.dll",
        "tools/net461-x86/System.Xml.XPath.dll",
        "tools/net461-x86/System.Xml.XmlDocument.dll",
        "tools/net461-x86/System.Xml.XmlSerializer.dll",
        "tools/net461-x86/netstandard.dll",
        "tools/net461/GetDocument.Insider.exe",
        "tools/net461/GetDocument.Insider.exe.config",
        "tools/net461/Microsoft.Win32.Primitives.dll",
        "tools/net461/System.AppContext.dll",
        "tools/net461/System.Buffers.dll",
        "tools/net461/System.Collections.Concurrent.dll",
        "tools/net461/System.Collections.NonGeneric.dll",
        "tools/net461/System.Collections.Specialized.dll",
        "tools/net461/System.Collections.dll",
        "tools/net461/System.ComponentModel.EventBasedAsync.dll",
        "tools/net461/System.ComponentModel.Primitives.dll",
        "tools/net461/System.ComponentModel.TypeConverter.dll",
        "tools/net461/System.ComponentModel.dll",
        "tools/net461/System.Console.dll",
        "tools/net461/System.Data.Common.dll",
        "tools/net461/System.Diagnostics.Contracts.dll",
        "tools/net461/System.Diagnostics.Debug.dll",
        "tools/net461/System.Diagnostics.DiagnosticSource.dll",
        "tools/net461/System.Diagnostics.FileVersionInfo.dll",
        "tools/net461/System.Diagnostics.Process.dll",
        "tools/net461/System.Diagnostics.StackTrace.dll",
        "tools/net461/System.Diagnostics.TextWriterTraceListener.dll",
        "tools/net461/System.Diagnostics.Tools.dll",
        "tools/net461/System.Diagnostics.TraceSource.dll",
        "tools/net461/System.Diagnostics.Tracing.dll",
        "tools/net461/System.Drawing.Primitives.dll",
        "tools/net461/System.Dynamic.Runtime.dll",
        "tools/net461/System.Globalization.Calendars.dll",
        "tools/net461/System.Globalization.Extensions.dll",
        "tools/net461/System.Globalization.dll",
        "tools/net461/System.IO.Compression.ZipFile.dll",
        "tools/net461/System.IO.Compression.dll",
        "tools/net461/System.IO.FileSystem.DriveInfo.dll",
        "tools/net461/System.IO.FileSystem.Primitives.dll",
        "tools/net461/System.IO.FileSystem.Watcher.dll",
        "tools/net461/System.IO.FileSystem.dll",
        "tools/net461/System.IO.IsolatedStorage.dll",
        "tools/net461/System.IO.MemoryMappedFiles.dll",
        "tools/net461/System.IO.Pipes.dll",
        "tools/net461/System.IO.UnmanagedMemoryStream.dll",
        "tools/net461/System.IO.dll",
        "tools/net461/System.Linq.Expressions.dll",
        "tools/net461/System.Linq.Parallel.dll",
        "tools/net461/System.Linq.Queryable.dll",
        "tools/net461/System.Linq.dll",
        "tools/net461/System.Memory.dll",
        "tools/net461/System.Net.Http.dll",
        "tools/net461/System.Net.NameResolution.dll",
        "tools/net461/System.Net.NetworkInformation.dll",
        "tools/net461/System.Net.Ping.dll",
        "tools/net461/System.Net.Primitives.dll",
        "tools/net461/System.Net.Requests.dll",
        "tools/net461/System.Net.Security.dll",
        "tools/net461/System.Net.Sockets.dll",
        "tools/net461/System.Net.WebHeaderCollection.dll",
        "tools/net461/System.Net.WebSockets.Client.dll",
        "tools/net461/System.Net.WebSockets.dll",
        "tools/net461/System.Numerics.Vectors.dll",
        "tools/net461/System.ObjectModel.dll",
        "tools/net461/System.Reflection.Extensions.dll",
        "tools/net461/System.Reflection.Primitives.dll",
        "tools/net461/System.Reflection.dll",
        "tools/net461/System.Resources.Reader.dll",
        "tools/net461/System.Resources.ResourceManager.dll",
        "tools/net461/System.Resources.Writer.dll",
        "tools/net461/System.Runtime.CompilerServices.Unsafe.dll",
        "tools/net461/System.Runtime.CompilerServices.VisualC.dll",
        "tools/net461/System.Runtime.Extensions.dll",
        "tools/net461/System.Runtime.Handles.dll",
        "tools/net461/System.Runtime.InteropServices.RuntimeInformation.dll",
        "tools/net461/System.Runtime.InteropServices.dll",
        "tools/net461/System.Runtime.Numerics.dll",
        "tools/net461/System.Runtime.Serialization.Formatters.dll",
        "tools/net461/System.Runtime.Serialization.Json.dll",
        "tools/net461/System.Runtime.Serialization.Primitives.dll",
        "tools/net461/System.Runtime.Serialization.Xml.dll",
        "tools/net461/System.Runtime.dll",
        "tools/net461/System.Security.Claims.dll",
        "tools/net461/System.Security.Cryptography.Algorithms.dll",
        "tools/net461/System.Security.Cryptography.Csp.dll",
        "tools/net461/System.Security.Cryptography.Encoding.dll",
        "tools/net461/System.Security.Cryptography.Primitives.dll",
        "tools/net461/System.Security.Cryptography.X509Certificates.dll",
        "tools/net461/System.Security.Principal.dll",
        "tools/net461/System.Security.SecureString.dll",
        "tools/net461/System.Text.Encoding.Extensions.dll",
        "tools/net461/System.Text.Encoding.dll",
        "tools/net461/System.Text.RegularExpressions.dll",
        "tools/net461/System.Threading.Overlapped.dll",
        "tools/net461/System.Threading.Tasks.Parallel.dll",
        "tools/net461/System.Threading.Tasks.dll",
        "tools/net461/System.Threading.Thread.dll",
        "tools/net461/System.Threading.ThreadPool.dll",
        "tools/net461/System.Threading.Timer.dll",
        "tools/net461/System.Threading.dll",
        "tools/net461/System.ValueTuple.dll",
        "tools/net461/System.Xml.ReaderWriter.dll",
        "tools/net461/System.Xml.XDocument.dll",
        "tools/net461/System.Xml.XPath.XDocument.dll",
        "tools/net461/System.Xml.XPath.dll",
        "tools/net461/System.Xml.XmlDocument.dll",
        "tools/net461/System.Xml.XmlSerializer.dll",
        "tools/net461/netstandard.dll",
        "tools/netcoreapp2.1/GetDocument.Insider.deps.json",
        "tools/netcoreapp2.1/GetDocument.Insider.dll",
        "tools/netcoreapp2.1/GetDocument.Insider.runtimeconfig.json",
        "tools/netcoreapp2.1/System.Diagnostics.DiagnosticSource.dll"
      ]
    },
    "Microsoft.Extensions.Caching.Abstractions/8.0.0": {
      "sha512": "3KuSxeHoNYdxVYfg2IRZCThcrlJ1XJqIXkAWikCsbm5C/bCjv7G0WoKDyuR98Q+T607QT2Zl5GsbGRkENcV2yQ==",
      "type": "package",
      "path": "microsoft.extensions.caching.abstractions/8.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "PACKAGE.md",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/net461/Microsoft.Extensions.Caching.Abstractions.targets",
        "buildTransitive/net462/_._",
        "buildTransitive/net6.0/_._",
        "buildTransitive/netcoreapp2.0/Microsoft.Extensions.Caching.Abstractions.targets",
        "lib/net462/Microsoft.Extensions.Caching.Abstractions.dll",
        "lib/net462/Microsoft.Extensions.Caching.Abstractions.xml",
        "lib/net6.0/Microsoft.Extensions.Caching.Abstractions.dll",
        "lib/net6.0/Microsoft.Extensions.Caching.Abstractions.xml",
        "lib/net7.0/Microsoft.Extensions.Caching.Abstractions.dll",
        "lib/net7.0/Microsoft.Extensions.Caching.Abstractions.xml",
        "lib/net8.0/Microsoft.Extensions.Caching.Abstractions.dll",
        "lib/net8.0/Microsoft.Extensions.Caching.Abstractions.xml",
        "lib/netstandard2.0/Microsoft.Extensions.Caching.Abstractions.dll",
        "lib/netstandard2.0/Microsoft.Extensions.Caching.Abstractions.xml",
        "microsoft.extensions.caching.abstractions.8.0.0.nupkg.sha512",
        "microsoft.extensions.caching.abstractions.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "Microsoft.Extensions.Caching.Memory/8.0.0": {
      "sha512": "7pqivmrZDzo1ADPkRwjy+8jtRKWRCPag9qPI+p7sgu7Q4QreWhcvbiWXsbhP+yY8XSiDvZpu2/LWdBv7PnmOpQ==",
      "type": "package",
      "path": "microsoft.extensions.caching.memory/8.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "PACKAGE.md",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/net461/Microsoft.Extensions.Caching.Memory.targets",
        "buildTransitive/net462/_._",
        "buildTransitive/net6.0/_._",
        "buildTransitive/netcoreapp2.0/Microsoft.Extensions.Caching.Memory.targets",
        "lib/net462/Microsoft.Extensions.Caching.Memory.dll",
        "lib/net462/Microsoft.Extensions.Caching.Memory.xml",
        "lib/net6.0/Microsoft.Extensions.Caching.Memory.dll",
        "lib/net6.0/Microsoft.Extensions.Caching.Memory.xml",
        "lib/net7.0/Microsoft.Extensions.Caching.Memory.dll",
        "lib/net7.0/Microsoft.Extensions.Caching.Memory.xml",
        "lib/net8.0/Microsoft.Extensions.Caching.Memory.dll",
        "lib/net8.0/Microsoft.Extensions.Caching.Memory.xml",
        "lib/netstandard2.0/Microsoft.Extensions.Caching.Memory.dll",
        "lib/netstandard2.0/Microsoft.Extensions.Caching.Memory.xml",
        "microsoft.extensions.caching.memory.8.0.0.nupkg.sha512",
        "microsoft.extensions.caching.memory.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "Microsoft.Extensions.Configuration.Abstractions/8.0.0": {
      "sha512": "3lE/iLSutpgX1CC0NOW70FJoGARRHbyKmG7dc0klnUZ9Dd9hS6N/POPWhKhMLCEuNN5nXEY5agmlFtH562vqhQ==",
      "type": "package",
      "path": "microsoft.extensions.configuration.abstractions/8.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "PACKAGE.md",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/net461/Microsoft.Extensions.Configuration.Abstractions.targets",
        "buildTransitive/net462/_._",
        "buildTransitive/net6.0/_._",
        "buildTransitive/netcoreapp2.0/Microsoft.Extensions.Configuration.Abstractions.targets",
        "lib/net462/Microsoft.Extensions.Configuration.Abstractions.dll",
        "lib/net462/Microsoft.Extensions.Configuration.Abstractions.xml",
        "lib/net6.0/Microsoft.Extensions.Configuration.Abstractions.dll",
        "lib/net6.0/Microsoft.Extensions.Configuration.Abstractions.xml",
        "lib/net7.0/Microsoft.Extensions.Configuration.Abstractions.dll",
        "lib/net7.0/Microsoft.Extensions.Configuration.Abstractions.xml",
        "lib/net8.0/Microsoft.Extensions.Configuration.Abstractions.dll",
        "lib/net8.0/Microsoft.Extensions.Configuration.Abstractions.xml",
        "lib/netstandard2.0/Microsoft.Extensions.Configuration.Abstractions.dll",
        "lib/netstandard2.0/Microsoft.Extensions.Configuration.Abstractions.xml",
        "microsoft.extensions.configuration.abstractions.8.0.0.nupkg.sha512",
        "microsoft.extensions.configuration.abstractions.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "Microsoft.Extensions.DependencyInjection/8.0.0": {
      "sha512": "V8S3bsm50ig6JSyrbcJJ8bW2b9QLGouz+G1miK3UTaOWmMtFwNNNzUf4AleyDWUmTrWMLNnFSLEQtxmxgNQnNQ==",
      "type": "package",
      "path": "microsoft.extensions.dependencyinjection/8.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "PACKAGE.md",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/net461/Microsoft.Extensions.DependencyInjection.targets",
        "buildTransitive/net462/_._",
        "buildTransitive/net6.0/_._",
        "buildTransitive/netcoreapp2.0/Microsoft.Extensions.DependencyInjection.targets",
        "lib/net462/Microsoft.Extensions.DependencyInjection.dll",
        "lib/net462/Microsoft.Extensions.DependencyInjection.xml",
        "lib/net6.0/Microsoft.Extensions.DependencyInjection.dll",
        "lib/net6.0/Microsoft.Extensions.DependencyInjection.xml",
        "lib/net7.0/Microsoft.Extensions.DependencyInjection.dll",
        "lib/net7.0/Microsoft.Extensions.DependencyInjection.xml",
        "lib/net8.0/Microsoft.Extensions.DependencyInjection.dll",
        "lib/net8.0/Microsoft.Extensions.DependencyInjection.xml",
        "lib/netstandard2.0/Microsoft.Extensions.DependencyInjection.dll",
        "lib/netstandard2.0/Microsoft.Extensions.DependencyInjection.xml",
        "lib/netstandard2.1/Microsoft.Extensions.DependencyInjection.dll",
        "lib/netstandard2.1/Microsoft.Extensions.DependencyInjection.xml",
        "microsoft.extensions.dependencyinjection.8.0.0.nupkg.sha512",
        "microsoft.extensions.dependencyinjection.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "Microsoft.Extensions.DependencyInjection.Abstractions/8.0.0": {
      "sha512": "cjWrLkJXK0rs4zofsK4bSdg+jhDLTaxrkXu4gS6Y7MAlCvRyNNgwY/lJi5RDlQOnSZweHqoyvgvbdvQsRIW+hg==",
      "type": "package",
      "path": "microsoft.extensions.dependencyinjection.abstractions/8.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "PACKAGE.md",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/net461/Microsoft.Extensions.DependencyInjection.Abstractions.targets",
        "buildTransitive/net462/_._",
        "buildTransitive/net6.0/_._",
        "buildTransitive/netcoreapp2.0/Microsoft.Extensions.DependencyInjection.Abstractions.targets",
        "lib/net462/Microsoft.Extensions.DependencyInjection.Abstractions.dll",
        "lib/net462/Microsoft.Extensions.DependencyInjection.Abstractions.xml",
        "lib/net6.0/Microsoft.Extensions.DependencyInjection.Abstractions.dll",
        "lib/net6.0/Microsoft.Extensions.DependencyInjection.Abstractions.xml",
        "lib/net7.0/Microsoft.Extensions.DependencyInjection.Abstractions.dll",
        "lib/net7.0/Microsoft.Extensions.DependencyInjection.Abstractions.xml",
        "lib/net8.0/Microsoft.Extensions.DependencyInjection.Abstractions.dll",
        "lib/net8.0/Microsoft.Extensions.DependencyInjection.Abstractions.xml",
        "lib/netstandard2.0/Microsoft.Extensions.DependencyInjection.Abstractions.dll",
        "lib/netstandard2.0/Microsoft.Extensions.DependencyInjection.Abstractions.xml",
        "lib/netstandard2.1/Microsoft.Extensions.DependencyInjection.Abstractions.dll",
        "lib/netstandard2.1/Microsoft.Extensions.DependencyInjection.Abstractions.xml",
        "microsoft.extensions.dependencyinjection.abstractions.8.0.0.nupkg.sha512",
        "microsoft.extensions.dependencyinjection.abstractions.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "Microsoft.Extensions.Logging/8.0.0": {
      "sha512": "tvRkov9tAJ3xP51LCv3FJ2zINmv1P8Hi8lhhtcKGqM+ImiTCC84uOPEI4z8Cdq2C3o9e+Aa0Gw0rmrsJD77W+w==",
      "type": "package",
      "path": "microsoft.extensions.logging/8.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "PACKAGE.md",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/net461/Microsoft.Extensions.Logging.targets",
        "buildTransitive/net462/_._",
        "buildTransitive/net6.0/_._",
        "buildTransitive/netcoreapp2.0/Microsoft.Extensions.Logging.targets",
        "lib/net462/Microsoft.Extensions.Logging.dll",
        "lib/net462/Microsoft.Extensions.Logging.xml",
        "lib/net6.0/Microsoft.Extensions.Logging.dll",
        "lib/net6.0/Microsoft.Extensions.Logging.xml",
        "lib/net7.0/Microsoft.Extensions.Logging.dll",
        "lib/net7.0/Microsoft.Extensions.Logging.xml",
        "lib/net8.0/Microsoft.Extensions.Logging.dll",
        "lib/net8.0/Microsoft.Extensions.Logging.xml",
        "lib/netstandard2.0/Microsoft.Extensions.Logging.dll",
        "lib/netstandard2.0/Microsoft.Extensions.Logging.xml",
        "lib/netstandard2.1/Microsoft.Extensions.Logging.dll",
        "lib/netstandard2.1/Microsoft.Extensions.Logging.xml",
        "microsoft.extensions.logging.8.0.0.nupkg.sha512",
        "microsoft.extensions.logging.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "Microsoft.Extensions.Logging.Abstractions/8.0.0": {
      "sha512": "arDBqTgFCyS0EvRV7O3MZturChstm50OJ0y9bDJvAcmEPJm0FFpFyjU/JLYyStNGGey081DvnQYlncNX5SJJGA==",
      "type": "package",
      "path": "microsoft.extensions.logging.abstractions/8.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "PACKAGE.md",
        "THIRD-PARTY-NOTICES.TXT",
        "analyzers/dotnet/roslyn3.11/cs/Microsoft.Extensions.Logging.Generators.dll",
        "analyzers/dotnet/roslyn3.11/cs/cs/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/de/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/es/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/fr/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/it/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/ja/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/ko/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/pl/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/pt-BR/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/ru/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/tr/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/zh-Hans/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/zh-Hant/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/Microsoft.Extensions.Logging.Generators.dll",
        "analyzers/dotnet/roslyn4.0/cs/cs/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/de/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/es/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/fr/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/it/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/ja/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/ko/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/pl/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/pt-BR/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/ru/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/tr/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/zh-Hans/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/zh-Hant/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/Microsoft.Extensions.Logging.Generators.dll",
        "analyzers/dotnet/roslyn4.4/cs/cs/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/de/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/es/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/fr/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/it/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/ja/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/ko/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/pl/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/pt-BR/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/ru/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/tr/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/zh-Hans/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/zh-Hant/Microsoft.Extensions.Logging.Generators.resources.dll",
        "buildTransitive/net461/Microsoft.Extensions.Logging.Abstractions.targets",
        "buildTransitive/net462/Microsoft.Extensions.Logging.Abstractions.targets",
        "buildTransitive/net6.0/Microsoft.Extensions.Logging.Abstractions.targets",
        "buildTransitive/netcoreapp2.0/Microsoft.Extensions.Logging.Abstractions.targets",
        "buildTransitive/netstandard2.0/Microsoft.Extensions.Logging.Abstractions.targets",
        "lib/net462/Microsoft.Extensions.Logging.Abstractions.dll",
        "lib/net462/Microsoft.Extensions.Logging.Abstractions.xml",
        "lib/net6.0/Microsoft.Extensions.Logging.Abstractions.dll",
        "lib/net6.0/Microsoft.Extensions.Logging.Abstractions.xml",
        "lib/net7.0/Microsoft.Extensions.Logging.Abstractions.dll",
        "lib/net7.0/Microsoft.Extensions.Logging.Abstractions.xml",
        "lib/net8.0/Microsoft.Extensions.Logging.Abstractions.dll",
        "lib/net8.0/Microsoft.Extensions.Logging.Abstractions.xml",
        "lib/netstandard2.0/Microsoft.Extensions.Logging.Abstractions.dll",
        "lib/netstandard2.0/Microsoft.Extensions.Logging.Abstractions.xml",
        "microsoft.extensions.logging.abstractions.8.0.0.nupkg.sha512",
        "microsoft.extensions.logging.abstractions.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "Microsoft.Extensions.Options/8.0.0": {
      "sha512": "JOVOfqpnqlVLUzINQ2fox8evY2SKLYJ3BV8QDe/Jyp21u1T7r45x/R/5QdteURMR5r01GxeJSBBUOCOyaNXA3g==",
      "type": "package",
      "path": "microsoft.extensions.options/8.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "PACKAGE.md",
        "THIRD-PARTY-NOTICES.TXT",
        "analyzers/dotnet/roslyn4.4/cs/Microsoft.Extensions.Options.SourceGeneration.dll",
        "analyzers/dotnet/roslyn4.4/cs/cs/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/de/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/es/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/fr/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/it/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/ja/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/ko/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/pl/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/pt-BR/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/ru/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/tr/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/zh-Hans/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/zh-Hant/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "buildTransitive/net461/Microsoft.Extensions.Options.targets",
        "buildTransitive/net462/Microsoft.Extensions.Options.targets",
        "buildTransitive/net6.0/Microsoft.Extensions.Options.targets",
        "buildTransitive/netcoreapp2.0/Microsoft.Extensions.Options.targets",
        "buildTransitive/netstandard2.0/Microsoft.Extensions.Options.targets",
        "lib/net462/Microsoft.Extensions.Options.dll",
        "lib/net462/Microsoft.Extensions.Options.xml",
        "lib/net6.0/Microsoft.Extensions.Options.dll",
        "lib/net6.0/Microsoft.Extensions.Options.xml",
        "lib/net7.0/Microsoft.Extensions.Options.dll",
        "lib/net7.0/Microsoft.Extensions.Options.xml",
        "lib/net8.0/Microsoft.Extensions.Options.dll",
        "lib/net8.0/Microsoft.Extensions.Options.xml",
        "lib/netstandard2.0/Microsoft.Extensions.Options.dll",
        "lib/netstandard2.0/Microsoft.Extensions.Options.xml",
        "lib/netstandard2.1/Microsoft.Extensions.Options.dll",
        "lib/netstandard2.1/Microsoft.Extensions.Options.xml",
        "microsoft.extensions.options.8.0.0.nupkg.sha512",
        "microsoft.extensions.options.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "Microsoft.Extensions.Primitives/8.0.0": {
      "sha512": "bXJEZrW9ny8vjMF1JV253WeLhpEVzFo1lyaZu1vQ4ZxWUlVvknZ/+ftFgVheLubb4eZPSwwxBeqS1JkCOjxd8g==",
      "type": "package",
      "path": "microsoft.extensions.primitives/8.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "PACKAGE.md",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/net461/Microsoft.Extensions.Primitives.targets",
        "buildTransitive/net462/_._",
        "buildTransitive/net6.0/_._",
        "buildTransitive/netcoreapp2.0/Microsoft.Extensions.Primitives.targets",
        "lib/net462/Microsoft.Extensions.Primitives.dll",
        "lib/net462/Microsoft.Extensions.Primitives.xml",
        "lib/net6.0/Microsoft.Extensions.Primitives.dll",
        "lib/net6.0/Microsoft.Extensions.Primitives.xml",
        "lib/net7.0/Microsoft.Extensions.Primitives.dll",
        "lib/net7.0/Microsoft.Extensions.Primitives.xml",
        "lib/net8.0/Microsoft.Extensions.Primitives.dll",
        "lib/net8.0/Microsoft.Extensions.Primitives.xml",
        "lib/netstandard2.0/Microsoft.Extensions.Primitives.dll",
        "lib/netstandard2.0/Microsoft.Extensions.Primitives.xml",
        "microsoft.extensions.primitives.8.0.0.nupkg.sha512",
        "microsoft.extensions.primitives.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "Microsoft.OpenApi/1.4.3": {
      "sha512": "rURwggB+QZYcSVbDr7HSdhw/FELvMlriW10OeOzjPT7pstefMo7IThhtNtDudxbXhW+lj0NfX72Ka5EDsG8x6w==",
      "type": "package",
      "path": "microsoft.openapi/1.4.3",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "lib/netstandard2.0/Microsoft.OpenApi.dll",
        "lib/netstandard2.0/Microsoft.OpenApi.pdb",
        "lib/netstandard2.0/Microsoft.OpenApi.xml",
        "microsoft.openapi.1.4.3.nupkg.sha512",
        "microsoft.openapi.nuspec"
      ]
    },
    "Npgsql/8.0.2": {
      "sha512": "MuJzLoWCaQhQAR3oh66YR0Ir6mxuezncGX3f8wxvAc21g0+9HICktJQlqMoODhxztZKXE5k9GxRxqUAN+vPb4g==",
      "type": "package",
      "path": "npgsql/8.0.2",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "README.md",
        "lib/net6.0/Npgsql.dll",
        "lib/net6.0/Npgsql.xml",
        "lib/net7.0/Npgsql.dll",
        "lib/net7.0/Npgsql.xml",
        "lib/net8.0/Npgsql.dll",
        "lib/net8.0/Npgsql.xml",
        "lib/netstandard2.0/Npgsql.dll",
        "lib/netstandard2.0/Npgsql.xml",
        "lib/netstandard2.1/Npgsql.dll",
        "lib/netstandard2.1/Npgsql.xml",
        "npgsql.8.0.2.nupkg.sha512",
        "npgsql.nuspec",
        "postgresql.png"
      ]
    },
    "Npgsql.EntityFrameworkCore.PostgreSQL/8.0.2": {
      "sha512": "eoZPynwkZTWFTgnocvXORuCL2yFZtscrUdqVhjxiRULpC7BMg9zhLM5oDZAU5PoX1PgN77hmkKE4a3PQiHqh7Q==",
      "type": "package",
      "path": "npgsql.entityframeworkcore.postgresql/8.0.2",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "README.md",
        "lib/net8.0/Npgsql.EntityFrameworkCore.PostgreSQL.dll",
        "lib/net8.0/Npgsql.EntityFrameworkCore.PostgreSQL.xml",
        "npgsql.entityframeworkcore.postgresql.8.0.2.nupkg.sha512",
        "npgsql.entityframeworkcore.postgresql.nuspec",
        "postgresql.png"
      ]
    },
    "Swashbuckle.AspNetCore/6.5.0": {
      "sha512": "FK05XokgjgwlCI6wCT+D4/abtQkL1X1/B9Oas6uIwHFmYrIO9WUD5aLC9IzMs9GnHfUXOtXZ2S43gN1mhs5+aA==",
      "type": "package",
      "path": "swashbuckle.aspnetcore/6.5.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "build/Swashbuckle.AspNetCore.props",
        "swashbuckle.aspnetcore.6.5.0.nupkg.sha512",
        "swashbuckle.aspnetcore.nuspec"
      ]
    },
    "Swashbuckle.AspNetCore.Swagger/6.5.0": {
      "sha512": "XWmCmqyFmoItXKFsQSwQbEAsjDKcxlNf1l+/Ki42hcb6LjKL8m5Db69OTvz5vLonMSRntYO1XLqz0OP+n3vKnA==",
      "type": "package",
      "path": "swashbuckle.aspnetcore.swagger/6.5.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "lib/net5.0/Swashbuckle.AspNetCore.Swagger.dll",
        "lib/net5.0/Swashbuckle.AspNetCore.Swagger.pdb",
        "lib/net5.0/Swashbuckle.AspNetCore.Swagger.xml",
        "lib/net6.0/Swashbuckle.AspNetCore.Swagger.dll",
        "lib/net6.0/Swashbuckle.AspNetCore.Swagger.pdb",
        "lib/net6.0/Swashbuckle.AspNetCore.Swagger.xml",
        "lib/net7.0/Swashbuckle.AspNetCore.Swagger.dll",
        "lib/net7.0/Swashbuckle.AspNetCore.Swagger.pdb",
        "lib/net7.0/Swashbuckle.AspNetCore.Swagger.xml",
        "lib/netcoreapp3.0/Swashbuckle.AspNetCore.Swagger.dll",
        "lib/netcoreapp3.0/Swashbuckle.AspNetCore.Swagger.pdb",
        "lib/netcoreapp3.0/Swashbuckle.AspNetCore.Swagger.xml",
        "lib/netstandard2.0/Swashbuckle.AspNetCore.Swagger.dll",
        "lib/netstandard2.0/Swashbuckle.AspNetCore.Swagger.pdb",
        "lib/netstandard2.0/Swashbuckle.AspNetCore.Swagger.xml",
        "swashbuckle.aspnetcore.swagger.6.5.0.nupkg.sha512",
        "swashbuckle.aspnetcore.swagger.nuspec"
      ]
    },
    "Swashbuckle.AspNetCore.SwaggerGen/6.5.0": {
      "sha512": "Y/qW8Qdg9OEs7V013tt+94OdPxbRdbhcEbw4NiwGvf4YBcfhL/y7qp/Mjv/cENsQ2L3NqJ2AOu94weBy/h4KvA==",
      "type": "package",
      "path": "swashbuckle.aspnetcore.swaggergen/6.5.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "lib/net5.0/Swashbuckle.AspNetCore.SwaggerGen.dll",
        "lib/net5.0/Swashbuckle.AspNetCore.SwaggerGen.pdb",
        "lib/net5.0/Swashbuckle.AspNetCore.SwaggerGen.xml",
        "lib/net6.0/Swashbuckle.AspNetCore.SwaggerGen.dll",
        "lib/net6.0/Swashbuckle.AspNetCore.SwaggerGen.pdb",
        "lib/net6.0/Swashbuckle.AspNetCore.SwaggerGen.xml",
        "lib/net7.0/Swashbuckle.AspNetCore.SwaggerGen.dll",
        "lib/net7.0/Swashbuckle.AspNetCore.SwaggerGen.pdb",
        "lib/net7.0/Swashbuckle.AspNetCore.SwaggerGen.xml",
        "lib/netcoreapp3.0/Swashbuckle.AspNetCore.SwaggerGen.dll",
        "lib/netcoreapp3.0/Swashbuckle.AspNetCore.SwaggerGen.pdb",
        "lib/netcoreapp3.0/Swashbuckle.AspNetCore.SwaggerGen.xml",
        "lib/netstandard2.0/Swashbuckle.AspNetCore.SwaggerGen.dll",
        "lib/netstandard2.0/Swashbuckle.AspNetCore.SwaggerGen.pdb",
        "lib/netstandard2.0/Swashbuckle.AspNetCore.SwaggerGen.xml",
        "swashbuckle.aspnetcore.swaggergen.6.5.0.nupkg.sha512",
        "swashbuckle.aspnetcore.swaggergen.nuspec"
      ]
    },
    "Swashbuckle.AspNetCore.SwaggerUI/6.5.0": {
      "sha512": "OvbvxX+wL8skxTBttcBsVxdh73Fag4xwqEU2edh4JMn7Ws/xJHnY/JB1e9RoCb6XpDxUF3hD9A0Z1lEUx40Pfw==",
      "type": "package",
      "path": "swashbuckle.aspnetcore.swaggerui/6.5.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "lib/net5.0/Swashbuckle.AspNetCore.SwaggerUI.dll",
        "lib/net5.0/Swashbuckle.AspNetCore.SwaggerUI.pdb",
        "lib/net5.0/Swashbuckle.AspNetCore.SwaggerUI.xml",
        "lib/net6.0/Swashbuckle.AspNetCore.SwaggerUI.dll",
        "lib/net6.0/Swashbuckle.AspNetCore.SwaggerUI.pdb",
        "lib/net6.0/Swashbuckle.AspNetCore.SwaggerUI.xml",
        "lib/net7.0/Swashbuckle.AspNetCore.SwaggerUI.dll",
        "lib/net7.0/Swashbuckle.AspNetCore.SwaggerUI.pdb",
        "lib/net7.0/Swashbuckle.AspNetCore.SwaggerUI.xml",
        "lib/netcoreapp3.0/Swashbuckle.AspNetCore.SwaggerUI.dll",
        "lib/netcoreapp3.0/Swashbuckle.AspNetCore.SwaggerUI.pdb",
        "lib/netcoreapp3.0/Swashbuckle.AspNetCore.SwaggerUI.xml",
        "lib/netstandard2.0/Swashbuckle.AspNetCore.SwaggerUI.dll",
        "lib/netstandard2.0/Swashbuckle.AspNetCore.SwaggerUI.pdb",
        "lib/netstandard2.0/Swashbuckle.AspNetCore.SwaggerUI.xml",
        "swashbuckle.aspnetcore.swaggerui.6.5.0.nupkg.sha512",
        "swashbuckle.aspnetcore.swaggerui.nuspec"
      ]
    },
    "Portfolio.Application/1.0.0": {
      "type": "project",
      "path": "../Portfolio.Application/Portfolio.Application.csproj",
      "msbuildProject": "../Portfolio.Application/Portfolio.Application.csproj"
    },
    "Portfolio.Domain/1.0.0": {
      "type": "project",
      "path": "../Portfolio.Domain/Portfolio.Domain.csproj",
      "msbuildProject": "../Portfolio.Domain/Portfolio.Domain.csproj"
    },
    "Portfolio.Infrastructure/1.0.0": {
      "type": "project",
      "path": "../Portfolio.Infrastructure/Portfolio.Infrastructure.csproj",
      "msbuildProject": "../Portfolio.Infrastructure/Portfolio.Infrastructure.csproj"
    }
  },
  "projectFileDependencyGroups": {
    "net8.0": [
      "AutoMapper >= 13.0.1",
      "MediatR >= 12.2.0",
      "Microsoft.AspNetCore.OpenApi >= 8.0.0",
      "Microsoft.Extensions.DependencyInjection >= 8.0.0",
      "Portfolio.Infrastructure >= 1.0.0",
      "Swashbuckle.AspNetCore >= 6.5.0"
    ]
  },
  "packageFolders": {
    "C:\\Users\\miche\\.nuget\\packages\\": {},
    "C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\NuGetPackages": {}
  },
  "project": {
    "version": "1.0.0",
    "restore": {
      "projectUniqueName": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.WebApi\\Portfolio.WebApi.csproj",
      "projectName": "Portfolio.WebApi",
      "projectPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.WebApi\\Portfolio.WebApi.csproj",
      "packagesPath": "C:\\Users\\miche\\.nuget\\packages\\",
      "outputPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.WebApi\\obj\\",
      "projectStyle": "PackageReference",
      "fallbackFolders": [
        "C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\NuGetPackages"
      ],
      "configFilePaths": [
        "C:\\Users\\miche\\AppData\\Roaming\\NuGet\\NuGet.Config",
        "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.FallbackLocation.config",
        "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.Offline.config"
      ],
      "originalTargetFrameworks": [
        "net8.0"
      ],
      "sources": {
        "C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackages\\": {},
        "https://api.nuget.org/v3/index.json": {}
      },
      "frameworks": {
        "net8.0": {
          "targetAlias": "net8.0",
          "projectReferences": {
            "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Infrastructure\\Portfolio.Infrastructure.csproj": {
              "projectPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Infrastructure\\Portfolio.Infrastructure.csproj"
            }
          }
        }
      },
      "warningProperties": {
        "warnAsError": [
          "NU1605"
        ]
      },
      "restoreAuditProperties": {
        "enableAudit": "true",
        "auditLevel": "low",
        "auditMode": "direct"
      },
      "SdkAnalysisLevel": "9.0.100"
    },
    "frameworks": {
      "net8.0": {
        "targetAlias": "net8.0",
        "dependencies": {
          "AutoMapper": {
            "target": "Package",
            "version": "[13.0.1, )"
          },
          "MediatR": {
            "target": "Package",
            "version": "[12.2.0, )"
          },
          "Microsoft.AspNetCore.OpenApi": {
            "target": "Package",
            "version": "[8.0.0, )"
          },
          "Microsoft.Extensions.DependencyInjection": {
            "target": "Package",
            "version": "[8.0.0, )"
          },
          "Swashbuckle.AspNetCore": {
            "target": "Package",
            "version": "[6.5.0, )"
          }
        },
        "imports": [
          "net461",
          "net462",
          "net47",
          "net471",
          "net472",
          "net48",
          "net481"
        ],
        "assetTargetFallback": true,
        "warn": true,
        "frameworkReferences": {
          "Microsoft.AspNetCore.App": {
            "privateAssets": "none"
          },
          "Microsoft.NETCore.App": {
            "privateAssets": "all"
          }
        },
        "runtimeIdentifierGraphPath": "C:\\Program Files\\dotnet\\sdk\\9.0.102/PortableRuntimeIdentifierGraph.json"
      }
    }
  }
}

================
File: src/Portfolio.WebApi/obj/project.nuget.cache
================
{
  "version": 2,
  "dgSpecHash": "njqKPjUJSfs=",
  "success": true,
  "projectFilePath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.WebApi\\Portfolio.WebApi.csproj",
  "expectedPackageFiles": [
    "C:\\Users\\miche\\.nuget\\packages\\automapper\\13.0.1\\automapper.13.0.1.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\fluentvalidation\\11.9.0\\fluentvalidation.11.9.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\fluentvalidation.dependencyinjectionextensions\\11.9.0\\fluentvalidation.dependencyinjectionextensions.11.9.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\mediatr\\12.2.0\\mediatr.12.2.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\mediatr.contracts\\2.0.1\\mediatr.contracts.2.0.1.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.aspnetcore.openapi\\8.0.0\\microsoft.aspnetcore.openapi.8.0.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.entityframeworkcore\\8.0.2\\microsoft.entityframeworkcore.8.0.2.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.entityframeworkcore.abstractions\\8.0.2\\microsoft.entityframeworkcore.abstractions.8.0.2.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.entityframeworkcore.analyzers\\8.0.2\\microsoft.entityframeworkcore.analyzers.8.0.2.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.entityframeworkcore.relational\\8.0.2\\microsoft.entityframeworkcore.relational.8.0.2.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.extensions.apidescription.server\\6.0.5\\microsoft.extensions.apidescription.server.6.0.5.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.extensions.caching.abstractions\\8.0.0\\microsoft.extensions.caching.abstractions.8.0.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.extensions.caching.memory\\8.0.0\\microsoft.extensions.caching.memory.8.0.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.extensions.configuration.abstractions\\8.0.0\\microsoft.extensions.configuration.abstractions.8.0.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.extensions.dependencyinjection\\8.0.0\\microsoft.extensions.dependencyinjection.8.0.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.extensions.dependencyinjection.abstractions\\8.0.0\\microsoft.extensions.dependencyinjection.abstractions.8.0.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.extensions.logging\\8.0.0\\microsoft.extensions.logging.8.0.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.extensions.logging.abstractions\\8.0.0\\microsoft.extensions.logging.abstractions.8.0.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.extensions.options\\8.0.0\\microsoft.extensions.options.8.0.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.extensions.primitives\\8.0.0\\microsoft.extensions.primitives.8.0.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.openapi\\1.4.3\\microsoft.openapi.1.4.3.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\npgsql\\8.0.2\\npgsql.8.0.2.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\npgsql.entityframeworkcore.postgresql\\8.0.2\\npgsql.entityframeworkcore.postgresql.8.0.2.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\swashbuckle.aspnetcore\\6.5.0\\swashbuckle.aspnetcore.6.5.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\swashbuckle.aspnetcore.swagger\\6.5.0\\swashbuckle.aspnetcore.swagger.6.5.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\swashbuckle.aspnetcore.swaggergen\\6.5.0\\swashbuckle.aspnetcore.swaggergen.6.5.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\swashbuckle.aspnetcore.swaggerui\\6.5.0\\swashbuckle.aspnetcore.swaggerui.6.5.0.nupkg.sha512"
  ],
  "logs": []
}

================
File: src/Portfolio.WebApi/Portfolio.WebApi.csproj
================
<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <InvariantGlobalization>true</InvariantGlobalization>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="AutoMapper" Version="13.0.1" />
    <PackageReference Include="MediatR" Version="12.2.0" />
    <PackageReference Include="Microsoft.AspNetCore.OpenApi" Version="8.0.0" />
    <PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="8.0.0" />
    <PackageReference Include="Swashbuckle.AspNetCore" Version="6.5.0" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\Portfolio.Infrastructure\Portfolio.Infrastructure.csproj" />
  </ItemGroup>

</Project>

================
File: src/Portfolio.WebApi/Portfolio.WebApi.csproj.user
================
<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="Current" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ActiveDebugProfile>https</ActiveDebugProfile>
  </PropertyGroup>
</Project>

================
File: src/Portfolio.WebApi/Portfolio.WebApi.http
================
@Portfolio.WebApi_HostAddress = http://localhost:5171

GET {{Portfolio.WebApi_HostAddress}}/weatherforecast/
Accept: application/json

###

================
File: src/Portfolio.WebApi/Program.cs
================
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Portfolio.Application;
using Portfolio.Infrastructure;
using Portfolio.WebApi.Extensions;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container following Clean Architecture layers
builder.Services
    .AddApplication()           // Application layer services (MediatR, AutoMapper, Validation)
    .AddInfrastructureServices(builder.Configuration) // Infrastructure layer services (EF Core, PostgreSQL)
    .AddWebApiServices();        // API layer services (Controllers, Swagger)

builder.Services.AddAuthorization();
var app = builder.Build();

// Configure the HTTP request pipeline
app.UseCustomExceptionHandler();
app.UseHttpsRedirection();
app.UseAuthorization();

app.UseSwaggerWithUI();

// Configure endpoints using our fluent API
app.MapEndpoints();

app.Run();

================
File: src/Portfolio.WebApi/Properties/launchSettings.json
================
{
  "$schema": "https://json.schemastore.org/launchsettings.json",
  "profiles": {
    "http": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": false,
      "applicationUrl": "http://localhost:5171",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "https": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": false,
      "applicationUrl": "https://localhost:7078;http://localhost:5171",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    }
  }
}

================
File: tests/Portfolio.UnitTests/bin/Debug/net8.0/Portfolio.UnitTests.deps.json
================
{
  "runtimeTarget": {
    "name": ".NETCoreApp,Version=v8.0",
    "signature": ""
  },
  "compilationOptions": {},
  "targets": {
    ".NETCoreApp,Version=v8.0": {
      "Portfolio.UnitTests/1.0.0": {
        "dependencies": {
          "FluentAssertions": "6.12.0",
          "Microsoft.EntityFrameworkCore.InMemory": "8.0.2",
          "Microsoft.NET.Test.Sdk": "17.9.0",
          "Moq": "4.20.70",
          "Portfolio.Application": "1.0.0",
          "Portfolio.Domain": "1.0.0",
          "Portfolio.Infrastructure": "1.0.0",
          "coverlet.collector": "6.0.0",
          "xunit": "2.7.0",
          "xunit.runner.visualstudio": "2.5.7"
        },
        "runtime": {
          "Portfolio.UnitTests.dll": {}
        }
      },
      "AutoMapper/13.0.1": {
        "dependencies": {
          "Microsoft.Extensions.Options": "8.0.0"
        },
        "runtime": {
          "lib/net6.0/AutoMapper.dll": {
            "assemblyVersion": "13.0.0.0",
            "fileVersion": "13.0.1.0"
          }
        }
      },
      "Castle.Core/5.1.1": {
        "dependencies": {
          "System.Diagnostics.EventLog": "6.0.0"
        },
        "runtime": {
          "lib/net6.0/Castle.Core.dll": {
            "assemblyVersion": "5.0.0.0",
            "fileVersion": "5.1.1.0"
          }
        }
      },
      "coverlet.collector/6.0.0": {},
      "FluentAssertions/6.12.0": {
        "dependencies": {
          "System.Configuration.ConfigurationManager": "4.4.0"
        },
        "runtime": {
          "lib/net6.0/FluentAssertions.dll": {
            "assemblyVersion": "6.12.0.0",
            "fileVersion": "6.12.0.0"
          }
        }
      },
      "FluentValidation/11.9.0": {
        "runtime": {
          "lib/net8.0/FluentValidation.dll": {
            "assemblyVersion": "11.0.0.0",
            "fileVersion": "11.9.0.0"
          }
        }
      },
      "FluentValidation.DependencyInjectionExtensions/11.9.0": {
        "dependencies": {
          "FluentValidation": "11.9.0",
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0"
        },
        "runtime": {
          "lib/netstandard2.1/FluentValidation.DependencyInjectionExtensions.dll": {
            "assemblyVersion": "11.0.0.0",
            "fileVersion": "11.9.0.0"
          }
        }
      },
      "MediatR/12.2.0": {
        "dependencies": {
          "MediatR.Contracts": "2.0.1",
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0"
        },
        "runtime": {
          "lib/net6.0/MediatR.dll": {
            "assemblyVersion": "12.0.0.0",
            "fileVersion": "12.2.0.0"
          }
        }
      },
      "MediatR.Contracts/2.0.1": {
        "runtime": {
          "lib/netstandard2.0/MediatR.Contracts.dll": {
            "assemblyVersion": "2.0.1.0",
            "fileVersion": "2.0.1.0"
          }
        }
      },
      "Microsoft.CodeCoverage/17.9.0": {
        "runtime": {
          "lib/netcoreapp3.1/Microsoft.VisualStudio.CodeCoverage.Shim.dll": {
            "assemblyVersion": "15.0.0.0",
            "fileVersion": "17.900.724.7204"
          }
        }
      },
      "Microsoft.EntityFrameworkCore/8.0.2": {
        "dependencies": {
          "Microsoft.EntityFrameworkCore.Abstractions": "8.0.2",
          "Microsoft.EntityFrameworkCore.Analyzers": "8.0.2",
          "Microsoft.Extensions.Caching.Memory": "8.0.0",
          "Microsoft.Extensions.Logging": "8.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.dll": {
            "assemblyVersion": "8.0.2.0",
            "fileVersion": "8.0.224.6803"
          }
        }
      },
      "Microsoft.EntityFrameworkCore.Abstractions/8.0.2": {
        "runtime": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.Abstractions.dll": {
            "assemblyVersion": "8.0.2.0",
            "fileVersion": "8.0.224.6803"
          }
        }
      },
      "Microsoft.EntityFrameworkCore.Analyzers/8.0.2": {},
      "Microsoft.EntityFrameworkCore.InMemory/8.0.2": {
        "dependencies": {
          "Microsoft.EntityFrameworkCore": "8.0.2"
        },
        "runtime": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.InMemory.dll": {
            "assemblyVersion": "8.0.2.0",
            "fileVersion": "8.0.224.6803"
          }
        }
      },
      "Microsoft.EntityFrameworkCore.Relational/8.0.2": {
        "dependencies": {
          "Microsoft.EntityFrameworkCore": "8.0.2",
          "Microsoft.Extensions.Configuration.Abstractions": "8.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.Relational.dll": {
            "assemblyVersion": "8.0.2.0",
            "fileVersion": "8.0.224.6803"
          }
        }
      },
      "Microsoft.Extensions.Caching.Abstractions/8.0.0": {
        "dependencies": {
          "Microsoft.Extensions.Primitives": "8.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Caching.Abstractions.dll": {
            "assemblyVersion": "8.0.0.0",
            "fileVersion": "8.0.23.53103"
          }
        }
      },
      "Microsoft.Extensions.Caching.Memory/8.0.0": {
        "dependencies": {
          "Microsoft.Extensions.Caching.Abstractions": "8.0.0",
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0",
          "Microsoft.Extensions.Logging.Abstractions": "8.0.0",
          "Microsoft.Extensions.Options": "8.0.0",
          "Microsoft.Extensions.Primitives": "8.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Caching.Memory.dll": {
            "assemblyVersion": "8.0.0.0",
            "fileVersion": "8.0.23.53103"
          }
        }
      },
      "Microsoft.Extensions.Configuration.Abstractions/8.0.0": {
        "dependencies": {
          "Microsoft.Extensions.Primitives": "8.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Configuration.Abstractions.dll": {
            "assemblyVersion": "8.0.0.0",
            "fileVersion": "8.0.23.53103"
          }
        }
      },
      "Microsoft.Extensions.DependencyInjection/8.0.0": {
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.DependencyInjection.dll": {
            "assemblyVersion": "8.0.0.0",
            "fileVersion": "8.0.23.53103"
          }
        }
      },
      "Microsoft.Extensions.DependencyInjection.Abstractions/8.0.0": {
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.DependencyInjection.Abstractions.dll": {
            "assemblyVersion": "8.0.0.0",
            "fileVersion": "8.0.23.53103"
          }
        }
      },
      "Microsoft.Extensions.Logging/8.0.0": {
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection": "8.0.0",
          "Microsoft.Extensions.Logging.Abstractions": "8.0.0",
          "Microsoft.Extensions.Options": "8.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Logging.dll": {
            "assemblyVersion": "8.0.0.0",
            "fileVersion": "8.0.23.53103"
          }
        }
      },
      "Microsoft.Extensions.Logging.Abstractions/8.0.0": {
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Logging.Abstractions.dll": {
            "assemblyVersion": "8.0.0.0",
            "fileVersion": "8.0.23.53103"
          }
        }
      },
      "Microsoft.Extensions.Options/8.0.0": {
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0",
          "Microsoft.Extensions.Primitives": "8.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Options.dll": {
            "assemblyVersion": "8.0.0.0",
            "fileVersion": "8.0.23.53103"
          }
        }
      },
      "Microsoft.Extensions.Primitives/8.0.0": {
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Primitives.dll": {
            "assemblyVersion": "8.0.0.0",
            "fileVersion": "8.0.23.53103"
          }
        }
      },
      "Microsoft.NET.Test.Sdk/17.9.0": {
        "dependencies": {
          "Microsoft.CodeCoverage": "17.9.0",
          "Microsoft.TestPlatform.TestHost": "17.9.0"
        }
      },
      "Microsoft.TestPlatform.ObjectModel/17.9.0": {
        "dependencies": {
          "System.Reflection.Metadata": "1.6.0"
        },
        "runtime": {
          "lib/netcoreapp3.1/Microsoft.TestPlatform.CoreUtilities.dll": {
            "assemblyVersion": "15.0.0.0",
            "fileVersion": "17.900.24.10602"
          },
          "lib/netcoreapp3.1/Microsoft.TestPlatform.PlatformAbstractions.dll": {
            "assemblyVersion": "15.0.0.0",
            "fileVersion": "17.900.24.10602"
          },
          "lib/netcoreapp3.1/Microsoft.VisualStudio.TestPlatform.ObjectModel.dll": {
            "assemblyVersion": "15.0.0.0",
            "fileVersion": "17.900.24.10602"
          }
        },
        "resources": {
          "lib/netcoreapp3.1/cs/Microsoft.TestPlatform.CoreUtilities.resources.dll": {
            "locale": "cs"
          },
          "lib/netcoreapp3.1/cs/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll": {
            "locale": "cs"
          },
          "lib/netcoreapp3.1/de/Microsoft.TestPlatform.CoreUtilities.resources.dll": {
            "locale": "de"
          },
          "lib/netcoreapp3.1/de/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll": {
            "locale": "de"
          },
          "lib/netcoreapp3.1/es/Microsoft.TestPlatform.CoreUtilities.resources.dll": {
            "locale": "es"
          },
          "lib/netcoreapp3.1/es/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll": {
            "locale": "es"
          },
          "lib/netcoreapp3.1/fr/Microsoft.TestPlatform.CoreUtilities.resources.dll": {
            "locale": "fr"
          },
          "lib/netcoreapp3.1/fr/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll": {
            "locale": "fr"
          },
          "lib/netcoreapp3.1/it/Microsoft.TestPlatform.CoreUtilities.resources.dll": {
            "locale": "it"
          },
          "lib/netcoreapp3.1/it/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll": {
            "locale": "it"
          },
          "lib/netcoreapp3.1/ja/Microsoft.TestPlatform.CoreUtilities.resources.dll": {
            "locale": "ja"
          },
          "lib/netcoreapp3.1/ja/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll": {
            "locale": "ja"
          },
          "lib/netcoreapp3.1/ko/Microsoft.TestPlatform.CoreUtilities.resources.dll": {
            "locale": "ko"
          },
          "lib/netcoreapp3.1/ko/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll": {
            "locale": "ko"
          },
          "lib/netcoreapp3.1/pl/Microsoft.TestPlatform.CoreUtilities.resources.dll": {
            "locale": "pl"
          },
          "lib/netcoreapp3.1/pl/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll": {
            "locale": "pl"
          },
          "lib/netcoreapp3.1/pt-BR/Microsoft.TestPlatform.CoreUtilities.resources.dll": {
            "locale": "pt-BR"
          },
          "lib/netcoreapp3.1/pt-BR/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll": {
            "locale": "pt-BR"
          },
          "lib/netcoreapp3.1/ru/Microsoft.TestPlatform.CoreUtilities.resources.dll": {
            "locale": "ru"
          },
          "lib/netcoreapp3.1/ru/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll": {
            "locale": "ru"
          },
          "lib/netcoreapp3.1/tr/Microsoft.TestPlatform.CoreUtilities.resources.dll": {
            "locale": "tr"
          },
          "lib/netcoreapp3.1/tr/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll": {
            "locale": "tr"
          },
          "lib/netcoreapp3.1/zh-Hans/Microsoft.TestPlatform.CoreUtilities.resources.dll": {
            "locale": "zh-Hans"
          },
          "lib/netcoreapp3.1/zh-Hans/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll": {
            "locale": "zh-Hans"
          },
          "lib/netcoreapp3.1/zh-Hant/Microsoft.TestPlatform.CoreUtilities.resources.dll": {
            "locale": "zh-Hant"
          },
          "lib/netcoreapp3.1/zh-Hant/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll": {
            "locale": "zh-Hant"
          }
        }
      },
      "Microsoft.TestPlatform.TestHost/17.9.0": {
        "dependencies": {
          "Microsoft.TestPlatform.ObjectModel": "17.9.0",
          "Newtonsoft.Json": "13.0.1"
        },
        "runtime": {
          "lib/netcoreapp3.1/Microsoft.TestPlatform.CommunicationUtilities.dll": {
            "assemblyVersion": "15.0.0.0",
            "fileVersion": "17.900.24.10602"
          },
          "lib/netcoreapp3.1/Microsoft.TestPlatform.CrossPlatEngine.dll": {
            "assemblyVersion": "15.0.0.0",
            "fileVersion": "17.900.24.10602"
          },
          "lib/netcoreapp3.1/Microsoft.TestPlatform.Utilities.dll": {
            "assemblyVersion": "15.0.0.0",
            "fileVersion": "17.900.24.10602"
          },
          "lib/netcoreapp3.1/Microsoft.VisualStudio.TestPlatform.Common.dll": {
            "assemblyVersion": "15.0.0.0",
            "fileVersion": "17.900.24.10602"
          },
          "lib/netcoreapp3.1/testhost.dll": {
            "assemblyVersion": "15.0.0.0",
            "fileVersion": "17.900.24.10602"
          }
        },
        "resources": {
          "lib/netcoreapp3.1/cs/Microsoft.TestPlatform.CommunicationUtilities.resources.dll": {
            "locale": "cs"
          },
          "lib/netcoreapp3.1/cs/Microsoft.TestPlatform.CrossPlatEngine.resources.dll": {
            "locale": "cs"
          },
          "lib/netcoreapp3.1/cs/Microsoft.VisualStudio.TestPlatform.Common.resources.dll": {
            "locale": "cs"
          },
          "lib/netcoreapp3.1/de/Microsoft.TestPlatform.CommunicationUtilities.resources.dll": {
            "locale": "de"
          },
          "lib/netcoreapp3.1/de/Microsoft.TestPlatform.CrossPlatEngine.resources.dll": {
            "locale": "de"
          },
          "lib/netcoreapp3.1/de/Microsoft.VisualStudio.TestPlatform.Common.resources.dll": {
            "locale": "de"
          },
          "lib/netcoreapp3.1/es/Microsoft.TestPlatform.CommunicationUtilities.resources.dll": {
            "locale": "es"
          },
          "lib/netcoreapp3.1/es/Microsoft.TestPlatform.CrossPlatEngine.resources.dll": {
            "locale": "es"
          },
          "lib/netcoreapp3.1/es/Microsoft.VisualStudio.TestPlatform.Common.resources.dll": {
            "locale": "es"
          },
          "lib/netcoreapp3.1/fr/Microsoft.TestPlatform.CommunicationUtilities.resources.dll": {
            "locale": "fr"
          },
          "lib/netcoreapp3.1/fr/Microsoft.TestPlatform.CrossPlatEngine.resources.dll": {
            "locale": "fr"
          },
          "lib/netcoreapp3.1/fr/Microsoft.VisualStudio.TestPlatform.Common.resources.dll": {
            "locale": "fr"
          },
          "lib/netcoreapp3.1/it/Microsoft.TestPlatform.CommunicationUtilities.resources.dll": {
            "locale": "it"
          },
          "lib/netcoreapp3.1/it/Microsoft.TestPlatform.CrossPlatEngine.resources.dll": {
            "locale": "it"
          },
          "lib/netcoreapp3.1/it/Microsoft.VisualStudio.TestPlatform.Common.resources.dll": {
            "locale": "it"
          },
          "lib/netcoreapp3.1/ja/Microsoft.TestPlatform.CommunicationUtilities.resources.dll": {
            "locale": "ja"
          },
          "lib/netcoreapp3.1/ja/Microsoft.TestPlatform.CrossPlatEngine.resources.dll": {
            "locale": "ja"
          },
          "lib/netcoreapp3.1/ja/Microsoft.VisualStudio.TestPlatform.Common.resources.dll": {
            "locale": "ja"
          },
          "lib/netcoreapp3.1/ko/Microsoft.TestPlatform.CommunicationUtilities.resources.dll": {
            "locale": "ko"
          },
          "lib/netcoreapp3.1/ko/Microsoft.TestPlatform.CrossPlatEngine.resources.dll": {
            "locale": "ko"
          },
          "lib/netcoreapp3.1/ko/Microsoft.VisualStudio.TestPlatform.Common.resources.dll": {
            "locale": "ko"
          },
          "lib/netcoreapp3.1/pl/Microsoft.TestPlatform.CommunicationUtilities.resources.dll": {
            "locale": "pl"
          },
          "lib/netcoreapp3.1/pl/Microsoft.TestPlatform.CrossPlatEngine.resources.dll": {
            "locale": "pl"
          },
          "lib/netcoreapp3.1/pl/Microsoft.VisualStudio.TestPlatform.Common.resources.dll": {
            "locale": "pl"
          },
          "lib/netcoreapp3.1/pt-BR/Microsoft.TestPlatform.CommunicationUtilities.resources.dll": {
            "locale": "pt-BR"
          },
          "lib/netcoreapp3.1/pt-BR/Microsoft.TestPlatform.CrossPlatEngine.resources.dll": {
            "locale": "pt-BR"
          },
          "lib/netcoreapp3.1/pt-BR/Microsoft.VisualStudio.TestPlatform.Common.resources.dll": {
            "locale": "pt-BR"
          },
          "lib/netcoreapp3.1/ru/Microsoft.TestPlatform.CommunicationUtilities.resources.dll": {
            "locale": "ru"
          },
          "lib/netcoreapp3.1/ru/Microsoft.TestPlatform.CrossPlatEngine.resources.dll": {
            "locale": "ru"
          },
          "lib/netcoreapp3.1/ru/Microsoft.VisualStudio.TestPlatform.Common.resources.dll": {
            "locale": "ru"
          },
          "lib/netcoreapp3.1/tr/Microsoft.TestPlatform.CommunicationUtilities.resources.dll": {
            "locale": "tr"
          },
          "lib/netcoreapp3.1/tr/Microsoft.TestPlatform.CrossPlatEngine.resources.dll": {
            "locale": "tr"
          },
          "lib/netcoreapp3.1/tr/Microsoft.VisualStudio.TestPlatform.Common.resources.dll": {
            "locale": "tr"
          },
          "lib/netcoreapp3.1/zh-Hans/Microsoft.TestPlatform.CommunicationUtilities.resources.dll": {
            "locale": "zh-Hans"
          },
          "lib/netcoreapp3.1/zh-Hans/Microsoft.TestPlatform.CrossPlatEngine.resources.dll": {
            "locale": "zh-Hans"
          },
          "lib/netcoreapp3.1/zh-Hans/Microsoft.VisualStudio.TestPlatform.Common.resources.dll": {
            "locale": "zh-Hans"
          },
          "lib/netcoreapp3.1/zh-Hant/Microsoft.TestPlatform.CommunicationUtilities.resources.dll": {
            "locale": "zh-Hant"
          },
          "lib/netcoreapp3.1/zh-Hant/Microsoft.TestPlatform.CrossPlatEngine.resources.dll": {
            "locale": "zh-Hant"
          },
          "lib/netcoreapp3.1/zh-Hant/Microsoft.VisualStudio.TestPlatform.Common.resources.dll": {
            "locale": "zh-Hant"
          }
        }
      },
      "Moq/4.20.70": {
        "dependencies": {
          "Castle.Core": "5.1.1"
        },
        "runtime": {
          "lib/net6.0/Moq.dll": {
            "assemblyVersion": "4.20.70.0",
            "fileVersion": "4.20.70.0"
          }
        }
      },
      "Newtonsoft.Json/13.0.1": {
        "runtime": {
          "lib/netstandard2.0/Newtonsoft.Json.dll": {
            "assemblyVersion": "13.0.0.0",
            "fileVersion": "13.0.1.25517"
          }
        }
      },
      "Npgsql/8.0.2": {
        "dependencies": {
          "Microsoft.Extensions.Logging.Abstractions": "8.0.0"
        },
        "runtime": {
          "lib/net8.0/Npgsql.dll": {
            "assemblyVersion": "8.0.2.0",
            "fileVersion": "8.0.2.0"
          }
        }
      },
      "Npgsql.EntityFrameworkCore.PostgreSQL/8.0.2": {
        "dependencies": {
          "Microsoft.EntityFrameworkCore": "8.0.2",
          "Microsoft.EntityFrameworkCore.Abstractions": "8.0.2",
          "Microsoft.EntityFrameworkCore.Relational": "8.0.2",
          "Npgsql": "8.0.2"
        },
        "runtime": {
          "lib/net8.0/Npgsql.EntityFrameworkCore.PostgreSQL.dll": {
            "assemblyVersion": "8.0.2.0",
            "fileVersion": "8.0.2.0"
          }
        }
      },
      "System.Configuration.ConfigurationManager/4.4.0": {
        "dependencies": {
          "System.Security.Cryptography.ProtectedData": "4.4.0"
        },
        "runtime": {
          "lib/netstandard2.0/System.Configuration.ConfigurationManager.dll": {
            "assemblyVersion": "4.0.0.0",
            "fileVersion": "4.6.25519.3"
          }
        }
      },
      "System.Diagnostics.EventLog/6.0.0": {
        "runtime": {
          "lib/net6.0/System.Diagnostics.EventLog.dll": {
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        },
        "runtimeTargets": {
          "runtimes/win/lib/net6.0/System.Diagnostics.EventLog.Messages.dll": {
            "rid": "win",
            "assetType": "runtime",
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "0.0.0.0"
          },
          "runtimes/win/lib/net6.0/System.Diagnostics.EventLog.dll": {
            "rid": "win",
            "assetType": "runtime",
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        }
      },
      "System.Reflection.Metadata/1.6.0": {},
      "System.Security.Cryptography.ProtectedData/4.4.0": {
        "runtime": {
          "lib/netstandard2.0/System.Security.Cryptography.ProtectedData.dll": {
            "assemblyVersion": "4.0.2.0",
            "fileVersion": "4.6.25519.3"
          }
        },
        "runtimeTargets": {
          "runtimes/win/lib/netstandard2.0/System.Security.Cryptography.ProtectedData.dll": {
            "rid": "win",
            "assetType": "runtime",
            "assemblyVersion": "4.0.2.0",
            "fileVersion": "4.6.25519.3"
          }
        }
      },
      "xunit/2.7.0": {
        "dependencies": {
          "xunit.analyzers": "1.11.0",
          "xunit.assert": "2.7.0",
          "xunit.core": "2.7.0"
        }
      },
      "xunit.abstractions/2.0.3": {
        "runtime": {
          "lib/netstandard2.0/xunit.abstractions.dll": {
            "assemblyVersion": "2.0.0.0",
            "fileVersion": "2.0.0.0"
          }
        }
      },
      "xunit.analyzers/1.11.0": {},
      "xunit.assert/2.7.0": {
        "runtime": {
          "lib/net6.0/xunit.assert.dll": {
            "assemblyVersion": "2.7.0.0",
            "fileVersion": "2.7.0.0"
          }
        }
      },
      "xunit.core/2.7.0": {
        "dependencies": {
          "xunit.extensibility.core": "2.7.0",
          "xunit.extensibility.execution": "2.7.0"
        }
      },
      "xunit.extensibility.core/2.7.0": {
        "dependencies": {
          "xunit.abstractions": "2.0.3"
        },
        "runtime": {
          "lib/netstandard1.1/xunit.core.dll": {
            "assemblyVersion": "2.7.0.0",
            "fileVersion": "2.7.0.0"
          }
        }
      },
      "xunit.extensibility.execution/2.7.0": {
        "dependencies": {
          "xunit.extensibility.core": "2.7.0"
        },
        "runtime": {
          "lib/netstandard1.1/xunit.execution.dotnet.dll": {
            "assemblyVersion": "2.7.0.0",
            "fileVersion": "2.7.0.0"
          }
        }
      },
      "xunit.runner.visualstudio/2.5.7": {},
      "Portfolio.Application/1.0.0": {
        "dependencies": {
          "AutoMapper": "13.0.1",
          "FluentValidation": "11.9.0",
          "FluentValidation.DependencyInjectionExtensions": "11.9.0",
          "MediatR": "12.2.0",
          "Microsoft.Extensions.Logging.Abstractions": "8.0.0",
          "Portfolio.Domain": "1.0.0"
        },
        "runtime": {
          "Portfolio.Application.dll": {
            "assemblyVersion": "1.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      },
      "Portfolio.Domain/1.0.0": {
        "runtime": {
          "Portfolio.Domain.dll": {
            "assemblyVersion": "1.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      },
      "Portfolio.Infrastructure/1.0.0": {
        "dependencies": {
          "AutoMapper": "13.0.1",
          "MediatR": "12.2.0",
          "Microsoft.EntityFrameworkCore": "8.0.2",
          "Microsoft.Extensions.Configuration.Abstractions": "8.0.0",
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0",
          "Npgsql.EntityFrameworkCore.PostgreSQL": "8.0.2",
          "Portfolio.Application": "1.0.0"
        },
        "runtime": {
          "Portfolio.Infrastructure.dll": {
            "assemblyVersion": "1.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      }
    }
  },
  "libraries": {
    "Portfolio.UnitTests/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "AutoMapper/13.0.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-/Fx1SbJ16qS7dU4i604Sle+U9VLX+WSNVJggk6MupKVkYvvBm4XqYaeFuf67diHefHKHs50uQIS2YEDFhPCakQ==",
      "path": "automapper/13.0.1",
      "hashPath": "automapper.13.0.1.nupkg.sha512"
    },
    "Castle.Core/5.1.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-rpYtIczkzGpf+EkZgDr9CClTdemhsrwA/W5hMoPjLkRFnXzH44zDLoovXeKtmxb1ykXK9aJVODSpiJml8CTw2g==",
      "path": "castle.core/5.1.1",
      "hashPath": "castle.core.5.1.1.nupkg.sha512"
    },
    "coverlet.collector/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-tW3lsNS+dAEII6YGUX/VMoJjBS1QvsxqJeqLaJXub08y1FSjasFPtQ4UBUsudE9PNrzLjooClMsPtY2cZLdXpQ==",
      "path": "coverlet.collector/6.0.0",
      "hashPath": "coverlet.collector.6.0.0.nupkg.sha512"
    },
    "FluentAssertions/6.12.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-ZXhHT2YwP9lajrwSKbLlFqsmCCvFJMoRSK9t7sImfnCyd0OB3MhgxdoMcVqxbq1iyxD6mD2fiackWmBb7ayiXQ==",
      "path": "fluentassertions/6.12.0",
      "hashPath": "fluentassertions.6.12.0.nupkg.sha512"
    },
    "FluentValidation/11.9.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-VneVlTvwYDkfHV5av3QrQ0amALgrLX6LV94wlYyEsh0B/klJBW7C8y2eAtj5tOZ3jH6CAVpr4s1ZGgew/QWyig==",
      "path": "fluentvalidation/11.9.0",
      "hashPath": "fluentvalidation.11.9.0.nupkg.sha512"
    },
    "FluentValidation.DependencyInjectionExtensions/11.9.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-Ko++xvN7HUf4WlHJL6bhsybUj/uho8ApOYIdxGjpF8Ot7Fukz6LRfRJ06H0KXhWqmMHWEbu89hJbjKJHtg7b9g==",
      "path": "fluentvalidation.dependencyinjectionextensions/11.9.0",
      "hashPath": "fluentvalidation.dependencyinjectionextensions.11.9.0.nupkg.sha512"
    },
    "MediatR/12.2.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-8TUFrHapKi6D74PhnSNEguRsH91HNGyP3R4ZQdgDorJgl9Wac5Prh0vA33QfrniAaS6L2xNNhc6vxzg+5AIbwA==",
      "path": "mediatr/12.2.0",
      "hashPath": "mediatr.12.2.0.nupkg.sha512"
    },
    "MediatR.Contracts/2.0.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-FYv95bNT4UwcNA+G/J1oX5OpRiSUxteXaUt2BJbRSdRNiIUNbggJF69wy6mnk2wYToaanpdXZdCwVylt96MpwQ==",
      "path": "mediatr.contracts/2.0.1",
      "hashPath": "mediatr.contracts.2.0.1.nupkg.sha512"
    },
    "Microsoft.CodeCoverage/17.9.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-RGD37ZSrratfScYXm7M0HjvxMxZyWZL4jm+XgMZbkIY1UPgjUpbNA/t+WTGj/rC/0Hm9A3IrH3ywbKZkOCnoZA==",
      "path": "microsoft.codecoverage/17.9.0",
      "hashPath": "microsoft.codecoverage.17.9.0.nupkg.sha512"
    },
    "Microsoft.EntityFrameworkCore/8.0.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-6QlvBx4rdawW3AkkCsGVV+8qRLk34aknV5JD40s1hbVR18vKmT2KDl2DW83nHcPX7f4oebQ3BD1UMNCI/gkE0g==",
      "path": "microsoft.entityframeworkcore/8.0.2",
      "hashPath": "microsoft.entityframeworkcore.8.0.2.nupkg.sha512"
    },
    "Microsoft.EntityFrameworkCore.Abstractions/8.0.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-DjDKp++BTKFZmX+xLTow7grQTY+pImKfhGW68Zf8myiL3zyJ3b8RZbnLsWGNCqKQIF6hJIz/zA/zmERobFwV0A==",
      "path": "microsoft.entityframeworkcore.abstractions/8.0.2",
      "hashPath": "microsoft.entityframeworkcore.abstractions.8.0.2.nupkg.sha512"
    },
    "Microsoft.EntityFrameworkCore.Analyzers/8.0.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-LI7awhc0fiAKvcUemsqxXUWqzAH9ywTSyM1rpC1un4p5SE1bhr5nRLvyRVbKRzKakmnNNY3to8NPDnoySEkxVw==",
      "path": "microsoft.entityframeworkcore.analyzers/8.0.2",
      "hashPath": "microsoft.entityframeworkcore.analyzers.8.0.2.nupkg.sha512"
    },
    "Microsoft.EntityFrameworkCore.InMemory/8.0.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-vPpioRk+6BwQf/apqBQQ2gLL/6FMOj25L6d2lli08FmRh2W9QrnShyKhzsDAydWcH6Po69gQXgHbBQFAafmo3A==",
      "path": "microsoft.entityframeworkcore.inmemory/8.0.2",
      "hashPath": "microsoft.entityframeworkcore.inmemory.8.0.2.nupkg.sha512"
    },
    "Microsoft.EntityFrameworkCore.Relational/8.0.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-NoGfcq2OPw0z8XAPf74YFwGlTKjedWdsIEJqq4SvKcPjcu+B+/XDDNrDRxTvILfz4Ug8POSF49s1jz1JvUqTAg==",
      "path": "microsoft.entityframeworkcore.relational/8.0.2",
      "hashPath": "microsoft.entityframeworkcore.relational.8.0.2.nupkg.sha512"
    },
    "Microsoft.Extensions.Caching.Abstractions/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-3KuSxeHoNYdxVYfg2IRZCThcrlJ1XJqIXkAWikCsbm5C/bCjv7G0WoKDyuR98Q+T607QT2Zl5GsbGRkENcV2yQ==",
      "path": "microsoft.extensions.caching.abstractions/8.0.0",
      "hashPath": "microsoft.extensions.caching.abstractions.8.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Caching.Memory/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-7pqivmrZDzo1ADPkRwjy+8jtRKWRCPag9qPI+p7sgu7Q4QreWhcvbiWXsbhP+yY8XSiDvZpu2/LWdBv7PnmOpQ==",
      "path": "microsoft.extensions.caching.memory/8.0.0",
      "hashPath": "microsoft.extensions.caching.memory.8.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Configuration.Abstractions/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-3lE/iLSutpgX1CC0NOW70FJoGARRHbyKmG7dc0klnUZ9Dd9hS6N/POPWhKhMLCEuNN5nXEY5agmlFtH562vqhQ==",
      "path": "microsoft.extensions.configuration.abstractions/8.0.0",
      "hashPath": "microsoft.extensions.configuration.abstractions.8.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.DependencyInjection/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-V8S3bsm50ig6JSyrbcJJ8bW2b9QLGouz+G1miK3UTaOWmMtFwNNNzUf4AleyDWUmTrWMLNnFSLEQtxmxgNQnNQ==",
      "path": "microsoft.extensions.dependencyinjection/8.0.0",
      "hashPath": "microsoft.extensions.dependencyinjection.8.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.DependencyInjection.Abstractions/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-cjWrLkJXK0rs4zofsK4bSdg+jhDLTaxrkXu4gS6Y7MAlCvRyNNgwY/lJi5RDlQOnSZweHqoyvgvbdvQsRIW+hg==",
      "path": "microsoft.extensions.dependencyinjection.abstractions/8.0.0",
      "hashPath": "microsoft.extensions.dependencyinjection.abstractions.8.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Logging/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-tvRkov9tAJ3xP51LCv3FJ2zINmv1P8Hi8lhhtcKGqM+ImiTCC84uOPEI4z8Cdq2C3o9e+Aa0Gw0rmrsJD77W+w==",
      "path": "microsoft.extensions.logging/8.0.0",
      "hashPath": "microsoft.extensions.logging.8.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Logging.Abstractions/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-arDBqTgFCyS0EvRV7O3MZturChstm50OJ0y9bDJvAcmEPJm0FFpFyjU/JLYyStNGGey081DvnQYlncNX5SJJGA==",
      "path": "microsoft.extensions.logging.abstractions/8.0.0",
      "hashPath": "microsoft.extensions.logging.abstractions.8.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Options/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-JOVOfqpnqlVLUzINQ2fox8evY2SKLYJ3BV8QDe/Jyp21u1T7r45x/R/5QdteURMR5r01GxeJSBBUOCOyaNXA3g==",
      "path": "microsoft.extensions.options/8.0.0",
      "hashPath": "microsoft.extensions.options.8.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Primitives/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-bXJEZrW9ny8vjMF1JV253WeLhpEVzFo1lyaZu1vQ4ZxWUlVvknZ/+ftFgVheLubb4eZPSwwxBeqS1JkCOjxd8g==",
      "path": "microsoft.extensions.primitives/8.0.0",
      "hashPath": "microsoft.extensions.primitives.8.0.0.nupkg.sha512"
    },
    "Microsoft.NET.Test.Sdk/17.9.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-7GUNAUbJYn644jzwLm5BD3a2p9C1dmP8Hr6fDPDxgItQk9hBs1Svdxzz07KQ/UphMSmgza9AbijBJGmw5D658A==",
      "path": "microsoft.net.test.sdk/17.9.0",
      "hashPath": "microsoft.net.test.sdk.17.9.0.nupkg.sha512"
    },
    "Microsoft.TestPlatform.ObjectModel/17.9.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-1ilw/8vgmjLyKU+2SKXKXaOqpYFJCQfGqGz+x0cosl981VzjrY74Sv6qAJv+neZMZ9ZMxF3ArN6kotaQ4uvEBw==",
      "path": "microsoft.testplatform.objectmodel/17.9.0",
      "hashPath": "microsoft.testplatform.objectmodel.17.9.0.nupkg.sha512"
    },
    "Microsoft.TestPlatform.TestHost/17.9.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-Spmg7Wx49Ya3SxBjyeAR+nQpjMTKZwTwpZ7KyeOTIqI/WHNPnBU4HUvl5kuHPQAwGWqMy4FGZja1HvEwvoaDiA==",
      "path": "microsoft.testplatform.testhost/17.9.0",
      "hashPath": "microsoft.testplatform.testhost.17.9.0.nupkg.sha512"
    },
    "Moq/4.20.70": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-4rNnAwdpXJBuxqrOCzCyICXHSImOTRktCgCWXWykuF1qwoIsVvEnR7PjbMk/eLOxWvhmj5Kwt+kDV3RGUYcNwg==",
      "path": "moq/4.20.70",
      "hashPath": "moq.4.20.70.nupkg.sha512"
    },
    "Newtonsoft.Json/13.0.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-ppPFpBcvxdsfUonNcvITKqLl3bqxWbDCZIzDWHzjpdAHRFfZe0Dw9HmA0+za13IdyrgJwpkDTDA9fHaxOrt20A==",
      "path": "newtonsoft.json/13.0.1",
      "hashPath": "newtonsoft.json.13.0.1.nupkg.sha512"
    },
    "Npgsql/8.0.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-MuJzLoWCaQhQAR3oh66YR0Ir6mxuezncGX3f8wxvAc21g0+9HICktJQlqMoODhxztZKXE5k9GxRxqUAN+vPb4g==",
      "path": "npgsql/8.0.2",
      "hashPath": "npgsql.8.0.2.nupkg.sha512"
    },
    "Npgsql.EntityFrameworkCore.PostgreSQL/8.0.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-eoZPynwkZTWFTgnocvXORuCL2yFZtscrUdqVhjxiRULpC7BMg9zhLM5oDZAU5PoX1PgN77hmkKE4a3PQiHqh7Q==",
      "path": "npgsql.entityframeworkcore.postgresql/8.0.2",
      "hashPath": "npgsql.entityframeworkcore.postgresql.8.0.2.nupkg.sha512"
    },
    "System.Configuration.ConfigurationManager/4.4.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-gWwQv/Ug1qWJmHCmN17nAbxJYmQBM/E94QxKLksvUiiKB1Ld3Sc/eK1lgmbSjDFxkQhVuayI/cGFZhpBSodLrg==",
      "path": "system.configuration.configurationmanager/4.4.0",
      "hashPath": "system.configuration.configurationmanager.4.4.0.nupkg.sha512"
    },
    "System.Diagnostics.EventLog/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-lcyUiXTsETK2ALsZrX+nWuHSIQeazhqPphLfaRxzdGaG93+0kELqpgEHtwWOlQe7+jSFnKwaCAgL4kjeZCQJnw==",
      "path": "system.diagnostics.eventlog/6.0.0",
      "hashPath": "system.diagnostics.eventlog.6.0.0.nupkg.sha512"
    },
    "System.Reflection.Metadata/1.6.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-COC1aiAJjCoA5GBF+QKL2uLqEBew4JsCkQmoHKbN3TlOZKa2fKLz5CpiRQKDz0RsAOEGsVKqOD5bomsXq/4STQ==",
      "path": "system.reflection.metadata/1.6.0",
      "hashPath": "system.reflection.metadata.1.6.0.nupkg.sha512"
    },
    "System.Security.Cryptography.ProtectedData/4.4.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-cJV7ScGW7EhatRsjehfvvYVBvtiSMKgN8bOVI0bQhnF5bU7vnHVIsH49Kva7i7GWaWYvmEzkYVk1TC+gZYBEog==",
      "path": "system.security.cryptography.protecteddata/4.4.0",
      "hashPath": "system.security.cryptography.protecteddata.4.4.0.nupkg.sha512"
    },
    "xunit/2.7.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-KcCI5zxh8zbUfQTeErc4oT7YokViVND2V0p4vDJ2VD4lhF9V5qCYMMDNixme7FdwYy3SwPHF+2xC2Dq4Z9GSlA==",
      "path": "xunit/2.7.0",
      "hashPath": "xunit.2.7.0.nupkg.sha512"
    },
    "xunit.abstractions/2.0.3": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-pot1I4YOxlWjIb5jmwvvQNbTrZ3lJQ+jUGkGjWE3hEFM0l5gOnBWS+H3qsex68s5cO52g+44vpGzhAt+42vwKg==",
      "path": "xunit.abstractions/2.0.3",
      "hashPath": "xunit.abstractions.2.0.3.nupkg.sha512"
    },
    "xunit.analyzers/1.11.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-SCv+Ihxv+fCqotGeM8sVwLhw8nzAJ2aFRN5lcoKn9QtGdbVJ79JqDc+4u8/Ddnp2udxtmv+xYFWkHNlb/sk01w==",
      "path": "xunit.analyzers/1.11.0",
      "hashPath": "xunit.analyzers.1.11.0.nupkg.sha512"
    },
    "xunit.assert/2.7.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-CCTs3bUhmIS4tDwK6Cn/IiabG3RhYzdf65eIkO7u9/grKoN9MrN780LzVED3E8v+vwmmj7b5TW3/GFuZHPAzWA==",
      "path": "xunit.assert/2.7.0",
      "hashPath": "xunit.assert.2.7.0.nupkg.sha512"
    },
    "xunit.core/2.7.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-98tzqYAbtc/p/2Ba455XTNbD12Qoo8kPehjC4oDT46CAsLli5JOCU9hFF2MV3HHWMw/Y3yFUV2Vcukplbs6kuA==",
      "path": "xunit.core/2.7.0",
      "hashPath": "xunit.core.2.7.0.nupkg.sha512"
    },
    "xunit.extensibility.core/2.7.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-JLnx4PI0vn1Xr1Ust6ydrp2t/ktm2dyGPAVoDJV5gQuvBMSbd2K7WGzODa2ttiz030CeQ8nbsXl05+cvf7QNyA==",
      "path": "xunit.extensibility.core/2.7.0",
      "hashPath": "xunit.extensibility.core.2.7.0.nupkg.sha512"
    },
    "xunit.extensibility.execution/2.7.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-bjY+crT1jOyxKagFjCMdEVzoenO2v66ru8+CK/0UaXvyG4U9Q3UTieJkbQXbi7/1yZIK1sGh01l5/jh2CwLJtQ==",
      "path": "xunit.extensibility.execution/2.7.0",
      "hashPath": "xunit.extensibility.execution.2.7.0.nupkg.sha512"
    },
    "xunit.runner.visualstudio/2.5.7": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-31Rl7dBJriX0DNwZfDp8gqFOPsiM0c9kqpcH/HvNi9vDp+K7Ydf42H7mVIvYT918Ywzn1ymLg1c4DDC6iU754w==",
      "path": "xunit.runner.visualstudio/2.5.7",
      "hashPath": "xunit.runner.visualstudio.2.5.7.nupkg.sha512"
    },
    "Portfolio.Application/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "Portfolio.Domain/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "Portfolio.Infrastructure/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    }
  }
}

================
File: tests/Portfolio.UnitTests/bin/Debug/net8.0/Portfolio.UnitTests.runtimeconfig.json
================
{
  "runtimeOptions": {
    "tfm": "net8.0",
    "framework": {
      "name": "Microsoft.NETCore.App",
      "version": "8.0.0"
    },
    "configProperties": {
      "System.Reflection.NullabilityInfoContext.IsSupported": true,
      "System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization": false
    }
  }
}

================
File: tests/Portfolio.UnitTests/obj/Debug/net8.0/.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
================
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

================
File: tests/Portfolio.UnitTests/obj/Debug/net8.0/Portfolio.UnitTests.AssemblyInfo.cs
================
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Portfolio.UnitTests")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+7c4cf518495f7b4351aa2e0be533baabd5237bff")]
[assembly: System.Reflection.AssemblyProductAttribute("Portfolio.UnitTests")]
[assembly: System.Reflection.AssemblyTitleAttribute("Portfolio.UnitTests")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.

================
File: tests/Portfolio.UnitTests/obj/Debug/net8.0/Portfolio.UnitTests.AssemblyInfoInputs.cache
================
a7e05b9ad8d34fee2185427f4fb25e815a05e370302f785a9a46374a5e736681

================
File: tests/Portfolio.UnitTests/obj/Debug/net8.0/Portfolio.UnitTests.csproj.CoreCompileInputs.cache
================
efb51980fe95868462e8c4ef5b93ecfee9996565a39f70a3e5d1b7689cc931d5

================
File: tests/Portfolio.UnitTests/obj/Debug/net8.0/Portfolio.UnitTests.csproj.FileListAbsolute.txt
================
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\CoverletSourceRootsMapping_Portfolio.UnitTests
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\obj\Debug\net8.0\Portfolio.UnitTests.csproj.AssemblyReference.cache
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\obj\Debug\net8.0\Portfolio.UnitTests.GeneratedMSBuildEditorConfig.editorconfig
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\obj\Debug\net8.0\Portfolio.UnitTests.AssemblyInfoInputs.cache
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\obj\Debug\net8.0\Portfolio.UnitTests.AssemblyInfo.cs
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\obj\Debug\net8.0\Portfolio.UnitTests.csproj.CoreCompileInputs.cache
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\obj\Debug\net8.0\Portfolio.UnitTests.sourcelink.json
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\testhost.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\testhost.exe
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\xunit.runner.visualstudio.testadapter.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\xunit.runner.reporters.netcoreapp10.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\xunit.runner.utility.netcoreapp10.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\Portfolio.UnitTests.deps.json
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\Portfolio.UnitTests.runtimeconfig.json
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\Portfolio.UnitTests.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\Portfolio.UnitTests.pdb
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\AutoMapper.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\Castle.Core.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\FluentAssertions.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\FluentValidation.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\FluentValidation.DependencyInjectionExtensions.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\MediatR.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\MediatR.Contracts.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\Microsoft.VisualStudio.CodeCoverage.Shim.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\Microsoft.EntityFrameworkCore.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\Microsoft.EntityFrameworkCore.Abstractions.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\Microsoft.EntityFrameworkCore.InMemory.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\Microsoft.EntityFrameworkCore.Relational.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\Microsoft.Extensions.Caching.Abstractions.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\Microsoft.Extensions.Caching.Memory.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\Microsoft.Extensions.Configuration.Abstractions.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\Microsoft.Extensions.DependencyInjection.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\Microsoft.Extensions.DependencyInjection.Abstractions.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\Microsoft.Extensions.Logging.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\Microsoft.Extensions.Logging.Abstractions.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\Microsoft.Extensions.Options.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\Microsoft.Extensions.Primitives.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\Microsoft.TestPlatform.CoreUtilities.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\Microsoft.TestPlatform.PlatformAbstractions.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\Microsoft.VisualStudio.TestPlatform.ObjectModel.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\Microsoft.TestPlatform.CommunicationUtilities.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\Microsoft.TestPlatform.CrossPlatEngine.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\Microsoft.TestPlatform.Utilities.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\Microsoft.VisualStudio.TestPlatform.Common.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\Moq.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\Newtonsoft.Json.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\Npgsql.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\Npgsql.EntityFrameworkCore.PostgreSQL.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\System.Configuration.ConfigurationManager.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\System.Diagnostics.EventLog.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\System.Security.Cryptography.ProtectedData.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\xunit.abstractions.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\xunit.assert.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\xunit.core.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\xunit.execution.dotnet.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\cs\Microsoft.TestPlatform.CoreUtilities.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\cs\Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\de\Microsoft.TestPlatform.CoreUtilities.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\de\Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\es\Microsoft.TestPlatform.CoreUtilities.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\es\Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\fr\Microsoft.TestPlatform.CoreUtilities.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\fr\Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\it\Microsoft.TestPlatform.CoreUtilities.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\it\Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\ja\Microsoft.TestPlatform.CoreUtilities.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\ja\Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\ko\Microsoft.TestPlatform.CoreUtilities.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\ko\Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\pl\Microsoft.TestPlatform.CoreUtilities.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\pl\Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\pt-BR\Microsoft.TestPlatform.CoreUtilities.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\pt-BR\Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\ru\Microsoft.TestPlatform.CoreUtilities.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\ru\Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\tr\Microsoft.TestPlatform.CoreUtilities.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\tr\Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\zh-Hans\Microsoft.TestPlatform.CoreUtilities.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\zh-Hans\Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\zh-Hant\Microsoft.TestPlatform.CoreUtilities.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\zh-Hant\Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\cs\Microsoft.TestPlatform.CommunicationUtilities.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\cs\Microsoft.TestPlatform.CrossPlatEngine.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\cs\Microsoft.VisualStudio.TestPlatform.Common.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\de\Microsoft.TestPlatform.CommunicationUtilities.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\de\Microsoft.TestPlatform.CrossPlatEngine.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\de\Microsoft.VisualStudio.TestPlatform.Common.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\es\Microsoft.TestPlatform.CommunicationUtilities.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\es\Microsoft.TestPlatform.CrossPlatEngine.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\es\Microsoft.VisualStudio.TestPlatform.Common.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\fr\Microsoft.TestPlatform.CommunicationUtilities.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\fr\Microsoft.TestPlatform.CrossPlatEngine.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\fr\Microsoft.VisualStudio.TestPlatform.Common.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\it\Microsoft.TestPlatform.CommunicationUtilities.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\it\Microsoft.TestPlatform.CrossPlatEngine.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\it\Microsoft.VisualStudio.TestPlatform.Common.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\ja\Microsoft.TestPlatform.CommunicationUtilities.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\ja\Microsoft.TestPlatform.CrossPlatEngine.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\ja\Microsoft.VisualStudio.TestPlatform.Common.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\ko\Microsoft.TestPlatform.CommunicationUtilities.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\ko\Microsoft.TestPlatform.CrossPlatEngine.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\ko\Microsoft.VisualStudio.TestPlatform.Common.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\pl\Microsoft.TestPlatform.CommunicationUtilities.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\pl\Microsoft.TestPlatform.CrossPlatEngine.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\pl\Microsoft.VisualStudio.TestPlatform.Common.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\pt-BR\Microsoft.TestPlatform.CommunicationUtilities.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\pt-BR\Microsoft.TestPlatform.CrossPlatEngine.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\pt-BR\Microsoft.VisualStudio.TestPlatform.Common.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\ru\Microsoft.TestPlatform.CommunicationUtilities.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\ru\Microsoft.TestPlatform.CrossPlatEngine.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\ru\Microsoft.VisualStudio.TestPlatform.Common.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\tr\Microsoft.TestPlatform.CommunicationUtilities.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\tr\Microsoft.TestPlatform.CrossPlatEngine.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\tr\Microsoft.VisualStudio.TestPlatform.Common.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\zh-Hans\Microsoft.TestPlatform.CommunicationUtilities.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\zh-Hans\Microsoft.TestPlatform.CrossPlatEngine.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\zh-Hans\Microsoft.VisualStudio.TestPlatform.Common.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\zh-Hant\Microsoft.TestPlatform.CommunicationUtilities.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\zh-Hant\Microsoft.TestPlatform.CrossPlatEngine.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\zh-Hant\Microsoft.VisualStudio.TestPlatform.Common.resources.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\runtimes\win\lib\net6.0\System.Diagnostics.EventLog.Messages.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\runtimes\win\lib\net6.0\System.Diagnostics.EventLog.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\runtimes\win\lib\netstandard2.0\System.Security.Cryptography.ProtectedData.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\Portfolio.Application.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\Portfolio.Domain.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\Portfolio.Infrastructure.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\Portfolio.Infrastructure.pdb
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\Portfolio.Application.pdb
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\bin\Debug\net8.0\Portfolio.Domain.pdb
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\obj\Debug\net8.0\Portfoli.E73F3F3E.Up2Date
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\obj\Debug\net8.0\Portfolio.UnitTests.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\obj\Debug\net8.0\refint\Portfolio.UnitTests.dll
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\obj\Debug\net8.0\Portfolio.UnitTests.pdb
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\obj\Debug\net8.0\Portfolio.UnitTests.genruntimeconfig.cache
C:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\obj\Debug\net8.0\ref\Portfolio.UnitTests.dll

================
File: tests/Portfolio.UnitTests/obj/Debug/net8.0/Portfolio.UnitTests.GeneratedMSBuildEditorConfig.editorconfig
================
is_global = true
build_property.TargetFramework = net8.0
build_property.TargetPlatformMinVersion = 
build_property.UsingMicrosoftNETSdkWeb = 
build_property.ProjectTypeGuids = 
build_property.InvariantGlobalization = 
build_property.PlatformNeutralAssembly = 
build_property.EnforceExtendedAnalyzerRules = 
build_property._SupportedPlatformList = Linux,macOS,Windows
build_property.RootNamespace = Portfolio.UnitTests
build_property.ProjectDir = c:\dev\portfolio\portfolio.net\tests\Portfolio.UnitTests\
build_property.EnableComHosting = 
build_property.EnableGeneratedComInterfaceComImportInterop = 
build_property.EffectiveAnalysisLevelStyle = 8.0
build_property.EnableCodeStyleSeverity =

================
File: tests/Portfolio.UnitTests/obj/Debug/net8.0/Portfolio.UnitTests.genruntimeconfig.cache
================
34908accf45f6cbbb9991de0ff3fe9020e28a20fe5f24843954f2a5b0fb72de3

================
File: tests/Portfolio.UnitTests/obj/Debug/net8.0/Portfolio.UnitTests.GlobalUsings.g.cs
================
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

================
File: tests/Portfolio.UnitTests/obj/Debug/net8.0/Portfolio.UnitTests.sourcelink.json
================
{"documents":{"C:\\dev\\portfolio\\*":"https://raw.githubusercontent.com/michelroberge/portfolio/104d91285c2777489c173d7e92482bc0071a9d92/*"}}

================
File: tests/Portfolio.UnitTests/obj/Portfolio.UnitTests.csproj.nuget.dgspec.json
================
{
  "format": 1,
  "restore": {
    "C:\\dev\\portfolio\\portfolio.net\\tests\\Portfolio.UnitTests\\Portfolio.UnitTests.csproj": {}
  },
  "projects": {
    "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\Portfolio.Application.csproj": {
      "version": "1.0.0",
      "restore": {
        "projectUniqueName": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\Portfolio.Application.csproj",
        "projectName": "Portfolio.Application",
        "projectPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\Portfolio.Application.csproj",
        "packagesPath": "C:\\Users\\miche\\.nuget\\packages\\",
        "outputPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\obj\\",
        "projectStyle": "PackageReference",
        "fallbackFolders": [
          "C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\NuGetPackages"
        ],
        "configFilePaths": [
          "C:\\Users\\miche\\AppData\\Roaming\\NuGet\\NuGet.Config",
          "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.FallbackLocation.config",
          "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.Offline.config"
        ],
        "originalTargetFrameworks": [
          "net8.0"
        ],
        "sources": {
          "C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackages\\": {},
          "https://api.nuget.org/v3/index.json": {}
        },
        "frameworks": {
          "net8.0": {
            "targetAlias": "net8.0",
            "projectReferences": {
              "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\Portfolio.Domain.csproj": {
                "projectPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\Portfolio.Domain.csproj"
              }
            }
          }
        },
        "warningProperties": {
          "warnAsError": [
            "NU1605"
          ]
        },
        "restoreAuditProperties": {
          "enableAudit": "true",
          "auditLevel": "low",
          "auditMode": "direct"
        },
        "SdkAnalysisLevel": "9.0.100"
      },
      "frameworks": {
        "net8.0": {
          "targetAlias": "net8.0",
          "dependencies": {
            "AutoMapper": {
              "target": "Package",
              "version": "[13.0.1, )"
            },
            "FluentValidation": {
              "target": "Package",
              "version": "[11.9.0, )"
            },
            "FluentValidation.DependencyInjectionExtensions": {
              "target": "Package",
              "version": "[11.9.0, )"
            },
            "MediatR": {
              "target": "Package",
              "version": "[12.2.0, )"
            },
            "Microsoft.Extensions.Logging.Abstractions": {
              "target": "Package",
              "version": "[8.0.0, )"
            }
          },
          "imports": [
            "net461",
            "net462",
            "net47",
            "net471",
            "net472",
            "net48",
            "net481"
          ],
          "assetTargetFallback": true,
          "warn": true,
          "frameworkReferences": {
            "Microsoft.NETCore.App": {
              "privateAssets": "all"
            }
          },
          "runtimeIdentifierGraphPath": "C:\\Program Files\\dotnet\\sdk\\9.0.102/PortableRuntimeIdentifierGraph.json"
        }
      }
    },
    "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\Portfolio.Domain.csproj": {
      "version": "1.0.0",
      "restore": {
        "projectUniqueName": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\Portfolio.Domain.csproj",
        "projectName": "Portfolio.Domain",
        "projectPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\Portfolio.Domain.csproj",
        "packagesPath": "C:\\Users\\miche\\.nuget\\packages\\",
        "outputPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\obj\\",
        "projectStyle": "PackageReference",
        "fallbackFolders": [
          "C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\NuGetPackages"
        ],
        "configFilePaths": [
          "C:\\Users\\miche\\AppData\\Roaming\\NuGet\\NuGet.Config",
          "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.FallbackLocation.config",
          "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.Offline.config"
        ],
        "originalTargetFrameworks": [
          "net8.0"
        ],
        "sources": {
          "C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackages\\": {},
          "https://api.nuget.org/v3/index.json": {}
        },
        "frameworks": {
          "net8.0": {
            "targetAlias": "net8.0",
            "projectReferences": {}
          }
        },
        "warningProperties": {
          "warnAsError": [
            "NU1605"
          ]
        },
        "restoreAuditProperties": {
          "enableAudit": "true",
          "auditLevel": "low",
          "auditMode": "direct"
        },
        "SdkAnalysisLevel": "9.0.100"
      },
      "frameworks": {
        "net8.0": {
          "targetAlias": "net8.0",
          "imports": [
            "net461",
            "net462",
            "net47",
            "net471",
            "net472",
            "net48",
            "net481"
          ],
          "assetTargetFallback": true,
          "warn": true,
          "frameworkReferences": {
            "Microsoft.NETCore.App": {
              "privateAssets": "all"
            }
          },
          "runtimeIdentifierGraphPath": "C:\\Program Files\\dotnet\\sdk\\9.0.102/PortableRuntimeIdentifierGraph.json"
        }
      }
    },
    "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Infrastructure\\Portfolio.Infrastructure.csproj": {
      "version": "1.0.0",
      "restore": {
        "projectUniqueName": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Infrastructure\\Portfolio.Infrastructure.csproj",
        "projectName": "Portfolio.Infrastructure",
        "projectPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Infrastructure\\Portfolio.Infrastructure.csproj",
        "packagesPath": "C:\\Users\\miche\\.nuget\\packages\\",
        "outputPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Infrastructure\\obj\\",
        "projectStyle": "PackageReference",
        "fallbackFolders": [
          "C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\NuGetPackages"
        ],
        "configFilePaths": [
          "C:\\Users\\miche\\AppData\\Roaming\\NuGet\\NuGet.Config",
          "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.FallbackLocation.config",
          "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.Offline.config"
        ],
        "originalTargetFrameworks": [
          "net8.0"
        ],
        "sources": {
          "C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackages\\": {},
          "https://api.nuget.org/v3/index.json": {}
        },
        "frameworks": {
          "net8.0": {
            "targetAlias": "net8.0",
            "projectReferences": {
              "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\Portfolio.Application.csproj": {
                "projectPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\Portfolio.Application.csproj"
              }
            }
          }
        },
        "warningProperties": {
          "warnAsError": [
            "NU1605"
          ]
        },
        "restoreAuditProperties": {
          "enableAudit": "true",
          "auditLevel": "low",
          "auditMode": "direct"
        },
        "SdkAnalysisLevel": "9.0.100"
      },
      "frameworks": {
        "net8.0": {
          "targetAlias": "net8.0",
          "dependencies": {
            "AutoMapper": {
              "target": "Package",
              "version": "[13.0.1, )"
            },
            "MediatR": {
              "target": "Package",
              "version": "[12.2.0, )"
            },
            "Microsoft.EntityFrameworkCore": {
              "target": "Package",
              "version": "[8.0.2, )"
            },
            "Microsoft.EntityFrameworkCore.Design": {
              "include": "Runtime, Build, Native, ContentFiles, Analyzers, BuildTransitive",
              "suppressParent": "All",
              "target": "Package",
              "version": "[8.0.2, )"
            },
            "Microsoft.EntityFrameworkCore.Tools": {
              "include": "Runtime, Build, Native, ContentFiles, Analyzers, BuildTransitive",
              "suppressParent": "All",
              "target": "Package",
              "version": "[8.0.2, )"
            },
            "Microsoft.Extensions.Configuration.Abstractions": {
              "target": "Package",
              "version": "[8.0.0, )"
            },
            "Microsoft.Extensions.DependencyInjection.Abstractions": {
              "target": "Package",
              "version": "[8.0.0, )"
            },
            "Npgsql.EntityFrameworkCore.PostgreSQL": {
              "target": "Package",
              "version": "[8.0.2, )"
            }
          },
          "imports": [
            "net461",
            "net462",
            "net47",
            "net471",
            "net472",
            "net48",
            "net481"
          ],
          "assetTargetFallback": true,
          "warn": true,
          "frameworkReferences": {
            "Microsoft.NETCore.App": {
              "privateAssets": "all"
            }
          },
          "runtimeIdentifierGraphPath": "C:\\Program Files\\dotnet\\sdk\\9.0.102/PortableRuntimeIdentifierGraph.json"
        }
      }
    },
    "C:\\dev\\portfolio\\portfolio.net\\tests\\Portfolio.UnitTests\\Portfolio.UnitTests.csproj": {
      "version": "1.0.0",
      "restore": {
        "projectUniqueName": "C:\\dev\\portfolio\\portfolio.net\\tests\\Portfolio.UnitTests\\Portfolio.UnitTests.csproj",
        "projectName": "Portfolio.UnitTests",
        "projectPath": "C:\\dev\\portfolio\\portfolio.net\\tests\\Portfolio.UnitTests\\Portfolio.UnitTests.csproj",
        "packagesPath": "C:\\Users\\miche\\.nuget\\packages\\",
        "outputPath": "C:\\dev\\portfolio\\portfolio.net\\tests\\Portfolio.UnitTests\\obj\\",
        "projectStyle": "PackageReference",
        "fallbackFolders": [
          "C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\NuGetPackages"
        ],
        "configFilePaths": [
          "C:\\Users\\miche\\AppData\\Roaming\\NuGet\\NuGet.Config",
          "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.FallbackLocation.config",
          "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.Offline.config"
        ],
        "originalTargetFrameworks": [
          "net8.0"
        ],
        "sources": {
          "C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackages\\": {},
          "https://api.nuget.org/v3/index.json": {}
        },
        "frameworks": {
          "net8.0": {
            "targetAlias": "net8.0",
            "projectReferences": {
              "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\Portfolio.Application.csproj": {
                "projectPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\Portfolio.Application.csproj"
              },
              "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\Portfolio.Domain.csproj": {
                "projectPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\Portfolio.Domain.csproj"
              },
              "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Infrastructure\\Portfolio.Infrastructure.csproj": {
                "projectPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Infrastructure\\Portfolio.Infrastructure.csproj"
              }
            }
          }
        },
        "warningProperties": {
          "warnAsError": [
            "NU1605"
          ]
        },
        "restoreAuditProperties": {
          "enableAudit": "true",
          "auditLevel": "low",
          "auditMode": "direct"
        },
        "SdkAnalysisLevel": "9.0.100"
      },
      "frameworks": {
        "net8.0": {
          "targetAlias": "net8.0",
          "dependencies": {
            "FluentAssertions": {
              "target": "Package",
              "version": "[6.12.0, )"
            },
            "Microsoft.EntityFrameworkCore.InMemory": {
              "target": "Package",
              "version": "[8.0.2, )"
            },
            "Microsoft.NET.Test.Sdk": {
              "target": "Package",
              "version": "[17.9.0, )"
            },
            "Moq": {
              "target": "Package",
              "version": "[4.20.70, )"
            },
            "coverlet.collector": {
              "include": "Runtime, Build, Native, ContentFiles, Analyzers, BuildTransitive",
              "suppressParent": "All",
              "target": "Package",
              "version": "[6.0.0, )"
            },
            "xunit": {
              "target": "Package",
              "version": "[2.7.0, )"
            },
            "xunit.runner.visualstudio": {
              "include": "Runtime, Build, Native, ContentFiles, Analyzers, BuildTransitive",
              "suppressParent": "All",
              "target": "Package",
              "version": "[2.5.7, )"
            }
          },
          "imports": [
            "net461",
            "net462",
            "net47",
            "net471",
            "net472",
            "net48",
            "net481"
          ],
          "assetTargetFallback": true,
          "warn": true,
          "frameworkReferences": {
            "Microsoft.NETCore.App": {
              "privateAssets": "all"
            }
          },
          "runtimeIdentifierGraphPath": "C:\\Program Files\\dotnet\\sdk\\9.0.102/PortableRuntimeIdentifierGraph.json"
        }
      }
    }
  }
}

================
File: tests/Portfolio.UnitTests/obj/Portfolio.UnitTests.csproj.nuget.g.props
================
<?xml version="1.0" encoding="utf-8" standalone="no"?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup Condition=" '$(ExcludeRestorePackageImports)' != 'true' ">
    <RestoreSuccess Condition=" '$(RestoreSuccess)' == '' ">True</RestoreSuccess>
    <RestoreTool Condition=" '$(RestoreTool)' == '' ">NuGet</RestoreTool>
    <ProjectAssetsFile Condition=" '$(ProjectAssetsFile)' == '' ">$(MSBuildThisFileDirectory)project.assets.json</ProjectAssetsFile>
    <NuGetPackageRoot Condition=" '$(NuGetPackageRoot)' == '' ">$(UserProfile)\.nuget\packages\</NuGetPackageRoot>
    <NuGetPackageFolders Condition=" '$(NuGetPackageFolders)' == '' ">C:\Users\miche\.nuget\packages\;C:\Program Files (x86)\Microsoft Visual Studio\Shared\NuGetPackages</NuGetPackageFolders>
    <NuGetProjectStyle Condition=" '$(NuGetProjectStyle)' == '' ">PackageReference</NuGetProjectStyle>
    <NuGetToolVersion Condition=" '$(NuGetToolVersion)' == '' ">6.12.3</NuGetToolVersion>
  </PropertyGroup>
  <ItemGroup Condition=" '$(ExcludeRestorePackageImports)' != 'true' ">
    <SourceRoot Include="C:\Users\miche\.nuget\packages\" />
    <SourceRoot Include="C:\Program Files (x86)\Microsoft Visual Studio\Shared\NuGetPackages\" />
  </ItemGroup>
  <ImportGroup Condition=" '$(ExcludeRestorePackageImports)' != 'true' ">
    <Import Project="$(NuGetPackageRoot)xunit.runner.visualstudio\2.5.7\build\net6.0\xunit.runner.visualstudio.props" Condition="Exists('$(NuGetPackageRoot)xunit.runner.visualstudio\2.5.7\build\net6.0\xunit.runner.visualstudio.props')" />
    <Import Project="$(NuGetPackageRoot)xunit.core\2.7.0\build\xunit.core.props" Condition="Exists('$(NuGetPackageRoot)xunit.core\2.7.0\build\xunit.core.props')" />
    <Import Project="$(NuGetPackageRoot)microsoft.entityframeworkcore\8.0.2\buildTransitive\net8.0\Microsoft.EntityFrameworkCore.props" Condition="Exists('$(NuGetPackageRoot)microsoft.entityframeworkcore\8.0.2\buildTransitive\net8.0\Microsoft.EntityFrameworkCore.props')" />
    <Import Project="$(NuGetPackageRoot)microsoft.testplatform.testhost\17.9.0\build\netcoreapp3.1\Microsoft.TestPlatform.TestHost.props" Condition="Exists('$(NuGetPackageRoot)microsoft.testplatform.testhost\17.9.0\build\netcoreapp3.1\Microsoft.TestPlatform.TestHost.props')" />
    <Import Project="$(NuGetPackageRoot)microsoft.codecoverage\17.9.0\build\netstandard2.0\Microsoft.CodeCoverage.props" Condition="Exists('$(NuGetPackageRoot)microsoft.codecoverage\17.9.0\build\netstandard2.0\Microsoft.CodeCoverage.props')" />
    <Import Project="$(NuGetPackageRoot)microsoft.net.test.sdk\17.9.0\build\netcoreapp3.1\Microsoft.NET.Test.Sdk.props" Condition="Exists('$(NuGetPackageRoot)microsoft.net.test.sdk\17.9.0\build\netcoreapp3.1\Microsoft.NET.Test.Sdk.props')" />
  </ImportGroup>
  <PropertyGroup Condition=" '$(ExcludeRestorePackageImports)' != 'true' ">
    <Pkgxunit_analyzers Condition=" '$(Pkgxunit_analyzers)' == '' ">C:\Users\miche\.nuget\packages\xunit.analyzers\1.11.0</Pkgxunit_analyzers>
  </PropertyGroup>
</Project>

================
File: tests/Portfolio.UnitTests/obj/Portfolio.UnitTests.csproj.nuget.g.targets
================
<?xml version="1.0" encoding="utf-8" standalone="no"?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ImportGroup Condition=" '$(ExcludeRestorePackageImports)' != 'true' ">
    <Import Project="$(NuGetPackageRoot)xunit.core\2.7.0\build\xunit.core.targets" Condition="Exists('$(NuGetPackageRoot)xunit.core\2.7.0\build\xunit.core.targets')" />
    <Import Project="$(NuGetPackageRoot)microsoft.extensions.options\8.0.0\buildTransitive\net6.0\Microsoft.Extensions.Options.targets" Condition="Exists('$(NuGetPackageRoot)microsoft.extensions.options\8.0.0\buildTransitive\net6.0\Microsoft.Extensions.Options.targets')" />
    <Import Project="$(NuGetPackageRoot)microsoft.extensions.logging.abstractions\8.0.0\buildTransitive\net6.0\Microsoft.Extensions.Logging.Abstractions.targets" Condition="Exists('$(NuGetPackageRoot)microsoft.extensions.logging.abstractions\8.0.0\buildTransitive\net6.0\Microsoft.Extensions.Logging.Abstractions.targets')" />
    <Import Project="$(NuGetPackageRoot)microsoft.codecoverage\17.9.0\build\netstandard2.0\Microsoft.CodeCoverage.targets" Condition="Exists('$(NuGetPackageRoot)microsoft.codecoverage\17.9.0\build\netstandard2.0\Microsoft.CodeCoverage.targets')" />
    <Import Project="$(NuGetPackageRoot)microsoft.net.test.sdk\17.9.0\build\netcoreapp3.1\Microsoft.NET.Test.Sdk.targets" Condition="Exists('$(NuGetPackageRoot)microsoft.net.test.sdk\17.9.0\build\netcoreapp3.1\Microsoft.NET.Test.Sdk.targets')" />
    <Import Project="$(NuGetPackageRoot)coverlet.collector\6.0.0\build\netstandard1.0\coverlet.collector.targets" Condition="Exists('$(NuGetPackageRoot)coverlet.collector\6.0.0\build\netstandard1.0\coverlet.collector.targets')" />
  </ImportGroup>
</Project>

================
File: tests/Portfolio.UnitTests/obj/project.assets.json
================
{
  "version": 3,
  "targets": {
    "net8.0": {
      "AutoMapper/13.0.1": {
        "type": "package",
        "dependencies": {
          "Microsoft.Extensions.Options": "6.0.0"
        },
        "compile": {
          "lib/net6.0/AutoMapper.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net6.0/AutoMapper.dll": {
            "related": ".xml"
          }
        }
      },
      "Castle.Core/5.1.1": {
        "type": "package",
        "dependencies": {
          "System.Diagnostics.EventLog": "6.0.0"
        },
        "compile": {
          "lib/net6.0/Castle.Core.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net6.0/Castle.Core.dll": {
            "related": ".xml"
          }
        }
      },
      "coverlet.collector/6.0.0": {
        "type": "package",
        "build": {
          "build/netstandard1.0/coverlet.collector.targets": {}
        }
      },
      "FluentAssertions/6.12.0": {
        "type": "package",
        "dependencies": {
          "System.Configuration.ConfigurationManager": "4.4.0"
        },
        "compile": {
          "lib/net6.0/FluentAssertions.dll": {
            "related": ".pdb;.xml"
          }
        },
        "runtime": {
          "lib/net6.0/FluentAssertions.dll": {
            "related": ".pdb;.xml"
          }
        }
      },
      "FluentValidation/11.9.0": {
        "type": "package",
        "compile": {
          "lib/net8.0/FluentValidation.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/FluentValidation.dll": {
            "related": ".xml"
          }
        }
      },
      "FluentValidation.DependencyInjectionExtensions/11.9.0": {
        "type": "package",
        "dependencies": {
          "FluentValidation": "11.9.0",
          "Microsoft.Extensions.Dependencyinjection.Abstractions": "2.1.0"
        },
        "compile": {
          "lib/netstandard2.1/FluentValidation.DependencyInjectionExtensions.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/netstandard2.1/FluentValidation.DependencyInjectionExtensions.dll": {
            "related": ".xml"
          }
        }
      },
      "MediatR/12.2.0": {
        "type": "package",
        "dependencies": {
          "MediatR.Contracts": "[2.0.1, 3.0.0)",
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0"
        },
        "compile": {
          "lib/net6.0/MediatR.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net6.0/MediatR.dll": {
            "related": ".xml"
          }
        }
      },
      "MediatR.Contracts/2.0.1": {
        "type": "package",
        "compile": {
          "lib/netstandard2.0/MediatR.Contracts.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/netstandard2.0/MediatR.Contracts.dll": {
            "related": ".xml"
          }
        }
      },
      "Microsoft.CodeCoverage/17.9.0": {
        "type": "package",
        "compile": {
          "lib/netcoreapp3.1/Microsoft.VisualStudio.CodeCoverage.Shim.dll": {}
        },
        "runtime": {
          "lib/netcoreapp3.1/Microsoft.VisualStudio.CodeCoverage.Shim.dll": {}
        },
        "build": {
          "build/netstandard2.0/Microsoft.CodeCoverage.props": {},
          "build/netstandard2.0/Microsoft.CodeCoverage.targets": {}
        }
      },
      "Microsoft.EntityFrameworkCore/8.0.2": {
        "type": "package",
        "dependencies": {
          "Microsoft.EntityFrameworkCore.Abstractions": "8.0.2",
          "Microsoft.EntityFrameworkCore.Analyzers": "8.0.2",
          "Microsoft.Extensions.Caching.Memory": "8.0.0",
          "Microsoft.Extensions.Logging": "8.0.0"
        },
        "compile": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net8.0/Microsoft.EntityFrameworkCore.props": {}
        }
      },
      "Microsoft.EntityFrameworkCore.Abstractions/8.0.2": {
        "type": "package",
        "compile": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.Abstractions.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.Abstractions.dll": {
            "related": ".xml"
          }
        }
      },
      "Microsoft.EntityFrameworkCore.Analyzers/8.0.2": {
        "type": "package",
        "compile": {
          "lib/netstandard2.0/_._": {}
        },
        "runtime": {
          "lib/netstandard2.0/_._": {}
        }
      },
      "Microsoft.EntityFrameworkCore.InMemory/8.0.2": {
        "type": "package",
        "dependencies": {
          "Microsoft.EntityFrameworkCore": "8.0.2"
        },
        "compile": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.InMemory.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.InMemory.dll": {
            "related": ".xml"
          }
        }
      },
      "Microsoft.EntityFrameworkCore.Relational/8.0.2": {
        "type": "package",
        "dependencies": {
          "Microsoft.EntityFrameworkCore": "8.0.2",
          "Microsoft.Extensions.Configuration.Abstractions": "8.0.0"
        },
        "compile": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.Relational.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.Relational.dll": {
            "related": ".xml"
          }
        }
      },
      "Microsoft.Extensions.Caching.Abstractions/8.0.0": {
        "type": "package",
        "dependencies": {
          "Microsoft.Extensions.Primitives": "8.0.0"
        },
        "compile": {
          "lib/net8.0/Microsoft.Extensions.Caching.Abstractions.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Caching.Abstractions.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net6.0/_._": {}
        }
      },
      "Microsoft.Extensions.Caching.Memory/8.0.0": {
        "type": "package",
        "dependencies": {
          "Microsoft.Extensions.Caching.Abstractions": "8.0.0",
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0",
          "Microsoft.Extensions.Logging.Abstractions": "8.0.0",
          "Microsoft.Extensions.Options": "8.0.0",
          "Microsoft.Extensions.Primitives": "8.0.0"
        },
        "compile": {
          "lib/net8.0/Microsoft.Extensions.Caching.Memory.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Caching.Memory.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net6.0/_._": {}
        }
      },
      "Microsoft.Extensions.Configuration.Abstractions/8.0.0": {
        "type": "package",
        "dependencies": {
          "Microsoft.Extensions.Primitives": "8.0.0"
        },
        "compile": {
          "lib/net8.0/Microsoft.Extensions.Configuration.Abstractions.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Configuration.Abstractions.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net6.0/_._": {}
        }
      },
      "Microsoft.Extensions.DependencyInjection/8.0.0": {
        "type": "package",
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0"
        },
        "compile": {
          "lib/net8.0/Microsoft.Extensions.DependencyInjection.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.DependencyInjection.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net6.0/_._": {}
        }
      },
      "Microsoft.Extensions.DependencyInjection.Abstractions/8.0.0": {
        "type": "package",
        "compile": {
          "lib/net8.0/Microsoft.Extensions.DependencyInjection.Abstractions.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.DependencyInjection.Abstractions.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net6.0/_._": {}
        }
      },
      "Microsoft.Extensions.Logging/8.0.0": {
        "type": "package",
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection": "8.0.0",
          "Microsoft.Extensions.Logging.Abstractions": "8.0.0",
          "Microsoft.Extensions.Options": "8.0.0"
        },
        "compile": {
          "lib/net8.0/Microsoft.Extensions.Logging.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Logging.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net6.0/_._": {}
        }
      },
      "Microsoft.Extensions.Logging.Abstractions/8.0.0": {
        "type": "package",
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0"
        },
        "compile": {
          "lib/net8.0/Microsoft.Extensions.Logging.Abstractions.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Logging.Abstractions.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net6.0/Microsoft.Extensions.Logging.Abstractions.targets": {}
        }
      },
      "Microsoft.Extensions.Options/8.0.0": {
        "type": "package",
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0",
          "Microsoft.Extensions.Primitives": "8.0.0"
        },
        "compile": {
          "lib/net8.0/Microsoft.Extensions.Options.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Options.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net6.0/Microsoft.Extensions.Options.targets": {}
        }
      },
      "Microsoft.Extensions.Primitives/8.0.0": {
        "type": "package",
        "compile": {
          "lib/net8.0/Microsoft.Extensions.Primitives.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Primitives.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/net6.0/_._": {}
        }
      },
      "Microsoft.NET.Test.Sdk/17.9.0": {
        "type": "package",
        "dependencies": {
          "Microsoft.CodeCoverage": "17.9.0",
          "Microsoft.TestPlatform.TestHost": "17.9.0"
        },
        "compile": {
          "lib/netcoreapp3.1/_._": {}
        },
        "runtime": {
          "lib/netcoreapp3.1/_._": {}
        },
        "build": {
          "build/netcoreapp3.1/Microsoft.NET.Test.Sdk.props": {},
          "build/netcoreapp3.1/Microsoft.NET.Test.Sdk.targets": {}
        },
        "buildMultiTargeting": {
          "buildMultiTargeting/Microsoft.NET.Test.Sdk.props": {}
        }
      },
      "Microsoft.TestPlatform.ObjectModel/17.9.0": {
        "type": "package",
        "dependencies": {
          "System.Reflection.Metadata": "1.6.0"
        },
        "compile": {
          "lib/netcoreapp3.1/Microsoft.TestPlatform.CoreUtilities.dll": {},
          "lib/netcoreapp3.1/Microsoft.TestPlatform.PlatformAbstractions.dll": {},
          "lib/netcoreapp3.1/Microsoft.VisualStudio.TestPlatform.ObjectModel.dll": {}
        },
        "runtime": {
          "lib/netcoreapp3.1/Microsoft.TestPlatform.CoreUtilities.dll": {},
          "lib/netcoreapp3.1/Microsoft.TestPlatform.PlatformAbstractions.dll": {},
          "lib/netcoreapp3.1/Microsoft.VisualStudio.TestPlatform.ObjectModel.dll": {}
        },
        "resource": {
          "lib/netcoreapp3.1/cs/Microsoft.TestPlatform.CoreUtilities.resources.dll": {
            "locale": "cs"
          },
          "lib/netcoreapp3.1/cs/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll": {
            "locale": "cs"
          },
          "lib/netcoreapp3.1/de/Microsoft.TestPlatform.CoreUtilities.resources.dll": {
            "locale": "de"
          },
          "lib/netcoreapp3.1/de/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll": {
            "locale": "de"
          },
          "lib/netcoreapp3.1/es/Microsoft.TestPlatform.CoreUtilities.resources.dll": {
            "locale": "es"
          },
          "lib/netcoreapp3.1/es/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll": {
            "locale": "es"
          },
          "lib/netcoreapp3.1/fr/Microsoft.TestPlatform.CoreUtilities.resources.dll": {
            "locale": "fr"
          },
          "lib/netcoreapp3.1/fr/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll": {
            "locale": "fr"
          },
          "lib/netcoreapp3.1/it/Microsoft.TestPlatform.CoreUtilities.resources.dll": {
            "locale": "it"
          },
          "lib/netcoreapp3.1/it/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll": {
            "locale": "it"
          },
          "lib/netcoreapp3.1/ja/Microsoft.TestPlatform.CoreUtilities.resources.dll": {
            "locale": "ja"
          },
          "lib/netcoreapp3.1/ja/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll": {
            "locale": "ja"
          },
          "lib/netcoreapp3.1/ko/Microsoft.TestPlatform.CoreUtilities.resources.dll": {
            "locale": "ko"
          },
          "lib/netcoreapp3.1/ko/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll": {
            "locale": "ko"
          },
          "lib/netcoreapp3.1/pl/Microsoft.TestPlatform.CoreUtilities.resources.dll": {
            "locale": "pl"
          },
          "lib/netcoreapp3.1/pl/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll": {
            "locale": "pl"
          },
          "lib/netcoreapp3.1/pt-BR/Microsoft.TestPlatform.CoreUtilities.resources.dll": {
            "locale": "pt-BR"
          },
          "lib/netcoreapp3.1/pt-BR/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll": {
            "locale": "pt-BR"
          },
          "lib/netcoreapp3.1/ru/Microsoft.TestPlatform.CoreUtilities.resources.dll": {
            "locale": "ru"
          },
          "lib/netcoreapp3.1/ru/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll": {
            "locale": "ru"
          },
          "lib/netcoreapp3.1/tr/Microsoft.TestPlatform.CoreUtilities.resources.dll": {
            "locale": "tr"
          },
          "lib/netcoreapp3.1/tr/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll": {
            "locale": "tr"
          },
          "lib/netcoreapp3.1/zh-Hans/Microsoft.TestPlatform.CoreUtilities.resources.dll": {
            "locale": "zh-Hans"
          },
          "lib/netcoreapp3.1/zh-Hans/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll": {
            "locale": "zh-Hans"
          },
          "lib/netcoreapp3.1/zh-Hant/Microsoft.TestPlatform.CoreUtilities.resources.dll": {
            "locale": "zh-Hant"
          },
          "lib/netcoreapp3.1/zh-Hant/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll": {
            "locale": "zh-Hant"
          }
        }
      },
      "Microsoft.TestPlatform.TestHost/17.9.0": {
        "type": "package",
        "dependencies": {
          "Microsoft.TestPlatform.ObjectModel": "17.9.0",
          "Newtonsoft.Json": "13.0.1"
        },
        "compile": {
          "lib/netcoreapp3.1/Microsoft.TestPlatform.CommunicationUtilities.dll": {},
          "lib/netcoreapp3.1/Microsoft.TestPlatform.CoreUtilities.dll": {},
          "lib/netcoreapp3.1/Microsoft.TestPlatform.CrossPlatEngine.dll": {},
          "lib/netcoreapp3.1/Microsoft.TestPlatform.PlatformAbstractions.dll": {},
          "lib/netcoreapp3.1/Microsoft.TestPlatform.Utilities.dll": {},
          "lib/netcoreapp3.1/Microsoft.VisualStudio.TestPlatform.Common.dll": {},
          "lib/netcoreapp3.1/Microsoft.VisualStudio.TestPlatform.ObjectModel.dll": {},
          "lib/netcoreapp3.1/testhost.dll": {
            "related": ".deps.json"
          }
        },
        "runtime": {
          "lib/netcoreapp3.1/Microsoft.TestPlatform.CommunicationUtilities.dll": {},
          "lib/netcoreapp3.1/Microsoft.TestPlatform.CoreUtilities.dll": {},
          "lib/netcoreapp3.1/Microsoft.TestPlatform.CrossPlatEngine.dll": {},
          "lib/netcoreapp3.1/Microsoft.TestPlatform.PlatformAbstractions.dll": {},
          "lib/netcoreapp3.1/Microsoft.TestPlatform.Utilities.dll": {},
          "lib/netcoreapp3.1/Microsoft.VisualStudio.TestPlatform.Common.dll": {},
          "lib/netcoreapp3.1/Microsoft.VisualStudio.TestPlatform.ObjectModel.dll": {},
          "lib/netcoreapp3.1/testhost.dll": {
            "related": ".deps.json"
          }
        },
        "resource": {
          "lib/netcoreapp3.1/cs/Microsoft.TestPlatform.CommunicationUtilities.resources.dll": {
            "locale": "cs"
          },
          "lib/netcoreapp3.1/cs/Microsoft.TestPlatform.CrossPlatEngine.resources.dll": {
            "locale": "cs"
          },
          "lib/netcoreapp3.1/cs/Microsoft.VisualStudio.TestPlatform.Common.resources.dll": {
            "locale": "cs"
          },
          "lib/netcoreapp3.1/de/Microsoft.TestPlatform.CommunicationUtilities.resources.dll": {
            "locale": "de"
          },
          "lib/netcoreapp3.1/de/Microsoft.TestPlatform.CrossPlatEngine.resources.dll": {
            "locale": "de"
          },
          "lib/netcoreapp3.1/de/Microsoft.VisualStudio.TestPlatform.Common.resources.dll": {
            "locale": "de"
          },
          "lib/netcoreapp3.1/es/Microsoft.TestPlatform.CommunicationUtilities.resources.dll": {
            "locale": "es"
          },
          "lib/netcoreapp3.1/es/Microsoft.TestPlatform.CrossPlatEngine.resources.dll": {
            "locale": "es"
          },
          "lib/netcoreapp3.1/es/Microsoft.VisualStudio.TestPlatform.Common.resources.dll": {
            "locale": "es"
          },
          "lib/netcoreapp3.1/fr/Microsoft.TestPlatform.CommunicationUtilities.resources.dll": {
            "locale": "fr"
          },
          "lib/netcoreapp3.1/fr/Microsoft.TestPlatform.CrossPlatEngine.resources.dll": {
            "locale": "fr"
          },
          "lib/netcoreapp3.1/fr/Microsoft.VisualStudio.TestPlatform.Common.resources.dll": {
            "locale": "fr"
          },
          "lib/netcoreapp3.1/it/Microsoft.TestPlatform.CommunicationUtilities.resources.dll": {
            "locale": "it"
          },
          "lib/netcoreapp3.1/it/Microsoft.TestPlatform.CrossPlatEngine.resources.dll": {
            "locale": "it"
          },
          "lib/netcoreapp3.1/it/Microsoft.VisualStudio.TestPlatform.Common.resources.dll": {
            "locale": "it"
          },
          "lib/netcoreapp3.1/ja/Microsoft.TestPlatform.CommunicationUtilities.resources.dll": {
            "locale": "ja"
          },
          "lib/netcoreapp3.1/ja/Microsoft.TestPlatform.CrossPlatEngine.resources.dll": {
            "locale": "ja"
          },
          "lib/netcoreapp3.1/ja/Microsoft.VisualStudio.TestPlatform.Common.resources.dll": {
            "locale": "ja"
          },
          "lib/netcoreapp3.1/ko/Microsoft.TestPlatform.CommunicationUtilities.resources.dll": {
            "locale": "ko"
          },
          "lib/netcoreapp3.1/ko/Microsoft.TestPlatform.CrossPlatEngine.resources.dll": {
            "locale": "ko"
          },
          "lib/netcoreapp3.1/ko/Microsoft.VisualStudio.TestPlatform.Common.resources.dll": {
            "locale": "ko"
          },
          "lib/netcoreapp3.1/pl/Microsoft.TestPlatform.CommunicationUtilities.resources.dll": {
            "locale": "pl"
          },
          "lib/netcoreapp3.1/pl/Microsoft.TestPlatform.CrossPlatEngine.resources.dll": {
            "locale": "pl"
          },
          "lib/netcoreapp3.1/pl/Microsoft.VisualStudio.TestPlatform.Common.resources.dll": {
            "locale": "pl"
          },
          "lib/netcoreapp3.1/pt-BR/Microsoft.TestPlatform.CommunicationUtilities.resources.dll": {
            "locale": "pt-BR"
          },
          "lib/netcoreapp3.1/pt-BR/Microsoft.TestPlatform.CrossPlatEngine.resources.dll": {
            "locale": "pt-BR"
          },
          "lib/netcoreapp3.1/pt-BR/Microsoft.VisualStudio.TestPlatform.Common.resources.dll": {
            "locale": "pt-BR"
          },
          "lib/netcoreapp3.1/ru/Microsoft.TestPlatform.CommunicationUtilities.resources.dll": {
            "locale": "ru"
          },
          "lib/netcoreapp3.1/ru/Microsoft.TestPlatform.CrossPlatEngine.resources.dll": {
            "locale": "ru"
          },
          "lib/netcoreapp3.1/ru/Microsoft.VisualStudio.TestPlatform.Common.resources.dll": {
            "locale": "ru"
          },
          "lib/netcoreapp3.1/tr/Microsoft.TestPlatform.CommunicationUtilities.resources.dll": {
            "locale": "tr"
          },
          "lib/netcoreapp3.1/tr/Microsoft.TestPlatform.CrossPlatEngine.resources.dll": {
            "locale": "tr"
          },
          "lib/netcoreapp3.1/tr/Microsoft.VisualStudio.TestPlatform.Common.resources.dll": {
            "locale": "tr"
          },
          "lib/netcoreapp3.1/zh-Hans/Microsoft.TestPlatform.CommunicationUtilities.resources.dll": {
            "locale": "zh-Hans"
          },
          "lib/netcoreapp3.1/zh-Hans/Microsoft.TestPlatform.CrossPlatEngine.resources.dll": {
            "locale": "zh-Hans"
          },
          "lib/netcoreapp3.1/zh-Hans/Microsoft.VisualStudio.TestPlatform.Common.resources.dll": {
            "locale": "zh-Hans"
          },
          "lib/netcoreapp3.1/zh-Hant/Microsoft.TestPlatform.CommunicationUtilities.resources.dll": {
            "locale": "zh-Hant"
          },
          "lib/netcoreapp3.1/zh-Hant/Microsoft.TestPlatform.CrossPlatEngine.resources.dll": {
            "locale": "zh-Hant"
          },
          "lib/netcoreapp3.1/zh-Hant/Microsoft.VisualStudio.TestPlatform.Common.resources.dll": {
            "locale": "zh-Hant"
          }
        },
        "build": {
          "build/netcoreapp3.1/Microsoft.TestPlatform.TestHost.props": {}
        }
      },
      "Moq/4.20.70": {
        "type": "package",
        "dependencies": {
          "Castle.Core": "5.1.1"
        },
        "compile": {
          "lib/net6.0/Moq.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net6.0/Moq.dll": {
            "related": ".xml"
          }
        }
      },
      "Newtonsoft.Json/13.0.1": {
        "type": "package",
        "compile": {
          "lib/netstandard2.0/Newtonsoft.Json.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/netstandard2.0/Newtonsoft.Json.dll": {
            "related": ".xml"
          }
        }
      },
      "Npgsql/8.0.2": {
        "type": "package",
        "dependencies": {
          "Microsoft.Extensions.Logging.Abstractions": "8.0.0"
        },
        "compile": {
          "lib/net8.0/Npgsql.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Npgsql.dll": {
            "related": ".xml"
          }
        }
      },
      "Npgsql.EntityFrameworkCore.PostgreSQL/8.0.2": {
        "type": "package",
        "dependencies": {
          "Microsoft.EntityFrameworkCore": "8.0.2",
          "Microsoft.EntityFrameworkCore.Abstractions": "8.0.2",
          "Microsoft.EntityFrameworkCore.Relational": "8.0.2",
          "Npgsql": "8.0.2"
        },
        "compile": {
          "lib/net8.0/Npgsql.EntityFrameworkCore.PostgreSQL.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net8.0/Npgsql.EntityFrameworkCore.PostgreSQL.dll": {
            "related": ".xml"
          }
        }
      },
      "System.Configuration.ConfigurationManager/4.4.0": {
        "type": "package",
        "dependencies": {
          "System.Security.Cryptography.ProtectedData": "4.4.0"
        },
        "compile": {
          "ref/netstandard2.0/System.Configuration.ConfigurationManager.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/netstandard2.0/System.Configuration.ConfigurationManager.dll": {}
        }
      },
      "System.Diagnostics.EventLog/6.0.0": {
        "type": "package",
        "compile": {
          "lib/net6.0/System.Diagnostics.EventLog.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net6.0/System.Diagnostics.EventLog.dll": {
            "related": ".xml"
          }
        },
        "build": {
          "buildTransitive/netcoreapp3.1/_._": {}
        },
        "runtimeTargets": {
          "runtimes/win/lib/net6.0/System.Diagnostics.EventLog.Messages.dll": {
            "assetType": "runtime",
            "rid": "win"
          },
          "runtimes/win/lib/net6.0/System.Diagnostics.EventLog.dll": {
            "assetType": "runtime",
            "rid": "win"
          }
        }
      },
      "System.Reflection.Metadata/1.6.0": {
        "type": "package",
        "compile": {
          "lib/netstandard2.0/System.Reflection.Metadata.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/netstandard2.0/System.Reflection.Metadata.dll": {
            "related": ".xml"
          }
        }
      },
      "System.Security.Cryptography.ProtectedData/4.4.0": {
        "type": "package",
        "compile": {
          "ref/netstandard2.0/_._": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/netstandard2.0/System.Security.Cryptography.ProtectedData.dll": {}
        },
        "runtimeTargets": {
          "runtimes/win/lib/netstandard2.0/System.Security.Cryptography.ProtectedData.dll": {
            "assetType": "runtime",
            "rid": "win"
          }
        }
      },
      "xunit/2.7.0": {
        "type": "package",
        "dependencies": {
          "xunit.analyzers": "1.11.0",
          "xunit.assert": "2.7.0",
          "xunit.core": "[2.7.0]"
        }
      },
      "xunit.abstractions/2.0.3": {
        "type": "package",
        "compile": {
          "lib/netstandard2.0/xunit.abstractions.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/netstandard2.0/xunit.abstractions.dll": {
            "related": ".xml"
          }
        }
      },
      "xunit.analyzers/1.11.0": {
        "type": "package"
      },
      "xunit.assert/2.7.0": {
        "type": "package",
        "compile": {
          "lib/net6.0/xunit.assert.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net6.0/xunit.assert.dll": {
            "related": ".xml"
          }
        }
      },
      "xunit.core/2.7.0": {
        "type": "package",
        "dependencies": {
          "xunit.extensibility.core": "[2.7.0]",
          "xunit.extensibility.execution": "[2.7.0]"
        },
        "build": {
          "build/xunit.core.props": {},
          "build/xunit.core.targets": {}
        },
        "buildMultiTargeting": {
          "buildMultiTargeting/xunit.core.props": {},
          "buildMultiTargeting/xunit.core.targets": {}
        }
      },
      "xunit.extensibility.core/2.7.0": {
        "type": "package",
        "dependencies": {
          "xunit.abstractions": "2.0.3"
        },
        "compile": {
          "lib/netstandard1.1/xunit.core.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/netstandard1.1/xunit.core.dll": {
            "related": ".xml"
          }
        }
      },
      "xunit.extensibility.execution/2.7.0": {
        "type": "package",
        "dependencies": {
          "xunit.extensibility.core": "[2.7.0]"
        },
        "compile": {
          "lib/netstandard1.1/xunit.execution.dotnet.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/netstandard1.1/xunit.execution.dotnet.dll": {
            "related": ".xml"
          }
        }
      },
      "xunit.runner.visualstudio/2.5.7": {
        "type": "package",
        "compile": {
          "lib/net6.0/_._": {}
        },
        "runtime": {
          "lib/net6.0/_._": {}
        },
        "build": {
          "build/net6.0/xunit.runner.visualstudio.props": {}
        }
      },
      "Portfolio.Application/1.0.0": {
        "type": "project",
        "framework": ".NETCoreApp,Version=v8.0",
        "dependencies": {
          "AutoMapper": "13.0.1",
          "FluentValidation": "11.9.0",
          "FluentValidation.DependencyInjectionExtensions": "11.9.0",
          "MediatR": "12.2.0",
          "Microsoft.Extensions.Logging.Abstractions": "8.0.0",
          "Portfolio.Domain": "1.0.0"
        },
        "compile": {
          "bin/placeholder/Portfolio.Application.dll": {}
        },
        "runtime": {
          "bin/placeholder/Portfolio.Application.dll": {}
        }
      },
      "Portfolio.Domain/1.0.0": {
        "type": "project",
        "framework": ".NETCoreApp,Version=v8.0",
        "compile": {
          "bin/placeholder/Portfolio.Domain.dll": {}
        },
        "runtime": {
          "bin/placeholder/Portfolio.Domain.dll": {}
        }
      },
      "Portfolio.Infrastructure/1.0.0": {
        "type": "project",
        "framework": ".NETCoreApp,Version=v8.0",
        "dependencies": {
          "AutoMapper": "13.0.1",
          "MediatR": "12.2.0",
          "Microsoft.EntityFrameworkCore": "8.0.2",
          "Microsoft.Extensions.Configuration.Abstractions": "8.0.0",
          "Microsoft.Extensions.DependencyInjection.Abstractions": "8.0.0",
          "Npgsql.EntityFrameworkCore.PostgreSQL": "8.0.2",
          "Portfolio.Application": "1.0.0"
        },
        "compile": {
          "bin/placeholder/Portfolio.Infrastructure.dll": {}
        },
        "runtime": {
          "bin/placeholder/Portfolio.Infrastructure.dll": {}
        }
      }
    }
  },
  "libraries": {
    "AutoMapper/13.0.1": {
      "sha512": "/Fx1SbJ16qS7dU4i604Sle+U9VLX+WSNVJggk6MupKVkYvvBm4XqYaeFuf67diHefHKHs50uQIS2YEDFhPCakQ==",
      "type": "package",
      "path": "automapper/13.0.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "README.md",
        "automapper.13.0.1.nupkg.sha512",
        "automapper.nuspec",
        "icon.png",
        "lib/net6.0/AutoMapper.dll",
        "lib/net6.0/AutoMapper.xml"
      ]
    },
    "Castle.Core/5.1.1": {
      "sha512": "rpYtIczkzGpf+EkZgDr9CClTdemhsrwA/W5hMoPjLkRFnXzH44zDLoovXeKtmxb1ykXK9aJVODSpiJml8CTw2g==",
      "type": "package",
      "path": "castle.core/5.1.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "ASL - Apache Software Foundation License.txt",
        "CHANGELOG.md",
        "LICENSE",
        "castle-logo.png",
        "castle.core.5.1.1.nupkg.sha512",
        "castle.core.nuspec",
        "lib/net462/Castle.Core.dll",
        "lib/net462/Castle.Core.xml",
        "lib/net6.0/Castle.Core.dll",
        "lib/net6.0/Castle.Core.xml",
        "lib/netstandard2.0/Castle.Core.dll",
        "lib/netstandard2.0/Castle.Core.xml",
        "lib/netstandard2.1/Castle.Core.dll",
        "lib/netstandard2.1/Castle.Core.xml",
        "readme.txt"
      ]
    },
    "coverlet.collector/6.0.0": {
      "sha512": "tW3lsNS+dAEII6YGUX/VMoJjBS1QvsxqJeqLaJXub08y1FSjasFPtQ4UBUsudE9PNrzLjooClMsPtY2cZLdXpQ==",
      "type": "package",
      "path": "coverlet.collector/6.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "build/netstandard1.0/Microsoft.Bcl.AsyncInterfaces.dll",
        "build/netstandard1.0/Microsoft.CSharp.dll",
        "build/netstandard1.0/Microsoft.DotNet.PlatformAbstractions.dll",
        "build/netstandard1.0/Microsoft.Extensions.DependencyInjection.Abstractions.dll",
        "build/netstandard1.0/Microsoft.Extensions.DependencyInjection.dll",
        "build/netstandard1.0/Microsoft.Extensions.DependencyModel.dll",
        "build/netstandard1.0/Microsoft.Extensions.FileSystemGlobbing.dll",
        "build/netstandard1.0/Microsoft.TestPlatform.CoreUtilities.dll",
        "build/netstandard1.0/Microsoft.TestPlatform.PlatformAbstractions.dll",
        "build/netstandard1.0/Microsoft.VisualStudio.TestPlatform.ObjectModel.dll",
        "build/netstandard1.0/Mono.Cecil.Mdb.dll",
        "build/netstandard1.0/Mono.Cecil.Pdb.dll",
        "build/netstandard1.0/Mono.Cecil.Rocks.dll",
        "build/netstandard1.0/Mono.Cecil.dll",
        "build/netstandard1.0/Newtonsoft.Json.dll",
        "build/netstandard1.0/NuGet.Frameworks.dll",
        "build/netstandard1.0/System.AppContext.dll",
        "build/netstandard1.0/System.Collections.Immutable.dll",
        "build/netstandard1.0/System.Dynamic.Runtime.dll",
        "build/netstandard1.0/System.IO.FileSystem.Primitives.dll",
        "build/netstandard1.0/System.Linq.Expressions.dll",
        "build/netstandard1.0/System.Linq.dll",
        "build/netstandard1.0/System.ObjectModel.dll",
        "build/netstandard1.0/System.Reflection.Emit.ILGeneration.dll",
        "build/netstandard1.0/System.Reflection.Emit.Lightweight.dll",
        "build/netstandard1.0/System.Reflection.Emit.dll",
        "build/netstandard1.0/System.Reflection.Metadata.dll",
        "build/netstandard1.0/System.Reflection.TypeExtensions.dll",
        "build/netstandard1.0/System.Runtime.CompilerServices.Unsafe.dll",
        "build/netstandard1.0/System.Runtime.Serialization.Primitives.dll",
        "build/netstandard1.0/System.Text.RegularExpressions.dll",
        "build/netstandard1.0/System.Threading.Tasks.Extensions.dll",
        "build/netstandard1.0/System.Threading.dll",
        "build/netstandard1.0/System.Xml.ReaderWriter.dll",
        "build/netstandard1.0/System.Xml.XDocument.dll",
        "build/netstandard1.0/coverlet.collector.deps.json",
        "build/netstandard1.0/coverlet.collector.dll",
        "build/netstandard1.0/coverlet.collector.pdb",
        "build/netstandard1.0/coverlet.collector.targets",
        "build/netstandard1.0/coverlet.core.dll",
        "build/netstandard1.0/coverlet.core.pdb",
        "coverlet-icon.png",
        "coverlet.collector.6.0.0.nupkg.sha512",
        "coverlet.collector.nuspec"
      ]
    },
    "FluentAssertions/6.12.0": {
      "sha512": "ZXhHT2YwP9lajrwSKbLlFqsmCCvFJMoRSK9t7sImfnCyd0OB3MhgxdoMcVqxbq1iyxD6mD2fiackWmBb7ayiXQ==",
      "type": "package",
      "path": "fluentassertions/6.12.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "FluentAssertions.png",
        "fluentassertions.6.12.0.nupkg.sha512",
        "fluentassertions.nuspec",
        "lib/net47/FluentAssertions.dll",
        "lib/net47/FluentAssertions.pdb",
        "lib/net47/FluentAssertions.xml",
        "lib/net6.0/FluentAssertions.dll",
        "lib/net6.0/FluentAssertions.pdb",
        "lib/net6.0/FluentAssertions.xml",
        "lib/netcoreapp2.1/FluentAssertions.dll",
        "lib/netcoreapp2.1/FluentAssertions.pdb",
        "lib/netcoreapp2.1/FluentAssertions.xml",
        "lib/netcoreapp3.0/FluentAssertions.dll",
        "lib/netcoreapp3.0/FluentAssertions.pdb",
        "lib/netcoreapp3.0/FluentAssertions.xml",
        "lib/netstandard2.0/FluentAssertions.dll",
        "lib/netstandard2.0/FluentAssertions.pdb",
        "lib/netstandard2.0/FluentAssertions.xml",
        "lib/netstandard2.1/FluentAssertions.dll",
        "lib/netstandard2.1/FluentAssertions.pdb",
        "lib/netstandard2.1/FluentAssertions.xml"
      ]
    },
    "FluentValidation/11.9.0": {
      "sha512": "VneVlTvwYDkfHV5av3QrQ0amALgrLX6LV94wlYyEsh0B/klJBW7C8y2eAtj5tOZ3jH6CAVpr4s1ZGgew/QWyig==",
      "type": "package",
      "path": "fluentvalidation/11.9.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "README.md",
        "fluent-validation-icon.png",
        "fluentvalidation.11.9.0.nupkg.sha512",
        "fluentvalidation.nuspec",
        "lib/net5.0/FluentValidation.dll",
        "lib/net5.0/FluentValidation.xml",
        "lib/net6.0/FluentValidation.dll",
        "lib/net6.0/FluentValidation.xml",
        "lib/net7.0/FluentValidation.dll",
        "lib/net7.0/FluentValidation.xml",
        "lib/net8.0/FluentValidation.dll",
        "lib/net8.0/FluentValidation.xml",
        "lib/netstandard2.0/FluentValidation.dll",
        "lib/netstandard2.0/FluentValidation.xml",
        "lib/netstandard2.1/FluentValidation.dll",
        "lib/netstandard2.1/FluentValidation.xml"
      ]
    },
    "FluentValidation.DependencyInjectionExtensions/11.9.0": {
      "sha512": "Ko++xvN7HUf4WlHJL6bhsybUj/uho8ApOYIdxGjpF8Ot7Fukz6LRfRJ06H0KXhWqmMHWEbu89hJbjKJHtg7b9g==",
      "type": "package",
      "path": "fluentvalidation.dependencyinjectionextensions/11.9.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "README.md",
        "fluent-validation-icon.png",
        "fluentvalidation.dependencyinjectionextensions.11.9.0.nupkg.sha512",
        "fluentvalidation.dependencyinjectionextensions.nuspec",
        "lib/netstandard2.0/FluentValidation.DependencyInjectionExtensions.dll",
        "lib/netstandard2.0/FluentValidation.DependencyInjectionExtensions.xml",
        "lib/netstandard2.1/FluentValidation.DependencyInjectionExtensions.dll",
        "lib/netstandard2.1/FluentValidation.DependencyInjectionExtensions.xml"
      ]
    },
    "MediatR/12.2.0": {
      "sha512": "8TUFrHapKi6D74PhnSNEguRsH91HNGyP3R4ZQdgDorJgl9Wac5Prh0vA33QfrniAaS6L2xNNhc6vxzg+5AIbwA==",
      "type": "package",
      "path": "mediatr/12.2.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "gradient_128x128.png",
        "lib/net6.0/MediatR.dll",
        "lib/net6.0/MediatR.xml",
        "lib/netstandard2.0/MediatR.dll",
        "lib/netstandard2.0/MediatR.xml",
        "mediatr.12.2.0.nupkg.sha512",
        "mediatr.nuspec"
      ]
    },
    "MediatR.Contracts/2.0.1": {
      "sha512": "FYv95bNT4UwcNA+G/J1oX5OpRiSUxteXaUt2BJbRSdRNiIUNbggJF69wy6mnk2wYToaanpdXZdCwVylt96MpwQ==",
      "type": "package",
      "path": "mediatr.contracts/2.0.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "gradient_128x128.png",
        "lib/netstandard2.0/MediatR.Contracts.dll",
        "lib/netstandard2.0/MediatR.Contracts.xml",
        "mediatr.contracts.2.0.1.nupkg.sha512",
        "mediatr.contracts.nuspec"
      ]
    },
    "Microsoft.CodeCoverage/17.9.0": {
      "sha512": "RGD37ZSrratfScYXm7M0HjvxMxZyWZL4jm+XgMZbkIY1UPgjUpbNA/t+WTGj/rC/0Hm9A3IrH3ywbKZkOCnoZA==",
      "type": "package",
      "path": "microsoft.codecoverage/17.9.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE_MIT.txt",
        "ThirdPartyNotices.txt",
        "build/netstandard2.0/CodeCoverage/CodeCoverage.config",
        "build/netstandard2.0/CodeCoverage/CodeCoverage.exe",
        "build/netstandard2.0/CodeCoverage/VanguardInstrumentationProfiler_x86.config",
        "build/netstandard2.0/CodeCoverage/amd64/CodeCoverage.exe",
        "build/netstandard2.0/CodeCoverage/amd64/VanguardInstrumentationProfiler_x64.config",
        "build/netstandard2.0/CodeCoverage/amd64/covrun64.dll",
        "build/netstandard2.0/CodeCoverage/amd64/msdia140.dll",
        "build/netstandard2.0/CodeCoverage/arm64/VanguardInstrumentationProfiler_arm64.config",
        "build/netstandard2.0/CodeCoverage/arm64/covrunarm64.dll",
        "build/netstandard2.0/CodeCoverage/arm64/msdia140.dll",
        "build/netstandard2.0/CodeCoverage/codecoveragemessages.dll",
        "build/netstandard2.0/CodeCoverage/coreclr/Microsoft.VisualStudio.CodeCoverage.Shim.dll",
        "build/netstandard2.0/CodeCoverage/covrun32.dll",
        "build/netstandard2.0/CodeCoverage/msdia140.dll",
        "build/netstandard2.0/InstrumentationEngine/alpine/x64/VanguardInstrumentationProfiler_x64.config",
        "build/netstandard2.0/InstrumentationEngine/alpine/x64/libCoverageInstrumentationMethod.so",
        "build/netstandard2.0/InstrumentationEngine/alpine/x64/libInstrumentationEngine.so",
        "build/netstandard2.0/InstrumentationEngine/arm64/MicrosoftInstrumentationEngine_arm64.dll",
        "build/netstandard2.0/InstrumentationEngine/macos/x64/VanguardInstrumentationProfiler_x64.config",
        "build/netstandard2.0/InstrumentationEngine/macos/x64/libCoverageInstrumentationMethod.dylib",
        "build/netstandard2.0/InstrumentationEngine/macos/x64/libInstrumentationEngine.dylib",
        "build/netstandard2.0/InstrumentationEngine/ubuntu/x64/VanguardInstrumentationProfiler_x64.config",
        "build/netstandard2.0/InstrumentationEngine/ubuntu/x64/libCoverageInstrumentationMethod.so",
        "build/netstandard2.0/InstrumentationEngine/ubuntu/x64/libInstrumentationEngine.so",
        "build/netstandard2.0/InstrumentationEngine/x64/MicrosoftInstrumentationEngine_x64.dll",
        "build/netstandard2.0/InstrumentationEngine/x86/MicrosoftInstrumentationEngine_x86.dll",
        "build/netstandard2.0/Microsoft.CodeCoverage.Core.dll",
        "build/netstandard2.0/Microsoft.CodeCoverage.Instrumentation.dll",
        "build/netstandard2.0/Microsoft.CodeCoverage.Interprocess.dll",
        "build/netstandard2.0/Microsoft.CodeCoverage.props",
        "build/netstandard2.0/Microsoft.CodeCoverage.targets",
        "build/netstandard2.0/Microsoft.DiaSymReader.dll",
        "build/netstandard2.0/Microsoft.VisualStudio.TraceDataCollector.dll",
        "build/netstandard2.0/Mono.Cecil.Pdb.dll",
        "build/netstandard2.0/Mono.Cecil.Rocks.dll",
        "build/netstandard2.0/Mono.Cecil.dll",
        "build/netstandard2.0/ThirdPartyNotices.txt",
        "build/netstandard2.0/cs/Microsoft.VisualStudio.TraceDataCollector.resources.dll",
        "build/netstandard2.0/de/Microsoft.VisualStudio.TraceDataCollector.resources.dll",
        "build/netstandard2.0/es/Microsoft.VisualStudio.TraceDataCollector.resources.dll",
        "build/netstandard2.0/fr/Microsoft.VisualStudio.TraceDataCollector.resources.dll",
        "build/netstandard2.0/it/Microsoft.VisualStudio.TraceDataCollector.resources.dll",
        "build/netstandard2.0/ja/Microsoft.VisualStudio.TraceDataCollector.resources.dll",
        "build/netstandard2.0/ko/Microsoft.VisualStudio.TraceDataCollector.resources.dll",
        "build/netstandard2.0/pl/Microsoft.VisualStudio.TraceDataCollector.resources.dll",
        "build/netstandard2.0/pt-BR/Microsoft.VisualStudio.TraceDataCollector.resources.dll",
        "build/netstandard2.0/ru/Microsoft.VisualStudio.TraceDataCollector.resources.dll",
        "build/netstandard2.0/tr/Microsoft.VisualStudio.TraceDataCollector.resources.dll",
        "build/netstandard2.0/zh-Hans/Microsoft.VisualStudio.TraceDataCollector.resources.dll",
        "build/netstandard2.0/zh-Hant/Microsoft.VisualStudio.TraceDataCollector.resources.dll",
        "lib/net462/Microsoft.VisualStudio.CodeCoverage.Shim.dll",
        "lib/netcoreapp3.1/Microsoft.VisualStudio.CodeCoverage.Shim.dll",
        "microsoft.codecoverage.17.9.0.nupkg.sha512",
        "microsoft.codecoverage.nuspec"
      ]
    },
    "Microsoft.EntityFrameworkCore/8.0.2": {
      "sha512": "6QlvBx4rdawW3AkkCsGVV+8qRLk34aknV5JD40s1hbVR18vKmT2KDl2DW83nHcPX7f4oebQ3BD1UMNCI/gkE0g==",
      "type": "package",
      "path": "microsoft.entityframeworkcore/8.0.2",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "buildTransitive/net8.0/Microsoft.EntityFrameworkCore.props",
        "lib/net8.0/Microsoft.EntityFrameworkCore.dll",
        "lib/net8.0/Microsoft.EntityFrameworkCore.xml",
        "microsoft.entityframeworkcore.8.0.2.nupkg.sha512",
        "microsoft.entityframeworkcore.nuspec"
      ]
    },
    "Microsoft.EntityFrameworkCore.Abstractions/8.0.2": {
      "sha512": "DjDKp++BTKFZmX+xLTow7grQTY+pImKfhGW68Zf8myiL3zyJ3b8RZbnLsWGNCqKQIF6hJIz/zA/zmERobFwV0A==",
      "type": "package",
      "path": "microsoft.entityframeworkcore.abstractions/8.0.2",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "lib/net8.0/Microsoft.EntityFrameworkCore.Abstractions.dll",
        "lib/net8.0/Microsoft.EntityFrameworkCore.Abstractions.xml",
        "microsoft.entityframeworkcore.abstractions.8.0.2.nupkg.sha512",
        "microsoft.entityframeworkcore.abstractions.nuspec"
      ]
    },
    "Microsoft.EntityFrameworkCore.Analyzers/8.0.2": {
      "sha512": "LI7awhc0fiAKvcUemsqxXUWqzAH9ywTSyM1rpC1un4p5SE1bhr5nRLvyRVbKRzKakmnNNY3to8NPDnoySEkxVw==",
      "type": "package",
      "path": "microsoft.entityframeworkcore.analyzers/8.0.2",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "analyzers/dotnet/cs/Microsoft.EntityFrameworkCore.Analyzers.dll",
        "lib/netstandard2.0/_._",
        "microsoft.entityframeworkcore.analyzers.8.0.2.nupkg.sha512",
        "microsoft.entityframeworkcore.analyzers.nuspec"
      ]
    },
    "Microsoft.EntityFrameworkCore.InMemory/8.0.2": {
      "sha512": "vPpioRk+6BwQf/apqBQQ2gLL/6FMOj25L6d2lli08FmRh2W9QrnShyKhzsDAydWcH6Po69gQXgHbBQFAafmo3A==",
      "type": "package",
      "path": "microsoft.entityframeworkcore.inmemory/8.0.2",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "lib/net8.0/Microsoft.EntityFrameworkCore.InMemory.dll",
        "lib/net8.0/Microsoft.EntityFrameworkCore.InMemory.xml",
        "microsoft.entityframeworkcore.inmemory.8.0.2.nupkg.sha512",
        "microsoft.entityframeworkcore.inmemory.nuspec"
      ]
    },
    "Microsoft.EntityFrameworkCore.Relational/8.0.2": {
      "sha512": "NoGfcq2OPw0z8XAPf74YFwGlTKjedWdsIEJqq4SvKcPjcu+B+/XDDNrDRxTvILfz4Ug8POSF49s1jz1JvUqTAg==",
      "type": "package",
      "path": "microsoft.entityframeworkcore.relational/8.0.2",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "lib/net8.0/Microsoft.EntityFrameworkCore.Relational.dll",
        "lib/net8.0/Microsoft.EntityFrameworkCore.Relational.xml",
        "microsoft.entityframeworkcore.relational.8.0.2.nupkg.sha512",
        "microsoft.entityframeworkcore.relational.nuspec"
      ]
    },
    "Microsoft.Extensions.Caching.Abstractions/8.0.0": {
      "sha512": "3KuSxeHoNYdxVYfg2IRZCThcrlJ1XJqIXkAWikCsbm5C/bCjv7G0WoKDyuR98Q+T607QT2Zl5GsbGRkENcV2yQ==",
      "type": "package",
      "path": "microsoft.extensions.caching.abstractions/8.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "PACKAGE.md",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/net461/Microsoft.Extensions.Caching.Abstractions.targets",
        "buildTransitive/net462/_._",
        "buildTransitive/net6.0/_._",
        "buildTransitive/netcoreapp2.0/Microsoft.Extensions.Caching.Abstractions.targets",
        "lib/net462/Microsoft.Extensions.Caching.Abstractions.dll",
        "lib/net462/Microsoft.Extensions.Caching.Abstractions.xml",
        "lib/net6.0/Microsoft.Extensions.Caching.Abstractions.dll",
        "lib/net6.0/Microsoft.Extensions.Caching.Abstractions.xml",
        "lib/net7.0/Microsoft.Extensions.Caching.Abstractions.dll",
        "lib/net7.0/Microsoft.Extensions.Caching.Abstractions.xml",
        "lib/net8.0/Microsoft.Extensions.Caching.Abstractions.dll",
        "lib/net8.0/Microsoft.Extensions.Caching.Abstractions.xml",
        "lib/netstandard2.0/Microsoft.Extensions.Caching.Abstractions.dll",
        "lib/netstandard2.0/Microsoft.Extensions.Caching.Abstractions.xml",
        "microsoft.extensions.caching.abstractions.8.0.0.nupkg.sha512",
        "microsoft.extensions.caching.abstractions.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "Microsoft.Extensions.Caching.Memory/8.0.0": {
      "sha512": "7pqivmrZDzo1ADPkRwjy+8jtRKWRCPag9qPI+p7sgu7Q4QreWhcvbiWXsbhP+yY8XSiDvZpu2/LWdBv7PnmOpQ==",
      "type": "package",
      "path": "microsoft.extensions.caching.memory/8.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "PACKAGE.md",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/net461/Microsoft.Extensions.Caching.Memory.targets",
        "buildTransitive/net462/_._",
        "buildTransitive/net6.0/_._",
        "buildTransitive/netcoreapp2.0/Microsoft.Extensions.Caching.Memory.targets",
        "lib/net462/Microsoft.Extensions.Caching.Memory.dll",
        "lib/net462/Microsoft.Extensions.Caching.Memory.xml",
        "lib/net6.0/Microsoft.Extensions.Caching.Memory.dll",
        "lib/net6.0/Microsoft.Extensions.Caching.Memory.xml",
        "lib/net7.0/Microsoft.Extensions.Caching.Memory.dll",
        "lib/net7.0/Microsoft.Extensions.Caching.Memory.xml",
        "lib/net8.0/Microsoft.Extensions.Caching.Memory.dll",
        "lib/net8.0/Microsoft.Extensions.Caching.Memory.xml",
        "lib/netstandard2.0/Microsoft.Extensions.Caching.Memory.dll",
        "lib/netstandard2.0/Microsoft.Extensions.Caching.Memory.xml",
        "microsoft.extensions.caching.memory.8.0.0.nupkg.sha512",
        "microsoft.extensions.caching.memory.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "Microsoft.Extensions.Configuration.Abstractions/8.0.0": {
      "sha512": "3lE/iLSutpgX1CC0NOW70FJoGARRHbyKmG7dc0klnUZ9Dd9hS6N/POPWhKhMLCEuNN5nXEY5agmlFtH562vqhQ==",
      "type": "package",
      "path": "microsoft.extensions.configuration.abstractions/8.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "PACKAGE.md",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/net461/Microsoft.Extensions.Configuration.Abstractions.targets",
        "buildTransitive/net462/_._",
        "buildTransitive/net6.0/_._",
        "buildTransitive/netcoreapp2.0/Microsoft.Extensions.Configuration.Abstractions.targets",
        "lib/net462/Microsoft.Extensions.Configuration.Abstractions.dll",
        "lib/net462/Microsoft.Extensions.Configuration.Abstractions.xml",
        "lib/net6.0/Microsoft.Extensions.Configuration.Abstractions.dll",
        "lib/net6.0/Microsoft.Extensions.Configuration.Abstractions.xml",
        "lib/net7.0/Microsoft.Extensions.Configuration.Abstractions.dll",
        "lib/net7.0/Microsoft.Extensions.Configuration.Abstractions.xml",
        "lib/net8.0/Microsoft.Extensions.Configuration.Abstractions.dll",
        "lib/net8.0/Microsoft.Extensions.Configuration.Abstractions.xml",
        "lib/netstandard2.0/Microsoft.Extensions.Configuration.Abstractions.dll",
        "lib/netstandard2.0/Microsoft.Extensions.Configuration.Abstractions.xml",
        "microsoft.extensions.configuration.abstractions.8.0.0.nupkg.sha512",
        "microsoft.extensions.configuration.abstractions.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "Microsoft.Extensions.DependencyInjection/8.0.0": {
      "sha512": "V8S3bsm50ig6JSyrbcJJ8bW2b9QLGouz+G1miK3UTaOWmMtFwNNNzUf4AleyDWUmTrWMLNnFSLEQtxmxgNQnNQ==",
      "type": "package",
      "path": "microsoft.extensions.dependencyinjection/8.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "PACKAGE.md",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/net461/Microsoft.Extensions.DependencyInjection.targets",
        "buildTransitive/net462/_._",
        "buildTransitive/net6.0/_._",
        "buildTransitive/netcoreapp2.0/Microsoft.Extensions.DependencyInjection.targets",
        "lib/net462/Microsoft.Extensions.DependencyInjection.dll",
        "lib/net462/Microsoft.Extensions.DependencyInjection.xml",
        "lib/net6.0/Microsoft.Extensions.DependencyInjection.dll",
        "lib/net6.0/Microsoft.Extensions.DependencyInjection.xml",
        "lib/net7.0/Microsoft.Extensions.DependencyInjection.dll",
        "lib/net7.0/Microsoft.Extensions.DependencyInjection.xml",
        "lib/net8.0/Microsoft.Extensions.DependencyInjection.dll",
        "lib/net8.0/Microsoft.Extensions.DependencyInjection.xml",
        "lib/netstandard2.0/Microsoft.Extensions.DependencyInjection.dll",
        "lib/netstandard2.0/Microsoft.Extensions.DependencyInjection.xml",
        "lib/netstandard2.1/Microsoft.Extensions.DependencyInjection.dll",
        "lib/netstandard2.1/Microsoft.Extensions.DependencyInjection.xml",
        "microsoft.extensions.dependencyinjection.8.0.0.nupkg.sha512",
        "microsoft.extensions.dependencyinjection.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "Microsoft.Extensions.DependencyInjection.Abstractions/8.0.0": {
      "sha512": "cjWrLkJXK0rs4zofsK4bSdg+jhDLTaxrkXu4gS6Y7MAlCvRyNNgwY/lJi5RDlQOnSZweHqoyvgvbdvQsRIW+hg==",
      "type": "package",
      "path": "microsoft.extensions.dependencyinjection.abstractions/8.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "PACKAGE.md",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/net461/Microsoft.Extensions.DependencyInjection.Abstractions.targets",
        "buildTransitive/net462/_._",
        "buildTransitive/net6.0/_._",
        "buildTransitive/netcoreapp2.0/Microsoft.Extensions.DependencyInjection.Abstractions.targets",
        "lib/net462/Microsoft.Extensions.DependencyInjection.Abstractions.dll",
        "lib/net462/Microsoft.Extensions.DependencyInjection.Abstractions.xml",
        "lib/net6.0/Microsoft.Extensions.DependencyInjection.Abstractions.dll",
        "lib/net6.0/Microsoft.Extensions.DependencyInjection.Abstractions.xml",
        "lib/net7.0/Microsoft.Extensions.DependencyInjection.Abstractions.dll",
        "lib/net7.0/Microsoft.Extensions.DependencyInjection.Abstractions.xml",
        "lib/net8.0/Microsoft.Extensions.DependencyInjection.Abstractions.dll",
        "lib/net8.0/Microsoft.Extensions.DependencyInjection.Abstractions.xml",
        "lib/netstandard2.0/Microsoft.Extensions.DependencyInjection.Abstractions.dll",
        "lib/netstandard2.0/Microsoft.Extensions.DependencyInjection.Abstractions.xml",
        "lib/netstandard2.1/Microsoft.Extensions.DependencyInjection.Abstractions.dll",
        "lib/netstandard2.1/Microsoft.Extensions.DependencyInjection.Abstractions.xml",
        "microsoft.extensions.dependencyinjection.abstractions.8.0.0.nupkg.sha512",
        "microsoft.extensions.dependencyinjection.abstractions.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "Microsoft.Extensions.Logging/8.0.0": {
      "sha512": "tvRkov9tAJ3xP51LCv3FJ2zINmv1P8Hi8lhhtcKGqM+ImiTCC84uOPEI4z8Cdq2C3o9e+Aa0Gw0rmrsJD77W+w==",
      "type": "package",
      "path": "microsoft.extensions.logging/8.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "PACKAGE.md",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/net461/Microsoft.Extensions.Logging.targets",
        "buildTransitive/net462/_._",
        "buildTransitive/net6.0/_._",
        "buildTransitive/netcoreapp2.0/Microsoft.Extensions.Logging.targets",
        "lib/net462/Microsoft.Extensions.Logging.dll",
        "lib/net462/Microsoft.Extensions.Logging.xml",
        "lib/net6.0/Microsoft.Extensions.Logging.dll",
        "lib/net6.0/Microsoft.Extensions.Logging.xml",
        "lib/net7.0/Microsoft.Extensions.Logging.dll",
        "lib/net7.0/Microsoft.Extensions.Logging.xml",
        "lib/net8.0/Microsoft.Extensions.Logging.dll",
        "lib/net8.0/Microsoft.Extensions.Logging.xml",
        "lib/netstandard2.0/Microsoft.Extensions.Logging.dll",
        "lib/netstandard2.0/Microsoft.Extensions.Logging.xml",
        "lib/netstandard2.1/Microsoft.Extensions.Logging.dll",
        "lib/netstandard2.1/Microsoft.Extensions.Logging.xml",
        "microsoft.extensions.logging.8.0.0.nupkg.sha512",
        "microsoft.extensions.logging.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "Microsoft.Extensions.Logging.Abstractions/8.0.0": {
      "sha512": "arDBqTgFCyS0EvRV7O3MZturChstm50OJ0y9bDJvAcmEPJm0FFpFyjU/JLYyStNGGey081DvnQYlncNX5SJJGA==",
      "type": "package",
      "path": "microsoft.extensions.logging.abstractions/8.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "PACKAGE.md",
        "THIRD-PARTY-NOTICES.TXT",
        "analyzers/dotnet/roslyn3.11/cs/Microsoft.Extensions.Logging.Generators.dll",
        "analyzers/dotnet/roslyn3.11/cs/cs/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/de/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/es/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/fr/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/it/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/ja/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/ko/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/pl/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/pt-BR/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/ru/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/tr/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/zh-Hans/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn3.11/cs/zh-Hant/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/Microsoft.Extensions.Logging.Generators.dll",
        "analyzers/dotnet/roslyn4.0/cs/cs/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/de/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/es/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/fr/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/it/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/ja/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/ko/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/pl/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/pt-BR/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/ru/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/tr/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/zh-Hans/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.0/cs/zh-Hant/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/Microsoft.Extensions.Logging.Generators.dll",
        "analyzers/dotnet/roslyn4.4/cs/cs/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/de/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/es/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/fr/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/it/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/ja/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/ko/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/pl/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/pt-BR/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/ru/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/tr/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/zh-Hans/Microsoft.Extensions.Logging.Generators.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/zh-Hant/Microsoft.Extensions.Logging.Generators.resources.dll",
        "buildTransitive/net461/Microsoft.Extensions.Logging.Abstractions.targets",
        "buildTransitive/net462/Microsoft.Extensions.Logging.Abstractions.targets",
        "buildTransitive/net6.0/Microsoft.Extensions.Logging.Abstractions.targets",
        "buildTransitive/netcoreapp2.0/Microsoft.Extensions.Logging.Abstractions.targets",
        "buildTransitive/netstandard2.0/Microsoft.Extensions.Logging.Abstractions.targets",
        "lib/net462/Microsoft.Extensions.Logging.Abstractions.dll",
        "lib/net462/Microsoft.Extensions.Logging.Abstractions.xml",
        "lib/net6.0/Microsoft.Extensions.Logging.Abstractions.dll",
        "lib/net6.0/Microsoft.Extensions.Logging.Abstractions.xml",
        "lib/net7.0/Microsoft.Extensions.Logging.Abstractions.dll",
        "lib/net7.0/Microsoft.Extensions.Logging.Abstractions.xml",
        "lib/net8.0/Microsoft.Extensions.Logging.Abstractions.dll",
        "lib/net8.0/Microsoft.Extensions.Logging.Abstractions.xml",
        "lib/netstandard2.0/Microsoft.Extensions.Logging.Abstractions.dll",
        "lib/netstandard2.0/Microsoft.Extensions.Logging.Abstractions.xml",
        "microsoft.extensions.logging.abstractions.8.0.0.nupkg.sha512",
        "microsoft.extensions.logging.abstractions.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "Microsoft.Extensions.Options/8.0.0": {
      "sha512": "JOVOfqpnqlVLUzINQ2fox8evY2SKLYJ3BV8QDe/Jyp21u1T7r45x/R/5QdteURMR5r01GxeJSBBUOCOyaNXA3g==",
      "type": "package",
      "path": "microsoft.extensions.options/8.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "PACKAGE.md",
        "THIRD-PARTY-NOTICES.TXT",
        "analyzers/dotnet/roslyn4.4/cs/Microsoft.Extensions.Options.SourceGeneration.dll",
        "analyzers/dotnet/roslyn4.4/cs/cs/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/de/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/es/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/fr/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/it/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/ja/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/ko/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/pl/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/pt-BR/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/ru/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/tr/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/zh-Hans/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "analyzers/dotnet/roslyn4.4/cs/zh-Hant/Microsoft.Extensions.Options.SourceGeneration.resources.dll",
        "buildTransitive/net461/Microsoft.Extensions.Options.targets",
        "buildTransitive/net462/Microsoft.Extensions.Options.targets",
        "buildTransitive/net6.0/Microsoft.Extensions.Options.targets",
        "buildTransitive/netcoreapp2.0/Microsoft.Extensions.Options.targets",
        "buildTransitive/netstandard2.0/Microsoft.Extensions.Options.targets",
        "lib/net462/Microsoft.Extensions.Options.dll",
        "lib/net462/Microsoft.Extensions.Options.xml",
        "lib/net6.0/Microsoft.Extensions.Options.dll",
        "lib/net6.0/Microsoft.Extensions.Options.xml",
        "lib/net7.0/Microsoft.Extensions.Options.dll",
        "lib/net7.0/Microsoft.Extensions.Options.xml",
        "lib/net8.0/Microsoft.Extensions.Options.dll",
        "lib/net8.0/Microsoft.Extensions.Options.xml",
        "lib/netstandard2.0/Microsoft.Extensions.Options.dll",
        "lib/netstandard2.0/Microsoft.Extensions.Options.xml",
        "lib/netstandard2.1/Microsoft.Extensions.Options.dll",
        "lib/netstandard2.1/Microsoft.Extensions.Options.xml",
        "microsoft.extensions.options.8.0.0.nupkg.sha512",
        "microsoft.extensions.options.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "Microsoft.Extensions.Primitives/8.0.0": {
      "sha512": "bXJEZrW9ny8vjMF1JV253WeLhpEVzFo1lyaZu1vQ4ZxWUlVvknZ/+ftFgVheLubb4eZPSwwxBeqS1JkCOjxd8g==",
      "type": "package",
      "path": "microsoft.extensions.primitives/8.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "PACKAGE.md",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/net461/Microsoft.Extensions.Primitives.targets",
        "buildTransitive/net462/_._",
        "buildTransitive/net6.0/_._",
        "buildTransitive/netcoreapp2.0/Microsoft.Extensions.Primitives.targets",
        "lib/net462/Microsoft.Extensions.Primitives.dll",
        "lib/net462/Microsoft.Extensions.Primitives.xml",
        "lib/net6.0/Microsoft.Extensions.Primitives.dll",
        "lib/net6.0/Microsoft.Extensions.Primitives.xml",
        "lib/net7.0/Microsoft.Extensions.Primitives.dll",
        "lib/net7.0/Microsoft.Extensions.Primitives.xml",
        "lib/net8.0/Microsoft.Extensions.Primitives.dll",
        "lib/net8.0/Microsoft.Extensions.Primitives.xml",
        "lib/netstandard2.0/Microsoft.Extensions.Primitives.dll",
        "lib/netstandard2.0/Microsoft.Extensions.Primitives.xml",
        "microsoft.extensions.primitives.8.0.0.nupkg.sha512",
        "microsoft.extensions.primitives.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "Microsoft.NET.Test.Sdk/17.9.0": {
      "sha512": "7GUNAUbJYn644jzwLm5BD3a2p9C1dmP8Hr6fDPDxgItQk9hBs1Svdxzz07KQ/UphMSmgza9AbijBJGmw5D658A==",
      "type": "package",
      "path": "microsoft.net.test.sdk/17.9.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE_MIT.txt",
        "build/net462/Microsoft.NET.Test.Sdk.props",
        "build/net462/Microsoft.NET.Test.Sdk.targets",
        "build/netcoreapp3.1/Microsoft.NET.Test.Sdk.Program.cs",
        "build/netcoreapp3.1/Microsoft.NET.Test.Sdk.Program.fs",
        "build/netcoreapp3.1/Microsoft.NET.Test.Sdk.Program.vb",
        "build/netcoreapp3.1/Microsoft.NET.Test.Sdk.props",
        "build/netcoreapp3.1/Microsoft.NET.Test.Sdk.targets",
        "buildMultiTargeting/Microsoft.NET.Test.Sdk.props",
        "lib/net462/_._",
        "lib/netcoreapp3.1/_._",
        "microsoft.net.test.sdk.17.9.0.nupkg.sha512",
        "microsoft.net.test.sdk.nuspec"
      ]
    },
    "Microsoft.TestPlatform.ObjectModel/17.9.0": {
      "sha512": "1ilw/8vgmjLyKU+2SKXKXaOqpYFJCQfGqGz+x0cosl981VzjrY74Sv6qAJv+neZMZ9ZMxF3ArN6kotaQ4uvEBw==",
      "type": "package",
      "path": "microsoft.testplatform.objectmodel/17.9.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE_MIT.txt",
        "lib/net462/Microsoft.TestPlatform.CoreUtilities.dll",
        "lib/net462/Microsoft.TestPlatform.PlatformAbstractions.dll",
        "lib/net462/Microsoft.VisualStudio.TestPlatform.ObjectModel.dll",
        "lib/net462/cs/Microsoft.TestPlatform.CoreUtilities.resources.dll",
        "lib/net462/cs/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll",
        "lib/net462/de/Microsoft.TestPlatform.CoreUtilities.resources.dll",
        "lib/net462/de/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll",
        "lib/net462/es/Microsoft.TestPlatform.CoreUtilities.resources.dll",
        "lib/net462/es/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll",
        "lib/net462/fr/Microsoft.TestPlatform.CoreUtilities.resources.dll",
        "lib/net462/fr/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll",
        "lib/net462/it/Microsoft.TestPlatform.CoreUtilities.resources.dll",
        "lib/net462/it/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll",
        "lib/net462/ja/Microsoft.TestPlatform.CoreUtilities.resources.dll",
        "lib/net462/ja/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll",
        "lib/net462/ko/Microsoft.TestPlatform.CoreUtilities.resources.dll",
        "lib/net462/ko/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll",
        "lib/net462/pl/Microsoft.TestPlatform.CoreUtilities.resources.dll",
        "lib/net462/pl/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll",
        "lib/net462/pt-BR/Microsoft.TestPlatform.CoreUtilities.resources.dll",
        "lib/net462/pt-BR/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll",
        "lib/net462/ru/Microsoft.TestPlatform.CoreUtilities.resources.dll",
        "lib/net462/ru/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll",
        "lib/net462/tr/Microsoft.TestPlatform.CoreUtilities.resources.dll",
        "lib/net462/tr/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll",
        "lib/net462/zh-Hans/Microsoft.TestPlatform.CoreUtilities.resources.dll",
        "lib/net462/zh-Hans/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll",
        "lib/net462/zh-Hant/Microsoft.TestPlatform.CoreUtilities.resources.dll",
        "lib/net462/zh-Hant/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll",
        "lib/netcoreapp3.1/Microsoft.TestPlatform.CoreUtilities.dll",
        "lib/netcoreapp3.1/Microsoft.TestPlatform.PlatformAbstractions.dll",
        "lib/netcoreapp3.1/Microsoft.VisualStudio.TestPlatform.ObjectModel.dll",
        "lib/netcoreapp3.1/cs/Microsoft.TestPlatform.CoreUtilities.resources.dll",
        "lib/netcoreapp3.1/cs/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll",
        "lib/netcoreapp3.1/de/Microsoft.TestPlatform.CoreUtilities.resources.dll",
        "lib/netcoreapp3.1/de/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll",
        "lib/netcoreapp3.1/es/Microsoft.TestPlatform.CoreUtilities.resources.dll",
        "lib/netcoreapp3.1/es/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll",
        "lib/netcoreapp3.1/fr/Microsoft.TestPlatform.CoreUtilities.resources.dll",
        "lib/netcoreapp3.1/fr/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll",
        "lib/netcoreapp3.1/it/Microsoft.TestPlatform.CoreUtilities.resources.dll",
        "lib/netcoreapp3.1/it/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll",
        "lib/netcoreapp3.1/ja/Microsoft.TestPlatform.CoreUtilities.resources.dll",
        "lib/netcoreapp3.1/ja/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll",
        "lib/netcoreapp3.1/ko/Microsoft.TestPlatform.CoreUtilities.resources.dll",
        "lib/netcoreapp3.1/ko/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll",
        "lib/netcoreapp3.1/pl/Microsoft.TestPlatform.CoreUtilities.resources.dll",
        "lib/netcoreapp3.1/pl/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll",
        "lib/netcoreapp3.1/pt-BR/Microsoft.TestPlatform.CoreUtilities.resources.dll",
        "lib/netcoreapp3.1/pt-BR/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll",
        "lib/netcoreapp3.1/ru/Microsoft.TestPlatform.CoreUtilities.resources.dll",
        "lib/netcoreapp3.1/ru/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll",
        "lib/netcoreapp3.1/tr/Microsoft.TestPlatform.CoreUtilities.resources.dll",
        "lib/netcoreapp3.1/tr/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll",
        "lib/netcoreapp3.1/zh-Hans/Microsoft.TestPlatform.CoreUtilities.resources.dll",
        "lib/netcoreapp3.1/zh-Hans/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll",
        "lib/netcoreapp3.1/zh-Hant/Microsoft.TestPlatform.CoreUtilities.resources.dll",
        "lib/netcoreapp3.1/zh-Hant/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll",
        "lib/netstandard2.0/Microsoft.TestPlatform.CoreUtilities.dll",
        "lib/netstandard2.0/Microsoft.TestPlatform.PlatformAbstractions.dll",
        "lib/netstandard2.0/Microsoft.VisualStudio.TestPlatform.ObjectModel.dll",
        "lib/netstandard2.0/cs/Microsoft.TestPlatform.CoreUtilities.resources.dll",
        "lib/netstandard2.0/cs/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll",
        "lib/netstandard2.0/de/Microsoft.TestPlatform.CoreUtilities.resources.dll",
        "lib/netstandard2.0/de/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll",
        "lib/netstandard2.0/es/Microsoft.TestPlatform.CoreUtilities.resources.dll",
        "lib/netstandard2.0/es/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll",
        "lib/netstandard2.0/fr/Microsoft.TestPlatform.CoreUtilities.resources.dll",
        "lib/netstandard2.0/fr/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll",
        "lib/netstandard2.0/it/Microsoft.TestPlatform.CoreUtilities.resources.dll",
        "lib/netstandard2.0/it/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll",
        "lib/netstandard2.0/ja/Microsoft.TestPlatform.CoreUtilities.resources.dll",
        "lib/netstandard2.0/ja/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll",
        "lib/netstandard2.0/ko/Microsoft.TestPlatform.CoreUtilities.resources.dll",
        "lib/netstandard2.0/ko/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll",
        "lib/netstandard2.0/pl/Microsoft.TestPlatform.CoreUtilities.resources.dll",
        "lib/netstandard2.0/pl/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll",
        "lib/netstandard2.0/pt-BR/Microsoft.TestPlatform.CoreUtilities.resources.dll",
        "lib/netstandard2.0/pt-BR/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll",
        "lib/netstandard2.0/ru/Microsoft.TestPlatform.CoreUtilities.resources.dll",
        "lib/netstandard2.0/ru/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll",
        "lib/netstandard2.0/tr/Microsoft.TestPlatform.CoreUtilities.resources.dll",
        "lib/netstandard2.0/tr/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll",
        "lib/netstandard2.0/zh-Hans/Microsoft.TestPlatform.CoreUtilities.resources.dll",
        "lib/netstandard2.0/zh-Hans/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll",
        "lib/netstandard2.0/zh-Hant/Microsoft.TestPlatform.CoreUtilities.resources.dll",
        "lib/netstandard2.0/zh-Hant/Microsoft.VisualStudio.TestPlatform.ObjectModel.resources.dll",
        "microsoft.testplatform.objectmodel.17.9.0.nupkg.sha512",
        "microsoft.testplatform.objectmodel.nuspec"
      ]
    },
    "Microsoft.TestPlatform.TestHost/17.9.0": {
      "sha512": "Spmg7Wx49Ya3SxBjyeAR+nQpjMTKZwTwpZ7KyeOTIqI/WHNPnBU4HUvl5kuHPQAwGWqMy4FGZja1HvEwvoaDiA==",
      "type": "package",
      "path": "microsoft.testplatform.testhost/17.9.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE_MIT.txt",
        "ThirdPartyNotices.txt",
        "build/netcoreapp3.1/Microsoft.TestPlatform.TestHost.props",
        "build/netcoreapp3.1/x64/testhost.dll",
        "build/netcoreapp3.1/x64/testhost.exe",
        "build/netcoreapp3.1/x86/testhost.x86.dll",
        "build/netcoreapp3.1/x86/testhost.x86.exe",
        "lib/net462/_._",
        "lib/netcoreapp3.1/Microsoft.TestPlatform.CommunicationUtilities.dll",
        "lib/netcoreapp3.1/Microsoft.TestPlatform.CoreUtilities.dll",
        "lib/netcoreapp3.1/Microsoft.TestPlatform.CrossPlatEngine.dll",
        "lib/netcoreapp3.1/Microsoft.TestPlatform.PlatformAbstractions.dll",
        "lib/netcoreapp3.1/Microsoft.TestPlatform.Utilities.dll",
        "lib/netcoreapp3.1/Microsoft.VisualStudio.TestPlatform.Common.dll",
        "lib/netcoreapp3.1/Microsoft.VisualStudio.TestPlatform.ObjectModel.dll",
        "lib/netcoreapp3.1/cs/Microsoft.TestPlatform.CommunicationUtilities.resources.dll",
        "lib/netcoreapp3.1/cs/Microsoft.TestPlatform.CrossPlatEngine.resources.dll",
        "lib/netcoreapp3.1/cs/Microsoft.VisualStudio.TestPlatform.Common.resources.dll",
        "lib/netcoreapp3.1/de/Microsoft.TestPlatform.CommunicationUtilities.resources.dll",
        "lib/netcoreapp3.1/de/Microsoft.TestPlatform.CrossPlatEngine.resources.dll",
        "lib/netcoreapp3.1/de/Microsoft.VisualStudio.TestPlatform.Common.resources.dll",
        "lib/netcoreapp3.1/es/Microsoft.TestPlatform.CommunicationUtilities.resources.dll",
        "lib/netcoreapp3.1/es/Microsoft.TestPlatform.CrossPlatEngine.resources.dll",
        "lib/netcoreapp3.1/es/Microsoft.VisualStudio.TestPlatform.Common.resources.dll",
        "lib/netcoreapp3.1/fr/Microsoft.TestPlatform.CommunicationUtilities.resources.dll",
        "lib/netcoreapp3.1/fr/Microsoft.TestPlatform.CrossPlatEngine.resources.dll",
        "lib/netcoreapp3.1/fr/Microsoft.VisualStudio.TestPlatform.Common.resources.dll",
        "lib/netcoreapp3.1/it/Microsoft.TestPlatform.CommunicationUtilities.resources.dll",
        "lib/netcoreapp3.1/it/Microsoft.TestPlatform.CrossPlatEngine.resources.dll",
        "lib/netcoreapp3.1/it/Microsoft.VisualStudio.TestPlatform.Common.resources.dll",
        "lib/netcoreapp3.1/ja/Microsoft.TestPlatform.CommunicationUtilities.resources.dll",
        "lib/netcoreapp3.1/ja/Microsoft.TestPlatform.CrossPlatEngine.resources.dll",
        "lib/netcoreapp3.1/ja/Microsoft.VisualStudio.TestPlatform.Common.resources.dll",
        "lib/netcoreapp3.1/ko/Microsoft.TestPlatform.CommunicationUtilities.resources.dll",
        "lib/netcoreapp3.1/ko/Microsoft.TestPlatform.CrossPlatEngine.resources.dll",
        "lib/netcoreapp3.1/ko/Microsoft.VisualStudio.TestPlatform.Common.resources.dll",
        "lib/netcoreapp3.1/pl/Microsoft.TestPlatform.CommunicationUtilities.resources.dll",
        "lib/netcoreapp3.1/pl/Microsoft.TestPlatform.CrossPlatEngine.resources.dll",
        "lib/netcoreapp3.1/pl/Microsoft.VisualStudio.TestPlatform.Common.resources.dll",
        "lib/netcoreapp3.1/pt-BR/Microsoft.TestPlatform.CommunicationUtilities.resources.dll",
        "lib/netcoreapp3.1/pt-BR/Microsoft.TestPlatform.CrossPlatEngine.resources.dll",
        "lib/netcoreapp3.1/pt-BR/Microsoft.VisualStudio.TestPlatform.Common.resources.dll",
        "lib/netcoreapp3.1/ru/Microsoft.TestPlatform.CommunicationUtilities.resources.dll",
        "lib/netcoreapp3.1/ru/Microsoft.TestPlatform.CrossPlatEngine.resources.dll",
        "lib/netcoreapp3.1/ru/Microsoft.VisualStudio.TestPlatform.Common.resources.dll",
        "lib/netcoreapp3.1/testhost.deps.json",
        "lib/netcoreapp3.1/testhost.dll",
        "lib/netcoreapp3.1/tr/Microsoft.TestPlatform.CommunicationUtilities.resources.dll",
        "lib/netcoreapp3.1/tr/Microsoft.TestPlatform.CrossPlatEngine.resources.dll",
        "lib/netcoreapp3.1/tr/Microsoft.VisualStudio.TestPlatform.Common.resources.dll",
        "lib/netcoreapp3.1/x64/msdia140.dll",
        "lib/netcoreapp3.1/x86/msdia140.dll",
        "lib/netcoreapp3.1/zh-Hans/Microsoft.TestPlatform.CommunicationUtilities.resources.dll",
        "lib/netcoreapp3.1/zh-Hans/Microsoft.TestPlatform.CrossPlatEngine.resources.dll",
        "lib/netcoreapp3.1/zh-Hans/Microsoft.VisualStudio.TestPlatform.Common.resources.dll",
        "lib/netcoreapp3.1/zh-Hant/Microsoft.TestPlatform.CommunicationUtilities.resources.dll",
        "lib/netcoreapp3.1/zh-Hant/Microsoft.TestPlatform.CrossPlatEngine.resources.dll",
        "lib/netcoreapp3.1/zh-Hant/Microsoft.VisualStudio.TestPlatform.Common.resources.dll",
        "microsoft.testplatform.testhost.17.9.0.nupkg.sha512",
        "microsoft.testplatform.testhost.nuspec"
      ]
    },
    "Moq/4.20.70": {
      "sha512": "4rNnAwdpXJBuxqrOCzCyICXHSImOTRktCgCWXWykuF1qwoIsVvEnR7PjbMk/eLOxWvhmj5Kwt+kDV3RGUYcNwg==",
      "type": "package",
      "path": "moq/4.20.70",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "icon.png",
        "lib/net462/Moq.dll",
        "lib/net462/Moq.xml",
        "lib/net6.0/Moq.dll",
        "lib/net6.0/Moq.xml",
        "lib/netstandard2.0/Moq.dll",
        "lib/netstandard2.0/Moq.xml",
        "lib/netstandard2.1/Moq.dll",
        "lib/netstandard2.1/Moq.xml",
        "moq.4.20.70.nupkg.sha512",
        "moq.nuspec",
        "readme.md"
      ]
    },
    "Newtonsoft.Json/13.0.1": {
      "sha512": "ppPFpBcvxdsfUonNcvITKqLl3bqxWbDCZIzDWHzjpdAHRFfZe0Dw9HmA0+za13IdyrgJwpkDTDA9fHaxOrt20A==",
      "type": "package",
      "path": "newtonsoft.json/13.0.1",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "LICENSE.md",
        "lib/net20/Newtonsoft.Json.dll",
        "lib/net20/Newtonsoft.Json.xml",
        "lib/net35/Newtonsoft.Json.dll",
        "lib/net35/Newtonsoft.Json.xml",
        "lib/net40/Newtonsoft.Json.dll",
        "lib/net40/Newtonsoft.Json.xml",
        "lib/net45/Newtonsoft.Json.dll",
        "lib/net45/Newtonsoft.Json.xml",
        "lib/netstandard1.0/Newtonsoft.Json.dll",
        "lib/netstandard1.0/Newtonsoft.Json.xml",
        "lib/netstandard1.3/Newtonsoft.Json.dll",
        "lib/netstandard1.3/Newtonsoft.Json.xml",
        "lib/netstandard2.0/Newtonsoft.Json.dll",
        "lib/netstandard2.0/Newtonsoft.Json.xml",
        "newtonsoft.json.13.0.1.nupkg.sha512",
        "newtonsoft.json.nuspec",
        "packageIcon.png"
      ]
    },
    "Npgsql/8.0.2": {
      "sha512": "MuJzLoWCaQhQAR3oh66YR0Ir6mxuezncGX3f8wxvAc21g0+9HICktJQlqMoODhxztZKXE5k9GxRxqUAN+vPb4g==",
      "type": "package",
      "path": "npgsql/8.0.2",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "README.md",
        "lib/net6.0/Npgsql.dll",
        "lib/net6.0/Npgsql.xml",
        "lib/net7.0/Npgsql.dll",
        "lib/net7.0/Npgsql.xml",
        "lib/net8.0/Npgsql.dll",
        "lib/net8.0/Npgsql.xml",
        "lib/netstandard2.0/Npgsql.dll",
        "lib/netstandard2.0/Npgsql.xml",
        "lib/netstandard2.1/Npgsql.dll",
        "lib/netstandard2.1/Npgsql.xml",
        "npgsql.8.0.2.nupkg.sha512",
        "npgsql.nuspec",
        "postgresql.png"
      ]
    },
    "Npgsql.EntityFrameworkCore.PostgreSQL/8.0.2": {
      "sha512": "eoZPynwkZTWFTgnocvXORuCL2yFZtscrUdqVhjxiRULpC7BMg9zhLM5oDZAU5PoX1PgN77hmkKE4a3PQiHqh7Q==",
      "type": "package",
      "path": "npgsql.entityframeworkcore.postgresql/8.0.2",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "README.md",
        "lib/net8.0/Npgsql.EntityFrameworkCore.PostgreSQL.dll",
        "lib/net8.0/Npgsql.EntityFrameworkCore.PostgreSQL.xml",
        "npgsql.entityframeworkcore.postgresql.8.0.2.nupkg.sha512",
        "npgsql.entityframeworkcore.postgresql.nuspec",
        "postgresql.png"
      ]
    },
    "System.Configuration.ConfigurationManager/4.4.0": {
      "sha512": "gWwQv/Ug1qWJmHCmN17nAbxJYmQBM/E94QxKLksvUiiKB1Ld3Sc/eK1lgmbSjDFxkQhVuayI/cGFZhpBSodLrg==",
      "type": "package",
      "path": "system.configuration.configurationmanager/4.4.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "LICENSE.TXT",
        "THIRD-PARTY-NOTICES.TXT",
        "lib/net461/System.Configuration.ConfigurationManager.dll",
        "lib/netstandard2.0/System.Configuration.ConfigurationManager.dll",
        "ref/net461/System.Configuration.ConfigurationManager.dll",
        "ref/net461/System.Configuration.ConfigurationManager.xml",
        "ref/netstandard2.0/System.Configuration.ConfigurationManager.dll",
        "ref/netstandard2.0/System.Configuration.ConfigurationManager.xml",
        "system.configuration.configurationmanager.4.4.0.nupkg.sha512",
        "system.configuration.configurationmanager.nuspec",
        "useSharedDesignerContext.txt",
        "version.txt"
      ]
    },
    "System.Diagnostics.EventLog/6.0.0": {
      "sha512": "lcyUiXTsETK2ALsZrX+nWuHSIQeazhqPphLfaRxzdGaG93+0kELqpgEHtwWOlQe7+jSFnKwaCAgL4kjeZCQJnw==",
      "type": "package",
      "path": "system.diagnostics.eventlog/6.0.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "Icon.png",
        "LICENSE.TXT",
        "THIRD-PARTY-NOTICES.TXT",
        "buildTransitive/netcoreapp2.0/System.Diagnostics.EventLog.targets",
        "buildTransitive/netcoreapp3.1/_._",
        "lib/net461/System.Diagnostics.EventLog.dll",
        "lib/net461/System.Diagnostics.EventLog.xml",
        "lib/net6.0/System.Diagnostics.EventLog.dll",
        "lib/net6.0/System.Diagnostics.EventLog.xml",
        "lib/netcoreapp3.1/System.Diagnostics.EventLog.dll",
        "lib/netcoreapp3.1/System.Diagnostics.EventLog.xml",
        "lib/netstandard2.0/System.Diagnostics.EventLog.dll",
        "lib/netstandard2.0/System.Diagnostics.EventLog.xml",
        "runtimes/win/lib/net6.0/System.Diagnostics.EventLog.Messages.dll",
        "runtimes/win/lib/net6.0/System.Diagnostics.EventLog.dll",
        "runtimes/win/lib/net6.0/System.Diagnostics.EventLog.xml",
        "runtimes/win/lib/netcoreapp3.1/System.Diagnostics.EventLog.Messages.dll",
        "runtimes/win/lib/netcoreapp3.1/System.Diagnostics.EventLog.dll",
        "runtimes/win/lib/netcoreapp3.1/System.Diagnostics.EventLog.xml",
        "system.diagnostics.eventlog.6.0.0.nupkg.sha512",
        "system.diagnostics.eventlog.nuspec",
        "useSharedDesignerContext.txt"
      ]
    },
    "System.Reflection.Metadata/1.6.0": {
      "sha512": "COC1aiAJjCoA5GBF+QKL2uLqEBew4JsCkQmoHKbN3TlOZKa2fKLz5CpiRQKDz0RsAOEGsVKqOD5bomsXq/4STQ==",
      "type": "package",
      "path": "system.reflection.metadata/1.6.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "LICENSE.TXT",
        "THIRD-PARTY-NOTICES.TXT",
        "lib/netstandard1.1/System.Reflection.Metadata.dll",
        "lib/netstandard1.1/System.Reflection.Metadata.xml",
        "lib/netstandard2.0/System.Reflection.Metadata.dll",
        "lib/netstandard2.0/System.Reflection.Metadata.xml",
        "lib/portable-net45+win8/System.Reflection.Metadata.dll",
        "lib/portable-net45+win8/System.Reflection.Metadata.xml",
        "system.reflection.metadata.1.6.0.nupkg.sha512",
        "system.reflection.metadata.nuspec",
        "useSharedDesignerContext.txt",
        "version.txt"
      ]
    },
    "System.Security.Cryptography.ProtectedData/4.4.0": {
      "sha512": "cJV7ScGW7EhatRsjehfvvYVBvtiSMKgN8bOVI0bQhnF5bU7vnHVIsH49Kva7i7GWaWYvmEzkYVk1TC+gZYBEog==",
      "type": "package",
      "path": "system.security.cryptography.protecteddata/4.4.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "LICENSE.TXT",
        "THIRD-PARTY-NOTICES.TXT",
        "lib/MonoAndroid10/_._",
        "lib/MonoTouch10/_._",
        "lib/net46/System.Security.Cryptography.ProtectedData.dll",
        "lib/net461/System.Security.Cryptography.ProtectedData.dll",
        "lib/netstandard1.3/System.Security.Cryptography.ProtectedData.dll",
        "lib/netstandard2.0/System.Security.Cryptography.ProtectedData.dll",
        "lib/xamarinios10/_._",
        "lib/xamarinmac20/_._",
        "lib/xamarintvos10/_._",
        "lib/xamarinwatchos10/_._",
        "ref/MonoAndroid10/_._",
        "ref/MonoTouch10/_._",
        "ref/net46/System.Security.Cryptography.ProtectedData.dll",
        "ref/net461/System.Security.Cryptography.ProtectedData.dll",
        "ref/net461/System.Security.Cryptography.ProtectedData.xml",
        "ref/netstandard1.3/System.Security.Cryptography.ProtectedData.dll",
        "ref/netstandard2.0/System.Security.Cryptography.ProtectedData.dll",
        "ref/netstandard2.0/System.Security.Cryptography.ProtectedData.xml",
        "ref/xamarinios10/_._",
        "ref/xamarinmac20/_._",
        "ref/xamarintvos10/_._",
        "ref/xamarinwatchos10/_._",
        "runtimes/win/lib/net46/System.Security.Cryptography.ProtectedData.dll",
        "runtimes/win/lib/net461/System.Security.Cryptography.ProtectedData.dll",
        "runtimes/win/lib/netstandard1.3/System.Security.Cryptography.ProtectedData.dll",
        "runtimes/win/lib/netstandard2.0/System.Security.Cryptography.ProtectedData.dll",
        "system.security.cryptography.protecteddata.4.4.0.nupkg.sha512",
        "system.security.cryptography.protecteddata.nuspec",
        "useSharedDesignerContext.txt",
        "version.txt"
      ]
    },
    "xunit/2.7.0": {
      "sha512": "KcCI5zxh8zbUfQTeErc4oT7YokViVND2V0p4vDJ2VD4lhF9V5qCYMMDNixme7FdwYy3SwPHF+2xC2Dq4Z9GSlA==",
      "type": "package",
      "path": "xunit/2.7.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "_content/README.md",
        "_content/logo-128-transparent.png",
        "xunit.2.7.0.nupkg.sha512",
        "xunit.nuspec"
      ]
    },
    "xunit.abstractions/2.0.3": {
      "sha512": "pot1I4YOxlWjIb5jmwvvQNbTrZ3lJQ+jUGkGjWE3hEFM0l5gOnBWS+H3qsex68s5cO52g+44vpGzhAt+42vwKg==",
      "type": "package",
      "path": "xunit.abstractions/2.0.3",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "lib/net35/xunit.abstractions.dll",
        "lib/net35/xunit.abstractions.xml",
        "lib/netstandard1.0/xunit.abstractions.dll",
        "lib/netstandard1.0/xunit.abstractions.xml",
        "lib/netstandard2.0/xunit.abstractions.dll",
        "lib/netstandard2.0/xunit.abstractions.xml",
        "xunit.abstractions.2.0.3.nupkg.sha512",
        "xunit.abstractions.nuspec"
      ]
    },
    "xunit.analyzers/1.11.0": {
      "sha512": "SCv+Ihxv+fCqotGeM8sVwLhw8nzAJ2aFRN5lcoKn9QtGdbVJ79JqDc+4u8/Ddnp2udxtmv+xYFWkHNlb/sk01w==",
      "type": "package",
      "path": "xunit.analyzers/1.11.0",
      "hasTools": true,
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "_content/README.md",
        "_content/logo-128-transparent.png",
        "analyzers/dotnet/roslyn3.11/cs/xunit.analyzers.dll",
        "analyzers/dotnet/roslyn3.11/cs/xunit.analyzers.fixes.dll",
        "analyzers/dotnet/roslyn4.4/cs/xunit.analyzers.dll",
        "analyzers/dotnet/roslyn4.4/cs/xunit.analyzers.fixes.dll",
        "analyzers/dotnet/roslyn4.6/cs/xunit.analyzers.dll",
        "analyzers/dotnet/roslyn4.6/cs/xunit.analyzers.fixes.dll",
        "analyzers/dotnet/roslyn4.8/cs/xunit.analyzers.dll",
        "analyzers/dotnet/roslyn4.8/cs/xunit.analyzers.fixes.dll",
        "tools/install.ps1",
        "tools/uninstall.ps1",
        "xunit.analyzers.1.11.0.nupkg.sha512",
        "xunit.analyzers.nuspec"
      ]
    },
    "xunit.assert/2.7.0": {
      "sha512": "CCTs3bUhmIS4tDwK6Cn/IiabG3RhYzdf65eIkO7u9/grKoN9MrN780LzVED3E8v+vwmmj7b5TW3/GFuZHPAzWA==",
      "type": "package",
      "path": "xunit.assert/2.7.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "_content/README.md",
        "_content/logo-128-transparent.png",
        "lib/net6.0/xunit.assert.dll",
        "lib/net6.0/xunit.assert.xml",
        "lib/netstandard1.1/xunit.assert.dll",
        "lib/netstandard1.1/xunit.assert.xml",
        "xunit.assert.2.7.0.nupkg.sha512",
        "xunit.assert.nuspec"
      ]
    },
    "xunit.core/2.7.0": {
      "sha512": "98tzqYAbtc/p/2Ba455XTNbD12Qoo8kPehjC4oDT46CAsLli5JOCU9hFF2MV3HHWMw/Y3yFUV2Vcukplbs6kuA==",
      "type": "package",
      "path": "xunit.core/2.7.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "_content/README.md",
        "_content/logo-128-transparent.png",
        "build/xunit.core.props",
        "build/xunit.core.targets",
        "buildMultiTargeting/xunit.core.props",
        "buildMultiTargeting/xunit.core.targets",
        "xunit.core.2.7.0.nupkg.sha512",
        "xunit.core.nuspec"
      ]
    },
    "xunit.extensibility.core/2.7.0": {
      "sha512": "JLnx4PI0vn1Xr1Ust6ydrp2t/ktm2dyGPAVoDJV5gQuvBMSbd2K7WGzODa2ttiz030CeQ8nbsXl05+cvf7QNyA==",
      "type": "package",
      "path": "xunit.extensibility.core/2.7.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "_content/README.md",
        "_content/logo-128-transparent.png",
        "lib/net452/xunit.core.dll",
        "lib/net452/xunit.core.dll.tdnet",
        "lib/net452/xunit.core.xml",
        "lib/net452/xunit.runner.tdnet.dll",
        "lib/net452/xunit.runner.utility.net452.dll",
        "lib/netstandard1.1/xunit.core.dll",
        "lib/netstandard1.1/xunit.core.xml",
        "xunit.extensibility.core.2.7.0.nupkg.sha512",
        "xunit.extensibility.core.nuspec"
      ]
    },
    "xunit.extensibility.execution/2.7.0": {
      "sha512": "bjY+crT1jOyxKagFjCMdEVzoenO2v66ru8+CK/0UaXvyG4U9Q3UTieJkbQXbi7/1yZIK1sGh01l5/jh2CwLJtQ==",
      "type": "package",
      "path": "xunit.extensibility.execution/2.7.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "_content/README.md",
        "_content/logo-128-transparent.png",
        "lib/net452/xunit.execution.desktop.dll",
        "lib/net452/xunit.execution.desktop.xml",
        "lib/netstandard1.1/xunit.execution.dotnet.dll",
        "lib/netstandard1.1/xunit.execution.dotnet.xml",
        "xunit.extensibility.execution.2.7.0.nupkg.sha512",
        "xunit.extensibility.execution.nuspec"
      ]
    },
    "xunit.runner.visualstudio/2.5.7": {
      "sha512": "31Rl7dBJriX0DNwZfDp8gqFOPsiM0c9kqpcH/HvNi9vDp+K7Ydf42H7mVIvYT918Ywzn1ymLg1c4DDC6iU754w==",
      "type": "package",
      "path": "xunit.runner.visualstudio/2.5.7",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "_content/README.md",
        "_content/logo-128-transparent.png",
        "build/net462/xunit.abstractions.dll",
        "build/net462/xunit.runner.reporters.net452.dll",
        "build/net462/xunit.runner.utility.net452.dll",
        "build/net462/xunit.runner.visualstudio.props",
        "build/net462/xunit.runner.visualstudio.testadapter.dll",
        "build/net6.0/xunit.abstractions.dll",
        "build/net6.0/xunit.runner.reporters.netcoreapp10.dll",
        "build/net6.0/xunit.runner.utility.netcoreapp10.dll",
        "build/net6.0/xunit.runner.visualstudio.props",
        "build/net6.0/xunit.runner.visualstudio.testadapter.dll",
        "lib/net462/_._",
        "lib/net6.0/_._",
        "xunit.runner.visualstudio.2.5.7.nupkg.sha512",
        "xunit.runner.visualstudio.nuspec"
      ]
    },
    "Portfolio.Application/1.0.0": {
      "type": "project",
      "path": "../../src/Portfolio.Application/Portfolio.Application.csproj",
      "msbuildProject": "../../src/Portfolio.Application/Portfolio.Application.csproj"
    },
    "Portfolio.Domain/1.0.0": {
      "type": "project",
      "path": "../../src/Portfolio.Domain/Portfolio.Domain.csproj",
      "msbuildProject": "../../src/Portfolio.Domain/Portfolio.Domain.csproj"
    },
    "Portfolio.Infrastructure/1.0.0": {
      "type": "project",
      "path": "../../src/Portfolio.Infrastructure/Portfolio.Infrastructure.csproj",
      "msbuildProject": "../../src/Portfolio.Infrastructure/Portfolio.Infrastructure.csproj"
    }
  },
  "projectFileDependencyGroups": {
    "net8.0": [
      "FluentAssertions >= 6.12.0",
      "Microsoft.EntityFrameworkCore.InMemory >= 8.0.2",
      "Microsoft.NET.Test.Sdk >= 17.9.0",
      "Moq >= 4.20.70",
      "Portfolio.Application >= 1.0.0",
      "Portfolio.Domain >= 1.0.0",
      "Portfolio.Infrastructure >= 1.0.0",
      "coverlet.collector >= 6.0.0",
      "xunit >= 2.7.0",
      "xunit.runner.visualstudio >= 2.5.7"
    ]
  },
  "packageFolders": {
    "C:\\Users\\miche\\.nuget\\packages\\": {},
    "C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\NuGetPackages": {}
  },
  "project": {
    "version": "1.0.0",
    "restore": {
      "projectUniqueName": "C:\\dev\\portfolio\\portfolio.net\\tests\\Portfolio.UnitTests\\Portfolio.UnitTests.csproj",
      "projectName": "Portfolio.UnitTests",
      "projectPath": "C:\\dev\\portfolio\\portfolio.net\\tests\\Portfolio.UnitTests\\Portfolio.UnitTests.csproj",
      "packagesPath": "C:\\Users\\miche\\.nuget\\packages\\",
      "outputPath": "C:\\dev\\portfolio\\portfolio.net\\tests\\Portfolio.UnitTests\\obj\\",
      "projectStyle": "PackageReference",
      "fallbackFolders": [
        "C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\NuGetPackages"
      ],
      "configFilePaths": [
        "C:\\Users\\miche\\AppData\\Roaming\\NuGet\\NuGet.Config",
        "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.FallbackLocation.config",
        "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.Offline.config"
      ],
      "originalTargetFrameworks": [
        "net8.0"
      ],
      "sources": {
        "C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackages\\": {},
        "https://api.nuget.org/v3/index.json": {}
      },
      "frameworks": {
        "net8.0": {
          "targetAlias": "net8.0",
          "projectReferences": {
            "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\Portfolio.Application.csproj": {
              "projectPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Application\\Portfolio.Application.csproj"
            },
            "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\Portfolio.Domain.csproj": {
              "projectPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Domain\\Portfolio.Domain.csproj"
            },
            "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Infrastructure\\Portfolio.Infrastructure.csproj": {
              "projectPath": "C:\\dev\\portfolio\\portfolio.net\\src\\Portfolio.Infrastructure\\Portfolio.Infrastructure.csproj"
            }
          }
        }
      },
      "warningProperties": {
        "warnAsError": [
          "NU1605"
        ]
      },
      "restoreAuditProperties": {
        "enableAudit": "true",
        "auditLevel": "low",
        "auditMode": "direct"
      },
      "SdkAnalysisLevel": "9.0.100"
    },
    "frameworks": {
      "net8.0": {
        "targetAlias": "net8.0",
        "dependencies": {
          "FluentAssertions": {
            "target": "Package",
            "version": "[6.12.0, )"
          },
          "Microsoft.EntityFrameworkCore.InMemory": {
            "target": "Package",
            "version": "[8.0.2, )"
          },
          "Microsoft.NET.Test.Sdk": {
            "target": "Package",
            "version": "[17.9.0, )"
          },
          "Moq": {
            "target": "Package",
            "version": "[4.20.70, )"
          },
          "coverlet.collector": {
            "include": "Runtime, Build, Native, ContentFiles, Analyzers, BuildTransitive",
            "suppressParent": "All",
            "target": "Package",
            "version": "[6.0.0, )"
          },
          "xunit": {
            "target": "Package",
            "version": "[2.7.0, )"
          },
          "xunit.runner.visualstudio": {
            "include": "Runtime, Build, Native, ContentFiles, Analyzers, BuildTransitive",
            "suppressParent": "All",
            "target": "Package",
            "version": "[2.5.7, )"
          }
        },
        "imports": [
          "net461",
          "net462",
          "net47",
          "net471",
          "net472",
          "net48",
          "net481"
        ],
        "assetTargetFallback": true,
        "warn": true,
        "frameworkReferences": {
          "Microsoft.NETCore.App": {
            "privateAssets": "all"
          }
        },
        "runtimeIdentifierGraphPath": "C:\\Program Files\\dotnet\\sdk\\9.0.102/PortableRuntimeIdentifierGraph.json"
      }
    }
  }
}

================
File: tests/Portfolio.UnitTests/obj/project.nuget.cache
================
{
  "version": 2,
  "dgSpecHash": "OXX26D7fC+g=",
  "success": true,
  "projectFilePath": "C:\\dev\\portfolio\\portfolio.net\\tests\\Portfolio.UnitTests\\Portfolio.UnitTests.csproj",
  "expectedPackageFiles": [
    "C:\\Users\\miche\\.nuget\\packages\\automapper\\13.0.1\\automapper.13.0.1.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\castle.core\\5.1.1\\castle.core.5.1.1.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\coverlet.collector\\6.0.0\\coverlet.collector.6.0.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\fluentassertions\\6.12.0\\fluentassertions.6.12.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\fluentvalidation\\11.9.0\\fluentvalidation.11.9.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\fluentvalidation.dependencyinjectionextensions\\11.9.0\\fluentvalidation.dependencyinjectionextensions.11.9.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\mediatr\\12.2.0\\mediatr.12.2.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\mediatr.contracts\\2.0.1\\mediatr.contracts.2.0.1.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.codecoverage\\17.9.0\\microsoft.codecoverage.17.9.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.entityframeworkcore\\8.0.2\\microsoft.entityframeworkcore.8.0.2.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.entityframeworkcore.abstractions\\8.0.2\\microsoft.entityframeworkcore.abstractions.8.0.2.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.entityframeworkcore.analyzers\\8.0.2\\microsoft.entityframeworkcore.analyzers.8.0.2.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.entityframeworkcore.inmemory\\8.0.2\\microsoft.entityframeworkcore.inmemory.8.0.2.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.entityframeworkcore.relational\\8.0.2\\microsoft.entityframeworkcore.relational.8.0.2.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.extensions.caching.abstractions\\8.0.0\\microsoft.extensions.caching.abstractions.8.0.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.extensions.caching.memory\\8.0.0\\microsoft.extensions.caching.memory.8.0.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.extensions.configuration.abstractions\\8.0.0\\microsoft.extensions.configuration.abstractions.8.0.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.extensions.dependencyinjection\\8.0.0\\microsoft.extensions.dependencyinjection.8.0.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.extensions.dependencyinjection.abstractions\\8.0.0\\microsoft.extensions.dependencyinjection.abstractions.8.0.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.extensions.logging\\8.0.0\\microsoft.extensions.logging.8.0.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.extensions.logging.abstractions\\8.0.0\\microsoft.extensions.logging.abstractions.8.0.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.extensions.options\\8.0.0\\microsoft.extensions.options.8.0.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.extensions.primitives\\8.0.0\\microsoft.extensions.primitives.8.0.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.net.test.sdk\\17.9.0\\microsoft.net.test.sdk.17.9.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.testplatform.objectmodel\\17.9.0\\microsoft.testplatform.objectmodel.17.9.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\microsoft.testplatform.testhost\\17.9.0\\microsoft.testplatform.testhost.17.9.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\moq\\4.20.70\\moq.4.20.70.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\newtonsoft.json\\13.0.1\\newtonsoft.json.13.0.1.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\npgsql\\8.0.2\\npgsql.8.0.2.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\npgsql.entityframeworkcore.postgresql\\8.0.2\\npgsql.entityframeworkcore.postgresql.8.0.2.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\system.configuration.configurationmanager\\4.4.0\\system.configuration.configurationmanager.4.4.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\system.diagnostics.eventlog\\6.0.0\\system.diagnostics.eventlog.6.0.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\system.reflection.metadata\\1.6.0\\system.reflection.metadata.1.6.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\system.security.cryptography.protecteddata\\4.4.0\\system.security.cryptography.protecteddata.4.4.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\xunit\\2.7.0\\xunit.2.7.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\xunit.abstractions\\2.0.3\\xunit.abstractions.2.0.3.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\xunit.analyzers\\1.11.0\\xunit.analyzers.1.11.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\xunit.assert\\2.7.0\\xunit.assert.2.7.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\xunit.core\\2.7.0\\xunit.core.2.7.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\xunit.extensibility.core\\2.7.0\\xunit.extensibility.core.2.7.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\xunit.extensibility.execution\\2.7.0\\xunit.extensibility.execution.2.7.0.nupkg.sha512",
    "C:\\Users\\miche\\.nuget\\packages\\xunit.runner.visualstudio\\2.5.7\\xunit.runner.visualstudio.2.5.7.nupkg.sha512"
  ],
  "logs": []
}

================
File: tests/Portfolio.UnitTests/Portfolio.UnitTests.csproj
================
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <IsPackable>false</IsPackable>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="FluentAssertions" Version="6.12.0" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.InMemory" Version="8.0.2" />
    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.9.0" />
    <PackageReference Include="Moq" Version="4.20.70" />
    <PackageReference Include="xunit" Version="2.7.0" />
    <PackageReference Include="xunit.runner.visualstudio" Version="2.5.7">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="coverlet.collector" Version="6.0.0">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\src\Portfolio.Infrastructure\Portfolio.Infrastructure.csproj" />
    <ProjectReference Include="..\..\src\Portfolio.Application\Portfolio.Application.csproj" />
    <ProjectReference Include="..\..\src\Portfolio.Domain\Portfolio.Domain.csproj" />
  </ItemGroup>

</Project>

================
File: tests/Portfolio.UnitTests/Repositories/UserRepositoryTests.cs
================
using FluentAssertions;
using Microsoft.EntityFrameworkCore;
using Portfolio.Domain.Entities;
using Portfolio.Domain.ValueObjects;
using Portfolio.Infrastructure.Persistence;
using Portfolio.Infrastructure.Persistence.Repositories;
using Xunit;

namespace Portfolio.UnitTests.Repositories;

public class UserRepositoryTests : IDisposable
{
    private readonly DbContextOptions<ApplicationDbContext> _options;
    private readonly ApplicationDbContext _context;
    private readonly UserRepository _repository;

    public UserRepositoryTests()
    {
        _options = new DbContextOptionsBuilder<ApplicationDbContext>()
            .UseInMemoryDatabase(databaseName: $"TestDb_{Guid.NewGuid()}")
            .Options;

        _context = new ApplicationDbContext(_options);
        _repository = new UserRepository(_context);
    }

    [Fact]
    public async Task GetByUsername_ShouldReturnUser_WhenUserExists()
    {
        // Arrange
        var user = new User(
            id: Guid.NewGuid().ToString(),
            username: "testuser",
            email: Email.Create("test@example.com"),
            displayName: "Test User",
            avatarUrl: "https://example.com/avatar.jpg",
            provider: "local",
            providerId: null,
            isAdmin: false
        );

        await _context.Users.AddAsync(user);
        await _context.SaveChangesAsync();

        // Act
        var result = await _repository.GetByUsernameAsync(user.Username);

        // Assert
        result.Should().NotBeNull();
        result!.Username.Should().Be(user.Username);
        result.Email.Value.Should().Be(user.Email.Value);
        result.DisplayName.Should().Be(user.DisplayName);
    }

    [Fact]
    public async Task GetByEmail_ShouldReturnUser_WhenUserExists()
    {
        // Arrange
        var user = new User(
            id: Guid.NewGuid().ToString(),
            username: "testuser",
            email: Email.Create("test@example.com"),
            displayName: "Test User"
        );

        await _context.Users.AddAsync(user);
        await _context.SaveChangesAsync();

        // Act
        var result = await _repository.GetByEmailAsync(user.Email.Value);

        // Assert
        result.Should().NotBeNull();
        result!.Email.Value.Should().Be(user.Email.Value);
    }

    [Fact]
    public async Task IsUsernameUnique_ShouldReturnTrue_WhenUsernameDoesNotExist()
    {
        // Arrange
        var username = "uniqueuser";

        // Act
        var result = await _repository.IsUsernameUniqueAsync(username);

        // Assert
        result.Should().BeTrue();
    }

    [Fact]
    public async Task IsUsernameUnique_ShouldReturnFalse_WhenUsernameExists()
    {
        // Arrange
        var user = new User(
            id: Guid.NewGuid().ToString(),
            username: "existinguser",
            email: Email.Create("test@example.com")
        );

        await _context.Users.AddAsync(user);
        await _context.SaveChangesAsync();

        // Act
        var result = await _repository.IsUsernameUniqueAsync(user.Username);

        // Assert
        result.Should().BeFalse();
    }

    public void Dispose()
    {
        _context.Database.EnsureDeleted();
        _context.Dispose();
    }
}



================================================================
End of Codebase
================================================================
