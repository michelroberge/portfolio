This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.gitignore
.windsurfrules
docker-compose.yml
docs/1. UserRequirements.md
docs/1.b.UserRequirements.v2.md
docs/1.c.UserRequirements.v3.md
docs/2. development-plan.md
docs/2.b.development-plan.v2.md
docs/2.c.development-plan.v3.md
docs/jobs.html
docs/prompts/default.md
jenkins/Jenkinsfile.analysis
jenkins/Jenkinsfile.build
jenkins/Jenkinsfile.test
jenkins/sonar-project.properties
LICENSE
pageService_backup.txt
portfolio.net/src/Api/AuthController.cs
portfolio.net/src/Domain/DTOs/LoginRequest.cs
portfolio.net/src/Domain/Models/ApplicationUser.cs
portfolio.net/src/Domain/Models/Blog.cs
portfolio.net/src/Domain/Models/CareerTimeline.cs
portfolio.net/src/Domain/Models/Project.cs
portfolio.net/src/Infrastructure/Database/AppDbContext.cs
portfolio.net/src/Infrastructure/Services/AuthService.cs
portfolio.net/src/Infrastructure/Services/IAuthService.cs
portfolio.net/src/Program.cs
portfolio.next/__tests__/app/notFoundPage.test.tsx
portfolio.next/__tests__/app/privacy_policy.test.tsx
portfolio.next/__tests__/components/ChatWrapper.test.tsx
portfolio.next/__tests__/components/Footer.test.tsx
portfolio.next/__tests__/components/Header.test.tsx
portfolio.next/__tests__/components/Home.test.tsx
portfolio.next/__tests__/components/Search.test.tsx
portfolio.next/__tests__/components/SectionToggle.test.tsx
portfolio.next/__tests__/context/SearchContext.test.tsx
portfolio.next/__tests__/hooks/useWebSocketChat.test.tsx
portfolio.next/__tests__/models/BlogEntry.test.ts
portfolio.next/__tests__/models/ChatContext.test.tsx
portfolio.next/__tests__/models/FileInfo.test.ts
portfolio.next/__tests__/services/aiSearch.test.ts
portfolio.next/__tests__/services/aiService.test.ts
portfolio.next/__tests__/services/analyticsService.test.ts
portfolio.next/__tests__/services/apiServices.test.ts
portfolio.next/__tests__/services/authService.test.ts
portfolio.next/__tests__/services/blogService.test.ts
portfolio.next/__tests__/services/careerService.test.ts
portfolio.next/__tests__/services/fileService.test.ts
portfolio.next/__tests__/services/projectService.test.ts
portfolio.next/__tests__/services/userService.test.ts
portfolio.next/Dockerfile
portfolio.next/eslint.config.mjs
portfolio.next/jest.config.ts
portfolio.next/jest.setup.ts
portfolio.next/middleware.ts
portfolio.next/next-env.d.ts
portfolio.next/next.config.js
portfolio.next/package.json
portfolio.next/postcss.config.mjs
portfolio.next/public/file.svg
portfolio.next/public/globe.svg
portfolio.next/public/next.svg
portfolio.next/public/vercel.svg
portfolio.next/public/window.svg
portfolio.next/README.md
portfolio.next/src/app/_not-found/page.tsx
portfolio.next/src/app/admin/ai-config/page.tsx
portfolio.next/src/app/admin/analytics/page.tsx
portfolio.next/src/app/admin/blogs/edit/[id]/page.tsx
portfolio.next/src/app/admin/blogs/new/page.tsx
portfolio.next/src/app/admin/blogs/page.tsx
portfolio.next/src/app/admin/career/edit/[id]/page.tsx
portfolio.next/src/app/admin/career/linkedin/page.tsx
portfolio.next/src/app/admin/career/page.tsx
portfolio.next/src/app/admin/comments/page.tsx
portfolio.next/src/app/admin/embeddings/page.tsx
portfolio.next/src/app/admin/files/page.tsx
portfolio.next/src/app/admin/login/page.tsx
portfolio.next/src/app/admin/page.tsx
portfolio.next/src/app/admin/pages/page.tsx
portfolio.next/src/app/admin/projects/edit/[id]/page.tsx
portfolio.next/src/app/admin/projects/new/page.tsx
portfolio.next/src/app/admin/projects/page.tsx
portfolio.next/src/app/admin/settings/ai-model/page.tsx
portfolio.next/src/app/admin/settings/provider-config/page.tsx
portfolio.next/src/app/admin/setup/page.tsx
portfolio.next/src/app/admin/temp-layout.tsx
portfolio.next/src/app/admin/users/new/page.tsx
portfolio.next/src/app/admin/users/page.tsx
portfolio.next/src/app/blogs/[slug]/page.tsx
portfolio.next/src/app/career/page.tsx
portfolio.next/src/app/globals.css
portfolio.next/src/app/layout.tsx
portfolio.next/src/app/page.tsx
portfolio.next/src/app/pages/[slug]/page.tsx
portfolio.next/src/app/privacy-policy/page.tsx
portfolio.next/src/app/projects/[slug]/page.tsx
portfolio.next/src/components/admin/AdminDashboard.tsx
portfolio.next/src/components/admin/AIModelSettings.tsx
portfolio.next/src/components/admin/AnalyticsDashboard.tsx
portfolio.next/src/components/admin/BlogEditPage.tsx
portfolio.next/src/components/admin/BlogList.tsx
portfolio.next/src/components/admin/BlogManagement.tsx
portfolio.next/src/components/admin/BlogManagementPage.tsx
portfolio.next/src/components/admin/career/CareerEntryEditForm.tsx
portfolio.next/src/components/admin/CareerEntryForm.tsx
portfolio.next/src/components/admin/CareerTimelineManager.tsx
portfolio.next/src/components/admin/CommentManagement.tsx
portfolio.next/src/components/admin/CommentsList.tsx
portfolio.next/src/components/admin/CreateUser.tsx
portfolio.next/src/components/admin/EditBlogEntry.tsx
portfolio.next/src/components/admin/EditProject.tsx
portfolio.next/src/components/admin/FileList.tsx
portfolio.next/src/components/admin/FileWrapper.tsx
portfolio.next/src/components/admin/LinkedInImport.tsx
portfolio.next/src/components/admin/PagesList.tsx
portfolio.next/src/components/admin/ProjectList.tsx
portfolio.next/src/components/admin/ProjectManagement.tsx
portfolio.next/src/components/admin/ProviderConfigManager.tsx
portfolio.next/src/components/admin/RefreshEmbeddings.tsx
portfolio.next/src/components/admin/UploadContextualFile.tsx
portfolio.next/src/components/admin/UserList.tsx
portfolio.next/src/components/blog/BlogView.tsx
portfolio.next/src/components/CareerTimeline.tsx
portfolio.next/src/components/Chat.tsx
portfolio.next/src/components/ChatWrapper.tsx
portfolio.next/src/components/CommentSection.tsx
portfolio.next/src/components/EntryOverview.tsx
portfolio.next/src/components/Footer.tsx
portfolio.next/src/components/Header.tsx
portfolio.next/src/components/Home.tsx
portfolio.next/src/components/layouts/AdminLayout.tsx
portfolio.next/src/components/MarkdownEditor.d.ts
portfolio.next/src/components/MarkdownEditor.tsx
portfolio.next/src/components/MarkdownEditor/index.d.ts
portfolio.next/src/components/MarkdownEditor/index.tsx
portfolio.next/src/components/project/ProjectView.tsx
portfolio.next/src/components/Search.tsx
portfolio.next/src/components/SectionToggle.tsx
portfolio.next/src/components/WarmUp.tsx
portfolio.next/src/context/AuthContext.tsx
portfolio.next/src/context/ChatContext.tsx
portfolio.next/src/context/SearchContext.tsx
portfolio.next/src/hooks/useWebSocketChat.tsx
portfolio.next/src/lib/auth.ts
portfolio.next/src/lib/constants.ts
portfolio.next/src/models/AdminCheck.ts
portfolio.next/src/models/AdminInit.ts
portfolio.next/src/models/AI.ts
portfolio.next/src/models/AIConfig.ts
portfolio.next/src/models/Analytics.ts
portfolio.next/src/models/BlogEntry.ts
portfolio.next/src/models/Career.ts
portfolio.next/src/models/CareerEntry.ts
portfolio.next/src/models/ChatMessage.ts
portfolio.next/src/models/Comment.ts
portfolio.next/src/models/FileInfo.ts
portfolio.next/src/models/HomePage.ts
portfolio.next/src/models/Page_new.ts
portfolio.next/src/models/Page.ts
portfolio.next/src/models/Project.ts
portfolio.next/src/models/ProviderConfig.ts
portfolio.next/src/models/User.ts
portfolio.next/src/services/adminService.ts
portfolio.next/src/services/aiService.ts
portfolio.next/src/services/analyticsService.ts
portfolio.next/src/services/authService.ts
portfolio.next/src/services/blogService.ts
portfolio.next/src/services/careerService.ts
portfolio.next/src/services/commentService.ts
portfolio.next/src/services/fileService.ts
portfolio.next/src/services/homePageService.ts
portfolio.next/src/services/pageService.ts
portfolio.next/src/services/projectService.ts
portfolio.next/src/services/providerConfigService.ts
portfolio.next/src/services/userService.ts
portfolio.next/tailwind.config.ts
portfolio.next/tsconfig.json
portfolio.next/tsconfig.test.json
portfolio.node/__tests__/app.test.js
portfolio.node/__tests__/authServices.test.js
portfolio.node/__tests__/blogService.test.js
portfolio.node/__tests__/blogValidation.test.js
portfolio.node/__tests__/cache.test.js
portfolio.node/__tests__/commentRoutes.test.js
portfolio.node/__tests__/config/db.test.js
portfolio.node/__tests__/config/passport.test.js
portfolio.node/__tests__/config/swagger.test.js
portfolio.node/__tests__/jest-setup.js
portfolio.node/__tests__/jest-setup.test.js
portfolio.node/__tests__/middlewares/admin.test.js
portfolio.node/__tests__/middlewares/auth.test.js
portfolio.node/__tests__/middlewares/metrics.test.js
portfolio.node/__tests__/middlewares/validate.test.js
portfolio.node/__tests__/models/BlogEntry.test.js
portfolio.node/__tests__/models/CareerTimeline.test.js
portfolio.node/__tests__/models/ChatMessage.test.js
portfolio.node/__tests__/models/Comment.test.js
portfolio.node/__tests__/models/Counters.test.js
portfolio.node/__tests__/models/Embedding.test.js
portfolio.node/__tests__/models/Metadata.test.js
portfolio.node/__tests__/models/Page.test.js
portfolio.node/__tests__/models/Project.test.js
portfolio.node/__tests__/models/Prompt.test.js
portfolio.node/__tests__/models/ProviderConfig.test.js
portfolio.node/__tests__/models/User.test.js
portfolio.node/__tests__/projectServices.test.js
portfolio.node/__tests__/routes/aiRoutes.test.js
portfolio.node/__tests__/routes/authRoutes.test.js
portfolio.node/__tests__/routes/blogRoutes.test.js
portfolio.node/__tests__/routes/careerTimelineRoutes.test.js
portfolio.node/__tests__/routes/chatRoutes.test.js
portfolio.node/__tests__/routes/commentRoutes.test.js
portfolio.node/__tests__/routes/embeddingRoutes.test.js
portfolio.node/__tests__/routes/fileRoutes.test.js
portfolio.node/__tests__/routes/oauthRoutes.test.js
portfolio.node/__tests__/routes/pageRoutes.test.js
portfolio.node/__tests__/routes/projectRoutes.test.js
portfolio.node/__tests__/routes/promptRoutes.test.js
portfolio.node/__tests__/routes/providerConfigRoutes.test.js
portfolio.node/__tests__/routes/searchRoutes.test.js
portfolio.node/__tests__/routes/userRoutes.test.js
portfolio.node/__tests__/server.test.js
portfolio.node/__tests__/services/authService.test.js
portfolio.node/__tests__/services/blogService.test.js
portfolio.node/__tests__/services/chatService.test.js
portfolio.node/__tests__/services/commentService.test.js
portfolio.node/__tests__/services/counterService.test.js
portfolio.node/__tests__/services/embeddingService.test.js
portfolio.node/__tests__/services/fileService.test.js
portfolio.node/__tests__/services/llmService.test.js
portfolio.node/__tests__/services/ollamaService.test.js
portfolio.node/__tests__/services/pageService.test.js
portfolio.node/__tests__/services/projectService.test.js
portfolio.node/__tests__/services/promptService.test.js
portfolio.node/__tests__/services/providerConfigService.test.js
portfolio.node/__tests__/services/qdrantService.test.js
portfolio.node/__tests__/services/searchService.test.js
portfolio.node/__tests__/services/userService.test.js
portfolio.node/__tests__/services/warmUpService.test.js
portfolio.node/__tests__/services/wsChatService.test.js
portfolio.node/__tests__/tracing.test.js
portfolio.node/__tests__/userService.test.js
portfolio.node/__tests__/utils/cache.test.js
portfolio.node/__tests__/utils/generatePrompt.test.js
portfolio.node/__tests__/validators/blogValidator.test.js
portfolio.node/Dockerfile
portfolio.node/jest.config.js
portfolio.node/jest.setup.js
portfolio.node/package.json
portfolio.node/routes.md
portfolio.node/src/app.js
portfolio.node/src/cache.js
portfolio.node/src/config/db.js
portfolio.node/src/config/passport.js
portfolio.node/src/config/swagger.js
portfolio.node/src/docs/openapi.1.4.0.yml
portfolio.node/src/docs/openapi.yml
portfolio.node/src/middlewares/admin.js
portfolio.node/src/middlewares/auth.js
portfolio.node/src/middlewares/metrics.js
portfolio.node/src/middlewares/requestLogger.js
portfolio.node/src/middlewares/validate.js
portfolio.node/src/models/BlogEntry.js
portfolio.node/src/models/CareerTimeline.js
portfolio.node/src/models/ChatMessage.js
portfolio.node/src/models/Comment.js
portfolio.node/src/models/Counters.js
portfolio.node/src/models/Embedding.js
portfolio.node/src/models/Metadata.js
portfolio.node/src/models/Page.js
portfolio.node/src/models/Project.js
portfolio.node/src/models/Prompt.js
portfolio.node/src/models/ProviderConfig.js
portfolio.node/src/models/User.js
portfolio.node/src/routes/admin/blogRoutes.js
portfolio.node/src/routes/admin/index.js
portfolio.node/src/routes/admin/projectRoutes.js
portfolio.node/src/routes/aiRoutes.js
portfolio.node/src/routes/authRoutes.js
portfolio.node/src/routes/blogRoutes.js
portfolio.node/src/routes/careerTimelineRoutes.js
portfolio.node/src/routes/chatRoutes.js
portfolio.node/src/routes/commentRoutes.js
portfolio.node/src/routes/embeddingRoutes.js
portfolio.node/src/routes/fileRoutes.js
portfolio.node/src/routes/oauthRoutes.js
portfolio.node/src/routes/pageRoutes.js
portfolio.node/src/routes/projectRoutes.js
portfolio.node/src/routes/promptRoutes.js
portfolio.node/src/routes/providerConfigRoutes.js
portfolio.node/src/routes/searchRoutes.js
portfolio.node/src/routes/userRoutes.js
portfolio.node/src/server.js
portfolio.node/src/services/authService.js
portfolio.node/src/services/blogService.js
portfolio.node/src/services/chatService.js
portfolio.node/src/services/commentService.js
portfolio.node/src/services/counterService.js
portfolio.node/src/services/embeddingService.js
portfolio.node/src/services/fileService.js
portfolio.node/src/services/llmService.js
portfolio.node/src/services/ollamaService.js
portfolio.node/src/services/pageService.js
portfolio.node/src/services/projectService.js
portfolio.node/src/services/promptService.js
portfolio.node/src/services/providerConfigService.js
portfolio.node/src/services/qdrantService.js
portfolio.node/src/services/searchService.js
portfolio.node/src/services/userService.js
portfolio.node/src/services/warmUpService.js
portfolio.node/src/services/wsChatService.js
portfolio.node/src/tracing.js
portfolio.node/src/utils/cache.js
portfolio.node/src/utils/generatePrompt.js
portfolio.node/src/validators/blogValidator.js
README.md

================================================================
Files
================================================================

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

================
File: .windsurfrules
================
General information
1. Frontend project is portfolio.next
2. Backend project is portfolio.node
3. Backend is supported by MongoDb, Qdrant and Ollama.
4. Both projects have a ./src directory where the source code is located.
5. Both projects have a __tests__ directory where the tests are located.


Development Principles
6. Use Domain Driven Design.
7. Use Clean Architecture.
8. Model source of truth is backend.
9. Use TypeScript for Frontend
10. Use .js for Backend
11. Aim for reusability and scalability
12. Use SOLID principles
13. Do not over-engineer
14. Be consistent from a feature to another (i.e. apply same patterns)
15. Develop for testability (Jest)
16. Models / entities / interfaces should be in their own scripts, never in a page implementation or in a service implementation.

Frontend Specifics
17. All API calls should use import from constants (i.e. API_ENDPOINTS) 
18. The correct page initialization for SSR is promise params with await.
Good Example:
```
import { notFound } from "next/navigation";
import { fetchBlogEntry } from "@/services/blogService";
import BlogView from "@/components/blog/BlogView";

export default async function BlogPage({ params }: { params: Promise<{ slug: string }> }) {
  const { slug } = await params;
  if (!slug) return notFound();

  const id = slug.split("-").pop(); // Extract the last part as the ID
  if (!id) return notFound();

  try {
    const blog = await fetchBlogEntry(id);
    return <BlogView blog={blog} />;
  } catch (err) {
    console.error('Failed to fetch blog:', err);
    return notFound();
  }
}

```
19. All catch(err) should be followed by a console.error(err)
20. Use tailwindcss for formatting
21. Optimize Frontend for SSR
22. Use .ts for Frontend
23. Use Next.js 15.1.7+ best practices when applicable.
24. Before any modification to a model, always verify the backend equivalent model. The backend is the source of truth.

Backend Specifics
25. Use Node.js 18+ best practices when applicable.
26. Use MongoDB for data storage
27. Use Qdrant for vector search
28. Use Ollama for AI
29. Use .js for Backend
30. Before changing model, always ask if it is necessary and the correct way. 
31. If a change to a model is necessary, always consider the frontend changes needed.

Guiding Principle for Fixes and Improvements
29. When addressing an issue, bug, or inconsistency, always consider the broader context of the system. 
30. A fix should not only resolve the immediate problem but also align with the overall design principles, architecture, and coding guidelines. 
31. Strive for solutions that are consistent, maintainable, and scalable, avoiding quick patches that may introduce technical debt or conflict with existing patterns.

32. Before finalizing a fix, ask:

- Does this align with the established design and architectural decisions?
- Is this solution consistent with similar implementations elsewhere?
- Will this fix create unexpected side effects in related components?
- Can this be refactored into a more elegant and reusable solution?
- Always prioritize long-term clarity and maintainability over short-term convenience.

Testing
- When writting unit tests, always check the component implementation that is being tested.
- The tests should always use the appropriate props and dependencies (i.e. mock services, hooks, etc.)
- Use jest.mock() for mocking dependencies.
- Use waitFor() for async operations.

IMPORTANT AND MANDATORY RULES
A) Never make a design decision on your own. Always make a suggestion first for confirmation.

================
File: docker-compose.yml
================
version: "3.8"
services:
  frontend:
    image: profolio-frontend
    build: ./portfolio.next
    ports:
      - "0.0.0.0:3300:3000"
    depends_on:
      - backend
    environment:
      - NODE_ENV=production

  backend:
    image: profolio-backend
    build: ./portfolio.node
    ports:
      - "0.0.0.0:5500:5000"
    environment:
      - NODE_ENV=production

================
File: docs/1. UserRequirements.md
================
# User Requirements for Portfolio Website

## Personality & Tone
- **Perception**: Creative, innovative problem solver, approachable expert, technical mentor, fun, easygoing.
- **Tone**: Friendly, witty, minimalist.
- **Storytelling**: Career journey timeline and anecdotes from key projects.

## Core Objectives & Features
- **Main Purpose**: Showcase talent and projects to attract high-profile job offers.
- **Primary Audience**:
  1. Fellow developers
  2. Industry leaders
  3. Recruiters / Potential Clients
- **Visitor Interaction**:
  1. AI Chat
  2. Semi-structured browsing

## Content Prioritization
- **Must-Haves**:
  - Career timeline
  - AI chatbot
  - Project showcase
  - Live demos
- **Nice-to-Haves**:
  - Blog
- **Project Showcase Format**: Just a link (either on GitHub or self-hosted with a reverse proxy).
- **Blog/Industry Insights**: Maybe, but not a priority.

## AI & Interactivity
- **AI Chat**:
  - Random greeting + guided prompt suggestions.
  - Freeform conversation allowed.
  - AI should distinguish between generic data and user-specific knowledge.
- **Search Functionality**:
  - AI-powered search (e.g., "Show me projects using C# and MongoDB").
  - Qdrant should index both project descriptions and full project source code.
  - Everything should be locally hosted (no external embeddings).
- **Interactive Elements**:
  - Career timeline should be D3-like interactive (zoom, forward/backward movement).
  - Skills map should be drillable from broad categories to code snippets.

## Technical Considerations
- **Frontend**: Next.js with Tailwind CSS.
- **Backend**: Node.js with MongoDB.
- **Hosting**: Self-hosted on a local server.
- **Search**: Qdrant for indexing projects and source code.
- **AI Chat**: Ollama for chatbot interactions.
- **Performance & Privacy**: Everything runs locally; no external dependencies for embeddings or AI models.
- **CI/CD Automation**: GitHub, Jenkins, and Docker for automated deployment.
- **Authentication**: Cookie-based authentication instead of bearer tokens.

## Development Approach
- **Start with Frontend First**: Mock API calls before integrating the backend.
- **Global State Management**:
  - Search should have a `SearchContext` and `SearchProvider` for global accessibility.
  - Chat should have a `ChatContext` and `ChatProvider` for global availability.
- **Landing Page Layout**:
  - AI chat should be site-wide, not just on a dedicated page.
  - Main sections:
    - "Time Machine" (Career Timeline)
    - "Philosophy" (Skills & Problem-Solving Map)
    - "Projects" (Live Demos, Searchable)
    - "Contact Me" (Engaging Form)
  - Clicking a section expands it, shrinking others into a sidebar.
- **Final Features**:
  - AI-powered guidance with optional interactivity.
  - Running live demos from pet projects.

## Next Steps
1. **Continue with frontend development**:
   - Search component should be fully functional and globally accessible.
   - AI Chat should be site-wide and utilize `ChatContext`.
2. **Integrate real backend API calls** for search and chat functionalities.
3. **Deploy and test CI/CD automation** using Jenkins and Docker.

This document captures the user’s full set of requirements for their AI-driven portfolio.

================
File: docs/1.b.UserRequirements.v2.md
================
# User Requirements for Portfolio Website

## Personality & Tone
- **Perception**: Creative, innovative problem solver, approachable expert, technical mentor, fun, easygoing.
- **Tone**: Friendly, witty, minimalist.
- **Storytelling**: Career journey timeline and anecdotes from key projects.

## Core Objectives & Features
- **Main Purpose**: Showcase talent and projects to attract high-profile job offers.
- **Primary Audience**:
  1. Fellow developers
  2. Industry leaders
  3. Recruiters / Potential Clients
- **Visitor Interaction**:
  1. AI Chat
  2. Semi-structured browsing

## Content Prioritization
- **Must-Haves**:
  - Career timeline
  - AI chatbot
  - Project showcase
  - Live demos
- **Nice-to-Haves**:
  - Blog
- **Project Showcase Format**: Just a link (either on GitHub or self-hosted with a reverse proxy).
- **Blog/Industry Insights**: Maybe, but not a priority.

## AI & Interactivity
- **AI Chat**:
  - Random greeting + guided prompt suggestions.
  - Freeform conversation allowed.
  - AI should distinguish between generic data and user-specific knowledge.
  - AI chat should retain session-based context.
  - **Web Context Injection**: AI will incorporate the full content of a loaded page into the chat context.
  - **Prompt History Integration**: The AI will receive the last few user messages to improve context handling.

- **Search Functionality**:
  - AI-powered search (e.g., "Show me projects using C# and MongoDB").
  - Qdrant should index both project descriptions and full project source code.
  - Everything should be locally hosted (no external embeddings).

- **Embeddings Management (Admin Feature)**:
  - Ability to parse a local directory accessible from the backend.
  - Support embedding source code, markdown, text files, and documents.
  - Admins can add metadata to directories/files to enrich embeddings.

- **Prompt Management System**:
  - Admins can modify AI prompts dynamically through the UI.
  - Prompts should be stored in a structured format instead of hardcoded in the backend.

## Interactive Elements
- **Career Timeline**: D3-like interactive (zoom, forward/backward movement).
- **Skills Map**: Drillable from broad categories to code snippets.

## Technical Considerations
- **Frontend**: Next.js with Tailwind CSS.
- **Backend**: Node.js with MongoDB.
- **Hosting**: Self-hosted on a local server.
- **Search**: Qdrant for indexing projects and source code.
- **AI Chat**: Ollama for chatbot interactions.
- **Performance & Privacy**: Everything runs locally; no external dependencies for embeddings or AI models.
- **CI/CD Automation**: GitHub, Jenkins, and Docker for automated deployment.
- **Authentication**: Cookie-based authentication instead of bearer tokens.

## Development Approach
- **Start with Frontend First**: Mock API calls before integrating the backend.
- **Global State Management**:
  - Search should have a `SearchContext` and `SearchProvider` for global accessibility.
  - Chat should have a `ChatContext` and `ChatProvider` for global availability.
- **Landing Page Layout**:
  - AI chat should be site-wide, not just on a dedicated page.
  - Main sections:
    - "Time Machine" (Career Timeline)
    - "Philosophy" (Skills & Problem-Solving Map)
    - "Projects" (Live Demos, Searchable)
    - "Contact Me" (Engaging Form)
  - Clicking a section expands it, shrinking others into a sidebar.
- **Final Features**:
  - AI-powered guidance with optional interactivity.
  - Running live demos from pet projects.

## Next Steps
1. **Continue with frontend development**:
   - Search component should be fully functional and globally accessible.
   - AI Chat should be site-wide and utilize `ChatContext`.
2. **Integrate real backend API calls** for search and chat functionalities.
3. **Deploy and test CI/CD automation** using Jenkins and Docker.
4. **Implement Web Context Injection and Prompt History in AI Chat**.
5. **Develop Embeddings Management for admins**.
6. **Create a UI for Prompt Management System**.

================
File: docs/1.c.UserRequirements.v3.md
================
# User Requirements Document

## 1. Project Overview
The portfolio platform is a self-hosted, AI-enhanced personal website designed to showcase the developer's experience, projects, and insights. It includes AI-powered interactions, a structured career timeline, a blog, and an interactive project showcase.

## 2. Goals & Scope
**Key Features:**
- AI-powered chatbot that answers questions based on blog entries, projects, and timeline data.
- Full CRUD support for blogs, projects, and career timeline entries.
- AI embeddings for enhanced search capabilities.
- Search combining full-text indexing and semantic embeddings.
- Admin dashboard for managing all content.
- UI for configuring the AI model and embeddings system.
- UI for application configuration (Title, Subtitle, Motto).
- Support for multi-language content translation via AI.

## 3. User Roles & Access Control
- **Admin:** Full access to CRUD operations for blogs, projects, timeline events, and AI configurations.
- **User:** Read-only access to blogs, projects, and AI chat.
- **Unauthenticated Users:** Can interact with the AI chatbot and view public content.
- No role-based access beyond "Admin" and "User."
- **No MFA support in this iteration.**
- **No OAuth-based access control for AI APIs** – AI chatbot is publicly accessible.

## 4. AI Chatbot & Search Functionalities
- AI chatbot interacts **without persisting chat history outside a session**.
- Admin-configurable choice between **Ollama and OpenAI API** at the site level (toggle during setup).
- **No user-submitted training data.** AI training updates automatically when blog entries, projects, or timeline events are added.
- **Hybrid search support:** Combines full-text and embeddings-based search.

## 5. Career Timeline & Skills Mapping
- **Interactive career timeline UI** for admins to enter career events.
- Events can be **linked together** (e.g., "Started at ABC" and "Stopped at ABC").
- Users can **zoom, filter, and explore** technologies used during different career phases.
- **Graph-based skills map** that visually connects skills, projects, and experiences.

## 6. Embeddings Management & AI Model Setup
- **Admin UI to manage embeddings.**
- **Admin UI to configure the AI model (Ollama or OpenAI).**
- **Embeddings generation and management** handled internally (e.g., automatic updates on content changes).

## 7. Multilingual Support
- AI-assisted initial content translation.
- Admin-configurable settings for enabling/disabling language options.
- Users can switch content languages if translated versions exist.

## 8. Admin Dashboard
- Initial version includes CRUD for blog posts, projects, career timeline, and embeddings management.
- Future enhancement: Analytics for most viewed projects, blog engagement, and AI chatbot interactions.

## 9. Non-Prioritized Features (for Future Consideration)
- Gamification and engagement elements have been removed for now.
- No immediate plans for monetization.
- No MFA support for admin users.

---

This document provides a **detailed foundation** for development planning and prioritization. The next step is breaking these requirements into **feature-based milestones** and defining a roadmap for implementation.

================
File: docs/2. development-plan.md
================
# Development Plan for AI-Driven Portfolio

## Overview
This development plan is structured by functional areas, each broken into **end-to-end testable work units**. Each unit specifies APIs, models, UI components, backend services, and dependencies.

---
## **1. Authentication & User Management (Must-Have)**
### **Work Units:**
✅ **Cookie-Based Authentication**
- API: `/auth/login`, `/auth/logout`, `/auth/check`
- Backend: `authService.js`, `passport.js`
- Frontend: `/admin/login`, `Header.tsx`
- **E2E Test:** Validate login/logout session behavior.

✅ **First-Time Admin Setup**
- API: `/users/admin-exists`
- Backend: `/admin/setup` flow
- **E2E Test:** Validate initial admin creation.

✅ **Admin vs. Non-Admin Role Enforcement**
- Backend: `authMiddleware.js`
- Frontend: Hide admin sections for non-admins.
- **E2E Test:** Ensure non-admins cannot access admin features.

⏳ **OAuth2 Authentication for Visitors** *(Google, Facebook, GitHub, Microsoft)*
- API: `/auth/oauth2/google`, `/auth/oauth2/facebook`, etc.
- Backend: `passport.js`, `providerConfigService.js`
- Frontend: OAuth login buttons in `/admin/login`.
- **E2E Test:** Validate OAuth login and redirection.

---
## **2. Blog System (Must-Have)**
### **Work Units:**
✅ **CRUD for Blog Posts** *(API: `/blogs`)*
✅ **Markdown Support (No WYSIWYG)**
✅ **Draft & Scheduled Publishing**
✅ **Comment System with Nested Replies** *(API: `/comments`)*
✅ **Comment Moderation (Hide Instead of Delete)**

---
## **3. Project Showcase (Must-Have)**
### **Work Units:**
✅ **CRUD for Projects** *(API: `/projects`)*
⏳ **Project Metadata for AI Search** *(Tags, Technologies, Industry Focus)*
⏳ **AI-Powered "Magic" Blog-Project Linking via Qdrant**
✅ **Self-Hosted Project Links via Reverse Proxy**

---
## **4. AI Chat (Must-Have)**
### **Work Units:**
⏳ **Session-Based AI Chat (Resets Per Visit)** *(API: `/chat`)*
⏳ **AI Uses Qdrant for Blog/Project Knowledge Retrieval**
⏳ **AI Summarizes Portfolio & Technologies**
- Backend: Structured prompt generation
- **External Dependency:** **Qdrant must be set up & indexed.**

---
## **5. Search System (Must-Have)**
### **Work Units:**
⏳ **Semantic Search for Blogs & Projects** *(API: `/search/semantic`)*
⏳ **Full Codebase Search for Projects** *(API: `/search/codebase`)*
⏳ **Hook for Future Search Weighting** *(Defaulting to Static Weights)*
- **External Dependency:** **Qdrant for indexing & retrieval.**

---
## **6. Career Timeline & Skills Map (Must-Have)**
### **Work Units:**
⏳ **AI-Assisted Timeline Generation (From Repos & Manual Events)** *(API: `/career/timeline`)*
⏳ **Metadata for Timeline Entries (Technologies, Linked Projects)**
⏳ **AI-Assisted Skills Map (Graph-Based AI Relationships)** *(API: `/career/skills-map`)*
⏳ **Linking Skills to Real Projects & Code Snippets** *(Qdrant-powered)*
⏳ **Import Career Timeline from LinkedIn Public Profile**

---
## **7. Admin Dashboard & Content Management (Should-Have)**
### **Work Units:**
✅ **OAuth Provider Config Management**
⏳ **CRUD for Comments (Delete in Addition to Redact)**
⏳ **Admin Panel for Career Timeline & Skills Map** *(UI for Manual Editing)*

---
## **8. AI Infrastructure & Hosting (Must-Have)**
### **Work Units:**
⏳ **Qdrant & Ollama Auto-Start via Docker Compose**
⏳ **Embeddings Generation from File Path + MongoDB Content** *(Parse `/data/embeddings-source/` & Merge DB Content)*
⏳ **Content Review/Edit UI Before Generating Embeddings** *(Admin Panel for Structuring Content Before AI Processing)*
⏳ **Automatic Reindexing & Periodic Updates** *(Cron Job for `/embeddings/refresh`)*

---
## **Final Steps**
✅ **Qdrant & Ollama need auto-start setup.**
✅ **A review/editing UI for embeddings will improve content organization.**
✅ **Reindexing automation depends on UI implementation.**

This plan provides a structured roadmap for development. 🚀

================
File: docs/2.b.development-plan.v2.md
================
# Development Plan for AI-Driven Portfolio

## Overview
This development plan is structured by functional areas, each broken into **end-to-end testable work units**. Each unit specifies APIs, models, UI components, backend services, and dependencies.

---
## **1. AI Chat Enhancements (Must-Have)**
### **Work Units:**
⏳ **Web Context Injection into AI Chat**
- **Feature:** Extract the full content of the loaded webpage and inject it into the chat context.
- **Frontend:** Modify `ChatContext` to include a `webContext` property.
- **Backend:** Modify chat API to accept `webContext` as part of the request payload.
- **E2E Test:** Validate AI responses improve based on page context.

⏳ **Prompt History Integration**
- **Feature:** Send previous user messages as part of the AI prompt.
- **Frontend:** Modify `ChatContext` to retain the last N messages.
- **Backend:** Modify chat API to process chat history.
- **E2E Test:** Verify AI can recall recent messages in context.

⏳ **Prompt Management System**
- **Feature:** Admins can manage and tune AI prompts via a UI.
- **API:** CRUD endpoints for managing stored prompts.
- **Frontend:** Admin dashboard for prompt editing.
- **Backend:** Store structured prompt templates in MongoDB.
- **E2E Test:** Verify prompt modifications affect AI behavior dynamically.

---
## **2. Embeddings Management (Must-Have)**
### **Work Units:**
⏳ **Embedding Local Directories & Files**
- **Feature:** Parse a directory accessible from the Node.js backend and generate embeddings.
- **API:** `POST /api/embeddings/local`
- **Backend:** 
  - Read files (source code, markdown, text, documents).
  - Extract metadata if provided.
  - Generate embeddings and store in Qdrant.
- **E2E Test:** Validate embeddings correctly represent parsed content.

⏳ **Embedding Metadata Support**
- **Feature:** Allow optional metadata in a configuration file for better embedding management.
- **Backend:** Parse metadata and associate with embeddings.
- **E2E Test:** Ensure metadata is properly stored and retrievable.

⏳ **Admin UI for Managing Embeddings**
- **Feature:** List, edit, and remove embeddings through an admin panel.
- **Frontend:** Admin dashboard section for embeddings.
- **Backend:** CRUD APIs for managing embeddings.
- **E2E Test:** Ensure embeddings can be reviewed and managed via UI.

---
## **3. Search & AI Integration (Should-Have)**
### **Work Units:**
⏳ **Fine-Tuning AI Search**
- **Feature:** Introduce configurable weighting for AI-powered search.
- **API:** `/api/search/config`
- **Backend:** Allow dynamic search tuning via admin panel.
- **Frontend:** Admin dashboard settings for search tuning.
- **E2E Test:** Validate different weights produce expected ranking changes.

⏳ **AI-Driven Blog-Project Linking**
- **Feature:** AI automatically suggests links between related blogs and projects.
- **Backend:** Generate project-to-blog mappings via embeddings.
- **E2E Test:** Validate suggestions improve based on AI-powered relationships.

---
## **4. Deployment & Performance Optimization (Nice-to-Have)**
### **Work Units:**
⏳ **Automated Embeddings Refresh**
- **Feature:** Periodically re-index embeddings from local files and database content.
- **Backend:** Implement scheduled job to refresh embeddings.
- **E2E Test:** Ensure embeddings stay up to date automatically.

⏳ **Improve WebSocket Performance in AI Chat**
- **Feature:** Optimize chat WebSocket handling for better responsiveness.
- **Backend:** Improve WebSocket session handling.
- **E2E Test:** Validate AI responses are delivered without unnecessary latency.

---
## **Final Steps**
✅ **Qdrant & Ollama are auto-started in Docker Compose.**
✅ **Base AI chatbot functionality is working with WebSockets.**
⏳ **Embeddings UI and Web Context Injection need implementation.**
⏳ **Final deployment optimization & testing.**

This plan provides a structured roadmap for completing the remaining development tasks. 🚀

================
File: docs/2.c.development-plan.v3.md
================
# Development Plan for Portfolio Enhancement

**Generated on 2025-03-05**

This development plan outlines the **end-to-end** (E2E) implementation strategy based on the **updated user requirements** and **existing repository structure**.

---

## **1. Authentication & Access Control**
### **1.1 User Authentication (✅ Done)**
- **Implemented:** Cookie-based authentication using session tokens.
- **Admin Login:** `/auth/login`, `/auth/logout`, `/auth/check`
- **Admin-Only Access Control:** Middleware (`authMiddleware.js`) restricts non-admins.

### **1.2 Admin Dashboard (✅ Done)**
- **Implemented:** Admin UI for managing blogs, projects, users, and comments.

### **1.3 Multi-Tenant AI API Support (⏳ Pending)**
- **New:** Admin-configurable AI model selection (Ollama or OpenAI API).
- **Tasks:**
  - Add AI configuration UI in `/admin/settings/ai-model`.
  - Modify `chatService.js` to conditionally switch between Ollama & OpenAI.
  - Store AI configuration in MongoDB (`ProviderConfig.js`).
  - **E2E Test:** Ensure API model switching works correctly.

---

## **2. AI Chatbot & Search**
### **2.1 AI Chat (⏳ Pending)**
- ✅ **Implemented:** AI chat session with WebSockets.
- ✅ **Implemented:** Chat history retention within the session.
- **New:** AI should answer based on **blogs, projects, and timeline**.
  - Modify `chatService.js` to integrate Qdrant embeddings.
  - Update `Chat.tsx` to inject page context (`/chat/context`).
  - **E2E Test:** Validate AI references correct blog/project info.

### **2.2 Hybrid Search (⏳ Pending)**
- ✅ **Implemented:** AI-powered search (`/search/semantic`).
- **New:** Implement **full codebase search**.
  - Improve `/search/codebase` to **index source code from local directories**.
  - Update search UI to **combine full-text and AI-powered search results**.
  - **E2E Test:** Validate relevance of code search results.

---

## **3. Career Timeline & Skills Map**
### **3.1 Career Timeline (⏳ Pending)**
- **New:** Add **career timeline UI** for admins.
  - Create `/admin/career` page with interactive forms.
  - Implement career timeline API (`/career/timeline`).
  - **E2E Test:** Verify CRUD operations and linking.

### **3.2 Import from LinkedIn (⏳ Pending)**
- **New:** Integration to pull profesionnal data as career events to pre-fill career timeline.
  - Implement a LinkedIn integration under `/career/from-linkedin`.
  - Create UI to configure the integration 
    - set the API key
    - preview and select items
    - generate projects, events, and skills

### **3.3 Skills Map (⏳ Pending)**
- **New:** AI-driven **graph-based** visualization of skills and projects.
  - Implement a **D3.js-based skills graph** under `/career/skills-map`.
  - Create **skill-project embeddings** using Qdrant.
  - **E2E Test:** Verify project-skill relations.

---

## **4. Content Management**
### **4.1 Blogs (✅ Done)**
- ✅ CRUD operations for blog posts (`/blogs`).
- ✅ Markdown support (no WYSIWYG).
- ✅ Draft & scheduled publishing.

### **4.2 Projects (⏳ Pending Enhancements)**
- ✅ CRUD operations for projects (`/projects`).
- **New:** Add **AI-powered tagging** for projects.
  - Generate **project embeddings** (`/projects/generate-embeddings`).
  - Display suggested tags based on embeddings.
  - **E2E Test:** Ensure accurate project categorization.

### **4.3 Embeddings Management (⏳ Pending)**
- **New:** Admin should be able to **manually trigger embedding updates**.
  - Implement `/embeddings/refresh`.
  - Add UI in `/admin/embeddings`.
  - **E2E Test:** Ensure embeddings update correctly.

---

## **5. Multi-Language Support (⏳ Pending)**
- **New:** AI-assisted translation for blog content.
  - Add **language switcher** to `/blogs/[slug]`.
  - Extend `Blog.js` model to store multiple language versions.
  - Use OpenAI API for translations.
  - **E2E Test:** Verify translations.

---

## **6. Deployment & Hosting**
### **6.1 Dockerized Deployment (✅ Done)**
- ✅ **Implemented:** Docker-compose setup for `portfolio.next` and `portfolio.node`.
- **Enhancement:** Optimize container startup for **Qdrant & Ollama**.
  - Add `healthcheck` for AI services.
  - **E2E Test:** Ensure proper startup sequence.

---

## **Final Steps**
- ✅ **Confirm all existing APIs match OpenAPI Spec** (`openapi.yml`).
- ✅ **Ensure all features are accessible via Admin UI**.
- ✅ **Prepare deployment & test environments**.

---

### **Deliverable**
A full **end-to-end functional portfolio** with AI-powered features, career timeline, and hybrid search.

================
File: docs/jobs.html
================
<html>

<body>
    <ul class="PdRUlssPYwwHVyfokYoPNtMeAOfjkIoxnUc
            
            
            ">
        <li class="artdeco-list__item yUYbUPmIDBCyujolHJvDMVJLdKKwbTvJNGnVDA qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


            <!---->
            <div class="iySSlsjvmHFIjvVVBeTzQKiCkbVUEscOCasgZMM
        AajnQCQGlEqOkCCSZJHqFVelplbPuTKoKw owSPWypkbaygNqfMzXkzygjefLVERYVMnw
        
        
        
        " data-view-name="profile-component-entity">
                <div>

                    <a data-field="experience_company_logo" class="optional-action-target-wrapper 
            
            pvs-entity__image-container--outline-offset
            display-flex" target="_self" href="https://www.linkedin.com/company/1683932/">

                        <div class="ivm-image-view-model  pvs-entity__image ">

                            <div class="ivm-view-attr__img-wrapper
        
        ">
                                <!---->
                                <!----> <img width="48"
                                    src="https://media.licdn.com/dms/image/v2/D560BAQFpE75AW3qexw/company-logo_100_100/company-logo_100_100/0/1706727892682/intrahealth_healwellai_logo?e=1749686400&amp;v=beta&amp;t=Aa_FOTs4LvxbN9RCn7pYOwgOAamfKDgLm-jFaQB7Wo4"
                                    loading="lazy" height="48" alt="Intrahealth, a HEALWELL AI Company logo"
                                    id="ember117"
                                    class="ivm-view-attr__img--centered EntityPhoto-square-3   evi-image lazy-image ember-view">
                            </div>

                        </div>

                    </a>

                </div>

                <div class="display-flex flex-column align-self-center flex-grow-1">
                    <div class="display-flex flex-row justify-space-between">

                        <div class="
              display-flex flex-column full-width">

                            <div class="display-flex flex-wrap align-items-center full-height">

                                <div class="display-flex ">

                                    <div class="
          display-flex full-width">

                                        <div class="display-flex align-items-center
              mr1 t-bold">
                                            <span aria-hidden="true"><!---->Principal .NET developer<!----></span><span
                                                class="visually-hidden"><!---->Principal .NET developer<!----></span>
                                        </div>
                                        <!---->
                                    </div>

                                </div>

                                <!----><!----><!---->
                            </div>
                            <span class="t-14 t-normal">
                                <span aria-hidden="true"><!---->Intrahealth, a HEALWELL AI Company · Permanent
                                    Full-time<!----></span><span class="visually-hidden"><!---->Intrahealth, a HEALWELL
                                    AI Company · Permanent Full-time<!----></span>
                            </span>
                            <span class="t-14 t-normal
                  t-black--light">
                                <span class="pvs-entity__caption-wrapper" aria-hidden="true"><!---->Sep 2024 - Present ·
                                    7 mos<!----></span><span class="visually-hidden"><!---->Sep 2024 to Present · 7
                                    mos<!----></span>
                            </span>
                            <span class="t-14 t-normal
                  t-black--light">
                                <span aria-hidden="true"><!---->Canada · Remote<!----></span><span
                                    class="visually-hidden"><!---->Canada · Remote<!----></span>
                            </span>

                        </div>

                    </div>
                    <!---->
                </div>
                <!---->
                <!---->
            </div>


        </li>
        <li class="artdeco-list__item yUYbUPmIDBCyujolHJvDMVJLdKKwbTvJNGnVDA qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


            <!---->
            <div class="iySSlsjvmHFIjvVVBeTzQKiCkbVUEscOCasgZMM
        AajnQCQGlEqOkCCSZJHqFVelplbPuTKoKw owSPWypkbaygNqfMzXkzygjefLVERYVMnw
        
        
        
        " data-view-name="profile-component-entity">
                <div>

                    <a data-field="experience_company_logo" class="optional-action-target-wrapper 
            
            pvs-entity__image-container--outline-offset
            display-flex" target="_self" href="https://www.linkedin.com/company/4126/">

                        <div class="ivm-image-view-model  pvs-entity__image ">

                            <div class="ivm-view-attr__img-wrapper
        
        ">
                                <!---->
                                <!----> <img width="48"
                                    src="https://media.licdn.com/dms/image/v2/C4D0BAQFfG02Ebu_lqg/company-logo_100_100/company-logo_100_100/0/1630543130113/sgs_logo?e=1749686400&amp;v=beta&amp;t=XU4-LyfOKS2S9cW3QoKb5OGm7i_9qwyPvFJrJNohUR0"
                                    loading="lazy" height="48" alt="SGS logo" id="ember121"
                                    class="ivm-view-attr__img--centered EntityPhoto-square-3   evi-image lazy-image ember-view">
                            </div>

                        </div>

                    </a>

                </div>

                <div class="display-flex flex-column align-self-center flex-grow-1">
                    <div class="display-flex flex-row justify-space-between">

                        <a data-field="experience_company_logo" class="optional-action-target-wrapper 
              display-flex flex-column full-width" target="_self" href="https://www.linkedin.com/company/4126/">
                            <div class="display-flex flex-wrap align-items-center full-height">

                                <div class="display-flex ">

                                    <div class="
          display-flex full-width">

                                        <div class="display-flex align-items-center
              mr1 hoverable-link-text t-bold">
                                            <span aria-hidden="true"><!---->SGS<!----></span><span
                                                class="visually-hidden"><!---->SGS<!----></span>
                                        </div>
                                        <!---->
                                    </div>

                                </div>

                                <!----><!----><!---->
                            </div>
                            <span class="t-14 t-normal">
                                <span aria-hidden="true"><!---->Permanent Full-time · 6 yrs 8 mos<!----></span><span
                                    class="visually-hidden"><!---->Permanent Full-time · 6 yrs 8 mos<!----></span>
                            </span>
                            <!----><!---->
                        </a>

                    </div>

                    <div class="FtwCyQiKWmAiGnEmVueQaXzXAGHOsFzwvUjJnmX pvs-entity__sub-components">
                        <!---->
                        <ul class="PdRUlssPYwwHVyfokYoPNtMeAOfjkIoxnUc
            
            
            ">
                            <li class="qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                <span class="EjZKUrtOZcFtnELEhNGFouebDCwJhXVgKMI"></span>
                                <div class="iySSlsjvmHFIjvVVBeTzQKiCkbVUEscOCasgZMM
        
        ixzvzMZQySGEYBvQMGULohZYouQrhmiEk
        
        
        " data-view-name="profile-component-entity">
                                    <div>

                                        <div class="
            
            
            display-flex" tabindex="-1">

                                            <!---->
                                        </div>

                                    </div>

                                    <div class="display-flex flex-column align-self-center flex-grow-1">
                                        <div class="display-flex flex-row justify-space-between">

                                            <a class="optional-action-target-wrapper 
              display-flex flex-column full-width" target="_self" href="https://www.linkedin.com/company/4126/">
                                                <div class="display-flex flex-wrap align-items-center full-height">

                                                    <div class="display-flex ">

                                                        <div class="
          display-flex full-width">

                                                            <div class="display-flex align-items-center
              mr1 hoverable-link-text t-bold">
                                                                <span aria-hidden="true"><!---->Platform
                                                                    Lead<!----></span><span
                                                                    class="visually-hidden"><!---->Platform
                                                                    Lead<!----></span>
                                                            </div>
                                                            <!---->
                                                        </div>

                                                    </div>

                                                    <!----><!----><!---->
                                                </div>
                                                <!----> <span class="t-14 t-normal
                  t-black--light">
                                                    <span class="pvs-entity__caption-wrapper"
                                                        aria-hidden="true"><!---->Jul 2024 - Aug 2024 · 2
                                                        mos<!----></span><span class="visually-hidden"><!---->Jul 2024
                                                        to Aug 2024 · 2 mos<!----></span>
                                                </span>
                                                <span class="t-14 t-normal
                  t-black--light">
                                                    <span aria-hidden="true"><!---->Remote<!----></span><span
                                                        class="visually-hidden"><!---->Remote<!----></span>
                                                </span>
                                            </a>

                                        </div>
                                        <!---->
                                    </div>
                                    <!---->
                                    <!---->
                                </div>


                            </li>
                            <li class="qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                <span class="EjZKUrtOZcFtnELEhNGFouebDCwJhXVgKMI"></span>
                                <div class="iySSlsjvmHFIjvVVBeTzQKiCkbVUEscOCasgZMM
        
        ixzvzMZQySGEYBvQMGULohZYouQrhmiEk
        
        
        " data-view-name="profile-component-entity">
                                    <div>

                                        <div class="
            
            
            display-flex" tabindex="-1">

                                            <!---->
                                        </div>

                                    </div>

                                    <div class="display-flex flex-column align-self-center flex-grow-1">
                                        <div class="display-flex flex-row justify-space-between">

                                            <a class="optional-action-target-wrapper 
              display-flex flex-column full-width" target="_self" href="https://www.linkedin.com/company/4126/">
                                                <div class="display-flex flex-wrap align-items-center full-height">

                                                    <div class="display-flex ">

                                                        <div class="
          display-flex full-width">

                                                            <div class="display-flex align-items-center
              mr1 hoverable-link-text t-bold">
                                                                <span aria-hidden="true"><!---->Architecte
                                                                    solutions<!----></span><span
                                                                    class="visually-hidden"><!---->Architecte
                                                                    solutions<!----></span>
                                                            </div>
                                                            <!---->
                                                        </div>

                                                    </div>

                                                    <!----><!----><!---->
                                                </div>
                                                <!----> <span class="t-14 t-normal
                  t-black--light">
                                                    <span class="pvs-entity__caption-wrapper"
                                                        aria-hidden="true"><!---->Mar 2022 - Jul 2024 · 2 yrs 5
                                                        mos<!----></span><span class="visually-hidden"><!---->Mar 2022
                                                        to Jul 2024 · 2 yrs 5 mos<!----></span>
                                                </span>
                                                <!---->
                                            </a>

                                        </div>

                                        <div class="FtwCyQiKWmAiGnEmVueQaXzXAGHOsFzwvUjJnmX pvs-entity__sub-components">
                                            <!---->
                                            <ul class="PdRUlssPYwwHVyfokYoPNtMeAOfjkIoxnUc
            
            
            ">
                                                <li class="qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                                    <div class="FtwCyQiKWmAiGnEmVueQaXzXAGHOsFzwvUjJnmX">
                                                        <!---->
                                                        <ul class="PdRUlssPYwwHVyfokYoPNtMeAOfjkIoxnUc
            
            
            ">
                                                            <li
                                                                class="pvs-list__item--with-top-padding qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                                                <div class="display-flex ">

                                                                    <div class="
          display-flex full-width">


                                                                        <div class="xyKuvshqjNOCLLbuJMSOACywiHYHucctJs
          full-width t-14 t-normal t-black display-flex align-items-center" dir="ltr">

                                                                            <div class="WcTepSkGpUVWbbheKPCszGxDQzmhiNFQ
        inline-show-more-text--is-collapsed
        inline-show-more-text--is-collapsed-with-line-clamp
        
        
        
         full-width" style="-webkit-line-clamp:2;" dir="ltr" tabindex="-1">

                                                                                <span aria-hidden="true"><!---->aka LIMS
                                                                                    architect<!----></span><span
                                                                                    class="visually-hidden"><!---->aka
                                                                                    LIMS architect<!----></span>

                                                                                <!---->
                                                                            </div>

                                                                        </div>

                                                                        <!---->
                                                                    </div>

                                                                </div>


                                                            </li>
                                                        </ul>
                                                        <!---->
                                                    </div>


                                                </li>
                                                <li class="qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                                    <div class="FtwCyQiKWmAiGnEmVueQaXzXAGHOsFzwvUjJnmX">
                                                        <!---->
                                                        <ul class="PdRUlssPYwwHVyfokYoPNtMeAOfjkIoxnUc
            
            
            ">
                                                            <li
                                                                class="pvs-list__item--with-top-padding qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                                                <div class="
        mv1
        display-flex align-items-center">

                                                                    <a data-field="position_contextual_skills_see_details"
                                                                        class="optional-action-target-wrapper display-flex link-without-hover-visited"
                                                                        target="_self"
                                                                        href="https://www.linkedin.com/in/michel-roberge-7011b614/overlay/urn:li:fsd_profilePosition:(ACoAAALgc3EBglzhZDPKP2JcpyPypmkYxBacitY,1930019616)/skill-associations-details?profileUrn=urn%3Ali%3Afsd_profile%3AACoAAALgc3EBglzhZDPKP2JcpyPypmkYxBacitY">
                                                                        <div class="mr1
                mv1
                
                ">

                                                                            <ul class="ivm-entity-pile
        display-flex align-items-center t-black">
                                                                                <li
                                                                                    class="ivm-entity-pile__img-item--stacked">

                                                                                    <div class="ivm-view-attr__img-wrapper
        
        ">
                                                                                        <!---->
                                                                                        <svg role="none"
                                                                                            aria-hidden="true"
                                                                                            class="ivm-view-attr__icon ivm-view-attr__icon--icon  "
                                                                                            xmlns="http://www.w3.org/2000/svg"
                                                                                            width="16" height="16"
                                                                                            viewBox="0 0 16 16"
                                                                                            data-supported-dps="16x16"
                                                                                            data-test-icon="skills-small">
                                                                                            <!---->
                                                                                            <use href="#skills-small"
                                                                                                width="16" height="16">
                                                                                            </use>
                                                                                        </svg>

                                                                                    </div>

                                                                                </li>
                                                                            </ul>

                                                                        </div>

                                                                        <div class="display-flex ">

                                                                            <div class="
          display-flex full-width">

                                                                                <div class="hoverable-link-text display-flex align-items-center
              t-14 t-normal t-black">
                                                                                    <strong><!---->Communication écrite,
                                                                                        Communication and +6
                                                                                        skills<!----></strong>
                                                                                </div>
                                                                                <!---->
                                                                            </div>

                                                                        </div>

                                                                    </a>


                                                                    <!---->
                                                                </div>


                                                            </li>
                                                        </ul>
                                                        <!---->
                                                    </div>


                                                </li>
                                            </ul>
                                            <!---->
                                        </div>

                                    </div>
                                    <!---->
                                    <!---->
                                </div>


                            </li>
                            <li class="qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                <span class="EjZKUrtOZcFtnELEhNGFouebDCwJhXVgKMI"></span>
                                <div class="iySSlsjvmHFIjvVVBeTzQKiCkbVUEscOCasgZMM
        
        
        
        
        " data-view-name="profile-component-entity">
                                    <div>

                                        <div class="
            
            
            display-flex" tabindex="-1">

                                            <!---->
                                        </div>

                                    </div>

                                    <div class="display-flex flex-column align-self-center flex-grow-1">
                                        <div class="display-flex flex-row justify-space-between">

                                            <a class="optional-action-target-wrapper 
              display-flex flex-column full-width" target="_self" href="https://www.linkedin.com/company/4126/">
                                                <div class="display-flex flex-wrap align-items-center full-height">

                                                    <div class="display-flex ">

                                                        <div class="
          display-flex full-width">

                                                            <div class="display-flex align-items-center
              mr1 hoverable-link-text t-bold">
                                                                <span aria-hidden="true"><!---->Software Development
                                                                    Manager<!----></span><span
                                                                    class="visually-hidden"><!---->Software Development
                                                                    Manager<!----></span>
                                                            </div>
                                                            <!---->
                                                        </div>

                                                    </div>

                                                    <!----><!----><!---->
                                                </div>
                                                <!----> <span class="t-14 t-normal
                  t-black--light">
                                                    <span class="pvs-entity__caption-wrapper"
                                                        aria-hidden="true"><!---->Jan 2018 - Mar 2022 · 4 yrs 3
                                                        mos<!----></span><span class="visually-hidden"><!---->Jan 2018
                                                        to Mar 2022 · 4 yrs 3 mos<!----></span>
                                                </span>
                                                <span class="t-14 t-normal
                  t-black--light">
                                                    <span aria-hidden="true"><!---->Canada<!----></span><span
                                                        class="visually-hidden"><!---->Canada<!----></span>
                                                </span>
                                            </a>

                                        </div>

                                        <div class="FtwCyQiKWmAiGnEmVueQaXzXAGHOsFzwvUjJnmX pvs-entity__sub-components">
                                            <!---->
                                            <ul class="PdRUlssPYwwHVyfokYoPNtMeAOfjkIoxnUc
            
            
            ">
                                                <li class="qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                                    <div class="FtwCyQiKWmAiGnEmVueQaXzXAGHOsFzwvUjJnmX">
                                                        <!---->
                                                        <ul class="PdRUlssPYwwHVyfokYoPNtMeAOfjkIoxnUc
            
            
            ">
                                                            <li
                                                                class="pvs-list__item--with-top-padding qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                                                <div class="display-flex ">

                                                                    <div class="
          display-flex full-width">


                                                                        <div class="xyKuvshqjNOCLLbuJMSOACywiHYHucctJs
          full-width t-14 t-normal t-black display-flex align-items-center" dir="ltr">

                                                                            <div class="WcTepSkGpUVWbbheKPCszGxDQzmhiNFQ
        
        
        
        
        
         full-width" style="" dir="ltr" tabindex="-1">

                                                                                <span aria-hidden="true"><!---->- Manage
                                                                                    global development team (10+
                                                                                    developers
                                                                                    worldwide)<!----><br><!---->-
                                                                                    Create/Facilitate software design
                                                                                    and architectural decisions<span
                                                                                        class="white-space-pre">
                                                                                    </span><br><!---->- Integration to
                                                                                    many systems and
                                                                                    technologies<!----><br><!---->- Help
                                                                                    each team member to be the best in
                                                                                    class<!----><br><!---->- Scrum
                                                                                    Master<span class="white-space-pre">
                                                                                    </span><br><!---->- Analysis,
                                                                                    Design, Research and
                                                                                    Development<!----><br><!---->-
                                                                                    Define best practices and
                                                                                    processes<!----><br><!---->- Define
                                                                                    path to continuous
                                                                                    improvement<!----><br><br><!---->...
                                                                                    And much, much
                                                                                    more.<!----></span><span
                                                                                    class="visually-hidden"><!---->-
                                                                                    Manage global development team (10+
                                                                                    developers worldwide)
                                                                                    - Create/Facilitate software design
                                                                                    and architectural decisions
                                                                                    - Integration to many systems and
                                                                                    technologies
                                                                                    - Help each team member to be the
                                                                                    best in class
                                                                                    - Scrum Master
                                                                                    - Analysis, Design, Research and
                                                                                    Development
                                                                                    - Define best practices and
                                                                                    processes
                                                                                    - Define path to continuous
                                                                                    improvement

                                                                                    ... And much, much
                                                                                    more.<!----></span>

                                                                                <!---->
                                                                                <!---->
                                                                            </div>

                                                                        </div>

                                                                        <!---->
                                                                    </div>

                                                                </div>


                                                            </li>
                                                        </ul>
                                                        <!---->
                                                    </div>


                                                </li>
                                                <li class="qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                                    <div class="FtwCyQiKWmAiGnEmVueQaXzXAGHOsFzwvUjJnmX">
                                                        <!---->
                                                        <ul class="PdRUlssPYwwHVyfokYoPNtMeAOfjkIoxnUc
            
            
            ">
                                                            <li
                                                                class="pvs-list__item--with-top-padding qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                                                <div class="
        mv1
        display-flex align-items-center">

                                                                    <a data-field="position_contextual_skills_see_details"
                                                                        class="optional-action-target-wrapper display-flex link-without-hover-visited"
                                                                        target="_self"
                                                                        href="https://www.linkedin.com/in/michel-roberge-7011b614/overlay/urn:li:fsd_profilePosition:(ACoAAALgc3EBglzhZDPKP2JcpyPypmkYxBacitY,1193221756)/skill-associations-details?profileUrn=urn%3Ali%3Afsd_profile%3AACoAAALgc3EBglzhZDPKP2JcpyPypmkYxBacitY">
                                                                        <div class="mr1
                mv1
                
                ">

                                                                            <ul class="ivm-entity-pile
        display-flex align-items-center t-black">
                                                                                <li
                                                                                    class="ivm-entity-pile__img-item--stacked">

                                                                                    <div class="ivm-view-attr__img-wrapper
        
        ">
                                                                                        <!---->
                                                                                        <svg role="none"
                                                                                            aria-hidden="true"
                                                                                            class="ivm-view-attr__icon ivm-view-attr__icon--icon  "
                                                                                            xmlns="http://www.w3.org/2000/svg"
                                                                                            width="16" height="16"
                                                                                            viewBox="0 0 16 16"
                                                                                            data-supported-dps="16x16"
                                                                                            data-test-icon="skills-small">
                                                                                            <!---->
                                                                                            <use href="#skills-small"
                                                                                                width="16" height="16">
                                                                                            </use>
                                                                                        </svg>

                                                                                    </div>

                                                                                </li>
                                                                            </ul>

                                                                        </div>

                                                                        <div class="display-flex ">

                                                                            <div class="
          display-flex full-width">

                                                                                <div class="hoverable-link-text display-flex align-items-center
              t-14 t-normal t-black">
                                                                                    <strong><!---->Communication écrite,
                                                                                        Communication and +6
                                                                                        skills<!----></strong>
                                                                                </div>
                                                                                <!---->
                                                                            </div>

                                                                        </div>

                                                                    </a>


                                                                    <!---->
                                                                </div>


                                                            </li>
                                                        </ul>
                                                        <!---->
                                                    </div>


                                                </li>
                                            </ul>
                                            <!---->
                                        </div>

                                    </div>
                                    <!---->
                                    <!---->
                                </div>


                            </li>
                        </ul>
                        <!---->
                    </div>

                </div>
                <!---->
                <!---->
            </div>


        </li>
        <li class="artdeco-list__item yUYbUPmIDBCyujolHJvDMVJLdKKwbTvJNGnVDA qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


            <!---->
            <div class="iySSlsjvmHFIjvVVBeTzQKiCkbVUEscOCasgZMM
        AajnQCQGlEqOkCCSZJHqFVelplbPuTKoKw owSPWypkbaygNqfMzXkzygjefLVERYVMnw
        
        
        
        " data-view-name="profile-component-entity">
                <div>

                    <a data-field="experience_company_logo" class="optional-action-target-wrapper 
            
            pvs-entity__image-container--outline-offset
            display-flex" target="_self" tabindex="-1"
                        href="https://www.linkedin.com/search/results/all/?keywords=Abbott+Informatics">

                        <div class="ivm-image-view-model  pvs-entity__image ">

                            <div class="ivm-view-attr__img-wrapper
        
        ">
                                <!---->
                                <div class="EntityPhoto-square-3-ghost-company ivm-view-attr__ghost-entity  ">
                                    <div class="visually-hidden">Abbott Informatics</div>
                                </div>
                            </div>

                        </div>

                    </a>

                </div>

                <div class="display-flex flex-column align-self-center flex-grow-1">
                    <div class="display-flex flex-row justify-space-between">

                        <a data-field="experience_company_logo" class="optional-action-target-wrapper 
              display-flex flex-column full-width" target="_self" href="https://www.linkedin.com/company/248524/">
                            <div class="display-flex flex-wrap align-items-center full-height">

                                <div class="display-flex ">

                                    <div class="
          display-flex full-width">

                                        <div class="display-flex align-items-center
              mr1 hoverable-link-text t-bold">
                                            <span aria-hidden="true"><!---->Abbott Informatics<!----></span><span
                                                class="visually-hidden"><!---->Abbott Informatics<!----></span>
                                        </div>
                                        <!---->
                                    </div>

                                </div>

                                <!----><!----><!---->
                            </div>
                            <span class="t-14 t-normal">
                                <span aria-hidden="true"><!---->17 yrs 7 mos<!----></span><span
                                    class="visually-hidden"><!---->17 yrs 7 mos<!----></span>
                            </span>
                            <!----><!---->
                        </a>

                    </div>

                    <div class="FtwCyQiKWmAiGnEmVueQaXzXAGHOsFzwvUjJnmX pvs-entity__sub-components">
                        <!---->
                        <ul class="PdRUlssPYwwHVyfokYoPNtMeAOfjkIoxnUc
            
            
            ">
                            <li class="qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                <span class="EjZKUrtOZcFtnELEhNGFouebDCwJhXVgKMI"></span>
                                <div class="iySSlsjvmHFIjvVVBeTzQKiCkbVUEscOCasgZMM
        
        ixzvzMZQySGEYBvQMGULohZYouQrhmiEk
        
        
        " data-view-name="profile-component-entity">
                                    <div>

                                        <div class="
            
            
            display-flex" tabindex="-1">

                                            <!---->
                                        </div>

                                    </div>

                                    <div class="display-flex flex-column align-self-center flex-grow-1">
                                        <div class="display-flex flex-row justify-space-between">

                                            <a class="optional-action-target-wrapper 
              display-flex flex-column full-width" target="_self" href="https://www.linkedin.com/company/248524/">
                                                <div class="display-flex flex-wrap align-items-center full-height">

                                                    <div class="display-flex ">

                                                        <div class="
          display-flex full-width">

                                                            <div class="display-flex align-items-center
              mr1 hoverable-link-text t-bold">
                                                                <span aria-hidden="true"><!---->Senior Business System
                                                                    Analyst/Project Manager<!----></span><span
                                                                    class="visually-hidden"><!---->Senior Business
                                                                    System Analyst/Project Manager<!----></span>
                                                            </div>
                                                            <!---->
                                                        </div>

                                                    </div>

                                                    <!----><!----><!---->
                                                </div>
                                                <!----> <span class="t-14 t-normal
                  t-black--light">
                                                    <span class="pvs-entity__caption-wrapper"
                                                        aria-hidden="true"><!---->Jul 2013 - Jan 2018 · 4 yrs 7
                                                        mos<!----></span><span class="visually-hidden"><!---->Jul 2013
                                                        to Jan 2018 · 4 yrs 7 mos<!----></span>
                                                </span>
                                                <span class="t-14 t-normal
                  t-black--light">
                                                    <span aria-hidden="true"><!---->Virtual<!----></span><span
                                                        class="visually-hidden"><!---->Virtual<!----></span>
                                                </span>
                                            </a>

                                        </div>

                                        <div class="FtwCyQiKWmAiGnEmVueQaXzXAGHOsFzwvUjJnmX pvs-entity__sub-components">
                                            <!---->
                                            <ul class="PdRUlssPYwwHVyfokYoPNtMeAOfjkIoxnUc
            
            
            ">
                                                <li class="qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                                    <div class="FtwCyQiKWmAiGnEmVueQaXzXAGHOsFzwvUjJnmX">
                                                        <!---->
                                                        <ul class="PdRUlssPYwwHVyfokYoPNtMeAOfjkIoxnUc
            
            
            ">
                                                            <li
                                                                class="pvs-list__item--with-top-padding qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                                                <div class="display-flex ">

                                                                    <div class="
          display-flex full-width">


                                                                        <div class="xyKuvshqjNOCLLbuJMSOACywiHYHucctJs
          full-width t-14 t-normal t-black display-flex align-items-center" dir="ltr">

                                                                            <div class="WcTepSkGpUVWbbheKPCszGxDQzmhiNFQ
        inline-show-more-text--is-collapsed
        inline-show-more-text--is-collapsed-with-line-clamp
        
        
        
         full-width" style="-webkit-line-clamp:2;" dir="ltr" tabindex="-1">

                                                                                <span aria-hidden="true"><!---->After
                                                                                    going around and trying many
                                                                                    different things at Abbott
                                                                                    Informatics (STARLIMS), I was
                                                                                    offered to take on the Advanced
                                                                                    Analytics product development lead.
                                                                                    The role required good business
                                                                                    knowledge, good communication
                                                                                    skills, and the ability to get
                                                                                    creative. Sounded like a
                                                                                    plan!<!----><br><br><!---->Speciality
                                                                                    Products - STARLIMS Advanced
                                                                                    Analytics<!----><br><!---->- Project
                                                                                    Management<!----><br><!---->-
                                                                                    Development &amp;
                                                                                    Integration<!----><br><!---->-
                                                                                    Documentation (Training Material,
                                                                                    requirements,
                                                                                    etc)<!----><br><!---->- Marketing
                                                                                    (Support material, ideas,
                                                                                    presentations)<!----><br><!---->-
                                                                                    Advanced Analytics Dashboards for
                                                                                    many industries and
                                                                                    clients<!----><br><!---->- Running
                                                                                    an in-house continuous training
                                                                                    program<span
                                                                                        class="white-space-pre">
                                                                                    </span><br><!---->- Library Platform
                                                                                    (System
                                                                                    Architect)<!----><br><!---->-
                                                                                    Whiteboard Videos Authoring,
                                                                                    Tutorials, and other
                                                                                    media<!----><br><!---->- Scrum
                                                                                    Master<!----></span><span
                                                                                    class="visually-hidden"><!---->After
                                                                                    going around and trying many
                                                                                    different things at Abbott
                                                                                    Informatics (STARLIMS), I was
                                                                                    offered to take on the Advanced
                                                                                    Analytics product development lead.
                                                                                    The role required good business
                                                                                    knowledge, good communication
                                                                                    skills, and the ability to get
                                                                                    creative. Sounded like a plan!

                                                                                    Speciality Products - STARLIMS
                                                                                    Advanced Analytics
                                                                                    - Project Management
                                                                                    - Development &amp; Integration
                                                                                    - Documentation (Training Material,
                                                                                    requirements, etc)
                                                                                    - Marketing (Support material,
                                                                                    ideas, presentations)
                                                                                    - Advanced Analytics Dashboards for
                                                                                    many industries and clients
                                                                                    - Running an in-house continuous
                                                                                    training program
                                                                                    - Library Platform (System
                                                                                    Architect)
                                                                                    - Whiteboard Videos Authoring,
                                                                                    Tutorials, and other media
                                                                                    - Scrum Master<!----></span>

                                                                                <span
                                                                                    class="inline-show-more-text__link-container-collapsed">
                                                                                    <!----> <button class="inline-show-more-text__button
                inline-show-more-text__button--light
                link" aria-expanded="false" role="button" type="button">
                                                                                        …see more
                                                                                    </button>
                                                                                </span>

                                                                                <!---->
                                                                            </div>

                                                                        </div>

                                                                        <!---->
                                                                    </div>

                                                                </div>


                                                            </li>
                                                        </ul>
                                                        <!---->
                                                    </div>


                                                </li>
                                                <li class="qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                                    <div class="FtwCyQiKWmAiGnEmVueQaXzXAGHOsFzwvUjJnmX">
                                                        <!---->
                                                        <ul class="PdRUlssPYwwHVyfokYoPNtMeAOfjkIoxnUc
            
            
            ">
                                                            <li
                                                                class="pvs-list__item--with-top-padding qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                                                <div class="
        mv1
        display-flex align-items-center">

                                                                    <a data-field="position_contextual_skills_see_details"
                                                                        class="optional-action-target-wrapper display-flex link-without-hover-visited"
                                                                        target="_self"
                                                                        href="https://www.linkedin.com/in/michel-roberge-7011b614/overlay/urn:li:fsd_profilePosition:(ACoAAALgc3EBglzhZDPKP2JcpyPypmkYxBacitY,420381636)/skill-associations-details?profileUrn=urn%3Ali%3Afsd_profile%3AACoAAALgc3EBglzhZDPKP2JcpyPypmkYxBacitY">
                                                                        <div class="mr1
                mv1
                
                ">

                                                                            <ul class="ivm-entity-pile
        display-flex align-items-center t-black">
                                                                                <li
                                                                                    class="ivm-entity-pile__img-item--stacked">

                                                                                    <div class="ivm-view-attr__img-wrapper
        
        ">
                                                                                        <!---->
                                                                                        <svg role="none"
                                                                                            aria-hidden="true"
                                                                                            class="ivm-view-attr__icon ivm-view-attr__icon--icon  "
                                                                                            xmlns="http://www.w3.org/2000/svg"
                                                                                            width="16" height="16"
                                                                                            viewBox="0 0 16 16"
                                                                                            data-supported-dps="16x16"
                                                                                            data-test-icon="skills-small">
                                                                                            <!---->
                                                                                            <use href="#skills-small"
                                                                                                width="16" height="16">
                                                                                            </use>
                                                                                        </svg>

                                                                                    </div>

                                                                                </li>
                                                                            </ul>

                                                                        </div>

                                                                        <div class="display-flex ">

                                                                            <div class="
          display-flex full-width">

                                                                                <div class="hoverable-link-text display-flex align-items-center
              t-14 t-normal t-black">
                                                                                    <strong><!---->Communication écrite,
                                                                                        Communication and +5
                                                                                        skills<!----></strong>
                                                                                </div>
                                                                                <!---->
                                                                            </div>

                                                                        </div>

                                                                    </a>


                                                                    <!---->
                                                                </div>


                                                            </li>
                                                        </ul>
                                                        <!---->
                                                    </div>


                                                </li>
                                                <li class="qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                                    <div class="FtwCyQiKWmAiGnEmVueQaXzXAGHOsFzwvUjJnmX">
                                                        <!---->
                                                        <ul class="PdRUlssPYwwHVyfokYoPNtMeAOfjkIoxnUc
            
            
            ">
                                                            <li
                                                                class="pvs-list__item--with-top-padding qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                                                <div class="full-width profile-component-entity-pile">
                                                                    <!---->
                                                                    <div class="display-flex flex-row flex-wrap">


                                                                        <a data-field="experience_media"
                                                                            class="optional-action-target-wrapper pvs-thumbnail__wrapper"
                                                                            target="_self"
                                                                            aria-label="Thumbnail for A GMP inspection should not be a surprise"
                                                                            href="https://www.linkedin.com/in/michel-roberge-7011b614/overlay/experience/420381636/multiple-media-viewer?profileId=ACoAAALgc3EBglzhZDPKP2JcpyPypmkYxBacitY&amp;treasuryMediaId=1515512338876&amp;type=LINK">
                                                                            <figure class="pvs-thumbnail">
                                                                                <img src="https://media.licdn.com/dms/image/sync/v2/D5627AQHwk_qzjyNoyg/articleshare-shrink_160/articleshare-shrink_160/0/1711778923519?e=1741982400&amp;v=beta&amp;t=a0fgIsStj4EynUuoCKGv0RLZTB0mcp0xw4pM484DXvg"
                                                                                    loading="lazy" alt=""
                                                                                    id="thumbnail-image-ember148"
                                                                                    class="pvs-thumbnail__image evi-image lazy-image ember-view">
                                                                                <!---->
                                                                                <!---->
                                                                            </figure>
                                                                        </a>




                                                                        <a data-field="experience_media"
                                                                            class="optional-action-target-wrapper pvs-thumbnail__wrapper"
                                                                            target="_self"
                                                                            aria-label="Thumbnail for Maximize your investment with STARLIMS Content Library"
                                                                            href="https://www.linkedin.com/in/michel-roberge-7011b614/overlay/urn:li:fsd_profilePosition:(ACoAAALgc3EBglzhZDPKP2JcpyPypmkYxBacitY,420381636)/treasury?profileUrn=urn%3Ali%3Afsd_profile%3AACoAAALgc3EBglzhZDPKP2JcpyPypmkYxBacitY">
                                                                            <figure class="pvs-thumbnail">
                                                                                <img src="https://media.licdn.com/dms/image/sync/v2/D4D27AQE7WbTlCZnPjQ/articleshare-shrink_160/articleshare-shrink_160/0/1711778923095?e=1741982400&amp;v=beta&amp;t=k53hg8jxfsrmbmzDd8D5_eLVkKAGZ-L6iLhtGsRqmvI"
                                                                                    loading="lazy" alt=""
                                                                                    id="thumbnail-image-ember251"
                                                                                    class="pvs-thumbnail__image evi-image lazy-image ember-view">
                                                                                <!---->
                                                                                <div
                                                                                    class="pvs-thumbnail__overlay pvs-thumbnail__overlay--text">
                                                                                    <div class="t-14 t-white t-bold">+2
                                                                                    </div>
                                                                                </div>
                                                                            </figure>
                                                                        </a>


                                                                    </div>
                                                                </div>


                                                            </li>
                                                        </ul>
                                                        <!---->
                                                    </div>


                                                </li>
                                            </ul>
                                            <!---->
                                        </div>

                                    </div>
                                    <!---->
                                    <!---->
                                </div>


                            </li>
                            <li class="qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                <span class="EjZKUrtOZcFtnELEhNGFouebDCwJhXVgKMI"></span>
                                <div class="iySSlsjvmHFIjvVVBeTzQKiCkbVUEscOCasgZMM
        
        
        
        
        " data-view-name="profile-component-entity">
                                    <div>

                                        <div class="
            
            
            display-flex" tabindex="-1">

                                            <!---->
                                        </div>

                                    </div>

                                    <div class="display-flex flex-column align-self-center flex-grow-1">
                                        <div class="display-flex flex-row justify-space-between">

                                            <a class="optional-action-target-wrapper 
              display-flex flex-column full-width" target="_self" href="https://www.linkedin.com/company/248524/">
                                                <div class="display-flex flex-wrap align-items-center full-height">

                                                    <div class="display-flex ">

                                                        <div class="
          display-flex full-width">

                                                            <div class="display-flex align-items-center
              mr1 hoverable-link-text t-bold">
                                                                <span aria-hidden="true"><!---->Senior Technical
                                                                    Specialist<!----></span><span
                                                                    class="visually-hidden"><!---->Senior Technical
                                                                    Specialist<!----></span>
                                                            </div>
                                                            <!---->
                                                        </div>

                                                    </div>

                                                    <!----><!----><!---->
                                                </div>
                                                <!----> <span class="t-14 t-normal
                  t-black--light">
                                                    <span class="pvs-entity__caption-wrapper"
                                                        aria-hidden="true"><!---->Jul 2000 - Jul 2013 · 13 yrs 1
                                                        mo<!----></span><span class="visually-hidden"><!---->Jul 2000 to
                                                        Jul 2013 · 13 yrs 1 mo<!----></span>
                                                </span>
                                                <!---->
                                            </a>

                                        </div>

                                        <div class="FtwCyQiKWmAiGnEmVueQaXzXAGHOsFzwvUjJnmX pvs-entity__sub-components">
                                            <!---->
                                            <ul class="PdRUlssPYwwHVyfokYoPNtMeAOfjkIoxnUc
            
            
            ">
                                                <li class="qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                                    <div class="FtwCyQiKWmAiGnEmVueQaXzXAGHOsFzwvUjJnmX">
                                                        <!---->
                                                        <ul class="PdRUlssPYwwHVyfokYoPNtMeAOfjkIoxnUc
            
            
            ">
                                                            <li
                                                                class="pvs-list__item--with-top-padding qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                                                <div class="display-flex ">

                                                                    <div class="
          display-flex full-width">


                                                                        <div class="xyKuvshqjNOCLLbuJMSOACywiHYHucctJs
          full-width t-14 t-normal t-black display-flex align-items-center" dir="ltr">

                                                                            <div class="WcTepSkGpUVWbbheKPCszGxDQzmhiNFQ
        
        
        
        
        
         full-width" style="" dir="ltr" tabindex="-1">

                                                                                <span aria-hidden="true"><!---->I'd been
                                                                                    working on that big system for two
                                                                                    years and entered the maintenance
                                                                                    and support cycle. I always wanted
                                                                                    to go to big cities and started
                                                                                    needing new challenges. A company
                                                                                    named LIMS System (who would become
                                                                                    part of STARLIMS) found me and
                                                                                    offered me to learn the laboratory
                                                                                    business. What an
                                                                                    opportunity!<!----><br><br><!---->•STARLIMS
                                                                                    Interfaces SME<!----><br><span
                                                                                        class="white-space-pre">
                                                                                    </span>•SAP Integration (.Net
                                                                                    Connector, ES
                                                                                    Bundles/Netweaver)<!----><br><span
                                                                                        class="white-space-pre">
                                                                                    </span>•Other third parties
                                                                                    integration and
                                                                                    interfacing<!----><br><span
                                                                                        class="white-space-pre">
                                                                                    </span>•Developer on special
                                                                                    projects (SOA, OPC,
                                                                                    SAP)<!----><br><!---->•Developer on
                                                                                    customer projects (new modules, bug
                                                                                    fixes, enhancements,
                                                                                    reports)<!----><br><!---->•Project
                                                                                    Management of special
                                                                                    projects<!----><br><!---->•Solution
                                                                                    Analysis<!----><br><!---->•Interface
                                                                                    Proof of
                                                                                    concepts<!----><br><!---->•Functional
                                                                                    Requirements and System Design
                                                                                    Specifications.<!----><br><!---->•Perform
                                                                                    webex training for external
                                                                                    application
                                                                                    interfacing<!----><br><!---->•SME
                                                                                    for: Audit Trail, Inventory,
                                                                                    Specifications, Interface
                                                                                    Connections, Manufacturing
                                                                                    Lifecycle<!----></span><span
                                                                                    class="visually-hidden"><!---->I'd
                                                                                    been working on that big system for
                                                                                    two years and entered the
                                                                                    maintenance and support cycle. I
                                                                                    always wanted to go to big cities
                                                                                    and started needing new challenges.
                                                                                    A company named LIMS System (who
                                                                                    would become part of STARLIMS) found
                                                                                    me and offered me to learn the
                                                                                    laboratory business. What an
                                                                                    opportunity!

                                                                                    •STARLIMS Interfaces SME
                                                                                    •SAP Integration (.Net Connector, ES
                                                                                    Bundles/Netweaver)
                                                                                    •Other third parties integration and
                                                                                    interfacing
                                                                                    •Developer on special projects (SOA,
                                                                                    OPC, SAP)
                                                                                    •Developer on customer projects (new
                                                                                    modules, bug fixes, enhancements,
                                                                                    reports)
                                                                                    •Project Management of special
                                                                                    projects
                                                                                    •Solution Analysis
                                                                                    •Interface Proof of concepts
                                                                                    •Functional Requirements and System
                                                                                    Design Specifications.
                                                                                    •Perform webex training for external
                                                                                    application interfacing
                                                                                    •SME for: Audit Trail, Inventory,
                                                                                    Specifications, Interface
                                                                                    Connections, Manufacturing
                                                                                    Lifecycle<!----></span>

                                                                                <!---->
                                                                                <!---->
                                                                            </div>

                                                                        </div>

                                                                        <!---->
                                                                    </div>

                                                                </div>


                                                            </li>
                                                        </ul>
                                                        <!---->
                                                    </div>


                                                </li>
                                                <li class="qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                                    <div class="FtwCyQiKWmAiGnEmVueQaXzXAGHOsFzwvUjJnmX">
                                                        <!---->
                                                        <ul class="PdRUlssPYwwHVyfokYoPNtMeAOfjkIoxnUc
            
            
            ">
                                                            <li
                                                                class="pvs-list__item--with-top-padding qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                                                <div class="
        mv1
        display-flex align-items-center">

                                                                    <a data-field="position_contextual_skills_see_details"
                                                                        class="optional-action-target-wrapper display-flex link-without-hover-visited"
                                                                        target="_self"
                                                                        href="https://www.linkedin.com/in/michel-roberge-7011b614/overlay/urn:li:fsd_profilePosition:(ACoAAALgc3EBglzhZDPKP2JcpyPypmkYxBacitY,78764121)/skill-associations-details?profileUrn=urn%3Ali%3Afsd_profile%3AACoAAALgc3EBglzhZDPKP2JcpyPypmkYxBacitY">
                                                                        <div class="mr1
                mv1
                
                ">

                                                                            <ul class="ivm-entity-pile
        display-flex align-items-center t-black">
                                                                                <li
                                                                                    class="ivm-entity-pile__img-item--stacked">

                                                                                    <div class="ivm-view-attr__img-wrapper
        
        ">
                                                                                        <!---->
                                                                                        <svg role="none"
                                                                                            aria-hidden="true"
                                                                                            class="ivm-view-attr__icon ivm-view-attr__icon--icon  "
                                                                                            xmlns="http://www.w3.org/2000/svg"
                                                                                            width="16" height="16"
                                                                                            viewBox="0 0 16 16"
                                                                                            data-supported-dps="16x16"
                                                                                            data-test-icon="skills-small">
                                                                                            <!---->
                                                                                            <use href="#skills-small"
                                                                                                width="16" height="16">
                                                                                            </use>
                                                                                        </svg>

                                                                                    </div>

                                                                                </li>
                                                                            </ul>

                                                                        </div>

                                                                        <div class="display-flex ">

                                                                            <div class="
          display-flex full-width">

                                                                                <div class="hoverable-link-text display-flex align-items-center
              t-14 t-normal t-black">
                                                                                    <strong><!---->Communication,
                                                                                        Partage des connaissances and +3
                                                                                        skills<!----></strong>
                                                                                </div>
                                                                                <!---->
                                                                            </div>

                                                                        </div>

                                                                    </a>


                                                                    <!---->
                                                                </div>


                                                            </li>
                                                        </ul>
                                                        <!---->
                                                    </div>


                                                </li>
                                            </ul>
                                            <!---->
                                        </div>

                                    </div>
                                    <!---->
                                    <!---->
                                </div>


                            </li>
                        </ul>
                        <!---->
                    </div>

                </div>
                <!---->
                <!---->
            </div>


        </li>
        <li class="artdeco-list__item yUYbUPmIDBCyujolHJvDMVJLdKKwbTvJNGnVDA qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


            <!---->
            <div class="iySSlsjvmHFIjvVVBeTzQKiCkbVUEscOCasgZMM
        AajnQCQGlEqOkCCSZJHqFVelplbPuTKoKw owSPWypkbaygNqfMzXkzygjefLVERYVMnw
        
        
        
        " data-view-name="profile-component-entity">
                <div>

                    <a data-field="experience_company_logo" class="optional-action-target-wrapper 
            
            pvs-entity__image-container--outline-offset
            display-flex" target="_self" href="https://www.linkedin.com/company/1185/">

                        <div class="ivm-image-view-model  pvs-entity__image ">

                            <div class="ivm-view-attr__img-wrapper
        
        ">
                                <!---->
                                <!----> <img width="48"
                                    src="https://media.licdn.com/dms/image/v2/D4D0BAQGUWkaCJOWLdA/company-logo_100_100/company-logo_100_100/0/1720685515776/pfizer_logo?e=1749686400&amp;v=beta&amp;t=8CLefoSkmLbhXMN5hJWqMP9RpdML65VL8y52fK2jfXc"
                                    loading="lazy" height="48" alt="Pfizer logo" id="ember164"
                                    class="ivm-view-attr__img--centered EntityPhoto-square-3   evi-image lazy-image ember-view">
                            </div>

                        </div>

                    </a>

                </div>

                <div class="display-flex flex-column align-self-center flex-grow-1">
                    <div class="display-flex flex-row justify-space-between">

                        <div class="
              display-flex flex-column full-width">

                            <div class="display-flex flex-wrap align-items-center full-height">

                                <div class="display-flex ">

                                    <div class="
          display-flex full-width">

                                        <div class="display-flex align-items-center
              mr1 t-bold">
                                            <span aria-hidden="true"><!---->Senior Analyst<!----></span><span
                                                class="visually-hidden"><!---->Senior Analyst<!----></span>
                                        </div>
                                        <!---->
                                    </div>

                                </div>

                                <!----><!----><!---->
                            </div>
                            <span class="t-14 t-normal">
                                <span aria-hidden="true"><!---->Wyeth<!----></span><span
                                    class="visually-hidden"><!---->Wyeth<!----></span>
                            </span>
                            <span class="t-14 t-normal
                  t-black--light">
                                <span class="pvs-entity__caption-wrapper" aria-hidden="true"><!---->Feb 2004 - Feb 2006
                                    · 2 yrs 1 mo<!----></span><span class="visually-hidden"><!---->Feb 2004 to Feb 2006
                                    · 2 yrs 1 mo<!----></span>
                            </span>
                            <!---->
                        </div>

                    </div>

                    <div class="FtwCyQiKWmAiGnEmVueQaXzXAGHOsFzwvUjJnmX pvs-entity__sub-components">
                        <!---->
                        <ul class="PdRUlssPYwwHVyfokYoPNtMeAOfjkIoxnUc
            
            
            ">
                            <li class="qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                <div class="FtwCyQiKWmAiGnEmVueQaXzXAGHOsFzwvUjJnmX">
                                    <!---->
                                    <ul class="PdRUlssPYwwHVyfokYoPNtMeAOfjkIoxnUc
            
            
            ">
                                        <li
                                            class="pvs-list__item--with-top-padding qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                            <div class="display-flex ">

                                                <div class="
          display-flex full-width">


                                                    <div class="xyKuvshqjNOCLLbuJMSOACywiHYHucctJs
          full-width t-14 t-normal t-black display-flex align-items-center" dir="ltr">

                                                        <div class="WcTepSkGpUVWbbheKPCszGxDQzmhiNFQ
        
        
        
        
        
         full-width" style="" dir="ltr" tabindex="-1">

                                                            <span aria-hidden="true"><!---->While I was working at
                                                                STARLIMS, I took a "break" and went for a big pharma
                                                                company. I wanted to try a really big enterprise and
                                                                accepted an offer at Wyeth. I stayed there 2 years, had
                                                                a lot of fun and learned a lot. This was a small bubble
                                                                in time where I stepped out of the laboratory world...
                                                                Well, not quite.<!----><br><br><!---->•LIMS Specialist
                                                                for upgrading STARLIMS for FDA
                                                                compliance<!----><br><!---->•Analyst &amp; Development
                                                                for Financial Software tools
                                                                development<!----><br><!---->•Analysis &amp; Development
                                                                for Essbase development<!----><br><!---->•SOP writer
                                                                &amp; trainer for Software
                                                                Development<!----><br><!---->•Certified
                                                                Trainer<!----></span><span
                                                                class="visually-hidden"><!---->While I was working at
                                                                STARLIMS, I took a "break" and went for a big pharma
                                                                company. I wanted to try a really big enterprise and
                                                                accepted an offer at Wyeth. I stayed there 2 years, had
                                                                a lot of fun and learned a lot. This was a small bubble
                                                                in time where I stepped out of the laboratory world...
                                                                Well, not quite.

                                                                •LIMS Specialist for upgrading STARLIMS for FDA
                                                                compliance
                                                                •Analyst &amp; Development for Financial Software tools
                                                                development
                                                                •Analysis &amp; Development for Essbase development
                                                                •SOP writer &amp; trainer for Software Development
                                                                •Certified Trainer<!----></span>

                                                            <!---->
                                                            <!---->
                                                        </div>

                                                    </div>

                                                    <!---->
                                                </div>

                                            </div>


                                        </li>
                                    </ul>
                                    <!---->
                                </div>


                            </li>
                            <li class="qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                <div class="FtwCyQiKWmAiGnEmVueQaXzXAGHOsFzwvUjJnmX">
                                    <!---->
                                    <ul class="PdRUlssPYwwHVyfokYoPNtMeAOfjkIoxnUc
            
            
            ">
                                        <li
                                            class="pvs-list__item--with-top-padding qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                            <div class="
        mv1
        display-flex align-items-center">

                                                <a data-field="position_contextual_skills_see_details"
                                                    class="optional-action-target-wrapper display-flex link-without-hover-visited"
                                                    target="_self"
                                                    href="https://www.linkedin.com/in/michel-roberge-7011b614/overlay/urn:li:fsd_profilePosition:(ACoAAALgc3EBglzhZDPKP2JcpyPypmkYxBacitY,78766427)/skill-associations-details?profileUrn=urn%3Ali%3Afsd_profile%3AACoAAALgc3EBglzhZDPKP2JcpyPypmkYxBacitY">
                                                    <div class="mr1
                mv1
                
                ">

                                                        <ul class="ivm-entity-pile
        display-flex align-items-center t-black">
                                                            <li class="ivm-entity-pile__img-item--stacked">

                                                                <div class="ivm-view-attr__img-wrapper
        
        ">
                                                                    <!---->
                                                                    <svg role="none" aria-hidden="true"
                                                                        class="ivm-view-attr__icon ivm-view-attr__icon--icon  "
                                                                        xmlns="http://www.w3.org/2000/svg" width="16"
                                                                        height="16" viewBox="0 0 16 16"
                                                                        data-supported-dps="16x16"
                                                                        data-test-icon="skills-small">
                                                                        <!---->
                                                                        <use href="#skills-small" width="16"
                                                                            height="16"></use>
                                                                    </svg>

                                                                </div>

                                                            </li>
                                                        </ul>

                                                    </div>

                                                    <div class="display-flex ">

                                                        <div class="
          display-flex full-width">

                                                            <div class="hoverable-link-text display-flex align-items-center
              t-14 t-normal t-black">
                                                                <strong><!---->Communication, Anglais and +1
                                                                    skill<!----></strong>
                                                            </div>
                                                            <!---->
                                                        </div>

                                                    </div>

                                                </a>


                                                <!---->
                                            </div>


                                        </li>
                                    </ul>
                                    <!---->
                                </div>


                            </li>
                        </ul>
                        <!---->
                    </div>

                </div>
                <!---->
                <!---->
            </div>


        </li>
        <li class="artdeco-list__item yUYbUPmIDBCyujolHJvDMVJLdKKwbTvJNGnVDA qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


            <!---->
            <div class="iySSlsjvmHFIjvVVBeTzQKiCkbVUEscOCasgZMM
        AajnQCQGlEqOkCCSZJHqFVelplbPuTKoKw owSPWypkbaygNqfMzXkzygjefLVERYVMnw
        
        
        
        " data-view-name="profile-component-entity">
                <div>

                    <a data-field="experience_company_logo" class="optional-action-target-wrapper 
            
            pvs-entity__image-container--outline-offset
            display-flex" target="_self" tabindex="-1"
                        href="https://www.linkedin.com/search/results/all/?keywords=Cablevision+du+Nord">

                        <div class="ivm-image-view-model  pvs-entity__image ">

                            <div class="ivm-view-attr__img-wrapper
        
        ">
                                <!---->
                                <div class="EntityPhoto-square-3-ghost-company ivm-view-attr__ghost-entity  ">
                                    <div class="visually-hidden">Analyst/Developer</div>
                                </div>
                            </div>

                        </div>

                    </a>

                </div>

                <div class="display-flex flex-column align-self-center flex-grow-1">
                    <div class="display-flex flex-row justify-space-between">

                        <div class="
              display-flex flex-column full-width">

                            <div class="display-flex flex-wrap align-items-center full-height">

                                <div class="display-flex ">

                                    <div class="
          display-flex full-width">

                                        <div class="display-flex align-items-center
              mr1 t-bold">
                                            <span aria-hidden="true"><!---->Analyst/Developer<!----></span><span
                                                class="visually-hidden"><!---->Analyst/Developer<!----></span>
                                        </div>
                                        <!---->
                                    </div>

                                </div>

                                <!----><!----><!---->
                            </div>
                            <span class="t-14 t-normal">
                                <span aria-hidden="true"><!---->Cablevision du Nord<!----></span><span
                                    class="visually-hidden"><!---->Cablevision du Nord<!----></span>
                            </span>
                            <span class="t-14 t-normal
                  t-black--light">
                                <span class="pvs-entity__caption-wrapper" aria-hidden="true"><!---->1998 - 2000 · 2
                                    yrs<!----></span><span class="visually-hidden"><!---->1998 to 2000 · 2
                                    yrs<!----></span>
                            </span>
                            <!---->
                        </div>

                    </div>

                    <div class="FtwCyQiKWmAiGnEmVueQaXzXAGHOsFzwvUjJnmX pvs-entity__sub-components">
                        <!---->
                        <ul class="PdRUlssPYwwHVyfokYoPNtMeAOfjkIoxnUc
            
            
            ">
                            <li class="qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                <div class="FtwCyQiKWmAiGnEmVueQaXzXAGHOsFzwvUjJnmX">
                                    <!---->
                                    <ul class="PdRUlssPYwwHVyfokYoPNtMeAOfjkIoxnUc
            
            
            ">
                                        <li
                                            class="pvs-list__item--with-top-padding qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                            <div class="display-flex ">

                                                <div class="
          display-flex full-width">


                                                    <div class="xyKuvshqjNOCLLbuJMSOACywiHYHucctJs
          full-width t-14 t-normal t-black display-flex align-items-center" dir="ltr">

                                                        <div class="WcTepSkGpUVWbbheKPCszGxDQzmhiNFQ
        
        
        
        
        
         full-width" style="" dir="ltr" tabindex="-1">

                                                            <span aria-hidden="true"><!---->I was given the opportunity
                                                                to prove myself - fresh out of school - at the local
                                                                cable company. I started as a consultant and was offered
                                                                a permanent position. I really enjoyed my experience and
                                                                learned a lot.<!----><br><br><!---->•In-House ERP
                                                                Software analysis &amp;
                                                                development<!----><br><!---->•Support for existing
                                                                modules<!----><br><!---->•Analysis &amp; Development for
                                                                new modules<!----><br><!---->•Reporting
                                                                Development<!----></span><span
                                                                class="visually-hidden"><!---->I was given the
                                                                opportunity to prove myself - fresh out of school - at
                                                                the local cable company. I started as a consultant and
                                                                was offered a permanent position. I really enjoyed my
                                                                experience and learned a lot.

                                                                •In-House ERP Software analysis &amp; development
                                                                •Support for existing modules
                                                                •Analysis &amp; Development for new modules
                                                                •Reporting Development<!----></span>

                                                            <!---->
                                                            <!---->
                                                        </div>

                                                    </div>

                                                    <!---->
                                                </div>

                                            </div>


                                        </li>
                                    </ul>
                                    <!---->
                                </div>


                            </li>
                        </ul>
                        <!---->
                    </div>

                </div>
                <!---->
                <!---->
            </div>


        </li>
    </ul>
</body>

</html>

================
File: docs/prompts/default.md
================
You are an AI assistant helping showcase my portfolio. You ONLY use the provided context to answer questions.
  If a question is about my projects, focus specifically on projects in the provided context.
  If the question is unrelated to my work, say "I'm here to discuss my portfolio. Ask me about my projects or skills!"
  
  ### Context:
  ${context || "No relevant projects found in the database."}
  
  ### User Question:
  ${userQuery}
  
  ### AI Response:

================
File: jenkins/Jenkinsfile.analysis
================
// Jenkinsfile.analysis (run SonarQube analysis)
pipeline {
    agent any
    tools { nodejs "node" } 

    stages {
        stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool 'sonar-scanner'
                    withSonarQubeEnv('local-sonarqube') {
                        withCredentials([string(credentialsId: 'sonar-secret', variable: 'SONAR_TOKEN')]) {
                            sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=portfolio-next -Dsonar.sources=portfolio.next -Dsonar.login=$SONAR_TOKEN"
                            sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=portfolio-node -Dsonar.sources=portfolio.node -Dsonar.login=$SONAR_TOKEN"
                        }
                    }
                }
            }
        }
    }
}

================
File: jenkins/Jenkinsfile.build
================
pipeline {
    agent any
    tools { nodejs "node" } 

    stages {
        stage('Install Dependencies - Next.js') { 
            steps {
                dir('portfolio.next') {  // Ensure the context is inside portfolio.next
                    sh 'npm install'
                }
            }
        }
        stage('Install Dependencies - Node Backend') { 
            steps {
                dir('portfolio.node') {  // Ensure the context is inside portfolio.node
                    sh 'npm install'
                }
            }
        }
        stage('Build Application - Next.js') { 
            steps {
                dir('portfolio.next') {
                    sh 'npm run build'
                }
            }
        }
    }
}

================
File: jenkins/Jenkinsfile.test
================
// Jenkinsfile.test (run tests & coverage)
pipeline {
    agent any
    tools { nodejs "node" } 

    stages {
        stage('Install dependencies') { 
            steps {
                dir('portfolio.next') {
                    sh 'npm install'
                }
                dir('portfolio.node') {
                    sh 'npm install'
                }
            }
        }
        stage('Run Tests') { 
            steps {
                dir('portfolio.next') {
                    sh 'npm test'
                }
                dir('portfolio.node') {
                    sh 'npm test'
                }
            }
        }
        stage('Run Test Coverage') { 
            steps {
                dir('portfolio.next') {
                    sh 'npm run coverage'
                }
                dir('portfolio.node') {
                    sh 'npm run coverage'
                }
            }
        }
    }
}

================
File: jenkins/sonar-project.properties
================
sonar.projectKey=portfolio:sonar-quality-run
# sonar.test.exclusions=**/*.test.js, build/**,node_modules/**, dist/**, dist-app/**, coverage/**
# sonar.exclusions=**/*.test.js, build/**,.github/**,node_modules/**, dist/**, dist-app/**, coverage/**
# sonar.javascript.lcov.reportPaths=./coverage/lcov.info

sonar.exclusions=build/**,.github/**,node_modules/**,**/*.test.js,coverage/**,.npmrc, jenkinsfile.*, webpack.config.js, dist/**, dist-app/**,
sonar.javascript.lcov.reportPaths=./coverage/lcov.info

================
File: LICENSE
================
GNU GENERAL PUBLIC LICENSE
                       Version 3, 29 June 2007

 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

                            Preamble

  The GNU General Public License is a free, copyleft license for
software and other kinds of works.

  The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

  To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

  For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

  Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

  For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

  Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users' freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable.  Therefore, we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.

  Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

  The precise terms and conditions for copying, distribution and
modification follow.

                       TERMS AND CONDITIONS

  0. Definitions.

  "This License" refers to version 3 of the GNU General Public License.

  "Copyright" also means copyright-like laws that apply to other kinds of
works, such as semiconductor masks.

  "The Program" refers to any copyrightable work licensed under this
License.  Each licensee is addressed as "you".  "Licensees" and
"recipients" may be individuals or organizations.

  To "modify" a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of an
exact copy.  The resulting work is called a "modified version" of the
earlier work or a work "based on" the earlier work.

  A "covered work" means either the unmodified Program or a work based
on the Program.

  To "propagate" a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy.  Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.

  To "convey" a work means any kind of propagation that enables other
parties to make or receive copies.  Mere interaction with a user through
a computer network, with no transfer of a copy, is not conveying.

  An interactive user interface displays "Appropriate Legal Notices"
to the extent that it includes a convenient and prominently visible
feature that (1) displays an appropriate copyright notice, and (2)
tells the user that there is no warranty for the work (except to the
extent that warranties are provided), that licensees may convey the
work under this License, and how to view a copy of this License.  If
the interface presents a list of user commands or options, such as a
menu, a prominent item in the list meets this criterion.

  1. Source Code.

  The "source code" for a work means the preferred form of the work
for making modifications to it.  "Object code" means any non-source
form of a work.

  A "Standard Interface" means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that
is widely used among developers working in that language.

  The "System Libraries" of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that
Major Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form.  A
"Major Component", in this context, means a major essential component
(kernel, window system, and so on) of the specific operating system
(if any) on which the executable work runs, or a compiler used to
produce the work, or an object code interpreter used to run it.

  The "Corresponding Source" for a work in object code form means all
the source code needed to generate, install, and (for an executable
work) run the object code and to modify the work, including scripts to
control those activities.  However, it does not include the work's
System Libraries, or general-purpose tools or generally available free
programs which are used unmodified in performing those activities but
which are not part of the work.  For example, Corresponding Source
includes interface definition files associated with source files for
the work, and the source code for shared libraries and dynamically
linked subprograms that the work is specifically designed to require,
such as by intimate data communication or control flow between those
subprograms and other parts of the work.

  The Corresponding Source need not include anything that users
can regenerate automatically from other parts of the Corresponding
Source.

  The Corresponding Source for a work in source code form is that
same work.

  2. Basic Permissions.

  All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met.  This License explicitly affirms your unlimited
permission to run the unmodified Program.  The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work.  This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.

  You may make, run and propagate covered works that you do not
convey, without conditions so long as your license otherwise remains
in force.  You may convey covered works to others for the sole purpose
of having them make modifications exclusively for you, or provide you
with facilities for running those works, provided that you comply with
the terms of this License in conveying all material for which you do
not control copyright.  Those thus making or running the covered works
for you must do so exclusively on your behalf, under your direction
and control, on terms that prohibit them from making any copies of
your copyrighted material outside their relationship with you.

  Conveying under any other circumstances is permitted solely under
the conditions stated below.  Sublicensing is not allowed; section 10
makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

  No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article
11 of the WIPO copyright treaty adopted on 20 December 1996, or
similar laws prohibiting or restricting circumvention of such
measures.

  When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such circumvention
is effected by exercising rights under this License with respect to
the covered work, and you disclaim any intention to limit operation or
modification of the work as a means of enforcing, against the work's
users, your or third parties' legal rights to forbid circumvention of
technological measures.

  4. Conveying Verbatim Copies.

  You may convey verbatim copies of the Program's source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice;
keep intact all notices stating that this License and any
non-permissive terms added in accord with section 7 apply to the code;
keep intact all notices of the absence of any warranty; and give all
recipients a copy of this License along with the Program.

  You may charge any price or no price for each copy that you convey,
and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

  You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the
terms of section 4, provided that you also meet all of these conditions:

    a) The work must carry prominent notices stating that you modified
    it, and giving a relevant date.

    b) The work must carry prominent notices stating that it is
    released under this License and any conditions added under section
    7.  This requirement modifies the requirement in section 4 to
    "keep intact all notices".

    c) You must license the entire work, as a whole, under this
    License to anyone who comes into possession of a copy.  This
    License will therefore apply, along with any applicable section 7
    additional terms, to the whole of the work, and all its parts,
    regardless of how they are packaged.  This License gives no
    permission to license the work in any other way, but it does not
    invalidate such permission if you have separately received it.

    d) If the work has interactive user interfaces, each must display
    Appropriate Legal Notices; however, if the Program has interactive
    interfaces that do not display Appropriate Legal Notices, your
    work need not make them do so.

  A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work,
and which are not combined with it such as to form a larger program,
in or on a volume of a storage or distribution medium, is called an
"aggregate" if the compilation and its resulting copyright are not
used to limit the access or legal rights of the compilation's users
beyond what the individual works permit.  Inclusion of a covered work
in an aggregate does not cause this License to apply to the other
parts of the aggregate.

  6. Conveying Non-Source Forms.

  You may convey a covered work in object code form under the terms
of sections 4 and 5, provided that you also convey the
machine-readable Corresponding Source under the terms of this License,
in one of these ways:

    a) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by the
    Corresponding Source fixed on a durable physical medium
    customarily used for software interchange.

    b) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by a
    written offer, valid for at least three years and valid for as
    long as you offer spare parts or customer support for that product
    model, to give anyone who possesses the object code either (1) a
    copy of the Corresponding Source for all the software in the
    product that is covered by this License, on a durable physical
    medium customarily used for software interchange, for a price no
    more than your reasonable cost of physically performing this
    conveying of source, or (2) access to copy the
    Corresponding Source from a network server at no charge.

    c) Convey individual copies of the object code with a copy of the
    written offer to provide the Corresponding Source.  This
    alternative is allowed only occasionally and noncommercially, and
    only if you received the object code with such an offer, in accord
    with subsection 6b.

    d) Convey the object code by offering access from a designated
    place (gratis or for a charge), and offer equivalent access to the
    Corresponding Source in the same way through the same place at no
    further charge.  You need not require recipients to copy the
    Corresponding Source along with the object code.  If the place to
    copy the object code is a network server, the Corresponding Source
    may be on a different server (operated by you or a third party)
    that supports equivalent copying facilities, provided you maintain
    clear directions next to the object code saying where to find the
    Corresponding Source.  Regardless of what server hosts the
    Corresponding Source, you remain obligated to ensure that it is
    available for as long as needed to satisfy these requirements.

    e) Convey the object code using peer-to-peer transmission, provided
    you inform other peers where the object code and Corresponding
    Source of the work are being offered to the general public at no
    charge under subsection 6d.

  A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be
included in conveying the object code work.

  A "User Product" is either (1) a "consumer product", which means any
tangible personal property which is normally used for personal, family,
or household purposes, or (2) anything designed or sold for incorporation
into a dwelling.  In determining whether a product is a consumer product,
doubtful cases shall be resolved in favor of coverage.  For a particular
product received by a particular user, "normally used" refers to a
typical or common use of that class of product, regardless of the status
of the particular user or of the way in which the particular user
actually uses, or expects or is expected to use, the product.  A product
is a consumer product regardless of whether the product has substantial
commercial, industrial or non-consumer uses, unless such uses represent
the only significant mode of use of the product.

  "Installation Information" for a User Product means any methods,
procedures, authorization keys, or other information required to install
and execute modified versions of a covered work in that User Product from
a modified version of its Corresponding Source.  The information must
suffice to ensure that the continued functioning of the modified object
code is in no case prevented or interfered with solely because
modification has been made.

  If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied
by the Installation Information.  But this requirement does not apply
if neither you nor any third party retains the ability to install
modified object code on the User Product (for example, the work has
been installed in ROM).

  The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or updates
for a work that has been modified or installed by the recipient, or for
the User Product in which it has been modified or installed.  Access to a
network may be denied when the modification itself materially and
adversely affects the operation of the network or violates the rules and
protocols for communication across the network.

  Corresponding Source conveyed, and Installation Information provided,
in accord with this section must be in a format that is publicly
documented (and with an implementation available to the public in
source code form), and must require no special password or key for
unpacking, reading or copying.

  7. Additional Terms.

  "Additional permissions" are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law.  If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by
this License without regard to the additional permissions.

  When you convey a copy of a covered work, you may at your option
remove any additional permissions from that copy, or from any part of
it.  (Additional permissions may be written to require their own
removal in certain cases when you modify the work.)  You may place
additional permissions on material, added by you to a covered work,
for which you have or can give appropriate copyright permission.

  Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders of
that material) supplement the terms of this License with terms:

    a) Disclaiming warranty or limiting liability differently from the
    terms of sections 15 and 16 of this License; or

    b) Requiring preservation of specified reasonable legal notices or
    author attributions in that material or in the Appropriate Legal
    Notices displayed by works containing it; or

    c) Prohibiting misrepresentation of the origin of that material, or
    requiring that modified versions of such material be marked in
    reasonable ways as different from the original version; or

    d) Limiting the use for publicity purposes of names of licensors or
    authors of the material; or

    e) Declining to grant rights under trademark law for use of some
    trade names, trademarks, or service marks; or

    f) Requiring indemnification of licensors and authors of that
    material by anyone who conveys the material (or modified versions of
    it) with contractual assumptions of liability to the recipient, for
    any liability that these contractual assumptions directly impose on
    those licensors and authors.

  All other non-permissive additional terms are considered "further
restrictions" within the meaning of section 10.  If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term.  If a license document contains
a further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms
of that license document, provided that the further restriction does
not survive such relicensing or conveying.

  If you add terms to a covered work in accord with this section, you
must place, in the relevant source files, a statement of the
additional terms that apply to those files, or a notice indicating
where to find the applicable terms.

  Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions;
the above requirements apply either way.

  8. Termination.

  You may not propagate or modify a covered work except as expressly
provided under this License.  Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).

  However, if you cease all violation of this License, then your
license from a particular copyright holder is reinstated (a)
provisionally, unless and until the copyright holder explicitly and
finally terminates your license, and (b) permanently, if the copyright
holder fails to notify you of the violation by some reasonable means
prior to 60 days after the cessation.

  Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

  Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.

  9. Acceptance Not Required for Having Copies.

  You are not required to accept this License in order to receive or
run a copy of the Program.  Ancillary propagation of a covered work
occurring solely as a consequence of using peer-to-peer transmission
to receive a copy likewise does not require acceptance.  However,
nothing other than this License grants you permission to propagate or
modify any covered work.  These actions infringe copyright if you do
not accept this License.  Therefore, by modifying or propagating a
covered work, you indicate your acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

  Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License.  You are not responsible
for enforcing compliance by third parties with this License.

  An "entity transaction" is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations.  If propagation of a covered
work results from an entity transaction, each party to that
transaction who receives a copy of the work also receives whatever
licenses to the work the party's predecessor in interest had or could
give under the previous paragraph, plus a right to possession of the
Corresponding Source of the work from the predecessor in interest, if
the predecessor has it or can get it with reasonable efforts.

  You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License.  For example, you may
not impose a license fee, royalty, or other charge for exercise of
rights granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that
any patent claim is infringed by making, using, selling, offering for
sale, or importing the Program or any portion of it.

  11. Patents.

  A "contributor" is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based.  The
work thus licensed is called the contributor's "contributor version".

  A contributor's "essential patent claims" are all patent claims
owned or controlled by the contributor, whether already acquired or
hereafter acquired, that would be infringed by some manner, permitted
by this License, of making, using, or selling its contributor version,
but do not include claims that would be infringed only as a
consequence of further modification of the contributor version.  For
purposes of this definition, "control" includes the right to grant
patent sublicenses in a manner consistent with the requirements of
this License.

  Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor's essential patent claims, to
make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.

  In the following three paragraphs, a "patent license" is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement).  To "grant" such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.

  If you convey a covered work, knowingly relying on a patent license,
and the Corresponding Source of the work is not available for anyone
to copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients.  "Knowingly relying" means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient's use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.

  If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify
or convey a specific copy of the covered work, then the patent license
you grant is automatically extended to all recipients of the covered
work and works based on it.

  A patent license is "discriminatory" if it does not include within
the scope of its coverage, prohibits the exercise of, or is
conditioned on the non-exercise of one or more of the rights that are
specifically granted under this License.  You may not convey a covered
work if you are a party to an arrangement with a third party that is
in the business of distributing software, under which you make payment
to the third party based on the extent of your activity of conveying
the work, and under which the third party grants, to any of the
parties who would receive the covered work from you, a discriminatory
patent license (a) in connection with copies of the covered work
conveyed by you (or copies made from those copies), or (b) primarily
for and in connection with specific products or compilations that
contain the covered work, unless you entered into that arrangement,
or that patent license was granted, prior to 28 March 2007.

  Nothing in this License shall be construed as excluding or limiting
any implied license or other defenses to infringement that may
otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

  If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot convey a
covered work so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you may
not convey it at all.  For example, if you agree to terms that obligate you
to collect a royalty for further conveying from those to whom you convey
the Program, the only way you could satisfy both those terms and this
License would be to refrain entirely from conveying the Program.

  13. Use with the GNU Affero General Public License.

  Notwithstanding any other provision of this License, you have
permission to link or combine any covered work with a work licensed
under version 3 of the GNU Affero General Public License into a single
combined work, and to convey the resulting work.  The terms of this
License will continue to apply to the part which is the covered work,
but the special requirements of the GNU Affero General Public License,
section 13, concerning interaction through a network will apply to the
combination as such.

  14. Revised Versions of this License.

  The Free Software Foundation may publish revised and/or new versions of
the GNU General Public License from time to time.  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

  Each version is given a distinguishing version number.  If the
Program specifies that a certain numbered version of the GNU General
Public License "or any later version" applies to it, you have the
option of following the terms and conditions either of that numbered
version or of any later version published by the Free Software
Foundation.  If the Program does not specify a version number of the
GNU General Public License, you may choose any version ever published
by the Free Software Foundation.

  If the Program specifies that a proxy can decide which future
versions of the GNU General Public License can be used, that proxy's
public statement of acceptance of a version permanently authorizes you
to choose that version for the Program.

  Later license versions may give you additional or different
permissions.  However, no additional obligations are imposed on any
author or copyright holder as a result of your choosing to follow a
later version.

  15. Disclaimer of Warranty.

  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

  If the disclaimer of warranty and limitation of liability provided
above cannot be given local legal effect according to their terms,
reviewing courts shall apply local law that most closely approximates
an absolute waiver of all civil liability in connection with the
Program, unless a warranty or assumption of liability accompanies a
copy of the Program in return for a fee.

                     END OF TERMS AND CONDITIONS

            How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

Also add information on how to contact you by electronic and paper mail.

  If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

    <program>  Copyright (C) <year>  <name of author>
    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
    This is free software, and you are welcome to redistribute it
    under certain conditions; type `show c' for details.

The hypothetical commands `show w' and `show c' should show the appropriate
parts of the General Public License.  Of course, your program's commands
might be different; for a GUI interface, you would use an "about box".

  You should also get your employer (if you work as a programmer) or school,
if any, to sign a "copyright disclaimer" for the program, if necessary.
For more information on this, and how to apply and follow the GNU GPL, see
<https://www.gnu.org/licenses/>.

  The GNU General Public License does not permit incorporating your program
into proprietary programs.  If your program is a subroutine library, you
may consider it more useful to permit linking proprietary applications with
the library.  If this is what you want to do, use the GNU Lesser General
Public License instead of this License.  But first, please read
<https://www.gnu.org/licenses/why-not-lgpl.html>.

================
File: pageService_backup.txt
================
import { API_ENDPOINTS } from "@/lib/constants";
import { Page, PageCreate, PageUpdate } from "@/models/Page";

export async function fetchPage(slug: string, fromCache: boolean = true) {
  const res = await fetch(`${API_ENDPOINTS.page}/slug/${slug}`, fromCache ? {} : { cache: "no-store" });
  if (!res.ok) return null;
  return res.json();
}

export async function fetchPages(): Promise<Page[]> {
    const res = await fetch(`${API_ENDPOINTS.page}`, { credentials: "include" });
    if (!res.ok) throw new Error("Failed to fetch pages");
    return await res.json();
  }
  
  export async function createPage(pageData: PageCreate): Promise<Page> {
    const res = await fetch(`${API_ENDPOINTS.page}`, {
      method: "POST",
      credentials: "include",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(pageData),
    });
    if (!res.ok) throw new Error("Failed to create page");
    return await res.json();
  }
  
  export async function updatePage(id: string, pageData: PageUpdate): Promise<Page> {
    const res = await fetch(`${API_ENDPOINTS.page}/${id}`, {
      method: "PUT",
      credentials: "include",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(pageData),
    });
    if (!res.ok) throw new Error("Failed to update page");
    return await res.json();
  }
  
  export async function deletePage(id: string): Promise<void> {
    const res = await fetch(`${API_ENDPOINTS.page}/${id}`, { method: "DELETE", credentials: "include" });
    if (!res.ok) throw new Error("Failed to delete page");
  }

================
File: portfolio.net/src/Api/AuthController.cs
================
using Microsoft.AspNetCore.Mvc;
using Infrastructure.Services;
using Domain.DTOs;
using System.Threading.Tasks;

namespace Api;

[ApiController]
[Route("auth")]
public class AuthController : ControllerBase
{
    private readonly IAuthService _authService;

    public AuthController(IAuthService authService)
    {
        _authService = authService;
    }

    [HttpPost("login")]
    public async Task<IActionResult> Login([FromBody] LoginRequest request)
    {
        var success = await _authService.LoginAsync(request);
        if (!success) return Unauthorized();

        return Ok(new { message = "Login successful" });
    }

    [HttpPost("logout")]
    public async Task<IActionResult> Logout()
    {
        await _authService.LogoutAsync();
        return Ok(new { message = "Logged out" });
    }
}

================
File: portfolio.net/src/Domain/DTOs/LoginRequest.cs
================
namespace Domain.DTOs;

public record LoginRequest(string Username, string Password);

================
File: portfolio.net/src/Domain/Models/ApplicationUser.cs
================
using Microsoft.AspNetCore.Identity;

namespace Domain.Models;

public class ApplicationUser : IdentityUser
{
}

================
File: portfolio.net/src/Domain/Models/Blog.cs
================
namespace Domain.Models;

public class Blog
{
    public int Id { get; set; }
    public string Title { get; set; }
    public string Excerpt { get; set; }
    public string Body { get; set; }
    public bool IsDraft { get; set; }
    public DateTime PublishAt { get; set; }
}

================
File: portfolio.net/src/Domain/Models/CareerTimeline.cs
================
namespace Domain.Models;

public class CareerTimeline
{
    public int Id { get; set; }
    public string Title { get; set; }
    public string Company { get; set; }
    public DateTime StartDate { get; set; }
    public DateTime? EndDate { get; set; }
    public string Description { get; set; }
    public string Location { get; set; }
    public List<string> Skills { get; set; } = new();
    public int Order { get; set; }
    public bool IsDraft { get; set; }
}

================
File: portfolio.net/src/Domain/Models/Project.cs
================
namespace Domain.Models;

public class Project
{
    public int Id { get; set; }
    public string Title { get; set; }
    public string Excerpt { get; set; }
    public string Description { get; set; }
    public bool IsDraft { get; set; }
    public DateTime PublishAt { get; set; }
    public DateTime CreatedAt { get; set; }
    public DateTime UpdatedAt { get; set; }
    public List<string> Tags { get; set; } = new();
    public string Slug { get; set; }
}

================
File: portfolio.net/src/Infrastructure/Database/AppDbContext.cs
================
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Domain.Models;

namespace Infrastructure.Database;

public class AppDbContext : IdentityDbContext<ApplicationUser>
{
    public AppDbContext(DbContextOptions<AppDbContext> options) : base(options) { }

    public DbSet<Blog> Blogs { get; set; }
    public DbSet<Project> Projects { get; set; }
    public DbSet<CareerTimeline> CareerTimelines { get; set; }
}

================
File: portfolio.net/src/Infrastructure/Services/AuthService.cs
================
using Domain.DTOs;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Http;
using System.Threading.Tasks;

namespace Infrastructure.Services;

public class AuthService : IAuthService
{
    private readonly SignInManager<ApplicationUser> _signInManager;
    private readonly UserManager<ApplicationUser> _userManager;

    public AuthService(SignInManager<ApplicationUser> signInManager, UserManager<ApplicationUser> userManager)
    {
        _signInManager = signInManager;
        _userManager = userManager;
    }

    public async Task<bool> LoginAsync(LoginRequest request)
    {
        var user = await _userManager.FindByNameAsync(request.Username);
        if (user == null || !await _userManager.CheckPasswordAsync(user, request.Password))
        {
            return false;
        }

        await _signInManager.SignInAsync(user, isPersistent: false);
        return true;
    }

    public async Task LogoutAsync()
    {
        await _signInManager.SignOutAsync();
    }
}

================
File: portfolio.net/src/Infrastructure/Services/IAuthService.cs
================
using Domain.DTOs;

namespace Infrastructure.Services;

public interface IAuthService
{
    Task<bool> LoginAsync(LoginRequest request);
    Task LogoutAsync();
}

================
File: portfolio.net/src/Program.cs
================
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Hosting;
using Api;

var builder = WebApplication.CreateBuilder(args);

// Load configuration
var configuration = builder.Configuration;

// Configure services
builder.Services.AddDbContext<AppDbContext>(options =>
    options.UseNpgsql(configuration.GetConnectionString("DefaultConnection")));

builder.Services.AddIdentity<ApplicationUser, IdentityRole>()
    .AddEntityFrameworkStores<AppDbContext>()
    .AddDefaultTokenProviders();

builder.Services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)
    .AddCookie(options =>
    {
        options.LoginPath = "/auth/login";
        options.AccessDeniedPath = "/forbidden";
        options.Cookie.HttpOnly = true;
        options.Cookie.SecurePolicy = CookieSecurePolicy.Always;
    });

builder.Services.AddAuthorization();

// Register services
builder.Services.AddScoped<IAuthService, AuthService>();
builder.Services.AddScoped<IBlogService, BlogService>();
builder.Services.AddScoped<IProjectService, ProjectService>();

// Register controllers
builder.Services.AddControllers();

var app = builder.Build();

app.UseAuthentication();
app.UseAuthorization();
app.MapControllers();

app.Run();

================
File: portfolio.next/__tests__/app/notFoundPage.test.tsx
================
import React from "react";
import { render, screen } from "@testing-library/react";
import NotFound from "@/app/_not-found/page";

describe("NotFound Page", () => {
  it("renders the not found message", () => {
    render(<NotFound />);
    expect(screen.getByText("Ooops")).toBeInTheDocument();
  });
});

================
File: portfolio.next/__tests__/app/privacy_policy.test.tsx
================
import React from "react";
import { render, screen } from "@testing-library/react";
import PrivacyPolicy from "@/app/privacy-policy/page";

describe("Privacy Policy Page", () => {
  it("renders privacy policy content", () => {
    render(<PrivacyPolicy />);
    expect(screen.getByText("Privacy Policy")).toBeInTheDocument();
  });
});

================
File: portfolio.next/__tests__/components/ChatWrapper.test.tsx
================
import React from "react";
import { render } from "@testing-library/react";
import ChatWrapper from "@/components/ChatWrapper";

jest.mock("next/dynamic", () => () => () => <div>Mocked Chat Component</div>);

describe("ChatWrapper Component", () => {
  it("renders Chat component", () => {
    const { getByText } = render(<ChatWrapper />);
    expect(getByText("Mocked Chat Component")).toBeInTheDocument();
  });
});

================
File: portfolio.next/__tests__/components/Footer.test.tsx
================
import React from "react";
import { render, screen } from "@testing-library/react";
import Footer from "@/components/Footer";

describe("Footer Component", () => {
  it("renders the footer text correctly", () => {
    render(<Footer />);
    expect(screen.getByText(/michel-roberge.com/i)).toBeInTheDocument();
    expect(screen.getByText(/All Rights Reserved/i)).toBeInTheDocument();
  });

  it("displays the current year", () => {
    render(<Footer />);
    const currentYear = new Date().getFullYear();
    expect(screen.getByText(new RegExp(currentYear.toString(), "i"))).toBeInTheDocument();
  });
});

================
File: portfolio.next/__tests__/components/Header.test.tsx
================
import { render, screen, fireEvent, waitFor  } from "@testing-library/react";
import Header from "@/components/Header";
import { useAuth } from "@/context/AuthContext";
import { useRouter } from "next/navigation";

// Mock Auth Context
jest.mock("@/context/AuthContext", () => ({
  useAuth: jest.fn(),
}));

// Mock Next.js router
jest.mock("next/navigation", () => ({
  useRouter: jest.fn(),
  usePathname: jest.fn().mockReturnValue("/"),
}));

describe("Header Component", () => {
  const mockRefreshAuth = jest.fn();
  const mockRouterRefresh = jest.fn();

  beforeEach(() => {
    jest.clearAllMocks();
    (useRouter as jest.Mock).mockReturnValue({ refresh: mockRouterRefresh });
  });

  it("renders the site title and navigation links", () => {
    (useAuth as jest.Mock).mockReturnValue({
      isAuthenticated: false,
      isAdmin: false,
    });

    render(<Header />);

    expect(screen.getByText("Curious Coder: A Portfolio")).toBeInTheDocument();
    expect(screen.getByText("About me")).toBeInTheDocument();
    expect(screen.getByText("Experience")).toBeInTheDocument();
    expect(screen.getByText("Login")).toBeInTheDocument();
  });

  it("shows 'Admin Panel' when user is admin", () => {
    (useAuth as jest.Mock).mockReturnValue({
      isAuthenticated: true,
      isAdmin: true,
    });

    render(<Header />);

    expect(screen.getByText("Admin Panel")).toBeInTheDocument();
  });

  it("shows 'Login' when user is not authenticated", () => {
    (useAuth as jest.Mock).mockReturnValue({
      isAuthenticated: false,
      isAdmin: false,
    });

    render(<Header />);
    expect(screen.getByText("Login")).toBeInTheDocument();
  });

  it("shows 'Logout' when user is authenticated", () => {
    (useAuth as jest.Mock).mockReturnValue({
      isAuthenticated: true,
      isAdmin: false,
      refreshAuth: mockRefreshAuth,
    });

    render(<Header />);
    expect(screen.getByText("Logout")).toBeInTheDocument();
  });

  it("calls logout function when clicking 'Logout'", async () => {
    global.fetch = jest.fn(() =>
      Promise.resolve({ ok: true })
    ) as jest.Mock;

    (useAuth as jest.Mock).mockReturnValue({
      isAuthenticated: true,
      isAdmin: false,
      refreshAuth: mockRefreshAuth,
    });

    render(<Header />);
    fireEvent.click(screen.getByText("Logout"));

    // Ensure fetch() is called first
    await waitFor(() => expect(global.fetch).toHaveBeenCalledWith(
        `${process.env.NEXT_PUBLIC_API_URL}/api/auth/logout`,
        { credentials: "include" }
      ));
  
      // Wait for state updates before verifying function calls
      await waitFor(() => {
        expect(mockRefreshAuth).toHaveBeenCalled();
        expect(mockRouterRefresh).toHaveBeenCalled();
      });
  });
});

================
File: portfolio.next/__tests__/components/Home.test.tsx
================
import { render, screen, fireEvent } from '@testing-library/react';
import '@testing-library/jest-dom';
import Home from '@/components/Home';
import { BlogEntry } from '@/models/BlogEntry';
import { Project } from '@/models/Project';

// Mock next/link as it's a common requirement for Next.js components
jest.mock('next/link', () => {
  return ({ children, href }: { children: React.ReactNode; href: string }) => {
    return <a href={href}>{children}</a>;
  };
});

describe('Home Component', () => {
  const mockBlogEntries: BlogEntry[] = [
    {
      _id: '1',
      title: 'Test Blog 1',
      excerpt: 'Test blog excerpt 1',
      body: 'Test content 1',
      link: 'test-blog-1',
      tags: ['typescript', 'react'],
      isDraft: false,
      publishAt: null,
      createdAt: '2025-03-12T14:46:06-04:00',
      updatedAt: '2025-03-12T14:46:06-04:00'
    },
    {
      _id: '2',
      title: 'Test Blog 2',
      excerpt: 'Test blog excerpt 2',
      body: 'Test content 2',
      link: 'test-blog-2',
      tags: ['nextjs'],
      isDraft: true, // This one should not be displayed
      publishAt: null,
      createdAt: '2025-03-12T14:46:06-04:00',
      updatedAt: '2025-03-12T14:46:06-04:00'
    }
  ];

  const mockProjects: Project[] = [
    {
      _id: '1',
      title: 'Test Project 1',
      excerpt: 'Test project excerpt 1',
      description: 'Test description 1',
      tags: ['react', 'node'],
      isDraft: false,
      status: 'completed',
      technologies: ['react', 'typescript'],
      link: 'https://project1.com',
      industry: 'Technology',
      publishAt: null,
      startDate: '2025-01-01',
      endDate: '2025-03-01',
      createdAt: '2025-03-12T14:46:06-04:00',
      updatedAt: '2025-03-12T14:46:06-04:00'
    },
    {
      _id: '2',
      title: 'Test Project 2',
      excerpt: 'Test project excerpt 2',
      description: 'Test description 2',
      tags: ['python'],
      isDraft: true, // This one should not be displayed
      status: 'in-progress',
      technologies: ['python', 'django'],
      industry: 'Technology',
      publishAt: null,
      startDate: '2025-02-01',
      createdAt: '2025-03-12T14:46:06-04:00',
      updatedAt: '2025-03-12T14:46:06-04:00'
    }
  ];

  it('renders blog posts and projects with correct visibility states', () => {
    render(<Home blogEntries={mockBlogEntries} projects={mockProjects} />);
    
    // Check section headings and initial visibility
    const blogsSection = screen.getByRole('region', { name: /latest blog posts/i });
    const projectsSection = screen.getByRole('region', { name: /projects/i });
    
    // Initially blogs section should be visible and projects hidden on mobile
    expect(blogsSection).not.toHaveClass('hidden');
    expect(projectsSection).toHaveClass('hidden');
    expect(projectsSection).toHaveClass('md:block');

    // Check that only non-draft content is rendered
    expect(screen.getByText('Test Blog 1')).toBeInTheDocument();
    expect(screen.getByText('Test blog excerpt 1')).toBeInTheDocument();
    expect(screen.getByText('Test Project 1')).toBeInTheDocument();
    expect(screen.getByText('Test project excerpt 1')).toBeInTheDocument();

    // Verify draft content is not rendered
    expect(screen.queryByText('Test Blog 2')).not.toBeInTheDocument();
    expect(screen.queryByText('Test Project 2')).not.toBeInTheDocument();
  });

  it('renders blog and project tags', () => {
    render(<Home blogEntries={mockBlogEntries} projects={mockProjects} />);

    // Check blog tags
    expect(screen.queryByText('typescript')).toBeInTheDocument();
    expect(screen.queryByText('nextjs')).not.toBeInTheDocument(); // From draft blog

    // Check project tags
    expect(screen.getByText('node')).toBeInTheDocument();
    expect(screen.queryByText('python')).not.toBeInTheDocument(); // From draft project
  });



  it('handles mobile navigation correctly', () => {
    render(<Home blogEntries={mockBlogEntries} projects={mockProjects} />);

    const blogsSection = screen.getByRole('region', { name: /latest blog posts/i });
    const projectsSection = screen.getByRole('region', { name: /projects/i });
    const blogsButton = screen.getByRole('button', { name: /blog posts/i });
    const projectsButton = screen.getByRole('button', { name: /projects/i });
    
    // Initial state: blogs visible, projects hidden
    expect(blogsSection).not.toHaveClass('hidden');
    expect(projectsSection).toHaveClass('hidden');
    expect(blogsButton).toHaveAttribute('aria-pressed', 'true');
    expect(projectsButton).toHaveAttribute('aria-pressed', 'false');

    // Switch to projects view
    fireEvent.click(projectsButton);

    // After click: projects visible, blogs hidden
    expect(blogsSection).toHaveClass('hidden');
    expect(projectsSection).not.toHaveClass('hidden');
    expect(blogsButton).toHaveAttribute('aria-pressed', 'false');
    expect(projectsButton).toHaveAttribute('aria-pressed', 'true');

    // Switch back to blogs view
    fireEvent.click(blogsButton);

    // Back to initial state
    expect(blogsSection).not.toHaveClass('hidden');
    expect(projectsSection).toHaveClass('hidden');
    expect(blogsButton).toHaveAttribute('aria-pressed', 'true');
    expect(projectsButton).toHaveAttribute('aria-pressed', 'false');
  });

  it('renders empty state messages when no content is available', () => {
    render(<Home blogEntries={[]} projects={[]} />);

    expect(screen.getByText('No blog posts available.')).toBeInTheDocument();
    expect(screen.getByText('No projects available.')).toBeInTheDocument();
  });

  it('renders all links with correct attributes', () => {
    render(<Home blogEntries={mockBlogEntries} projects={mockProjects} />);

    // Check blog links
    const blogLink = screen.getByRole('link', { name: 'Test Blog 1' });
    expect(blogLink).toHaveAttribute('href', '/blogs/test-blog-1');

    // Check project links
    const projectLink = screen.getByRole('link', { name: 'Test Project 1' });
    expect(projectLink).toHaveAttribute('href', '/projects/1');

    // Check external project link
    const externalLink = screen.getByText('View Project');
    expect(externalLink).toHaveAttribute('href', 'https://project1.com');
    expect(externalLink).toHaveAttribute('target', '_blank');
    expect(externalLink).toHaveAttribute('rel', 'noopener noreferrer');
  });
});

================
File: portfolio.next/__tests__/components/Search.test.tsx
================
import React from "react";
import { render, screen, fireEvent } from "@testing-library/react";
import Search from "@/components/Search";
import { useSearch } from "@/context/SearchContext";

jest.mock("@/context/SearchContext", () => ({
  useSearch: jest.fn(),
}));

describe("Search Component", () => {
  const mockSetQuery = jest.fn();
  const mockHandleSearch = jest.fn();

  beforeEach(() => {
    jest.clearAllMocks();
    (useSearch as jest.Mock).mockReturnValue({
      query: "",
      setQuery: mockSetQuery,
      results: [],
      handleSearch: mockHandleSearch,
    });
  });

  it("renders search input", () => {
    render(<Search />);
    expect(screen.getByPlaceholderText("Search projects, blogs, or skills...")).toBeInTheDocument();
  });

  it("calls handleSearch when clicking search button", () => {
    render(<Search />);
    fireEvent.click(screen.getByText("Search"));
    expect(mockHandleSearch).toHaveBeenCalled();
  });
});

================
File: portfolio.next/__tests__/components/SectionToggle.test.tsx
================
import React from "react";
import { render, screen, fireEvent } from "@testing-library/react";
import SectionToggle from "@/components/SectionToggle";

describe("SectionToggle Component", () => {
  const mockSetActiveSection = jest.fn();

  it("renders blog and project buttons", () => {
    render(<SectionToggle activeSection="blogs" setActiveSection={mockSetActiveSection} />);
    expect(screen.getByText("Blogs")).toBeInTheDocument();
    expect(screen.getByText("Projects")).toBeInTheDocument();
  });

  it("calls setActiveSection when switching sections", () => {
    render(<SectionToggle activeSection="blogs" setActiveSection={mockSetActiveSection} />);
    fireEvent.click(screen.getByText("Projects"));
    expect(mockSetActiveSection).toHaveBeenCalledWith("projects");
  });
});

================
File: portfolio.next/__tests__/context/SearchContext.test.tsx
================
import React from "react";
import { renderHook, act } from "@testing-library/react";
import { SearchProvider, useSearch } from "@/context/SearchContext";

describe("SearchContext", () => {
  it("provides default search state", () => {
    const { result } = renderHook(() => useSearch(), { wrapper: SearchProvider });

    expect(result.current.query).toBe("");
    expect(result.current.results).toEqual([]);
  });

  it("updates search results", async () => {
    const { result } = renderHook(() => useSearch(), { wrapper: SearchProvider });

    await act(async () => {
      result.current.setQuery("test");
    });

    expect(result.current.query).toBe("test");
  });
});

================
File: portfolio.next/__tests__/hooks/useWebSocketChat.test.tsx
================
import { renderHook } from "@testing-library/react";
import { useWebSocketChat } from "@/hooks/useWebSocketChat";
import { ChatProvider } from "@/context/ChatContext"; // ✅ Wrap provider

describe("useWebSocketChat", () => {
  it("connects to WebSocket when open", () => {
    const { result } = renderHook(() => useWebSocketChat(true), { wrapper: ChatProvider });

    expect(result.current.wsRef.current).not.toBeNull();
  });
});

================
File: portfolio.next/__tests__/models/BlogEntry.test.ts
================
import { BlogEntry, BaseBlogEntry } from '@/models/BlogEntry';

describe('BlogEntry Model', () => {
  // Test the base model structure
  it('validates BaseBlogEntry structure', () => {
    const baseBlog: BaseBlogEntry = {
      title: 'Test Blog',
      excerpt: 'Test excerpt',
      body: 'Test content',
      tags: ['tech', 'test'],
      isDraft: false,
      publishAt: '2025-03-12T12:00:00Z'
    };

    expect(baseBlog).toHaveProperty('title');
    expect(baseBlog).toHaveProperty('excerpt');
    expect(baseBlog).toHaveProperty('body');
    expect(baseBlog).toHaveProperty('tags');
    expect(baseBlog).toHaveProperty('isDraft');
    expect(baseBlog).toHaveProperty('publishAt');
  });

  // Test the full BlogEntry model
  it('validates BlogEntry structure with all properties', () => {
    const blog: BlogEntry = {
      _id: '1',
      title: 'Test Blog',
      excerpt: 'Test excerpt',
      body: 'Test content',
      tags: ['tech', 'test'],
      isDraft: false,
      publishAt: '2025-03-12T12:00:00Z',
      link: 'test-blog-1',
      createdAt: '2025-03-12T12:00:00Z',
      updatedAt: '2025-03-12T12:00:00Z'
    };

    // Base properties
    expect(blog).toHaveProperty('title');
    expect(blog).toHaveProperty('excerpt');
    expect(blog).toHaveProperty('body');
    expect(blog).toHaveProperty('tags');
    expect(blog).toHaveProperty('isDraft');
    expect(blog).toHaveProperty('publishAt');

    // Extended properties
    expect(blog).toHaveProperty('_id');
    expect(blog).toHaveProperty('link');
    expect(blog).toHaveProperty('createdAt');
    expect(blog).toHaveProperty('updatedAt');
  });

  // Test type compatibility
  it('ensures BaseBlogEntry is assignable to Partial<BlogEntry>', () => {
    const baseBlog: BaseBlogEntry = {
      title: 'Test Blog',
      excerpt: 'Test excerpt',
      body: 'Test content',
      tags: ['tech'],
      isDraft: false
    };

    const partialBlog: Partial<BlogEntry> = baseBlog;
    expect(partialBlog.title).toBe('Test Blog');
  });

  // Test optional properties
  it('allows optional publishAt property', () => {
    const blog: BaseBlogEntry = {
      title: 'Test Blog',
      excerpt: 'Test excerpt',
      body: 'Test content',
      tags: ['tech'],
      isDraft: false
    };

    expect(blog.publishAt).toBeUndefined();
  });
});

================
File: portfolio.next/__tests__/models/ChatContext.test.tsx
================
import React from "react";
import { renderHook, act } from "@testing-library/react";
import { ChatProvider, useChat } from "@/context/ChatContext";

describe("ChatContext", () => {
  it("provides default chat state", () => {
    const { result } = renderHook(() => useChat(), { wrapper: ChatProvider });

    expect(result.current.messages).toEqual([]);
  });

  it("adds a message to chat", () => {
    const { result } = renderHook(() => useChat(), { wrapper: ChatProvider });

    act(() => {
      result.current.addMessage({ role: "user", text: "Hello!" });
    });

    expect(result.current.messages.length).toBe(1);
  });
});

================
File: portfolio.next/__tests__/models/FileInfo.test.ts
================
import { FileInfo } from "@/models/FileInfo";

describe("FileInfo Model", () => {
  it("has correct structure", () => {
    const file: FileInfo = {
      _id: "1",
      filename: "file.txt",
      originalName: "original.txt",
      contentType: "text/plain",
      metadata: {
        entityId: "123",
        context: "project",
        uploadedBy: "user",
        isPublic: true,
        size: 1024,
      },
    };

    expect(file.filename).toBe("file.txt");
    expect(file.metadata.isPublic).toBe(true);
  });
});

================
File: portfolio.next/__tests__/services/aiSearch.test.ts
================
import { searchContent, chatWithAI, ChatMessage, SearchResult } from '@/services/aiService';
import { PUBLIC_API, AUTH_API } from '@/lib/constants';

// Mock the global fetch function
let mockFetch: jest.Mock;
beforeEach(() => {
  mockFetch = jest.fn();
  global.fetch = mockFetch;
});

// Mock console.error to prevent logging during tests
console.error = jest.fn();

describe('AI Search and Chat Service', () => {
  afterEach(() => {
    jest.resetAllMocks();
  });

  describe('searchContent', () => {
    const mockQuery = 'test query';
    const mockSearchResults: SearchResult[] = [
      {
        title: 'Test Blog',
        description: 'Test Description',
        type: 'blog',
        link: '/blog/test',
        score: 0.95
      },
      {
        title: 'Test Project',
        description: 'Project Description',
        type: 'project',
        link: '/projects/test',
        score: 0.85
      }
    ];

    it('should search content successfully', async () => {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: () => Promise.resolve(mockSearchResults)
      });

      const results = await searchContent(mockQuery);

      expect(mockFetch).toHaveBeenCalledWith(PUBLIC_API.search, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ query: mockQuery }),
      });
      expect(results).toEqual(mockSearchResults);
    });

    it('should return empty array when search fails', async () => {
      mockFetch.mockResolvedValueOnce({
        ok: false
      });

      const results = await searchContent(mockQuery);

      expect(results).toEqual([]);
      expect(console.error).toHaveBeenCalled();
    });

    it('should handle network errors and return empty array', async () => {
      mockFetch.mockRejectedValueOnce(new Error('Network error'));

      const results = await searchContent(mockQuery);

      expect(results).toEqual([]);
      expect(console.error).toHaveBeenCalled();
    });
  });

  describe('chatWithAI', () => {
    const mockMessages: ChatMessage[] = [
      { role: 'user', content: 'Hello' },
      { role: 'assistant', content: 'Hi there!' }
    ];

    const mockResponse: ChatMessage = {
      role: 'assistant',
      content: 'How can I help you today?'
    };

    it('should chat with AI successfully', async () => {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: () => Promise.resolve(mockResponse)
      });

      const response = await chatWithAI(mockMessages);

      expect(mockFetch).toHaveBeenCalledWith(AUTH_API.chat, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ messages: mockMessages }),
        credentials: 'include'
      });
      expect(response).toEqual(mockResponse);
    });

    it('should throw error when chat fails', async () => {
      mockFetch.mockResolvedValueOnce({
        ok: false
      });

      await expect(chatWithAI(mockMessages)).rejects.toThrow('Chat request failed');
      expect(console.error).toHaveBeenCalled();
    });

    it('should handle network errors', async () => {
      const networkError = new Error('Network error');
      mockFetch.mockRejectedValueOnce(networkError);

      await expect(chatWithAI(mockMessages)).rejects.toThrow(networkError);
      expect(console.error).toHaveBeenCalled();
    });
  });
});

================
File: portfolio.next/__tests__/services/aiService.test.ts
================
import { getAIConfig, updateAIConfig } from "@/services/aiService";

global.fetch = jest.fn();

describe("AI Service", () => {
  beforeEach(() => {
    (fetch as jest.Mock).mockClear();
  });

  it("should fetch AI configuration successfully", async () => {
    const mockConfig = { provider: "ollama" };
    (fetch as jest.Mock).mockResolvedValueOnce({
      ok: true,
      json: async () => mockConfig,
    });

    const config = await getAIConfig();
    expect(config).toEqual(mockConfig);
    expect(fetch).toHaveBeenCalledWith(
      expect.stringContaining("/api/provider-configs/ai"),
      expect.objectContaining({ credentials: "include" })
    );
  });

  it("should return default config if API response is not OK", async () => {
    (fetch as jest.Mock).mockResolvedValueOnce({
      ok: false,
    });

    const config = await getAIConfig();
    expect(config).toEqual({ provider: "ollama" }); // Default value
  });

  it("should throw an error if fetching AI config fails", async () => {
    (fetch as jest.Mock).mockRejectedValueOnce(new Error("Network Error"));

    await expect(getAIConfig()).rejects.toThrow("Error fetching AI configuration");
  });

  it("should update AI configuration successfully", async () => {
    (fetch as jest.Mock).mockResolvedValueOnce({ ok: true });

    await expect(updateAIConfig({ provider: "openai", clientId: "abc", clientSecret: "xyz" })).resolves.toBeUndefined();
    expect(fetch).toHaveBeenCalledWith(
      expect.stringContaining("/api/provider-configs/ai"),
      expect.objectContaining({
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        credentials: "include",
        body: JSON.stringify({ provider: "openai", clientId: "abc", clientSecret: "xyz" }),
      })
    );
  });

  it("should throw an error if updating AI config fails", async () => {
    (fetch as jest.Mock).mockResolvedValueOnce({ ok: false });

    await expect(updateAIConfig({ provider: "openai" })).rejects.toThrow("Error updating AI configuration");
  });
});

================
File: portfolio.next/__tests__/services/analyticsService.test.ts
================
import { fetchAnalytics, trackPageView, trackEvent } from '@/services/analyticsService';
import { ADMIN_API } from '@/lib/constants';
import { AnalyticsData } from '@/models/Analytics';

describe('Analytics Service', () => {
  let mockFetch: jest.Mock;

  beforeEach(() => {
    mockFetch = jest.fn();
    global.fetch = mockFetch;
  });

  afterEach(() => {
    jest.resetAllMocks();
  });

  describe('fetchAnalytics', () => {
    const mockAnalytics: AnalyticsData = {
      pageViews: 100,
      uniqueVisitors: 50,
      topPages: [
        { path: '/home', views: 30 },
        { path: '/about', views: 20 },
      ],
    };

    it('should fetch analytics data correctly', async () => {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: () => Promise.resolve(mockAnalytics),
      });

      const result = await fetchAnalytics();

      expect(mockFetch).toHaveBeenCalledWith(ADMIN_API.analytics.list, {
        credentials: 'include',
      });
      expect(result).toEqual(mockAnalytics);
    });

    it('should handle errors correctly', async () => {
      const errorMessage = 'Failed to fetch analytics';
      mockFetch.mockResolvedValueOnce({
        ok: false,
        json: () => Promise.resolve({ message: errorMessage }),
      });

      await expect(fetchAnalytics()).rejects.toThrow(errorMessage);
    });
  });

  describe('trackPageView', () => {
    const mockPath = '/home';

    it('should track page view correctly', async () => {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: () => Promise.resolve({ success: true }),
      });

      await trackPageView(mockPath);

      expect(mockFetch).toHaveBeenCalledWith(ADMIN_API.analytics.trackPage, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify({ path: mockPath }),
      });
    });

    it('should handle errors correctly', async () => {
      const errorMessage = 'Failed to track page view';
      mockFetch.mockResolvedValueOnce({
        ok: false,
        json: () => Promise.resolve({ message: errorMessage }),
      });

      await expect(trackPageView(mockPath)).rejects.toThrow(errorMessage);
    });
  });

  describe('trackEvent', () => {
    const mockEvent = 'button_click';
    const mockData = { buttonId: 'signup' };

    it('should track event correctly', async () => {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: () => Promise.resolve({ success: true }),
      });

      await trackEvent(mockEvent, mockData);

      expect(mockFetch).toHaveBeenCalledWith(ADMIN_API.analytics.trackEvent, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify({ event: mockEvent, data: mockData }),
      });
    });

    it('should track event without data correctly', async () => {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: () => Promise.resolve({ success: true }),
      });

      await trackEvent(mockEvent);

      expect(mockFetch).toHaveBeenCalledWith(ADMIN_API.analytics.trackEvent, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify({ event: mockEvent }),
      });
    });

    it('should handle errors correctly', async () => {
      const errorMessage = 'Failed to track event';
      mockFetch.mockResolvedValueOnce({
        ok: false,
        json: () => Promise.resolve({ message: errorMessage }),
      });

      await expect(trackEvent(mockEvent)).rejects.toThrow(errorMessage);
    });
  });
});

================
File: portfolio.next/__tests__/services/apiServices.test.ts
================
import { fetchBlogEntries, fetchProjects } from "@/services/apiService";

describe("API Service", () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  it("should return blog entries on success", async () => {
    const mockBlogs = [{ title: "Test Blog", excerpt: "Test excerpt" }];
    (fetch as jest.MockedFunction<typeof fetch>).mockResolvedValueOnce({
      ok: true,
      json: async () => mockBlogs,
    } as Response);

    const result = await fetchBlogEntries();
    expect(result).toEqual(mockBlogs);
    expect(fetch).toHaveBeenCalledWith(`${process.env.NEXT_PUBLIC_API_URL}/api/blogs`);
  });

  it("should return projects on success", async () => {
    const mockProjects = [{ title: "Test Project", description: "Test description" }];
    (fetch as jest.MockedFunction<typeof fetch>).mockResolvedValueOnce({
      ok: true,
      json: async () => mockProjects,
    } as Response);

    const result = await fetchProjects();
    expect(result).toEqual(mockProjects);
    expect(fetch).toHaveBeenCalledWith(`${process.env.NEXT_PUBLIC_API_URL}/api/projects`);
  });

  it("should throw an error if blog fetch fails", async () => {
    (fetch as jest.MockedFunction<typeof fetch>).mockResolvedValueOnce({
      ok: false,
      statusText: "Server Error",
    } as Response);

    await expect(fetchBlogEntries()).rejects.toThrow("Error fetching blog entries: Server Error");
  });

  it("should throw an error if project fetch fails", async () => {
    (fetch as jest.MockedFunction<typeof fetch>).mockResolvedValueOnce({
      ok: false,
      statusText: "Server Error",
    } as Response);

    await expect(fetchProjects()).rejects.toThrow("Error fetching projects: Server Error");
  });
});

================
File: portfolio.next/__tests__/services/authService.test.ts
================
import { checkAuthStatus } from '@/services/authService';
import { AUTH_API } from '@/lib/constants';
import { User } from '@/models/User';

describe('Auth Service', () => {
  let mockFetch: jest.Mock;

  beforeEach(() => {
    mockFetch = jest.fn();
    global.fetch = mockFetch;
  });

  afterEach(() => {
    jest.resetAllMocks();
  });

  describe('checkAuthStatus', () => {
    const mockUser: User = {
      _id: '123',
      username: 'testuser',
      isAdmin: true,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
    };

    it('should fetch auth status correctly when authenticated', async () => {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: () => Promise.resolve({ user: mockUser, isAuthenticated: true }),
      });

      const result = await checkAuthStatus();

      expect(mockFetch).toHaveBeenCalledWith(AUTH_API.auth.status, {
        credentials: 'include',
      });
      expect(result).toEqual({ user: mockUser, isAuthenticated: true });
    });

    it('should return not authenticated when no user', async () => {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: () => Promise.resolve({ user: null, isAuthenticated: false }),
      });

      const result = await checkAuthStatus();

      expect(mockFetch).toHaveBeenCalledWith(AUTH_API.auth.status, {
        credentials: 'include',
      });
      expect(result).toEqual({ user: null, isAuthenticated: false });
    });

    it('should handle errors correctly', async () => {
      const errorMessage = 'Failed to check auth status';
      mockFetch.mockResolvedValueOnce({
        ok: false,
        json: () => Promise.resolve({ message: errorMessage }),
      });

      await expect(checkAuthStatus()).rejects.toThrow(errorMessage);
    });

    it('should handle network errors correctly', async () => {
      mockFetch.mockRejectedValueOnce(new Error('Network error'));

      await expect(checkAuthStatus()).rejects.toThrow('Network error');
    });
  });
});

================
File: portfolio.next/__tests__/services/blogService.test.ts
================
import { fetchBlogEntry, createBlogEntry, updateBlogEntry, deleteBlogEntry } from '@/services/blogService';
import { PUBLIC_API, ADMIN_API } from '@/lib/constants';
import { BlogEntry } from '@/models/BlogEntry';

describe('Blog Service', () => {
  let mockFetch: jest.Mock;

  beforeEach(() => {
    mockFetch = jest.fn();
    global.fetch = mockFetch;
  });

  afterEach(() => {
    jest.resetAllMocks();
  });

  const mockBlog: BlogEntry = {
    _id: '123',
    title: 'Test Blog',
    excerpt: 'Test excerpt',
    body: 'Test body content',
    tags: ['test'],
    isDraft: false,
    link: 'test-blog',
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  };

  describe('fetchBlogEntry', () => {
    it('should fetch blog entry correctly', async () => {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: () => Promise.resolve(mockBlog),
      });

      const result = await fetchBlogEntry('123');

      expect(mockFetch).toHaveBeenCalledWith(PUBLIC_API.blog.get('123'), {
        credentials: 'include',
      });
      expect(result).toEqual(mockBlog);
    });

    it('should handle errors correctly', async () => {
      const errorMessage = 'Blog not found';
      mockFetch.mockResolvedValueOnce({
        ok: false,
        json: () => Promise.resolve({ message: errorMessage }),
      });

      await expect(fetchBlogEntry('123')).rejects.toThrow(errorMessage);
    });
  });

  describe('createBlogEntry', () => {
    const newBlog = {
      title: 'New Blog',
      excerpt: 'New excerpt',
      body: 'New body content',
      tags: ['new'],
      isDraft: true,
      link: 'new-blog',
    };

    it('should create blog entry correctly', async () => {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: () => Promise.resolve(mockBlog),
      });

      const result = await createBlogEntry(newBlog);

      expect(mockFetch).toHaveBeenCalledWith(ADMIN_API.blog.create, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify(newBlog),
      });
      expect(result).toEqual(mockBlog);
    });

    it('should handle errors correctly', async () => {
      const errorMessage = 'Failed to create blog';
      mockFetch.mockResolvedValueOnce({
        ok: false,
        json: () => Promise.resolve({ message: errorMessage }),
      });

      await expect(createBlogEntry(newBlog)).rejects.toThrow(errorMessage);
    });
  });

  describe('updateBlogEntry', () => {
    const updateData = {
      title: 'Updated Blog',
      excerpt: 'Updated excerpt',
      body: 'Updated body content',
    };

    it('should update blog entry correctly', async () => {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: () => Promise.resolve({ ...mockBlog, ...updateData }),
      });

      const result = await updateBlogEntry('123', updateData);

      expect(mockFetch).toHaveBeenCalledWith(ADMIN_API.blog.update('123'), {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify(updateData),
      });
      expect(result).toEqual({ ...mockBlog, ...updateData });
    });

    it('should handle errors correctly', async () => {
      const errorMessage = 'Failed to update blog';
      mockFetch.mockResolvedValueOnce({
        ok: false,
        json: () => Promise.resolve({ message: errorMessage }),
      });

      await expect(updateBlogEntry('123', updateData)).rejects.toThrow(errorMessage);
    });
  });

  describe('deleteBlogEntry', () => {
    it('should delete blog entry correctly', async () => {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: () => Promise.resolve({ success: true }),
      });

      await deleteBlogEntry('123');

      expect(mockFetch).toHaveBeenCalledWith(ADMIN_API.blog.delete('123'), {
        method: 'DELETE',
        credentials: 'include',
      });
    });

    it('should handle errors correctly', async () => {
      const errorMessage = 'Failed to delete blog';
      mockFetch.mockResolvedValueOnce({
        ok: false,
        json: () => Promise.resolve({ message: errorMessage }),
      });

      await expect(deleteBlogEntry('123')).rejects.toThrow(errorMessage);
    });
  });
});

================
File: portfolio.next/__tests__/services/careerService.test.ts
================
import { 
  fetchCareerTimeline,
  fetchCareerEntry,
  saveCareerEntry,
  deleteCareerEntry,
  linkEntries,
  parseLinkedInHTMLBackend,
  saveParsedJobs,
  LinkedInParseResult
} from '@/services/careerService';
import { API_ENDPOINTS } from '@/lib/constants';
import { CareerEntry, CareerEntryCreate } from '@/models/CareerEntry';

// Mock the global fetch function
const mockFetch = jest.fn();
global.fetch = mockFetch;

// Mock console.error to prevent logging during tests
console.error = jest.fn();

describe('Career Service', () => {
  const mockCareerEntry: CareerEntry = {
    _id: '123',
    title: 'Software Engineer',
    company: 'Tech Corp',
    location: 'Remote',
    description: 'Full-stack development',
    startDate: '2023-01-01',
    endDate: null,
    type: 'job',
    skills: ['TypeScript', 'React', 'Node.js'],
    highlights: ['Led team projects'],
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  };

  const mockCareerEntryCreate: CareerEntryCreate = {
    title: 'New Engineer',
    company: 'New Corp',
    location: 'Remote',
    description: 'Backend development',
    startDate: '2024-01-01',
    endDate: null,
    type: 'job',
    skills: ['Python', 'Django']
  };

  beforeEach(() => {
    jest.clearAllMocks();
  });

  describe('fetchCareerTimeline', () => {
    it('should fetch career timeline successfully', async () => {
      const mockTimeline = [mockCareerEntry];
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: () => Promise.resolve(mockTimeline)
      });

      const result = await fetchCareerTimeline();

      expect(mockFetch).toHaveBeenCalledWith(`${API_ENDPOINTS.career}/timeline`, {
        credentials: 'include'
      });
      expect(result).toEqual(mockTimeline);
    });

    it('should throw error when fetch fails', async () => {
      mockFetch.mockResolvedValueOnce({
        ok: false
      });

      await expect(fetchCareerTimeline()).rejects.toThrow('Failed to fetch timeline data');
    });
  });

  describe('fetchCareerEntry', () => {
    it('should fetch single career entry successfully', async () => {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: () => Promise.resolve(mockCareerEntry)
      });

      const result = await fetchCareerEntry('123');

      expect(mockFetch).toHaveBeenCalledWith(`${API_ENDPOINTS.career}/timeline/123`, {
        credentials: 'include'
      });
      expect(result).toEqual(mockCareerEntry);
    });

    it('should throw error when fetch fails', async () => {
      mockFetch.mockResolvedValueOnce({
        ok: false
      });

      await expect(fetchCareerEntry('123')).rejects.toThrow('Failed to fetch entry');
    });
  });

  describe('saveCareerEntry', () => {
    it('should create new career entry successfully', async () => {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: () => Promise.resolve(mockCareerEntry)
      });

      const result = await saveCareerEntry(mockCareerEntryCreate);

      expect(mockFetch).toHaveBeenCalledWith(`${API_ENDPOINTS.career}/timeline`, {
        method: 'POST',
        credentials: 'include',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(mockCareerEntryCreate)
      });
      expect(result).toEqual(mockCareerEntry);
    });

    it('should update existing career entry successfully', async () => {
      const updateData = { ...mockCareerEntry, title: 'Updated Title' };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: () => Promise.resolve(updateData)
      });

      const result = await saveCareerEntry(updateData);

      expect(mockFetch).toHaveBeenCalledWith(`${API_ENDPOINTS.career}/timeline/123`, {
        method: 'PUT',
        credentials: 'include',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(updateData)
      });
      expect(result).toEqual(updateData);
    });

    it('should throw error when save fails', async () => {
      mockFetch.mockResolvedValueOnce({
        ok: false
      });

      await expect(saveCareerEntry(mockCareerEntryCreate)).rejects.toThrow('Failed to save entry');
    });
  });

  describe('deleteCareerEntry', () => {
    it('should delete career entry successfully', async () => {
      mockFetch.mockResolvedValueOnce({
        ok: true
      });

      await deleteCareerEntry('123');

      expect(mockFetch).toHaveBeenCalledWith(`${API_ENDPOINTS.career}/timeline/123`, {
        method: 'DELETE',
        credentials: 'include'
      });
    });

    it('should throw error when deletion fails', async () => {
      mockFetch.mockResolvedValueOnce({
        ok: false
      });

      await expect(deleteCareerEntry('123')).rejects.toThrow('Failed to delete entry');
    });
  });

  describe('linkEntries', () => {
    const linkedIds = ['456', '789'];

    it('should link entries successfully', async () => {
      mockFetch.mockResolvedValueOnce({
        ok: true
      });

      await linkEntries('123', linkedIds);

      expect(mockFetch).toHaveBeenCalledWith(`${API_ENDPOINTS.career}/timeline/123/link`, {
        method: 'POST',
        credentials: 'include',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ linkedEntries: linkedIds })
      });
    });

    it('should throw error when linking fails', async () => {
      mockFetch.mockResolvedValueOnce({
        ok: false
      });

      await expect(linkEntries('123', linkedIds)).rejects.toThrow('Failed to link entries');
    });
  });

  describe('LinkedIn Integration', () => {
    const mockLinkedInData: LinkedInParseResult[] = [{
      title: 'Software Developer',
      company: 'LinkedIn Corp',
      location: 'Remote',
      startDate: '2024-01-01',
      endDate: null,
      description: 'Full-stack development',
      skills: ['JavaScript', 'React'],
      linkedInUrl: 'https://linkedin.com/job/123'
    }];

    describe('parseLinkedInHTMLBackend', () => {
      const mockHTML = '<div>Mock LinkedIn HTML</div>';

      it('should parse LinkedIn HTML successfully', async () => {
        mockFetch.mockResolvedValueOnce({
          ok: true,
          json: () => Promise.resolve(mockLinkedInData)
        });

        const result = await parseLinkedInHTMLBackend(mockHTML);

        expect(mockFetch).toHaveBeenCalledWith(`${API_ENDPOINTS.career}/parse-linkedin`, {
          method: 'POST',
          credentials: 'include',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ rawHTML: mockHTML })
        });
        expect(result).toEqual(mockLinkedInData);
      });

      it('should throw error when parsing fails', async () => {
        mockFetch.mockResolvedValueOnce({
          ok: false
        });

        await expect(parseLinkedInHTMLBackend(mockHTML)).rejects.toThrow('Failed to parse LinkedIn data.');
      });
    });

    describe('saveParsedJobs', () => {
      it('should save parsed LinkedIn jobs successfully', async () => {
        const mockSavedEntries: CareerEntry[] = [{
          ...mockCareerEntry,
          importedFromLinkedIn: true
        }];

        mockFetch.mockResolvedValueOnce({
          ok: true,
          json: () => Promise.resolve(mockSavedEntries)
        });

        const result = await saveParsedJobs(mockLinkedInData);

        expect(mockFetch).toHaveBeenCalledWith(`${API_ENDPOINTS.career}/timeline/bulk`, {
          method: 'POST',
          credentials: 'include',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(mockLinkedInData.map(data => ({
            ...data,
            type: 'job',
            url: data.linkedInUrl,
            highlights: [],
            importedFromLinkedIn: true
          })))
        });
        expect(result).toEqual(mockSavedEntries);
      });

      it('should throw error when saving fails', async () => {
        mockFetch.mockResolvedValueOnce({
          ok: false
        });

        await expect(saveParsedJobs(mockLinkedInData)).rejects.toThrow('Failed to save parsed jobs.');
      });
    });
  });
});

================
File: portfolio.next/__tests__/services/fileService.test.ts
================
import { fetchFiles, uploadFile, deleteFile } from '@/services/fileService';
import { API_ENDPOINTS } from '@/lib/constants';
import { FileInfo } from '@/models/FileInfo';

// Mock the global fetch function
const mockFetch = jest.fn();
global.fetch = mockFetch;

// Mock console.error to prevent logging during tests
console.error = jest.fn();

describe('File Service', () => {
  const mockFileInfo: FileInfo = {
    _id: '67cb0ebf2ec18c7799cb6e99',
    filename: 'test-file.jpg',
    originalName: 'test-file.jpg',
    contentType: 'image/jpeg',
    isPublic: true,
    context: 'project',
    size: 4004,
    length: 4004,
    chunkSize: 261120,
    uploadDate: '2025-03-07T15:20:31.656Z',
    metadata: {
      entityId: '67bb7eb8a3e8ac56032b8378',
      context: 'project',
      uploadedBy: 'testuser',
      isPublic: true,
      size: 4004,
      uploadDate: '2025-03-07T15:20:31.656Z'
    }
  };

  beforeEach(() => {
    jest.clearAllMocks();
  });

  describe('fetchFiles', () => {
    it('should fetch files without filters', async () => {
      const mockFiles = [mockFileInfo];
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: () => Promise.resolve(mockFiles)
      });

      const result = await fetchFiles();

      expect(mockFetch).toHaveBeenCalledWith(API_ENDPOINTS.file, {
        credentials: 'include'
      });
      expect(result).toEqual(mockFiles);
    });

    it('should fetch files with entityId and context', async () => {
      const mockFiles = [mockFileInfo];
      const entityId = '67bb7eb8a3e8ac56032b8378';
      const context = 'project';

      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: () => Promise.resolve(mockFiles)
      });

      const result = await fetchFiles(entityId, context);
      const expectedUrl = new URL(API_ENDPOINTS.file);
      expectedUrl.searchParams.append('entityId', entityId);
      expectedUrl.searchParams.append('context', context);

      expect(mockFetch).toHaveBeenCalledWith(expectedUrl.toString(), {
        credentials: 'include'
      });
      expect(result).toEqual(mockFiles);
    });

    it('should return empty array when fetch fails', async () => {
      mockFetch.mockResolvedValueOnce({
        ok: false
      });

      const result = await fetchFiles();

      expect(result).toEqual([]);
      expect(console.error).toHaveBeenCalled();
    });

    it('should handle network errors and return empty array', async () => {
      mockFetch.mockRejectedValueOnce(new Error('Network error'));

      const result = await fetchFiles();

      expect(result).toEqual([]);
      expect(console.error).toHaveBeenCalled();
    });
  });

  describe('uploadFile', () => {
    const mockFile = new File(['test content'], 'test.jpg', { type: 'image/jpeg' });
    const entityId = '67bb7eb8a3e8ac56032b8378';
    const context = 'project';
    const isPublic = true;

    it('should upload file successfully', async () => {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: () => Promise.resolve(mockFileInfo)
      });

      const result = await uploadFile(mockFile, entityId, context, isPublic);

      const expectedUrl = new URL(`${API_ENDPOINTS.file}/upload`);
      expectedUrl.searchParams.append('entityId', entityId);
      expectedUrl.searchParams.append('context', context);
      expectedUrl.searchParams.append('isPublic', isPublic.toString());

      const expectedFormData = new FormData();
      expectedFormData.append('file', mockFile);
      expectedFormData.append('context', context);
      expectedFormData.append('entityId', entityId);
      expectedFormData.append('isPublic', isPublic.toString());

      expect(mockFetch).toHaveBeenCalledWith(expectedUrl.toString(), {
        method: 'POST',
        credentials: 'include',
        headers: {
          'content-type': 'multipart/form-data',
          'x-filename': mockFile.name
        },
        body: expect.any(FormData)
      });
      expect(result).toEqual(mockFileInfo);
    });

    it('should throw error when upload fails', async () => {
      mockFetch.mockResolvedValueOnce({
        ok: false
      });

      await expect(uploadFile(mockFile, entityId, context, isPublic))
        .rejects.toThrow('Upload failed');
      expect(console.error).toHaveBeenCalled();
    });

    it('should handle network errors', async () => {
      const networkError = new Error('Network error');
      mockFetch.mockRejectedValueOnce(networkError);

      await expect(uploadFile(mockFile, entityId, context, isPublic))
        .rejects.toThrow(networkError);
      expect(console.error).toHaveBeenCalled();
    });
  });

  describe('deleteFile', () => {
    const fileId = '67cb0ebf2ec18c7799cb6e99';

    it('should delete file successfully', async () => {
      mockFetch.mockResolvedValueOnce({
        ok: true
      });

      await deleteFile(fileId);

      expect(mockFetch).toHaveBeenCalledWith(`${API_ENDPOINTS.file}/${fileId}`, {
        method: 'DELETE',
        credentials: 'include'
      });
    });

    it('should throw error when deletion fails', async () => {
      mockFetch.mockResolvedValueOnce({
        ok: false
      });

      await expect(deleteFile(fileId)).rejects.toThrow('Failed to delete');
      expect(console.error).toHaveBeenCalled();
    });

    it('should handle network errors', async () => {
      const networkError = new Error('Network error');
      mockFetch.mockRejectedValueOnce(networkError);

      await expect(deleteFile(fileId)).rejects.toThrow(networkError);
      expect(console.error).toHaveBeenCalled();
    });
  });
});

================
File: portfolio.next/__tests__/services/projectService.test.ts
================
import { fetchProject, createProject, updateProject, deleteProject } from '@/services/projectService';
import { PUBLIC_API, ADMIN_API } from '@/lib/constants';
import { Project, ProjectCreate } from '@/models/Project';

describe('Project Service', () => {
  let mockFetch: jest.Mock;

  beforeEach(() => {
    mockFetch = jest.fn();
    global.fetch = mockFetch;
  });

  afterEach(() => {
    jest.resetAllMocks();
  });

  const mockProject: Project = {
    _id: '123',
    title: 'Test Project',
    excerpt: 'Test excerpt',
    description: 'Test description',
    tags: ['test'],
    isDraft: false,
    status: 'completed',
    technologies: ['React', 'TypeScript'],
    startDate: '2023-01-01',
    endDate: '2023-12-31',
    image: 'test-image.jpg',
    link: 'https://test-project.com',
    industry: 'Technology',
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  };

  describe('fetchProject', () => {
    it('should fetch project correctly', async () => {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: () => Promise.resolve(mockProject),
      });

      const result = await fetchProject('123');

      expect(mockFetch).toHaveBeenCalledWith(PUBLIC_API.project.get('123'), {
        credentials: 'include',
      });
      expect(result).toEqual(mockProject);
    });

    it('should handle errors correctly', async () => {
      const errorMessage = 'Project not found';
      mockFetch.mockResolvedValueOnce({
        ok: false,
        json: () => Promise.resolve({ message: errorMessage }),
      });

      await expect(fetchProject('123')).rejects.toThrow(errorMessage);
    });
  });

  describe('createProject', () => {
    const newProject: ProjectCreate = {
      title: 'New Project',
      excerpt: 'New excerpt',
      description: 'New description',
      tags: ['new'],
      isDraft: true,
      status: 'planned',
      technologies: ['Next.js', 'TypeScript'],
      industry: 'Education',
    };

    it('should create project correctly', async () => {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: () => Promise.resolve(mockProject),
      });

      const result = await createProject(newProject);

      expect(mockFetch).toHaveBeenCalledWith(ADMIN_API.project.create, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify(newProject),
      });
      expect(result).toEqual(mockProject);
    });

    it('should handle errors correctly', async () => {
      const errorMessage = 'Failed to create project';
      mockFetch.mockResolvedValueOnce({
        ok: false,
        json: () => Promise.resolve({ message: errorMessage }),
      });

      await expect(createProject(newProject)).rejects.toThrow(errorMessage);
    });
  });

  describe('updateProject', () => {
    const updateData = {
      title: 'Updated Project',
      excerpt: 'Updated excerpt',
      description: 'Updated description',
      status: 'in-progress' as const,
    };

    it('should update project correctly', async () => {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: () => Promise.resolve({ ...mockProject, ...updateData }),
      });

      const result = await updateProject('123', updateData);

      expect(mockFetch).toHaveBeenCalledWith(ADMIN_API.project.update('123'), {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify(updateData),
      });
      expect(result).toEqual({ ...mockProject, ...updateData });
    });

    it('should handle errors correctly', async () => {
      const errorMessage = 'Failed to update project';
      mockFetch.mockResolvedValueOnce({
        ok: false,
        json: () => Promise.resolve({ message: errorMessage }),
      });

      await expect(updateProject('123', updateData)).rejects.toThrow(errorMessage);
    });
  });

  describe('deleteProject', () => {
    it('should delete project correctly', async () => {
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: () => Promise.resolve({ success: true }),
      });

      await deleteProject('123');

      expect(mockFetch).toHaveBeenCalledWith(ADMIN_API.project.delete('123'), {
        method: 'DELETE',
        credentials: 'include',
      });
    });

    it('should handle errors correctly', async () => {
      const errorMessage = 'Failed to delete project';
      mockFetch.mockResolvedValueOnce({
        ok: false,
        json: () => Promise.resolve({ message: errorMessage }),
      });

      await expect(deleteProject('123')).rejects.toThrow(errorMessage);
    });
  });
});

================
File: portfolio.next/__tests__/services/userService.test.ts
================
import { getUsers, updateUserAdmin } from '@/services/userService';
import { API_ENDPOINTS } from '@/lib/constants';
import { User } from '@/models/User';

// Mock the global fetch function
const mockFetch = jest.fn();
global.fetch = mockFetch;

// Mock console.error to prevent logging during tests
console.error = jest.fn();

describe('userService', () => {
  const mockUser: User = {
    _id: '123',
    username: 'testuser',
    isAdmin: true,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  };

  beforeEach(() => {
    jest.clearAllMocks();
  });

  describe('getUsers', () => {
    it('should fetch all users successfully', async () => {
      const mockUsers = [mockUser];
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: () => Promise.resolve(mockUsers)
      });

      const result = await getUsers();

      expect(mockFetch).toHaveBeenCalledWith(API_ENDPOINTS.admin.users, {
        credentials: 'include'
      });
      expect(result).toEqual(mockUsers);
    });

    it('should throw error when fetch fails', async () => {
      mockFetch.mockResolvedValueOnce({
        ok: false
      });

      await expect(getUsers()).rejects.toThrow('Failed to fetch users');
      expect(console.error).toHaveBeenCalled();
    });

    it('should handle network errors', async () => {
      const networkError = new Error('Network error');
      mockFetch.mockRejectedValueOnce(networkError);

      await expect(getUsers()).rejects.toThrow(networkError);
      expect(console.error).toHaveBeenCalled();
    });
  });

  describe('updateUserAdmin', () => {
    const userId = '123';
    const isAdmin = true;

    it('should update user admin status successfully', async () => {
      const updatedUser = { ...mockUser, isAdmin };
      mockFetch.mockResolvedValueOnce({
        ok: true,
        json: () => Promise.resolve(updatedUser)
      });

      const result = await updateUserAdmin(userId, isAdmin);

      expect(mockFetch).toHaveBeenCalledWith(`${API_ENDPOINTS.admin.users}/${userId}/admin`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        credentials: 'include',
        body: JSON.stringify({ isAdmin })
      });
      expect(result).toEqual(updatedUser);
    });

    it('should throw error when update fails', async () => {
      mockFetch.mockResolvedValueOnce({
        ok: false
      });

      await expect(updateUserAdmin(userId, isAdmin)).rejects.toThrow('Failed to update user admin status');
      expect(console.error).toHaveBeenCalled();
    });

    it('should handle network errors', async () => {
      const networkError = new Error('Network error');
      mockFetch.mockRejectedValueOnce(networkError);

      await expect(updateUserAdmin(userId, isAdmin)).rejects.toThrow(networkError);
      expect(console.error).toHaveBeenCalled();
    });
  });
});

================
File: portfolio.next/Dockerfile
================
# Use official Node.js 22 image as a base
FROM node:22-alpine AS builder

# Set working directory
WORKDIR /app

# Copy necessary files
COPY package.json package-lock.json tsconfig.json next.config.js ./
COPY .env.production ./ 
COPY .env.production ./.env
# Install dependencies
RUN npm install --production

# Copy the entire source code
COPY . .

# Build the Next.js app
RUN npm run build 

# Use a smaller base image for production
FROM node:22-alpine

# Set working directory
WORKDIR /app

# Copy only necessary files from the builder stage
COPY --from=builder /app/package.json ./
COPY --from=builder /app/.next ./.next
COPY --from=builder /app/public ./public
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/.env.production ./  

# Set environment variables
ENV NODE_ENV=production
ENV PORT=3000

# Expose the port
EXPOSE 3000

# Start the Next.js server
CMD ["npm", "start"]

================
File: portfolio.next/eslint.config.mjs
================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;

================
File: portfolio.next/jest.config.ts
================
import nextJest from "next/jest";
import type { Config } from "jest";

// Create Jest config using Next.js built-in transformer
const createJestConfig = nextJest({
  dir: "./", // ✅ Ensures Jest loads Next.js environment correctly
});

const customJestConfig: Config = {
  testEnvironment: "jsdom",
  setupFilesAfterEnv: ["<rootDir>/jest.setup.ts"],
  moduleNameMapper: {
    "^@/(.*)$": "<rootDir>/src/$1",
  },
  transformIgnorePatterns: ["node_modules/(?!(next)/)"], // ✅ Ensures Next.js dependencies are processed correctly
};

// Export Jest config with Next.js compatibility
export default createJestConfig(customJestConfig);

================
File: portfolio.next/jest.setup.ts
================
import "@testing-library/jest-dom";
// import React from "react";
// global.React = React;

// Global mock for fetch
global.fetch = jest.fn() as jest.MockedFunction<typeof fetch>;
process.env.NEXT_PUBLIC_API_URL = "http://localhost:5000";
jest.spyOn(console, "error").mockImplementation(() => {});

jest.mock("next/navigation", () => ({
  useRouter: () => ({
    push: jest.fn(),
    replace: jest.fn(),
    prefetch: jest.fn(),
    asPath: "/mock-path",
  }),
}));


beforeEach(() => {
  jest.clearAllMocks();
});

================
File: portfolio.next/middleware.ts
================
import { NextRequest, NextResponse } from "next/server";

export function middleware(req: NextRequest) {
  // Example: Redirect users trying to access /admin if not authenticated
  const authToken = req.cookies.get("auth-token")?.value;
  if (!authToken && req.nextUrl.pathname.startsWith("/admin")) {
    return NextResponse.redirect(new URL("/login", req.url));
  }

  return NextResponse.next();
}

export const config = {
  matcher: ["/admin/:path*"], // Define which routes should trigger this middleware
};

================
File: portfolio.next/next-env.d.ts
================
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.

================
File: portfolio.next/next.config.js
================
/** @type {import('next').NextConfig} */
const path = require('path');

const basePath = process.env.NEXT_PUBLIC_BASE_PATH || '';

const nextConfig = {
  basePath,
  assetPrefix: basePath,
  trailingSlash: false,

  webpack: (config) => {
    config.resolve = config.resolve || {};
    config.resolve.alias = {
      ...config.resolve.alias,
      '@': path.resolve(__dirname, 'src'),
    };
    return config;
  },

  // Enforce basePath usage for images, fonts, and static files
  images: {
    loader: 'default',
    path: `${basePath}/_next/image/`,
    domains: ["azure.microsoft.com", "logos-world.net", "miro.medium.com"],
  },
  logging: {
    fetches: {
      fullUrl: true,
    },
  },
  onDemandEntries: {
    // Makes the production server keep pages in memory
    maxInactiveAge: 60 * 60 * 1000,
    pagesBufferLength: 5,
  },
};

module.exports = nextConfig; // ✅ Use module.exports instead of export default

================
File: portfolio.next/package.json
================
{
  "name": "portfolio.next",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev -H 0.0.0.0",
    "build": "next build",
    "start": "next start -H 0.0.0.0",
    "lint": "next lint",
    "test": "jest",
    "test:watch": "jest --watch"
  },
  "dependencies": {
    "@fortawesome/free-solid-svg-icons": "^6.7.2",
    "@fortawesome/react-fontawesome": "^0.2.2",
    "@tailwindcss/typography": "^0.5.16",
    "jest-environment-jsdom": "^29.7.0",
    "marked": "^15.0.7",
    "next": "^15.1.7",
    "react": "^19.0.0",
    "react-dom": "^19.0.0"
  },
  "devDependencies": {
    "@babel/preset-env": "^7.26.9",
    "@babel/preset-react": "^7.26.3",
    "@babel/preset-typescript": "^7.26.0",
    "@eslint/eslintrc": "^3",
    "@testing-library/dom": "^10.4.0",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.2.0",
    "@types/jest": "^29.5.14",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.1.7",
    "jest": "^29.7.0",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "ts-jest": "^29.2.6",
    "ts-node": "^10.9.2",
    "typescript": "^5"
  }
}

================
File: portfolio.next/postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: portfolio.next/public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: portfolio.next/public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: portfolio.next/public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: portfolio.next/public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: portfolio.next/public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: portfolio.next/README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: portfolio.next/src/app/_not-found/page.tsx
================
export default function NotFound() {
    return (<div>
        <h1>Ooops</h1>
        <p>Could not find anything here.</p>
    </div>);
}

================
File: portfolio.next/src/app/admin/ai-config/page.tsx
================
import { protectAdminRoute } from "@/lib/auth";
import AdminLayout from "@/components/layouts/AdminLayout";
import AIModelSettings from "@/components/admin/AIModelSettings";
import { getAIConfig } from "@/services/aiService";

export default async function AIConfigPage() {
  // This will automatically redirect if not authenticated or not admin
  await protectAdminRoute();

  // Fetch AI config server-side for SSR
  const config = await getAIConfig();

  return (
    <AdminLayout>
      <AIModelSettings initialConfig={config} />
    </AdminLayout>
  );
}

================
File: portfolio.next/src/app/admin/analytics/page.tsx
================
import { protectAdminRoute } from "@/lib/auth";
import AnalyticsDashboard from "@/components/admin/AnalyticsDashboard";

export default async function Analytics() {
  // This will automatically redirect if not authenticated or not admin
  await protectAdminRoute();

  return (
    <div className="p-8 max-w-6xl mx-auto">
      <h1 className="text-3xl font-bold mb-6">Analytics Dashboard</h1>
      <AnalyticsDashboard />
    </div>
  );
}

================
File: portfolio.next/src/app/admin/blogs/edit/[id]/page.tsx
================
import { notFound } from "next/navigation";
import { protectAdminRoute } from "@/lib/auth";
import AdminLayout from "@/components/layouts/AdminLayout";
import EditBlogEntry from "@/components/admin/EditBlogEntry";
import { fetchBlogEntry } from "@/services/blogService";

interface Props {
  params: Promise<{ id: string }>;
}

export default async function AdminBlogEditPage({ params }: Props) {
  // This will automatically redirect if not authenticated or not admin
  await protectAdminRoute();

  const { id } = await params;
  if (!id) return notFound();

  try {
    // Fetch blog data server-side for SSR
    const blog = await fetchBlogEntry(id);
    if (!blog) return notFound();
    
    return (
      <AdminLayout>
        <EditBlogEntry initialData={blog} />
      </AdminLayout>
    );
  } catch (error) {
    console.error('Failed to fetch blog:', error);
    return notFound();
  }
}

================
File: portfolio.next/src/app/admin/blogs/new/page.tsx
================
import { protectAdminRoute } from "@/lib/auth";
import AdminLayout from "@/components/layouts/AdminLayout";
import EditBlogEntry from "@/components/admin/EditBlogEntry";

export default async function NewBlogPage() {
  // This will automatically redirect if not authenticated or not admin
  await protectAdminRoute();

  return (
    <AdminLayout>
      <div className="p-6">
        <h1 className="text-2xl font-bold mb-4">Create a New Blog Entry</h1>
        <EditBlogEntry />
      </div>
    </AdminLayout>
  );
}

================
File: portfolio.next/src/app/admin/blogs/page.tsx
================
import { cookies } from "next/headers"; 
import { protectAdminRoute } from "@/lib/auth";
import AdminLayout from "@/components/layouts/AdminLayout";
import BlogList from "@/components/admin/BlogList";
import { fetchBlogEntries } from "@/services/blogService";

export default async function AdminBlogPage() {
  // This will automatically redirect if not authenticated or not admin
  await protectAdminRoute();

    // Get cookies from the request
    const cookieStore = cookies();
    const cookieHeader = cookieStore.toString(); 

  // Fetch blogs server-side for SSR
  const blogs = await fetchBlogEntries(true, cookieHeader);
console.log('blogs', blogs);
  return (
    <AdminLayout>
      <BlogList blogs={blogs} />
    </AdminLayout>
  );
}

================
File: portfolio.next/src/app/admin/career/edit/[id]/page.tsx
================
import { notFound } from "next/navigation";
import { protectAdminRoute } from "@/lib/auth";
import AdminLayout from "@/components/layouts/AdminLayout";
import CareerEntryForm from "@/components/admin/CareerEntryForm";
import { fetchCareerEntry } from "@/services/careerService";

export default async function EditCareerEntryPage({ params }: { params: Promise<{ id: string }> }) {
  await protectAdminRoute();

  const {id} = await params;
  // Verify entry exists server-side for SSR
  try {
    await fetchCareerEntry(id);
  } catch (error) {
    console.error("Failed to fetch career entry:", error);
    return notFound();
  }

  return (
    <AdminLayout>
      <CareerEntryForm initialId={id} />
    </AdminLayout>
  );
}

================
File: portfolio.next/src/app/admin/career/linkedin/page.tsx
================
import { protectAdminRoute } from "@/lib/auth";
import AdminLayout from "@/components/layouts/AdminLayout";
import LinkedInImport from "@/components/admin/LinkedInImport";

export default async function LinkedInImportPage() {
  await protectAdminRoute();

  return (
    <AdminLayout>
      <LinkedInImport />
    </AdminLayout>
  );
}

================
File: portfolio.next/src/app/admin/career/page.tsx
================
import { protectAdminRoute } from "@/lib/auth";
import AdminLayout from "@/components/layouts/AdminLayout";
import CareerTimelineManager from "@/components/admin/CareerTimelineManager";

export default async function CareerTimelinePage() {
  await protectAdminRoute();

  return (
    <AdminLayout>
      <CareerTimelineManager />
    </AdminLayout>
  );
}

================
File: portfolio.next/src/app/admin/comments/page.tsx
================
import { protectAdminRoute } from "@/lib/auth";
import AdminLayout from "@/components/layouts/AdminLayout";
import CommentsList from "@/components/admin/CommentsList";
import { fetchAllComments } from "@/services/commentService";

export default async function CommentsManagementPage() {
  await protectAdminRoute();

  // Fetch comments server-side for SSR optimization (rule #21)
  const comments = await fetchAllComments();

  return (
    <AdminLayout>
      <div className="p-6">
        <h1 className="text-2xl font-bold mb-6">Comments Management</h1>
        <CommentsList initialComments={comments} />
      </div>
    </AdminLayout>
  );
}

================
File: portfolio.next/src/app/admin/embeddings/page.tsx
================
import { protectAdminRoute } from "@/lib/auth";
import RefreshEmbeddings from "@/components/admin/RefreshEmbeddings";

export default async function EmbeddingsManagement() {
  await protectAdminRoute();

  return (
    <div className="p-8 max-w-2xl mx-auto">
      <h1 className="text-3xl font-bold mb-6">Manage AI Embeddings</h1>
      <RefreshEmbeddings />
    </div>
  );
}

================
File: portfolio.next/src/app/admin/files/page.tsx
================
import { protectAdminRoute } from "@/lib/auth";
import AdminLayout from "@/components/layouts/AdminLayout";
import FileWrapper from "@/components/admin/FileWrapper";

export default async function FileManagement() {
  await protectAdminRoute();

  return (
    <AdminLayout>
      <div className="p-6">
        <h1 className="text-3xl font-bold mb-4">Global Files Management</h1>
        <p>These files will be systematically included in the embedding contexts, unless they are media files (images, music, videos, etc.)</p>
        <FileWrapper context="general" entityId="0" />
      </div>
    </AdminLayout>
  );
}

================
File: portfolio.next/src/app/admin/login/page.tsx
================
"use client";

import { useState, useEffect } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import Link from "next/link";
import { useAuth } from "@/context/AuthContext";
import { AUTH_API, APP_ROUTES } from "@/lib/constants";

export default function AdminLogin() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const router = useRouter();
  const searchParams = useSearchParams();
  const returnUrl = searchParams.get("returnUrl") || APP_ROUTES.admin.home;
  const { isAuthenticated, login, refreshAuth } = useAuth();

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");
    try {
      await login(email, password);
      await refreshAuth();
      if (returnUrl) {
        router.push(returnUrl);
      }
    } catch (err) {
      console.error("Login failed:", err);
      setError("Invalid credentials");
    }
  };

  useEffect(() => {
    if (isAuthenticated && returnUrl) {
      router.push(returnUrl);
    }
  }, [isAuthenticated, returnUrl, router]);

  return (
    <div className="flex min-h-screen flex-col justify-center items-center bg-gray-100 space-y-6">
      <form onSubmit={handleLogin} className="bg-white p-6 rounded-lg shadow-md w-full max-w-md">
        <h2 className="text-2xl font-semibold mb-4 text-center">Admin Login</h2>
        {error && <p className="text-red-500 mb-4">{error}</p>}
        <input
          placeholder="Username or email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          className="border p-2 w-full mb-2"
          required
        />
        <input
          type="password"
          placeholder="Password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          className="border p-2 w-full mb-4"
          required
        />
        <button type="submit" className="bg-blue-500 text-white px-4 py-2 rounded w-full">
          Login
        </button>
      </form>

      <div className="bg-white p-6 rounded-lg shadow-md w-full max-w-md">
        <h3 className="text-xl font-semibold mb-4 text-center">Or Login with</h3>
        <div className="flex flex-col gap-2">
          <Link
            href={`${AUTH_API.auth.oauth.google}?returnUrl=${encodeURIComponent(returnUrl)}`}
            className="bg-red-500 text-white text-center py-2 rounded"
          >
            Login with Google
          </Link>
          <Link
            href={`${AUTH_API.auth.oauth.facebook}?returnUrl=${encodeURIComponent(returnUrl)}`}
            className="bg-blue-600 text-white text-center py-2 rounded"
          >
            Login with Facebook
          </Link>
        </div>
      </div>
    </div>
  );
}

================
File: portfolio.next/src/app/admin/page.tsx
================
import { protectAdminRoute } from "@/lib/auth";
import AdminLayout from "@/components/layouts/AdminLayout";
import AdminDashboard from "@/components/admin/AdminDashboard";

export default async function AdminPage() {
  // This will automatically redirect if not authenticated or not admin
  await protectAdminRoute();

  return (
    <AdminLayout>
      <AdminDashboard />
    </AdminLayout>
  );
}

================
File: portfolio.next/src/app/admin/pages/page.tsx
================
import { protectAdminRoute } from "@/lib/auth";
import AdminLayout from "@/components/layouts/AdminLayout";
import PagesList from "@/components/admin/PagesList";

const PageContent = () => {
  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-6">Pages Management</h1>
      <PagesList />
    </div>
  );
};

export default async function PagesManagementPage() {
  await protectAdminRoute();

  return (
    <AdminLayout>
      <PageContent />
    </AdminLayout>
  );
}

================
File: portfolio.next/src/app/admin/projects/edit/[id]/page.tsx
================
// portfolio.next/src/app/admin/projects/edit/[id]/page.tsx
import { notFound } from "next/navigation";
import { protectAdminRoute } from "@/lib/auth";
import AdminLayout from "@/components/layouts/AdminLayout";
import EditProject from "@/components/admin/EditProject";
import { fetchProject } from "@/services/projectService";

export default async function EditProjectPage({ params }: { params: Promise<{ id: string }> }) {
  // This will automatically redirect if not authenticated or not admin
  await protectAdminRoute();

  const { id } = await params;
  if (!id) return notFound();

  try {
    // Fetch project data server-side for SSR
    const project = await fetchProject(id);
    if (!project) return notFound();

    return (
      <AdminLayout>
        <EditProject initialProject={project} />
      </AdminLayout>
    );
  } catch (error) {
    console.error('Failed to fetch project:', error);
    return notFound();
  }
}

================
File: portfolio.next/src/app/admin/projects/new/page.tsx
================
// portfolio.next/src/app/admin/projects/new/page.tsx

import { protectAdminRoute } from "@/lib/auth";
import AdminLayout from "@/components/layouts/AdminLayout";
import EditProject from "@/components/admin/EditProject";

export default async function NewProjectPage() {
  // This will automatically redirect if not authenticated or not admin
  await protectAdminRoute();

  return (
    <AdminLayout>
      <div className="p-6">
        <h1 className="text-2xl font-bold mb-4">Create New Project</h1>
        <EditProject />
      </div>
    </AdminLayout>
  );
}

================
File: portfolio.next/src/app/admin/projects/page.tsx
================
import { protectAdminRoute } from "@/lib/auth";
import AdminLayout from "@/components/layouts/AdminLayout";
import ProjectList from "@/components/admin/ProjectList";
import { fetchProjects } from "@/services/projectService";

export default async function ProjectManagementPage() {
  // This will automatically redirect if not authenticated or not admin
  await protectAdminRoute();

  // Fetch projects server-side for SSR
  const projects = await fetchProjects();

  return (
    <AdminLayout>
      <ProjectList initialProjects={projects} />
    </AdminLayout>
  );
}

================
File: portfolio.next/src/app/admin/settings/ai-model/page.tsx
================
import { protectAdminRoute } from "@/lib/auth";
import AdminLayout from "@/components/layouts/AdminLayout";
import AIModelSettings from "@/components/admin/AIModelSettings";
import { getAIConfig } from "@/services/aiService";

export default async function AiModelSettingsPage() {
  await protectAdminRoute();

  // Fetch AI config server-side for SSR
  const aiConfig = await getAIConfig();
  
  return (
    <AdminLayout>
      <div className="p-8 max-w-2xl mx-auto">
        <h1 className="text-3xl font-bold mb-6">AI Model Settings</h1>
        <AIModelSettings initialConfig={aiConfig} />
      </div>
    </AdminLayout>
  );
}

================
File: portfolio.next/src/app/admin/settings/provider-config/page.tsx
================
import { protectAdminRoute } from "@/lib/auth";
import AdminLayout from "@/components/layouts/AdminLayout";
import ProviderConfigManager from "@/components/admin/ProviderConfigManager";

export default async function ProviderConfigPage() {
  await protectAdminRoute();

  return (
    <AdminLayout>
      <ProviderConfigManager />
    </AdminLayout>
  );
}

================
File: portfolio.next/src/app/admin/setup/page.tsx
================
"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { APP_ROUTES } from "@/lib/constants";
import { AdminInitRequest } from "@/models/AdminInit";
import { checkAdminExists, initializeAdmin } from "@/services/adminService";

export default function AdminSetup() {
  const [adminExists, setAdminExists] = useState<boolean | null>(null);
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const router = useRouter();

  useEffect(() => {
    async function checkAdmin() {
      try {
        const data = await checkAdminExists();
        setAdminExists(data.exists);
        
        if (data.exists) {
          console.log("Admin already exists");
          router.push(APP_ROUTES.admin.home);
        }
      } catch (err) {
        if (err instanceof Error) {
          setError(err.message);
        } else {
          setError("Failed to check admin status");
        }
      }
    }
    checkAdmin();
  }, [router]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");
    try {
      const initRequest: AdminInitRequest = {
        username,
        password,
        isAdmin: true,
      };

      await initializeAdmin(initRequest);
      router.push(APP_ROUTES.auth.login);
    } catch (err) {
      if (err instanceof Error) {
        setError(err.message);
      } else {
        setError("Failed to create admin account");
      }
    }
  };

  if (adminExists === null) {
    return <p>Loading...</p>;
  }

  return (
    <div className="p-6 max-w-md mx-auto">
      <h1 className="text-3xl font-bold mb-4">Admin Setup</h1>
      {error && <p className="text-red-500 mb-4">{error}</p>}
      <form onSubmit={handleSubmit} className="space-y-4">
        <input
          type="text"
          placeholder="Admin Username"
          value={username}
          onChange={(e) => setUsername(e.target.value)}
          className="w-full p-2 border rounded"
          required
        />
        <input
          type="password"
          placeholder="Admin Password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          className="w-full p-2 border rounded"
          required
        />
        <button type="submit" className="bg-blue-500 text-white px-4 py-2 rounded">
          Create Admin Account
        </button>
      </form>
    </div>
  );
}

================
File: portfolio.next/src/app/admin/temp-layout.tsx
================
import type { ReactNode } from "react";
import Header from "@/components/Header";
import Footer from "@/components/Footer";

export default function AdminLayout({ children }: { children: ReactNode }) {
  return (
    <div className="flex flex-col min-h-screen">
      <Header />
      <main className="flex-grow p-6">{children}</main>
      <Footer />
    </div>
  );
}

================
File: portfolio.next/src/app/admin/users/new/page.tsx
================
import { protectAdminRoute } from "@/lib/auth";
import AdminLayout from "@/components/layouts/AdminLayout";
import CreateUser from "@/components/admin/CreateUser";

export default async function NewUserPage() {
  // This will automatically redirect if not authenticated or not admin
  await protectAdminRoute();

  return (
    <AdminLayout>
      <div className="p-6">
        <h1 className="text-2xl font-bold mb-6">Create New User</h1>
        <CreateUser />
      </div>
    </AdminLayout>
  );
}

================
File: portfolio.next/src/app/admin/users/page.tsx
================
import { protectAdminRoute } from "@/lib/auth";
import AdminLayout from "@/components/layouts/AdminLayout";
import UserList from "@/components/admin/UserList";
import { fetchUsers } from "@/services/userService";

export default async function UserManagementPage() {
  // This will automatically redirect if not authenticated or not admin
  const { user } = await protectAdminRoute();

  // Fetch users server-side for SSR
  const users = await fetchUsers();

  return (
    <AdminLayout>
      <div className="p-6">
        <h1 className="text-2xl font-bold mb-6">User Management</h1>
        <UserList initialUsers={users} currentUserId={user?._id || ''} />
      </div>
    </AdminLayout>
  );
}

================
File: portfolio.next/src/app/blogs/[slug]/page.tsx
================
export const dynamic = 'force-dynamic';
import { notFound } from "next/navigation";
import { fetchBlogEntry } from "@/services/blogService";
import BlogView from "@/components/blog/BlogView";

export default async function BlogPage({ params }: { params: Promise<{ slug: string }> }) {
  const { slug } = await params;
  if (!slug) return notFound();

  const id = slug.split("-").pop(); // Extract the last part as the ID
  if (!id) return notFound();

  try {
    const blog = await fetchBlogEntry(id);
    return <BlogView blog={blog} />;
  } catch (err) {
    console.error('Failed to fetch blog:', err);
    return notFound();
  }
}

================
File: portfolio.next/src/app/career/page.tsx
================
export const dynamic = 'force-dynamic';
import CareerTimeline from "@/components/CareerTimeline";

export default function CareerPage() {
  return (
    <div className="max-w-4xl mx-auto py-8">
      <h1 className="text-2xl font-bold mb-4">Career Timeline</h1>
      <CareerTimeline />
    </div>
  );
}

================
File: portfolio.next/src/app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
}

body.compact-view main {
  max-width: 800px;
  margin: auto;
}

body.full-view main {
  max-width: 100%;
}

================
File: portfolio.next/src/app/layout.tsx
================
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import Header from "@/components/Header";
import Footer from "@/components/Footer";
import { AuthProvider } from "@/context/AuthContext";
import ChatWrapper from "@/components/ChatWrapper";
import Search from "@/components/Search";
import { SearchProvider } from "@/context/SearchContext";
import { ChatProvider } from "@/context/ChatContext";
import { Suspense } from "react";
const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
        <Suspense>
          <AuthProvider>
            <ChatProvider>
              <SearchProvider>
                <Header />
                <main className="p-6 mx-auto w-full max-w-lg md:max-w-2xl lg:max-w-4xl xl:max-w-7xl">
                  <Search />
                  {children}
                </main>
                <Footer />
                <ChatWrapper />
              </SearchProvider>
            </ChatProvider>
          </AuthProvider>
        </Suspense>
      </body>
    </html>
  );
}

================
File: portfolio.next/src/app/page.tsx
================
export const dynamic = 'force-dynamic';
import { getHomePageData } from "@/services/homePageService";
import Home from "@/components/Home"; // Move UI logic to a client component

export default async function Page() {
  console.log('🔍 [DEBUG] Root Page Component Starting');
  
  try {
    const { blogEntries, projects } = await getHomePageData(); // Fetch on the server
    
    console.log('🔍 [DEBUG] Root Page Data Fetched:', {
      blogsCount: blogEntries?.length ?? 0,
      projectsCount: projects?.length ?? 0
    });

    return <Home blogEntries={blogEntries} projects={projects} />;
  } catch (error) {
    console.error('❌ [ERROR] Root Page Error:', {
      error: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : undefined
    });
    
    // Following our SSR pattern memory, still render the page but with empty data
    return <Home blogEntries={[]} projects={[]} />;
  }
}

================
File: portfolio.next/src/app/pages/[slug]/page.tsx
================
// portfolio.next/src/app/[slug]/page.tsx
import { notFound } from "next/navigation";
import { marked } from "marked";
import { fetchPageBySlug } from "@/services/pageService";

export default async function Page({ params }: { params: Promise<{ slug: string }> }) {
  const { slug } = await params;

  if (!slug) return notFound();

  try {
    const page = await fetchPageBySlug(slug);
    if (!page) return notFound();

    return (
      <div className="max-w-3xl mx-auto p-6">
        <h1 className="text-4xl font-bold mb-4">{page.title}</h1>
        <div className="prose" dangerouslySetInnerHTML={{ __html: marked.parse(page.content) }} />
      </div>
    );
  } catch (err) {
    console.error('Failed to fetch page:', err);
    return notFound();
  }
}

================
File: portfolio.next/src/app/privacy-policy/page.tsx
================
// app/policy-privacy/page.tsx
"use client";

export default function PrivacyPolicy() {
  return (
    <div className="p-6 max-w-3xl mx-auto">
      <h1 className="text-4xl font-bold mb-4">Privacy Policy</h1>
      <p className="mb-4">
        This Privacy Policy describes how we collect, use, and protect your personal information when you visit and use this website.
      </p>

      <h2 className="text-2xl font-semibold mb-2">Information We Collect</h2>
      <p className="mb-4">
        We are committed to respecting your privacy. We do not track or record any personal information beyond what is voluntarily provided by you. The only information we collect is your email address, which is used solely as a reference for posting comments. We do not use your email address for any other purpose.
      </p>

      <h2 className="text-2xl font-semibold mb-2">How We Use Your Information</h2>
      <p className="mb-4">
        The email address you provide is used to associate your comment with your identity on our site. We do not sell, share, or distribute your email address or any personal information to third parties. Your information is used solely to help prevent spam and maintain the integrity of our comment system.
      </p>

      <h2 className="text-2xl font-semibold mb-2">Tracking and Cookies</h2>
      <p className="mb-4">
        We do not use any tracking mechanisms or cookies that would allow us to monitor your browsing behavior or gather additional personal data. Our goal is to provide you with a secure and private experience.
      </p>

      <h2 className="text-2xl font-semibold mb-2">Security</h2>
      <p className="mb-4">
        We take reasonable precautions to protect your personal information. However, please be aware that no method of transmission over the internet or method of electronic storage is 100% secure.
      </p>

      <h2 className="text-2xl font-semibold mb-2">Changes to This Privacy Policy</h2>
      <p className="mb-4">
        We may update this Privacy Policy from time to time. Any changes will be posted on this page along with an updated effective date.
      </p>

      <h2 className="text-2xl font-semibold mb-2">Contact Us</h2>
      <p className="mb-4">
        If you have any questions about this Privacy Policy, please contact us through the contact form on our website.
      </p>

      <p className="text-sm text-gray-500">Effective Date: March 1st, 2025</p>
    </div>
  );
}

================
File: portfolio.next/src/app/projects/[slug]/page.tsx
================
export const dynamic = 'force-dynamic';
import { notFound } from "next/navigation";
import { fetchProject } from "@/services/projectService";
import { Project } from "@/models/Project";
import ProjectView from "@/components/project/ProjectView";

export default async function ProjectPage({ params }: { params: Promise<{ slug: string }> }) {
  const { slug } = await params;

  if (!slug) return notFound();

  try {
    const project: Project | null = await fetchProject(slug); // Fetch on the server
    if (!project) return notFound();
    return <ProjectView project={project} />;
  } catch (err) {
    console.error('Failed to fetch project:', err);
    return notFound();
  }
}

================
File: portfolio.next/src/components/admin/AdminDashboard.tsx
================
import Link from "next/link";

export default function AdminDashboard() {
  return (
    <div className="p-8 max-w-5xl mx-auto">
      <h1 className="text-4xl font-semibold mb-4">Admin Dashboard</h1>
      <p className="text-gray-600 mb-8">
        Welcome to the admin panel. Use the options below to manage your site.
      </p>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Link
          href="/admin/blogs"
          className="block p-4 border border-gray-300 rounded-lg hover:bg-gray-50 transition"
        >
          <h2 className="text-lg font-medium text-gray-800">Manage Blogs</h2>
          <p className="text-sm text-gray-500">Edit, create, and manage blog posts</p>
        </Link>
        <Link
          href="/admin/projects"
          className="block p-4 border border-gray-300 rounded-lg hover:bg-gray-50 transition"
        >
          <h2 className="text-lg font-medium text-gray-800">Manage Projects</h2>
          <p className="text-sm text-gray-500">Edit, create, and manage projects</p>
        </Link>
        <Link
          href="/admin/comments"
          className="block p-4 border border-gray-300 rounded-lg hover:bg-gray-50 transition"
        >
          <h2 className="text-lg font-medium text-gray-800">Manage Comments</h2>
          <p className="text-sm text-gray-500">Review and moderate user comments</p>
        </Link>
        <Link
          href="/admin/analytics"
          className="block p-4 border border-gray-300 rounded-lg hover:bg-gray-50 transition"
        >
          <h2 className="text-lg font-medium text-gray-800">Analytics Dashboard</h2>
          <p className="text-sm text-gray-500">View site metrics and performance data</p>
        </Link>
        <Link
          href="/admin/settings/provider-config"
          className="block p-4 border border-gray-300 rounded-lg hover:bg-gray-50 transition"
        >
          <h2 className="text-lg font-medium text-gray-800">OAuth Provider Config</h2>
          <p className="text-sm text-gray-500">Configure external identity providers</p>
        </Link>
        <Link
          href="/admin/users"
          className="block p-4 border border-gray-300 rounded-lg hover:bg-gray-50 transition"
        >
          <h2 className="text-lg font-medium text-gray-800">Manage Users</h2>
          <p className="text-sm text-gray-500">Edit, create and manage users</p>
        </Link>
        <Link 
          href="/admin/settings/ai-model"
          className="block p-4 border border-gray-300 rounded-lg hover:bg-gray-50 transition"
        >
          <h2 className="text-lg font-medium text-gray-800">AI Model</h2>
          <p className="text-sm text-gray-500">Configure Artificial Intelligence Model</p>
        </Link>
        <Link 
          href="/admin/files"
          className="block p-4 border border-gray-300 rounded-lg hover:bg-gray-50 transition"
        >
          <h2 className="text-lg font-medium text-gray-800">Global Files</h2>
          <p className="text-sm text-gray-500">Manage the global files to include in context</p>
        </Link>
        <Link 
          href="/admin/career"
          className="block p-4 border border-gray-300 rounded-lg hover:bg-gray-50 transition"
        >
          <h2 className="text-lg font-medium text-gray-800">Manage Timeline</h2>
          <p className="text-sm text-gray-500">Add and update events on your timeline.</p>
        </Link>
        <Link 
          href="/admin/pages"
          className="block p-4 border border-gray-300 rounded-lg hover:bg-gray-50 transition"
        >
          <h2 className="text-lg font-medium text-gray-800">Manage Custom Pages</h2>
          <p className="text-sm text-gray-500">Add and update Pages.</p>
        </Link>
        <Link
          href="/admin/embeddings"
          className="block p-4 border border-gray-300 rounded-lg hover:bg-gray-50 transition"
        >
          <h2 className="text-lg font-medium text-gray-800">Refresh Embeddings</h2>
          <p className="text-sm text-gray-500">Reset and update AI embeddings for blogs, projects, and files</p>
        </Link>
      </div>
    </div>
  );
}

================
File: portfolio.next/src/components/admin/AIModelSettings.tsx
================
"use client";

import { useState } from "react";
import { updateAIConfig } from "@/services/aiService";
import { AIConfig } from "@/models/AI";

export default function AIModelSettings({ initialConfig }: { initialConfig: AIConfig }) {
  const [aiConfig, setAIConfig] = useState<AIConfig>(initialConfig);
  const [error, setError] = useState<string | null>(null);

  const handleSave = async () => {
    try {
      await updateAIConfig(aiConfig);
      alert("AI Model Updated Successfully");
    } catch (err) {
      if (err instanceof Error) {
        setError(err.message);
      } else {
        setError("Failed to update AI configuration");
      }
    }
  };

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-4">AI Model Settings</h1>
      {error && <p className="text-red-500">{error}</p>}

      <label className="block mb-4">
        Select AI Provider:
        <select
          value={aiConfig.provider}
          onChange={(e) => setAIConfig({ ...aiConfig, provider: e.target.value as "ollama" | "openai" })}
          className="w-full p-2 border rounded mt-2"
        >
          <option value="ollama">Ollama</option>
          <option value="openai">OpenAI</option>
        </select>
      </label>

      {aiConfig.provider === "openai" && (
        <>
          <label className="block mb-4">
            OpenAI Client ID:
            <input
              type="text"
              value={aiConfig.clientId || ""}
              onChange={(e) => setAIConfig({ ...aiConfig, clientId: e.target.value })}
              className="w-full p-2 border rounded mt-2"
            />
          </label>
          <label className="block mb-4">
            OpenAI Client Secret:
            <input
              type="password"
              value={aiConfig.clientSecret || ""}
              onChange={(e) => setAIConfig({ ...aiConfig, clientSecret: e.target.value })}
              className="w-full p-2 border rounded mt-2"
            />
          </label>
        </>
      )}

      <button onClick={handleSave} className="bg-blue-500 text-white px-4 py-2 rounded">
        Save Settings
      </button>
    </div>
  );
}

================
File: portfolio.next/src/components/admin/AnalyticsDashboard.tsx
================
"use client";
import { useEffect, useState } from "react";
import { fetchTelemetry } from "@/services/analyticsService";
import { TelemetryData } from "@/models/Analytics";

export default function AnalyticsDashboard() {
  const [telemetry, setTelemetry] = useState<TelemetryData | null>(null);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadTelemetry();
  }, []);

  async function loadTelemetry() {
    try {
      const data = await fetchTelemetry();
      setTelemetry(data);
    } catch (err) {
      if (err instanceof Error) {
        setError(err.message);
      } else {
        setError("Failed to fetch analytics data");
      }
    }
  }

  if (error) {
    return (
      <div className="bg-red-50 p-4 rounded-lg">
        <p className="text-red-600">Error: {error}</p>
      </div>
    );
  }

  if (!telemetry) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold">Analytics Dashboard</h2>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div className="bg-white p-4 rounded-lg shadow">
          <h3 className="text-lg font-semibold mb-2">Page Views</h3>
          <p className="text-3xl">{telemetry.pageViews}</p>
        </div>
        
        <div className="bg-white p-4 rounded-lg shadow">
          <h3 className="text-lg font-semibold mb-2">Unique Visitors</h3>
          <p className="text-3xl">{telemetry.uniqueVisitors}</p>
        </div>
      </div>

      <div className="bg-white p-4 rounded-lg shadow">
        <h3 className="text-lg font-semibold mb-4">Top Pages</h3>
        <div className="space-y-2">
          {telemetry.topPages.map((page, index) => (
            <div key={index} className="flex justify-between items-center">
              <span className="text-gray-600">{page.path}</span>
              <span className="font-medium">{page.views} views</span>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

================
File: portfolio.next/src/components/admin/BlogEditPage.tsx
================
"use client";

import { useEffect, useState } from "react";
import { useParams } from "next/navigation";
import EditBlogEntry from "@/components/admin/EditBlogEntry";
import { BlogEntry } from "@/models/BlogEntry";
import { fetchBlogEntry } from "@/services/blogService";

export default function BlogEditPage() {
  const params = useParams() as { id?: string };
  const [blog, setBlog] = useState<BlogEntry | null>(null);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    async function loadBlog(id: string) {
      try {
        const data = await fetchBlogEntry(id);
        setBlog(data);
      } catch (err) {
        console.error('Failed to fetch blog:', err);
        setError('Failed to load blog');
      }
    }

    if (params.id) {
      loadBlog(params.id);
    }
  }, [params.id]);

  if (error) return <div>Error: {error}</div>;
  if (!blog) return <div>Loading...</div>;

  return <EditBlogEntry initialData={blog} />;
}

================
File: portfolio.next/src/components/admin/BlogList.tsx
================
"use client";

import { useRouter } from "next/navigation";
import { BlogEntry } from "@/models/BlogEntry";

interface BlogListProps {
  blogs: BlogEntry[];
}

export default function BlogList({ blogs }: BlogListProps) {
  const router = useRouter();

  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Blog Management</h1>
        <button
          onClick={() => router.push('/admin/blogs/new')}
          className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
        >
          Create New Blog
        </button>
      </div>

      <div className="space-y-4">
        {blogs.map((blog) => (
          <div key={blog._id} className="bg-white p-4 rounded-lg shadow">
            <h2 className="text-xl font-semibold mb-2">{blog.title}</h2>
            <p className="text-gray-600 mb-2">{blog.excerpt}</p>
            <div className="flex items-center space-x-4 text-sm text-gray-500">
              <span>{blog.isDraft ? 'Draft' : 'Published'}</span>
              <span>{new Date(blog.createdAt).toLocaleDateString()}</span>
              <div className="flex-grow"></div>
              <button
                onClick={() => router.push(`/admin/blogs/edit/${blog._id}`)}
                className="text-blue-500 hover:text-blue-600"
              >
                Edit
              </button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

================
File: portfolio.next/src/components/admin/BlogManagement.tsx
================
'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';
import { type BlogEntry } from '@/models/BlogEntry';
import { fetchBlogEntries, deleteBlogEntry } from '@/services/blogService';

export default function BlogManagement() {
  const [blogs, setBlogs] = useState<BlogEntry[]>([]);
  const [error, setError] = useState<string | null>(null);

  const loadBlogs = async () => {
    try {
      const data = await fetchBlogEntries();
      setBlogs(data);
      setError(null);
    } catch (err) {
      console.error('Failed to load blogs:', err);
      setError('Failed to load blogs');
    }
  };

  const handleDelete = async (id: string) => {
    if (!confirm('Are you sure you want to delete this blog entry?')) return;
    
    try {
      await deleteBlogEntry(id);
      setBlogs(blogs.filter(blog => blog._id !== id));
      setError(null);
    } catch (err) {
      console.error('Failed to delete blog:', err);
      setError('Failed to delete blog');
    }
  };

  useEffect(() => {
    loadBlogs();
  }, []);

  return (
    <div className="space-y-4">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold">Blog Management</h1>
        <Link
          href="/admin/blogs/new"
          className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
        >
          New Blog Entry
        </Link>
      </div>

      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
          {error}
        </div>
      )}

      <div className="grid gap-4">
        {blogs.map((blog) => (
          <div
            key={blog._id}
            className="border p-4 rounded-lg shadow-sm bg-white flex justify-between items-center"
          >
            <div>
              <h2 className="text-lg font-semibold">{blog.title}</h2>
              <p className="text-sm text-gray-600">{blog.excerpt}</p>
              <div className="mt-2 flex gap-2">
                {blog.tags.map((tag, i) => (
                  <span
                    key={i}
                    className="px-2 py-1 bg-gray-100 text-sm rounded-full"
                  >
                    {tag}
                  </span>
                ))}
              </div>
            </div>
            <div className="flex gap-2">
              <Link
                href={`/admin/blogs/${blog._id}`}
                className="text-blue-600 hover:text-blue-800"
              >
                Edit
              </Link>
              <button
                onClick={() => handleDelete(blog._id)}
                className="text-red-600 hover:text-red-800"
              >
                Delete
              </button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

================
File: portfolio.next/src/components/admin/BlogManagementPage.tsx
================
"use client";

import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import { useAuth } from "@/context/AuthContext";
import { BlogEntry } from "@/models/BlogEntry";
import { fetchBlogEntries } from "@/services/blogService";

export default function BlogManagementPage() {
  const router = useRouter();
  const [blogs, setBlogs] = useState<BlogEntry[]>([]);
  const [error, setError] = useState<string | null>(null);
  const { isAuthenticated, user } = useAuth();

  useEffect(() => {
    async function loadBlogs() {
      try {
        const data = await fetchBlogEntries();
        setBlogs(data);
      } catch (err) {
        console.error('Failed to fetch blogs:', err);
        setError('Failed to load blogs');
      }
    }

    if (isAuthenticated) {
      loadBlogs();
    }
  }, [isAuthenticated]);

  if (!isAuthenticated || !(user?.isAdmin)) {
    router.push('/auth/login');
    return null;
  }

  if (error) return <div>Error: {error}</div>;

  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Blog Management</h1>
        <button
          onClick={() => router.push('/admin/blogs/new')}
          className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
        >
          Create New Blog
        </button>
      </div>

      <div className="space-y-4">
        {blogs.map((blog) => (
          <div key={blog._id} className="bg-white p-4 rounded-lg shadow">
            <h2 className="text-xl font-semibold mb-2">{blog.title}</h2>
            <p className="text-gray-600 mb-2">{blog.excerpt}</p>
            <div className="flex items-center space-x-4 text-sm text-gray-500">
              <span>{blog.isDraft ? 'Draft' : 'Published'}</span>
              <span>{new Date(blog.createdAt).toLocaleDateString()}</span>
              <div className="flex-grow"></div>
              <button
                onClick={() => router.push(`/admin/blogs/edit/${blog._id}`)}
                className="text-blue-500 hover:text-blue-600"
              >
                Edit
              </button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

================
File: portfolio.next/src/components/admin/career/CareerEntryEditForm.tsx
================
"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { type CareerEntry } from "@/models/CareerEntry";
import { saveCareerEntry } from "@/services/careerService";

interface CareerEntryEditFormProps {
  initialEntry?: CareerEntry | null;
}

export default function CareerEntryEditForm({ initialEntry }: CareerEntryEditFormProps) {
  const router = useRouter();
  const isNewEntry = !initialEntry?._id;

  const [entry, setEntry] = useState<CareerEntry>({
    title: "",
    company: "",
    startDate: "",
    endDate: null,
    description: "",
    skills: [],
    importedFromLinkedIn: false,
    _id: "",
    type: "job",
    order: 0,
    createdAt: "",
    updatedAt: "",
    location: "",
  });

  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (initialEntry) {
      setEntry({
        ...initialEntry,
        startDate: initialEntry.startDate ? new Date(initialEntry.startDate).toISOString().split("T")[0] : "",
        endDate: initialEntry.endDate ? new Date(initialEntry.endDate).toISOString().split("T")[0] : null,
      });
    }
  }, [initialEntry]);

  async function handleSubmit(e: React.FormEvent) {
    e.preventDefault();
    try {
      await saveCareerEntry(entry);
      router.push('/admin/career');
    } catch (err) {
      console.error(err);
      setError("Failed to save career entry.");
    }
  }

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-4">{isNewEntry ? "Add Career Entry" : "Edit Career Entry"}</h1>
      {error && <p className="text-red-500">{error}</p>}
      <form onSubmit={handleSubmit} className="space-y-4">
        <input
          type="text"
          placeholder="Title"
          value={entry.title}
          onChange={(e) => setEntry({ ...entry, title: e.target.value })}
          className="w-full p-2 border rounded"
          required
        />
        <input
          type="text"
          placeholder="Company"
          value={entry.company || ""}
          onChange={(e) => setEntry({ ...entry, company: e.target.value })}
          className="w-full p-2 border rounded"
        />
        <input
          type="text"
          placeholder="Location"
          value={entry.location || ""}
          onChange={(e) => setEntry({ ...entry, location: e.target.value })}
          className="w-full p-2 border rounded"
        />
        <input
          type="date"
          value={entry.startDate}
          onChange={(e) => setEntry({ ...entry, startDate: e.target.value })}
          className="w-full p-2 border rounded"
          required
        />
        <input
          type="date"
          value={entry.endDate || ""}
          onChange={(e) => setEntry({ ...entry, endDate: e.target.value || null })}
          className="w-full p-2 border rounded"
        />
        <textarea
          placeholder="Description"
          value={entry.description || ""}
          onChange={(e) => setEntry({ ...entry, description: e.target.value })}
          className="w-full p-2 border rounded"
        />
        <input
          type="text"
          placeholder="Skills (comma-separated)"
          value={entry.skills.join(", ")}
          onChange={(e) => setEntry({ ...entry, skills: e.target.value.split(",").map((s) => s.trim()) })}
          className="w-full p-2 border rounded"
        />

        <button type="submit" className="px-4 py-2 bg-blue-500 text-white rounded">
          {isNewEntry ? "Add Entry" : "Save Changes"}
        </button>
      </form>
    </div>
  );
}

================
File: portfolio.next/src/components/admin/CareerEntryForm.tsx
================
"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { fetchCareerEntry, saveCareerEntry } from "@/services/careerService";
import { type CareerEntry } from "@/models/CareerEntry";

interface CareerEntryFormProps {
  initialId?: string;
}

export default function CareerEntryForm({ initialId }: CareerEntryFormProps) {
  const router = useRouter();
  const [entry, setEntry] = useState<CareerEntry>({
    title: "",
    company: "",
    startDate: "",
    endDate: null,
    description: "",
    skills: [],
    importedFromLinkedIn: false,
    _id: "",
    type: "job",
    order: 0,
    createdAt: "",
    updatedAt: "",
    location: "",
  });

  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    async function loadData() {
      try {
        if (initialId) {
          const existingEntry = await fetchCareerEntry(initialId);
          if (existingEntry) {
            setEntry({
              ...existingEntry,
              startDate: existingEntry.startDate ? new Date(existingEntry.startDate).toISOString().split("T")[0] : "",
              endDate: existingEntry.endDate ? new Date(existingEntry.endDate).toISOString().split("T")[0] : "",
            });
          }
        }
      } catch (err) {
        console.error("Failed to load career entry:", err);
        setError("Failed to load existing career entry data.");
      }
    }

    loadData();
  }, [initialId]);

  async function handleSubmit(e: React.FormEvent) {
    e.preventDefault();
    try {
      await saveCareerEntry(entry);
      router.push("/admin/career");
    } catch (err) {
      console.error("Failed to save career entry:", err);
      setError("Failed to save career entry.");
    }
  }

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-4">{initialId ? "Edit Career Entry" : "Add Career Entry"}</h1>
      {error && <p className="text-red-500">{error}</p>}
      <form onSubmit={handleSubmit} className="space-y-4">
        <input
          type="text"
          placeholder="Title"
          value={entry.title}
          onChange={(e) => setEntry({ ...entry, title: e.target.value })}
          className="w-full p-2 border rounded"
          required
        />
        <input
          type="text"
          placeholder="Company"
          value={entry.company || ""}
          onChange={(e) => setEntry({ ...entry, company: e.target.value })}
          className="w-full p-2 border rounded"
        />
        <input
          type="date"
          value={entry.startDate}
          onChange={(e) => setEntry({ ...entry, startDate: e.target.value })}
          className="w-full p-2 border rounded"
          required
        />
        <input
          type="date"
          value={entry.endDate || ""}
          onChange={(e) => setEntry({ ...entry, endDate: e.target.value || null })}
          className="w-full p-2 border rounded"
        />
        <textarea
          placeholder="Description"
          value={entry.description || ""}
          onChange={(e) => setEntry({ ...entry, description: e.target.value })}
          className="w-full p-2 border rounded"
        />
        <input
          type="text"
          placeholder="Skills (comma-separated)"
          value={entry.skills.join(", ")}
          onChange={(e) => setEntry({ ...entry, skills: e.target.value.split(",").map((s) => s.trim()) })}
          className="w-full p-2 border rounded"
        />

        <button type="submit" className="px-4 py-2 bg-blue-500 text-white rounded">
          {initialId ? "Save Changes" : "Add Entry"}
        </button>
      </form>
    </div>
  );
}

================
File: portfolio.next/src/components/admin/CareerTimelineManager.tsx
================
"use client";

import { useEffect, useState } from "react";
import Link from "next/link";
import { CareerEntry } from "@/models/CareerEntry";
import { fetchCareerTimeline, deleteCareerEntry } from "@/services/careerService";

export default function CareerTimelineManager() {
  const [timeline, setTimeline] = useState<CareerEntry[]>([]);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadEntries();
  }, []);

  async function loadEntries() {
    try {
      const data = await fetchCareerTimeline();
      setTimeline(data);
    } catch (err) {
      console.error('Failed to fetch career timeline:', err);
      setError('Failed to load career timeline');
    }
  }

  async function handleDelete(id: string) {
    if (!confirm("Are you sure you want to delete this entry?")) return;
    try {
      await deleteCareerEntry(id);
      setTimeline((prev) => prev.filter((entry) => entry._id !== id)); 
    } catch (err) {
      console.error('Failed to delete career entry:', err);
      setError("Failed to delete entry.");
    }
  }

  if (error) return <div className="text-red-500">Error: {error}</div>;

  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Career Timeline Management</h1>
        <Link href="/admin/career/new" className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">
          + Add Entry
        </Link>
      </div>

      <div className="space-y-4">
        {timeline.map((entry) => (
          <div key={entry._id} className="bg-white p-4 rounded-lg shadow">
            <h2 className="text-xl font-semibold mb-2">{entry.title}</h2>
            <p className="text-gray-600 mb-2">{entry.company || "-"}</p>
            <p className="text-sm text-gray-500 mb-4">
              {new Date(entry.startDate).toLocaleDateString()} - {entry.endDate ? new Date(entry.endDate).toLocaleDateString() : 'Present'}
            </p>
            <div className="flex space-x-2">
              <Link href={`/admin/career/edit/${entry._id}`} className="text-blue-500 hover:text-blue-600">
                Edit
              </Link>
              <button onClick={() => handleDelete(entry._id || "")} className="text-red-500 hover:text-red-600">
                Delete
              </button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

================
File: portfolio.next/src/components/admin/CommentManagement.tsx
================
"use client";

import { useEffect, useState } from "react";
import Link from "next/link";
import { PUBLIC_API, AUTH_API } from "@/lib/constants";

interface Comment {
  _id: string;
  author: string;
  text: string;
  createdAt: string;
  redacted: boolean;
  replies: Comment[];
}

export default function CommentManagement() {
  const [comments, setComments] = useState<Comment[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchComments();
  }, []);

  async function fetchComments() {
    try {
      setLoading(true);
      const res = await fetch(PUBLIC_API.comment.list, {
        credentials: "include",
      });

      if (!res.ok) {
        const error = await res.json();
        throw new Error(error.message || "Failed to fetch comments");
      }

      const data = await res.json();
      setComments(data);
    } catch (error) {
      console.error("Failed to fetch comments:", error);
      if (error instanceof Error) {
        setError(error.message);
      }
    } finally {
      setLoading(false);
    }
  }

  async function handleRedact(id: string) {
    if (!confirm("Mark this comment as redacted?")) return;
    try {
      const res = await fetch(AUTH_API.comment.delete(id), {
        method: "DELETE",
        credentials: "include",
      });

      if (!res.ok) {
        const error = await res.json();
        throw new Error(error.message || "Redaction failed");
      }

      // Update the local state to mark the comment as redacted.
      setComments(prev =>
        prev.map(c => (c._id === id ? { ...c, redacted: true } : c))
      );
    } catch (error) {
      console.error("Failed to redact comment:", error);
      if (error instanceof Error) {
        setError(error.message);
      }
    }
  }

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-32 w-32 border-t-2 border-b-2 border-gray-900"></div>
      </div>
    );
  }

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-4">Manage Comments</h1>
      {error && <p className="text-red-500">{error}</p>}
      <table className="w-full border-collapse border border-gray-300">
        <thead>
          <tr className="bg-gray-200">
            <th className="border p-2 text-left">Author</th>
            <th className="border p-2 text-left">Comment</th>
            <th className="border p-2 text-left">Date</th>
            <th className="border p-2 text-left">Status</th>
            <th className="border p-2 text-left">Actions</th>
          </tr>
        </thead>
        <tbody>
          {comments.map(comment => (
            <tr key={comment._id} className="border">
              <td className="border p-2">{comment.author}</td>
              <td className="border p-2">{comment.text}</td>
              <td className="border p-2">
                {new Date(comment.createdAt).toLocaleString()}
              </td>
              <td className="border p-2">
                {comment.redacted ? "Redacted" : "Active"}
              </td>
              <td className="border p-2">
                {!comment.redacted && (
                  <button
                    onClick={() => handleRedact(comment._id)}
                    className="text-red-500 hover:underline"
                  >
                    Redact
                  </button>
                )}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
      <Link href="/admin" className="text-blue-500 underline mt-4 inline-block">
        Back to Dashboard
      </Link>
    </div>
  );
}

================
File: portfolio.next/src/components/admin/CommentsList.tsx
================
"use client";

import { useState } from "react";
import { Comment } from "@/models/Comment";
import { redactComment } from "@/services/commentService";

interface CommentsListProps {
  initialComments: Comment[];
}

export default function CommentsList({ initialComments }: CommentsListProps) {
  const [comments, setComments] = useState<Comment[]>(initialComments);
  const [error, setError] = useState<string | null>(null);

  async function handleRedact(id: string) {
    if (!confirm("Are you sure you want to redact this comment? This action cannot be undone.")) return;
    try {
      await redactComment(id);
      setComments(comments.map(comment => 
        comment._id === id ? { ...comment, redacted: true } : comment
      ));
    } catch (err) {
      console.error('Failed to redact comment:', err);
      setError("Failed to redact comment");
    }
  }

  if (error) return <div className="text-red-500">Error: {error}</div>;

  return (
    <div className="space-y-4">
      {comments.map((comment) => (
        <div key={comment._id} className="bg-white p-4 rounded-lg shadow">
          <div className="flex justify-between items-start">
            <div className="flex-grow">
              <p className={`text-gray-600 ${comment.redacted ? 'italic text-gray-400' : ''}`}>
                {comment.redacted ? '[Content redacted]' : comment.text}
              </p>
              <p className="text-sm text-gray-500 mt-1">
                By: {comment.author || 'Anonymous'} | 
                Posted: {new Date(comment.createdAt).toLocaleDateString()}
              </p>
              {comment.replies && comment.replies.length > 0 && (
                <div className="ml-6 mt-2 space-y-2">
                  <p className="text-sm font-medium text-gray-600">Replies:</p>
                  {comment.replies.map((reply) => (
                    <div key={reply._id} className="bg-gray-50 p-2 rounded">
                      <p className={`text-sm ${reply.redacted ? 'italic text-gray-400' : ''}`}>
                        {reply.redacted ? '[Content redacted]' : reply.text}
                      </p>
                      <p className="text-xs text-gray-500">
                        By: {reply.author || 'Anonymous'} | 
                        {new Date(reply.createdAt).toLocaleDateString()}
                      </p>
                    </div>
                  ))}
                </div>
              )}
            </div>
            <div className="ml-4">
              {!comment.redacted && (
                <button 
                  onClick={() => handleRedact(comment._id)}
                  className="text-red-500 hover:text-red-600"
                >
                  Redact
                </button>
              )}
            </div>
          </div>
        </div>
      ))}
      {comments.length === 0 && (
        <p className="text-gray-500 text-center">No comments to display</p>
      )}
    </div>
  );
}

================
File: portfolio.next/src/components/admin/CreateUser.tsx
================
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { createUser } from '@/services/userService';
import { UserCreateFormData, toUserCreate } from '@/models/User';

export default function CreateUser() {
  const router = useRouter();
  const [error, setError] = useState<string | null>(null);
  const [formData, setFormData] = useState<UserCreateFormData>({
    username: '',
    password: '',
    confirmPassword: '',
    isAdmin: false
  });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);

    if (formData.password !== formData.confirmPassword) {
      setError('Passwords do not match');
      return;
    }

    if (formData.password.length < 8) {
      setError('Password must be at least 8 characters long');
      return;
    }

    try {
      await createUser(toUserCreate(formData));
      router.push('/admin/users');
    } catch (err) {
      console.error('Failed to create user:', err);
      setError(err instanceof Error ? err.message : 'Failed to create user');
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
          {error}
        </div>
      )}

      <div>
        <label className="block text-sm font-medium text-gray-700 dark:text-gray-200">
          Username
        </label>
        <input
          type="text"
          value={formData.username}
          onChange={e => setFormData((prev: UserCreateFormData) => ({ ...prev, username: e.target.value }))}
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          required
        />
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 dark:text-gray-200">
          Password
        </label>
        <input
          type="password"
          value={formData.password}
          onChange={e => setFormData((prev: UserCreateFormData) => ({ ...prev, password: e.target.value }))}
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          required
          minLength={8}
        />
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 dark:text-gray-200">
          Confirm Password
        </label>
        <input
          type="password"
          value={formData.confirmPassword}
          onChange={e => setFormData((prev: UserCreateFormData) => ({ ...prev, confirmPassword: e.target.value }))}
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          required
          minLength={8}
        />
      </div>

      <div className="flex items-center">
        <input
          type="checkbox"
          id="isAdmin"
          checked={formData.isAdmin}
          onChange={e => setFormData((prev: UserCreateFormData) => ({ ...prev, isAdmin: e.target.checked }))}
          className="h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
        />
        <label htmlFor="isAdmin" className="ml-2 block text-sm text-gray-900 dark:text-gray-200">
          Administrator
        </label>
      </div>

      <div className="flex justify-end">
        <button
          type="submit"
          className="inline-flex justify-center rounded-md border border-transparent bg-blue-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
        >
          Create User
        </button>
      </div>
    </form>
  );
}

================
File: portfolio.next/src/components/admin/EditBlogEntry.tsx
================
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { type BlogEntry, BaseBlogEntry, BlogEntryCreate } from '@/models/BlogEntry';
import MarkdownEditor from '@/components/MarkdownEditor';
import { createBlogEntry, updateBlogEntry } from '@/services/blogService';

interface Props {
  initialData?: BlogEntry;
}

export default function EditBlogEntry({ initialData }: Props) {
  const router = useRouter();
  const [formData, setFormData] = useState<BaseBlogEntry>({
    title: initialData?.title || '',
    body: initialData?.body || '',
    excerpt: initialData?.excerpt || '',
    tags: initialData?.tags || [],
    isDraft: initialData?.isDraft ?? true,
    publishAt: initialData?.publishAt || null,
  });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      if (initialData?._id) {
        await updateBlogEntry(initialData._id, formData);
      } else {
        const newBlog: BlogEntryCreate = {
          ...formData,
          link: '', // Will be generated on the backend
        };
        await createBlogEntry(newBlog);
      }
      router.push('/admin/blogs');
    } catch (err) {
      console.error('Failed to save blog entry:', err);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div>
        <label htmlFor="title" className="block text-sm font-medium text-gray-700">
          Title
        </label>
        <input
          type="text"
          id="title"
          value={formData.title}
          onChange={(e) => setFormData((prev: BaseBlogEntry) => ({ ...prev, title: e.target.value }))}
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          required
        />
      </div>

      <div>
        <label htmlFor="excerpt" className="block text-sm font-medium text-gray-700">
          Excerpt
        </label>
        <textarea
          id="excerpt"
          value={formData.excerpt}
          onChange={(e) => setFormData((prev: BaseBlogEntry) => ({ ...prev, excerpt: e.target.value }))}
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          rows={2}
          required
        />
      </div>

      <div>
        <label htmlFor="body" className="block text-sm font-medium text-gray-700">
          Content
        </label>
        <MarkdownEditor
          value={formData.body}
          onChange={(value: string) => setFormData((prev: BaseBlogEntry) => ({ ...prev, body: value }))}
        />
      </div>

      <div>
        <label htmlFor="tags" className="block text-sm font-medium text-gray-700">
          Tags (comma-separated)
        </label>
        <input
          type="text"
          id="tags"
          value={formData.tags.join(', ')}
          onChange={(e) => setFormData((prev: BaseBlogEntry) => ({ 
            ...prev, 
            tags: e.target.value.split(',').map(tag => tag.trim()) 
          }))}
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
        />
      </div>

      <div className="flex items-center">
        <input
          type="checkbox"
          id="isDraft"
          checked={formData.isDraft}
          onChange={(e) => setFormData((prev: BaseBlogEntry) => ({ ...prev, isDraft: e.target.checked }))}
          className="h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
        />
        <label htmlFor="isDraft" className="ml-2 block text-sm text-gray-900">
          Save as Draft
        </label>
      </div>

      <div className="flex justify-end">
        <button
          type="submit"
          className="inline-flex justify-center rounded-md border border-transparent bg-blue-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
        >
          {initialData ? 'Update' : 'Create'} Blog Entry
        </button>
      </div>
    </form>
  );
}

================
File: portfolio.next/src/components/admin/EditProject.tsx
================
'use client';

import { Project, ProjectCreate } from '@/models/Project';
import { useState } from 'react';
import { createProject, updateProject } from '@/services/projectService';
import { useRouter } from 'next/navigation';
import MarkdownEditor from '@/components/MarkdownEditor';

interface EditProjectProps {
  initialProject?: Project;
}

export default function EditProject({ initialProject }: EditProjectProps) {
  const router = useRouter();
  const [error, setError] = useState<string | null>(null);
  const [saving, setSaving] = useState(false);
  const [formData, setFormData] = useState<ProjectCreate>({
    title: initialProject?.title || '',
    description: initialProject?.description || '',
    excerpt: initialProject?.excerpt || '',
    image: initialProject?.image,
    link: initialProject?.link,
    isDraft: initialProject?.isDraft ?? true,
    publishAt: initialProject?.publishAt || null,
    tags: initialProject?.tags || [],
    industry: initialProject?.industry || 'General',
    status: initialProject?.status || 'planned',
    startDate: initialProject?.startDate,
    endDate: initialProject?.endDate,
    technologies: initialProject?.technologies || []
  });

  async function handleSubmit(e: React.FormEvent) {
    e.preventDefault();
    setSaving(true);
    setError(null);

    try {
      if (initialProject) {
        await updateProject(initialProject._id, formData);
      } else {
        await createProject(formData);
      }
      router.push('/admin/projects');
    } catch (err) {
      console.error('Failed to save project:', err);
      setError('Failed to save project');
    } finally {
      setSaving(false);
    }
  }

  function handleTagsChange(e: React.ChangeEvent<HTMLInputElement>) {
    const tags = e.target.value.split(',').map(tag => tag.trim()).filter(Boolean);
    setFormData(prev => ({ ...prev, tags }));
  }

  function handleTechnologiesChange(e: React.ChangeEvent<HTMLInputElement>) {
    const technologies = e.target.value.split(',').map(tech => tech.trim()).filter(Boolean);
    setFormData(prev => ({ ...prev, technologies }));
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <div>
        <label className="block text-sm font-medium text-gray-700 dark:text-gray-200">
          Title
        </label>
        <input
          type="text"
          value={formData.title}
          onChange={e => setFormData(prev => ({ ...prev, title: e.target.value }))}
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          required
        />
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 dark:text-gray-200">
          Short Excerpt
        </label>
        <textarea
          value={formData.excerpt}
          onChange={e => setFormData(prev => ({ ...prev, excerpt: e.target.value }))}
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          rows={2}
          required
        />
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 dark:text-gray-200">
          Description (Markdown)
        </label>
        <MarkdownEditor
          value={formData.description}
          onChange={(value: string) => setFormData(prev => ({ ...prev, description: value }))}
        />
      </div>

      <div className="grid grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-200">
            Status
          </label>
          <select
            value={formData.status}
            onChange={e => setFormData(prev => ({ ...prev, status: e.target.value as ProjectCreate['status'] }))}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
            required
          >
            <option value="planned">Planned</option>
            <option value="in-progress">In Progress</option>
            <option value="completed">Completed</option>
            <option value="on-hold">On Hold</option>
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-200">
            Industry
          </label>
          <input
            type="text"
            value={formData.industry}
            onChange={e => setFormData(prev => ({ ...prev, industry: e.target.value }))}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
            required
          />
        </div>
      </div>

      <div className="grid grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-200">
            Start Date
          </label>
          <input
            type="date"
            value={formData.startDate ? formData.startDate.slice(0, 10) : ''}
            onChange={e => setFormData(prev => ({ ...prev, startDate: e.target.value }))}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-200">
            End Date
          </label>
          <input
            type="date"
            value={formData.endDate ? formData.endDate.slice(0, 10) : ''}
            onChange={e => setFormData(prev => ({ ...prev, endDate: e.target.value }))}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
      </div>

      <div className="grid grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-200">
            Image URL
          </label>
          <input
            type="url"
            value={formData.image || ''}
            onChange={e => setFormData(prev => ({ ...prev, image: e.target.value }))}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-200">
            Project URL
          </label>
          <input
            type="url"
            value={formData.link || ''}
            onChange={e => setFormData(prev => ({ ...prev, link: e.target.value }))}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          />
        </div>
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 dark:text-gray-200">
          Tags (comma-separated)
        </label>
        <input
          type="text"
          value={formData.tags.join(', ')}
          onChange={handleTagsChange}
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
        />
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 dark:text-gray-200">
          Technologies (comma-separated)
        </label>
        <input
          type="text"
          value={formData.technologies.join(', ')}
          onChange={handleTechnologiesChange}
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
          required
        />
      </div>

      <div className="flex items-center gap-4">
        <label className="flex items-center gap-2">
          <input
            type="checkbox"
            checked={!formData.isDraft}
            onChange={e => setFormData(prev => ({ ...prev, isDraft: !e.target.checked }))}
            className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
          />
          <span className="text-sm text-gray-700 dark:text-gray-200">Published</span>
        </label>

        {!formData.isDraft && (
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-200">
              Publish Date
            </label>
            <input
              type="datetime-local"
              value={formData.publishAt ? formData.publishAt.slice(0, 16) : ''}
              onChange={e => setFormData(prev => ({ ...prev, publishAt: e.target.value ? e.target.value : null }))}
              className="mt-1 block rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
            />
          </div>
        )}
      </div>

      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
          {error}
        </div>
      )}

      <div className="flex justify-end gap-4">
        <button
          type="button"
          onClick={() => router.back()}
          className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
        >
          Cancel
        </button>
        <button
          type="submit"
          disabled={saving}
          className="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 disabled:opacity-50"
        >
          {saving ? 'Saving...' : initialProject ? 'Update Project' : 'Create Project'}
        </button>
      </div>
    </form>
  );
}

================
File: portfolio.next/src/components/admin/FileList.tsx
================
"use client";

import { useState, useEffect } from "react";
import { fetchFiles, deleteFile } from "@/services/fileService";
import { FileInfo } from "@/models/FileInfo";
import { useAuth } from "@/context/AuthContext";

interface FileListProps {
  entityId: string;
  context: string;
  refreshFiles: () => void;
}

export default function FileList({ entityId, context, refreshFiles }: FileListProps) {
  const [files, setFiles] = useState<FileInfo[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const { user } = useAuth();

  useEffect(() => {
    async function loadFiles() {
      try {
        const data = await fetchFiles(entityId, context);
        setFiles(data);
      } catch (err) {
        console.error('Failed to load files:', err);
        setError("Failed to load files.");
      } finally {
        setLoading(false);
      }
    }
    loadFiles();
  }, [entityId, context]);

  async function handleDelete(fileId: string) {
    if (!window.confirm("Are you sure you want to delete this file?")) return;

    try {
      await deleteFile(fileId);
      refreshFiles();
    } catch (err) {
      console.error('Failed to delete file:', err);
      setError("Failed to delete file.");
    }
  }

  if (loading) return <p>Loading files...</p>;
  if (error) return <p className="text-red-500">{error}</p>;
  if (files.length === 0) return <p>No files uploaded yet.</p>;

  return (
    <div className="p-4 border rounded mt-4">
      <h2 className="text-lg font-bold mb-2">Attached Files</h2>
      <ul className="space-y-2">
        {files.map((file) => (
          <li key={file._id} className="p-2 border rounded flex justify-between items-center">
            <div>
              <p className="font-semibold">{file.filename}</p>
              <p className="text-sm text-gray-500">{file.contentType} • {Math.round(file.metadata.size / 1024)} KB</p>
              <p className={`text-sm ${file.metadata.isPublic ? "text-green-600" : "text-red-600"}`}>
                {file.metadata.isPublic ? "Public" : "Private"}
              </p>
            </div>
            <div>
              <a
                href={`/api/files/${file.metadata.isPublic ? "public" : "private"}/${file._id}`}
                target="_blank"
                className="px-3 py-1 text-blue-600 underline"
              >
                View
              </a>
              {user?.isAdmin && (
                <button
                  onClick={() => handleDelete(file._id)}
                  className="ml-3 px-3 py-1 bg-red-500 text-white rounded hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2"
                >
                  Delete
                </button>
              )}
            </div>
          </li>
        ))}
      </ul>
    </div>
  );
}

================
File: portfolio.next/src/components/admin/FileWrapper.tsx
================
"use client";

import { useState, useCallback } from "react";
import UploadSpecificFile from "@/components/admin/UploadContextualFile";
import FileList from "@/components/admin/FileList";

export default function FileWrapper({ entityId, context }: { entityId: string; context: string }) {
  const [refreshKey, setRefreshKey] = useState(0);

  // ✅ Function to refresh file list
  const refreshFiles = useCallback(() => {
    setRefreshKey((prev) => prev + 1);
  }, []);

  return (
    <div className="p-4 border rounded mt-4">
      <h2 className="text-lg font-bold mb-2">Manage Files</h2>
      <UploadSpecificFile entityId={entityId} context={context} refreshFiles={refreshFiles} />
      <FileList key={refreshKey} entityId={entityId} context={context} refreshFiles={refreshFiles} />
    </div>
  );
}

================
File: portfolio.next/src/components/admin/LinkedInImport.tsx
================
"use client";

import { useState } from "react";
import { parseLinkedInHTMLBackend, saveParsedJobs } from "@/services/careerService";
import type { LinkedInParseResult } from "@/services/careerService";

export default function LinkedInImport() {
  const [rawHTML, setRawHTML] = useState("");
  const [parsedJobs, setParsedJobs] = useState<LinkedInParseResult[]>([]);
  const [error, setError] = useState<string | null>(null);

  async function handleParseHTML() {
    if (!rawHTML.trim()) return alert("Paste your LinkedIn HTML first!");
    try {
      const jobs = await parseLinkedInHTMLBackend(rawHTML);
      setParsedJobs(jobs);
    } catch (err) {
      console.error("Failed to parse LinkedIn data:", err);
      setError("Failed to parse LinkedIn data.");
    }
  }

  async function handleImportToBackend() {
    if (parsedJobs.length === 0) return alert("No parsed jobs to import!");

    try {
      await saveParsedJobs(parsedJobs);
      alert("Career entries imported successfully!");
      setParsedJobs([]); // Clear the list after successful import
      setRawHTML(""); // Clear the textarea
    } catch (err) {
      console.error("Failed to import LinkedIn data:", err);
      setError("Failed to import LinkedIn data.");
    }
  }

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-4">Career Timeline Management</h1>

      <div className="mb-4">
        <p className="text-gray-600 mb-2">
          To import your LinkedIn career history:
        </p>
        <ol className="list-decimal list-inside text-gray-600 mb-2">
          <li>Go to your <strong>LinkedIn profile</strong> and open the Experience section.</li>
          <li>Right-click on the job list and select <strong>Inspect</strong>.</li>
          <li>Copy the HTML of the experience section.</li>
          <li>Paste it below.</li>
          <li>Click &quot;Parse & Import&quot;.</li>
        </ol>

        <textarea
          value={rawHTML}
          onChange={(e) => setRawHTML(e.target.value)}
          placeholder="Paste your LinkedIn Experience HTML here..."
          className="w-full p-2 border rounded mb-2 h-60 font-mono"
        />

        <button 
          onClick={handleParseHTML} 
          className="mt-2 bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 disabled:opacity-50"
          disabled={!rawHTML.trim()}
        >
          Parse & Import
        </button>

        {parsedJobs.length > 0 && (
          <button 
            onClick={handleImportToBackend} 
            className="ml-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600"
          >
            Save to Backend
          </button>
        )}
      </div>

      {parsedJobs.length > 0 && (
        <div className="mt-4">
          <h2 className="text-2xl font-bold mb-2">Parsed Jobs:</h2>
          <ul className="list-disc list-inside">
            {parsedJobs.map((job, index) => (
              <li key={index} className="mb-2">
                <strong>{job.title}</strong> at {job.company} ({job.startDate} - {job.endDate || 'Present'})
                <br />
                <span className="text-gray-600 ml-6">{job.location}</span>
              </li>
            ))}
          </ul>
        </div>
      )}

      {error && <p className="text-red-500">{error}</p>}
    </div>
  );
}

================
File: portfolio.next/src/components/admin/PagesList.tsx
================
"use client";

import { useState, useEffect } from "react";
import Link from "next/link";
import { Page } from "@/models/Page";
import { fetchPages, deletePage } from "@/services/pageService";

export default function PagesList() {
  const [pages, setPages] = useState<Page[]>([]);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadPages();
  }, []);

  async function loadPages() {
    try {
      const data = await fetchPages();
      setPages(data);
    } catch (err) {
      console.error('Failed to fetch pages:', err);
      setError('Failed to load pages');
    }
  }

  async function handleDelete(id: string) {
    if (!confirm("Are you sure you want to delete this page?")) return;
    try {
      await deletePage(id);
      setPages(pages.filter(page => page._id !== id));
    } catch (err) {
      console.error('Failed to delete page:', err);
      setError("Failed to delete page");
    }
  }

  if (error) return <div className="text-red-500">Error: {error}</div>;

  return (
    <div className="space-y-4">
      <div className="flex justify-between items-center">
        <h2 className="text-xl font-semibold">Custom Pages</h2>
        <Link 
          href="/admin/pages/new" 
          className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
        >
          + Add Page
        </Link>
      </div>

      <div className="grid gap-4">
        {pages.map((page) => (
          <div key={page._id} className="bg-white p-4 rounded-lg shadow">
            <div className="flex justify-between items-start">
              <div>
                <h3 className="text-lg font-medium">{page.title}</h3>
                <p className="text-gray-500 text-sm">/{page.slug}</p>
              </div>
              <div className="flex space-x-2">
                <Link 
                  href={`/admin/pages/edit/${page._id}`}
                  className="text-blue-500 hover:text-blue-600"
                >
                  Edit
                </Link>
                <button 
                  onClick={() => handleDelete(page._id)}
                  className="text-red-500 hover:text-red-600"
                >
                  Delete
                </button>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

================
File: portfolio.next/src/components/admin/ProjectList.tsx
================
'use client';

import { Project } from '@/models/Project';
import { archiveProject } from '@/services/projectService';
import Link from 'next/link';
import { APP_ROUTES } from '@/lib/constants';
import { useState } from 'react';

interface Props {
  initialProjects: Project[];
}

export default function ProjectList({ initialProjects }: Props) {
  const [projects, setProjects] = useState<Project[]>(initialProjects);
  const [error, setError] = useState<string | null>(null);

  async function handleArchive(id: string) {
    try {
      await archiveProject(id);
      setProjects(projects.filter(project => project._id !== id));
    } catch (err) {
      console.error(err);
      setError('Failed to archive project');
    }
  }

  return (
    <div className="space-y-4">
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-bold">Project Management</h2>
        <Link 
          href={APP_ROUTES.admin.projects.create}
          className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
        >
          New Project
        </Link>
      </div>

      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
          {error}
        </div>
      )}

      <div className="grid gap-4">
        {projects.map((project) => (
          <div 
            key={project._id}
            className="bg-white dark:bg-gray-800 p-4 rounded-lg shadow flex justify-between items-center"
          >
            <div>
              <h3 className="font-semibold">{project.title}</h3>
              <p className="text-sm text-gray-500">
                Status: {project.status} • 
                {project.startDate && `Started: ${new Date(project.startDate).toLocaleDateString()}`}
              </p>
              {project.technologies.length > 0 && (
                <div className="mt-2 flex gap-2">
                  {project.technologies.map(tech => (
                    <span 
                      key={tech}
                      className="bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded text-sm"
                    >
                      {tech}
                    </span>
                  ))}
                </div>
              )}
            </div>
            <div className="flex gap-4">
              <Link
                href={APP_ROUTES.admin.projects.edit(project._id)}
                className="text-blue-500 hover:underline"
              >
                Edit
              </Link>
              <button
                onClick={() => handleArchive(project._id)}
                className="text-red-500 hover:underline"
              >
                Archive
              </button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

================
File: portfolio.next/src/components/admin/ProjectManagement.tsx
================
import { Project } from '@/models/Project';
import { useState, useEffect } from 'react';
import { archiveProject, fetchProjects } from '@/services/projectService';
import Link from 'next/link';
import { APP_ROUTES } from '@/lib/constants';

export default function ProjectManagement() {
  const [projects, setProjects] = useState<Project[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState(true);

  // Following memory rule: Components should handle their own data fetching
  useEffect(() => {
    refreshProjects();
  }, []);

  async function handleArchive(id: string) {
    try {
      await archiveProject(id);
      setProjects(projects.filter(project => project._id !== id));
    } catch (err) {
      console.error(err);
      setError('Failed to archive project');
    }
  }

  async function refreshProjects() {
    try {
      setLoading(true);
      const updatedProjects = await fetchProjects();
      setProjects(updatedProjects);
      setError(null);
    } catch (err) {
      console.error(err);
      setError('Failed to refresh projects');
    } finally {
      setLoading(false);
    }
  }

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-32 w-32 border-t-2 border-b-2 border-gray-900"></div>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-bold">Project Management</h2>
        <div className="space-x-4">
          <Link 
            href={APP_ROUTES.admin.projects.create}
            className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
          >
            New Project
          </Link>
          <button
            onClick={refreshProjects}
            className="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600"
          >
            Refresh
          </button>
        </div>
      </div>

      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
          {error}
        </div>
      )}

      <div className="grid gap-4">
        {projects.map((project) => (
          <div 
            key={project._id}
            className="bg-white dark:bg-gray-800 p-4 rounded-lg shadow flex justify-between items-center"
          >
            <div>
              <h3 className="font-semibold">{project.title}</h3>
              <p className="text-sm text-gray-500">
                Status: {project.status} • 
                {project.startDate && `Started: ${new Date(project.startDate).toLocaleDateString()}`}
              </p>
              {project.technologies.length > 0 && (
                <div className="mt-2 flex gap-2">
                  {project.technologies.map(tech => (
                    <span 
                      key={tech}
                      className="bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded text-sm"
                    >
                      {tech}
                    </span>
                  ))}
                </div>
              )}
            </div>
            <div className="flex gap-4">
              <Link
                href={APP_ROUTES.admin.projects.edit(project._id)}
                className="text-blue-500 hover:underline"
              >
                Edit
              </Link>
              <button
                onClick={() => handleArchive(project._id)}
                className="text-red-500 hover:underline"
              >
                Archive
              </button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

================
File: portfolio.next/src/components/admin/ProviderConfigManager.tsx
================
"use client";

import { useEffect, useState } from "react";
import { ProviderConfig } from "@/models/ProviderConfig";
import { fetchProviderConfigs, updateProviderConfig } from "@/services/providerConfigService";

export default function ProviderConfigManager() {
  const [configs, setConfigs] = useState<ProviderConfig[]>([]);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadConfigs();
  }, []);

  async function loadConfigs() {
    try {
      const data = await fetchProviderConfigs();
      setConfigs(data);
    } catch (err) {
      console.error('Failed to fetch provider configs:', err);
      setError('Failed to load provider configurations');
    }
  }

  const handleUpdate = async (id: string, config: Partial<ProviderConfig>) => {
    try {
      await updateProviderConfig(id, config);
      const updatedConfigs = await fetchProviderConfigs();
      setConfigs(updatedConfigs);
    } catch (err) {
      console.error('Failed to update provider config:', err);
      setError('Failed to update configuration');
    }
  };

  if (error) return <div className="text-red-500">Error: {error}</div>;

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-6">Provider Configuration</h1>
      <div className="space-y-6">
        {configs.map((config) => (
          <div key={config._id} className="bg-white p-4 rounded-lg shadow">
            <h2 className="text-xl font-semibold mb-4">{config.name}</h2>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700">API Key</label>
                <input
                  type="password"
                  value={config.apiKey || ''}
                  onChange={(e) => handleUpdate(config._id, { apiKey: e.target.value })}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700">Base URL</label>
                <input
                  type="text"
                  value={config.baseUrl || ''}
                  onChange={(e) => handleUpdate(config._id, { baseUrl: e.target.value })}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700">Status</label>
                <select
                  value={config.status}
                  onChange={(e) => handleUpdate(config._id, { status: e.target.value as 'active' | 'inactive' })}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                >
                  <option value="active">Active</option>
                  <option value="inactive">Inactive</option>
                </select>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

================
File: portfolio.next/src/components/admin/RefreshEmbeddings.tsx
================
"use client";

import { useState } from "react";
import { ADMIN_API } from "@/lib/constants";

export default function RefreshEmbeddings() {
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState("");

  async function handleRefresh() {
    setLoading(true);
    setMessage("");

    try {
      const response = await fetch(ADMIN_API.ai.initialize, {
        method: "POST",
        credentials: "include",
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.message || "Failed to refresh embeddings");
      }

      setMessage("Embeddings refreshed successfully!");
    } catch (err) {
      console.error("Failed to refresh embeddings:", err);
      setMessage("Error refreshing embeddings.");
    } finally {
      setLoading(false);
    }
  }

  return (
    <div className="p-6 bg-white rounded-lg shadow-md">
      <h2 className="text-2xl font-bold mb-4">Refresh AI Embeddings</h2>
      <p className="mb-2 text-gray-600">
        This will reset all embeddings and regenerate them for blogs, projects, pages, and files.
      </p>
      <button
        onClick={handleRefresh}
        disabled={loading}
        className={`px-4 py-2 rounded text-white ${loading ? "bg-gray-400" : "bg-blue-500 hover:bg-blue-600"}`}
      >
        {loading ? "Refreshing..." : "Refresh Embeddings"}
      </button>
      {message && <p className="mt-2 text-green-600">{message}</p>}
    </div>
  );
}

================
File: portfolio.next/src/components/admin/UploadContextualFile.tsx
================
"use client";

import { useState } from "react";
import { uploadFile } from "@/services/fileService";

export default function UploadSpecificFile({
  entityId,
  context,
  refreshFiles, // ✅ Accept refreshFiles as a prop
}: {
  entityId: string;
  context: string;
  refreshFiles: () => void; // ✅ Function to refresh file list
}) {
  const [file, setFile] = useState<File | null>(null);
  const [isPublic, setIsPublic] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);

  async function handleUpload() {
    if (!file) {
      setError("Please select a file.");
      return;
    }

    setLoading(true);
    setError(null);

    try {
      await uploadFile(file, entityId, context, isPublic);
      refreshFiles(); // ✅ Trigger file list refresh
    } catch (err) {
      console.error(err);
      setError("Upload failed. Try again.");
    } finally {
      setLoading(false);
    }
  }

  return (
    <div className="p-4 border rounded mt-4">
      <h2 className="text-lg font-bold mb-2">Attach a File</h2>
      {error && <p className="text-red-500">{error}</p>}
      <div className="space-y-4">
        <input
          type="file"
          onChange={(e) => setFile(e.target.files ? e.target.files[0] : null)}
          className="w-full p-2 border rounded"
        />
        <label className="flex items-center">
          <input
            type="checkbox"
            checked={isPublic}
            onChange={() => setIsPublic(!isPublic)}
            className="mr-2"
          />
          Make file public
        </label>
        <button
          onClick={handleUpload}
          disabled={loading}
          className={`px-4 py-2 text-white rounded ${loading ? "bg-gray-400" : "bg-blue-500"}`}
        >
          {loading ? "Uploading..." : "Upload"}
        </button>
      </div>
    </div>
  );
}

================
File: portfolio.next/src/components/admin/UserList.tsx
================
'use client';

import { useState } from 'react';
import { User } from '@/models/User';
import { updateUserAdmin, fetchUsers } from '@/services/userService';

interface Props {
  initialUsers: User[];
  currentUserId: string;
}

export default function UserList({ initialUsers, currentUserId }: Props) {
  const [users, setUsers] = useState<User[]>(initialUsers);
  const [error, setError] = useState<string | null>(null);

  const handleAdminChange = async (userId: string, isAdmin: boolean) => {
    try {
      await updateUserAdmin(userId, isAdmin);
      const updatedUsers = await fetchUsers();
      setUsers(updatedUsers);
    } catch (err) {
      console.error('Failed to update user admin status:', err);
      setError('Failed to update user admin status');
    }
  };

  return (
    <div className="space-y-4">
      {error && (
        <div className="bg-red-50 border border-red-400 text-red-700 px-4 py-3 rounded">
          Error: {error}
        </div>
      )}

      {users.map((u) => (
        <div key={u._id} className="bg-white dark:bg-gray-800 p-4 rounded-lg shadow">
          <div className="flex items-center justify-between">
            <div>
              <h2 className="text-xl font-semibold dark:text-gray-200">{u.username}</h2>
              <p className="text-sm text-gray-500 dark:text-gray-400">
                Created: {new Date(u.createdAt).toLocaleDateString()}
              </p>
            </div>
            <div className="flex items-center space-x-4">
              <label className="inline-flex items-center">
                <input
                  type="checkbox"
                  checked={u.isAdmin}
                  onChange={(e) => handleAdminChange(u._id, e.target.checked)}
                  className="form-checkbox h-5 w-5 text-blue-600 rounded border-gray-300 focus:ring-blue-500"
                  disabled={u._id === currentUserId} // Can't change own admin status
                />
                <span className="ml-2 text-gray-700 dark:text-gray-300">Administrator</span>
              </label>
            </div>
          </div>
        </div>
      ))}
      {users.length === 0 && (
        <div className="text-center py-8 text-gray-500 dark:text-gray-400">
          No users found.
        </div>
      )}
    </div>
  );
}

================
File: portfolio.next/src/components/blog/BlogView.tsx
================
"use client";

import { marked } from "marked";
import CommentSection from "@/components/CommentSection";
import { BlogEntry } from "@/models/BlogEntry";

export default function BlogView({ blog }: { blog: BlogEntry }) {
  return ( 
    <main className="container mx-auto px-6 py-10 flex flex-col flex-1">
      <h1 className="text-3xl font-bold">{blog.title}</h1>
      <p className="text-gray-500">
        {blog.publishAt && new Date(blog.publishAt).toLocaleString(undefined, {
          weekday: "long",
          year: "numeric",
          month: "long",
          day: "numeric",
          hour: "2-digit",
          minute: "2-digit",
          second: "2-digit",
        })}
      </p>

      {/* Markdown rendering */}
      <div
        className="mt-4 prose lg:prose-lg xl:prose-xl max-w-none"
        dangerouslySetInnerHTML={{ __html: marked.parse(blog.body) }}
      />

      {/* Interactive comment section */}
      <CommentSection blogId={String(blog._id)} />
    </main>
  );
}

================
File: portfolio.next/src/components/CareerTimeline.tsx
================
// portfolio.next/src/components/CareerTimeline.tsx
'use client';

import React, { useState, useEffect } from "react";
import EntryOverview from "./EntryOverview";
import { type CareerEntry } from "@/models/CareerEntry";
import { fetchCareerTimeline } from "@/services/careerService";
import { marked } from "marked";

const formatDate = (date: string | null | undefined): string => {
  if (!date) return "Present";
  return new Intl.DateTimeFormat("default", { year: "numeric", month: "short" }).format(new Date(date));
};

export default function CareerTimeline() {
  const [entries, setEntries] = useState<CareerEntry[]>([]);
  const [expandedEntryId, setExpandedEntryId] = useState<string | null>(null);

  useEffect(() => {
    async function loadData() {
      try {
        const data = await fetchCareerTimeline();
        setEntries(data);
      } catch (err) {
        console.error('Failed to load career timeline:', err);
      }
    }
    loadData();
  }, []);

  return (
    <div className="relative">
      {/* Dark vertical timeline bar */}
      <div className="absolute left-3 top-0 bottom-0 w-6 bg-gray-800"></div>

      <div className="relative space-y-6 pl-10">
        {entries.map((entry) => (
          <div key={entry._id} className="relative">
            {/* Timeline connector */}
            <div className="absolute left-0 top-6 w-6 h-6 bg-gray-800 rounded-full"></div>
            <div className="ps-8">
              {/* Entry Overview */}
              <EntryOverview
                title={entry.title}
                company={entry.company}
                startDate={formatDate(entry.startDate)}
                endDate={formatDate(entry.endDate)}
                location={entry.location}
                skills={entry.skills}
                onClick={() => setExpandedEntryId(expandedEntryId === entry._id ? null : entry._id)}
              />

              {/* Expanded Details (In-Place) */}
              {expandedEntryId === entry._id && (
                <div className="mt-2 p-4 border-l-4 border-blue-500 bg-gray-100 rounded-md">
                  <p className="text-sm text-gray-500">{entry.location}</p>
                  <div
                    className="mt-2 text-gray-700 prose prose-sm max-w-none"
                    dangerouslySetInnerHTML={{ __html: marked(entry.description) }}
                  />

                  <button 
                    onClick={() => setExpandedEntryId(null)} 
                    className="mt-2 text-blue-500 hover:underline"
                  >
                    Close
                  </button>
                </div>
              )}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

================
File: portfolio.next/src/components/Chat.tsx
================
"use client";

import { useState } from "react";
import { useChat } from "@/context/ChatContext";
import { useWebSocketChat } from "@/hooks/useWebSocketChat";

export default function Chat() {
  const { messages, addMessage } = useChat();
  const [isOpen, setIsOpen] = useState(false);
  const [isExpanded, setIsExpanded] = useState(false);
  const [input, setInput] = useState("");

  const { wsRef, isStreaming, streamingResponse, setStreamingResponse, setIsStreaming } = useWebSocketChat(isOpen);

  const sendMessage = () => {
    if (!input.trim() || !wsRef.current) return;

    addMessage({ role: "user", text: input });
    wsRef.current.send(JSON.stringify({ sessionId: "123", query: input }));
    setInput("");

    setStreamingResponse("");
    setIsStreaming(true);
  };

  return (
    <div className="fixed bottom-4 right-4 z-50 flex flex-col items-end">
      {isOpen && (
        <div className={`shadow-lg border border-gray-300 bg-white rounded-lg overflow-hidden transition-all duration-300
          ${isExpanded ? "h-[90vh] w-[90vw] md:w-[50vw]" : "h-96 w-[50vw] md:w-80"}`}
        >
          <div className="p-3 bg-gray-800 text-white flex justify-between items-center">
            <span>Chat</span>
            <div>
              <button className="text-lg mx-2" onClick={() => setIsExpanded(!isExpanded)} title={isExpanded ? "Minimize" : "Maximize"}>
                {isExpanded ? "🗕" : "⛶"}
              </button>
              <button className="text-lg" onClick={() => setIsOpen(false)} title="Close">✖</button>
            </div>
          </div>

          <div className="p-4 flex flex-col space-y-2 max-h-[80%] overflow-auto">
            {messages.map((msg, i) => (
              <div key={i} className={`p-2 rounded-lg text-sm ${msg.role === "user" ? "bg-blue-500 text-white self-end" : "bg-gray-200 text-black self-start"}`}>
                {msg.text}
              </div>
            ))}

            {isStreaming && (
              <div className="p-2 rounded-lg text-sm bg-gray-200 text-black self-start">{streamingResponse}</div>
            )}
          </div>

          <div className="flex items-center space-x-2 border-t pt-2 p-2">
            <input
              type="text"
              className="flex-1 p-2 border rounded text-sm"
              placeholder="Ask something..."
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyDown={(e) => e.key === "Enter" && sendMessage()}
            />
            <button className="bg-gray-800 hover:bg-gray-600 transition text-white px-3 py-1 rounded text-sm" onClick={sendMessage}>Send</button>
          </div>
        </div>
      )}

      <button className="bg-gray-800 hover:bg-gray-600 transition text-white p-3 rounded-full shadow-lg" onClick={() => setIsOpen(!isOpen)}>
        {isOpen ? "✖" : "💬"}
      </button>
    </div>
  );
}

================
File: portfolio.next/src/components/ChatWrapper.tsx
================
'use client';
import dynamic from 'next/dynamic';

const Chat = dynamic(() => import("@/components/Chat"), { ssr: false });

export default function ChatWrapper() {
  return <Chat />; 
}

================
File: portfolio.next/src/components/CommentSection.tsx
================
"use client";

import { useState, useEffect, useCallback } from "react";
import { useAuth } from "@/context/AuthContext";
import { usePathname } from "next/navigation";
import { PUBLIC_API, AUTH_API } from "@/lib/constants";

interface Comment {
  _id: string;
  author: string;
  text: string;
  createdAt: string;
  redacted: boolean;
  replies: Comment[];
}

interface CommentSectionProps {
  blogId: string;
}

export default function CommentSection({ blogId }: CommentSectionProps) {
  const [comments, setComments] = useState<Comment[]>([]);
  const [newComment, setNewComment] = useState("");
  const [replyTo, setReplyTo] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);
  const { isAuthenticated, user } = useAuth();
  const pathname = usePathname();

  const fetchComments = useCallback(async () => {
    try {
      const res = await fetch(`${PUBLIC_API.comment.list}/blog/${blogId}`);
      const data = await res.json();
      if (!Array.isArray(data)) {
        setComments([]);
      } else {
        setComments(data);
      }
    } catch (err) {
      console.error('Failed to load comments:', err);
      setError("Failed to load comments");
    }
  }, [blogId]);

  useEffect(() => {
    fetchComments();
  }, [fetchComments]);

  async function handleSubmit(e: React.FormEvent) {
    e.preventDefault();
    if (!newComment.trim()) return;
    try {
      const res = await fetch(AUTH_API.comment.create, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        credentials: "include",
        body: JSON.stringify({
          author: user?.username,
          text: newComment,
          blog: blogId,
          parent: replyTo,
        }),
      });
      if (!res.ok) {
        const errData = await res.json();
        console.error('Failed to post comment:', errData);
        setError(errData.error || "Failed to post comment");
        return;
      }
      setNewComment("");
      setReplyTo(null);
      fetchComments();
    } catch (err) {
      console.error('Failed to post comment:', err);
      setError("Failed to post comment");
    }
  }

  function renderComments(comments: Comment[], level = 0) {
    return comments.map((comment) => (
      <div key={comment._id} style={{ marginLeft: level * 20 }}>
        <div className="p-2 border rounded mb-1">
          <p className="font-bold">{comment.author}</p>
          <p>
            {comment.redacted ? (
              <span className="text-gray-500 italic">[This comment has been redacted]</span>
            ) : (
              comment.text
            )}
          </p>
          <p className="text-xs text-gray-500">{new Date(comment.createdAt).toLocaleString()}</p>
          {!comment.redacted && (
            <button onClick={() => setReplyTo(comment._id)} className="text-blue-500 text-sm hover:underline focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
              Reply
            </button>
          )}
        </div>
        {comment.replies && comment.replies.length > 0 && renderComments(comment.replies, level + 1)}
      </div>
    ));
  }

  return (
    <div className="mt-8">
      <h2 className="text-2xl font-bold mb-4">Comments</h2>
      {error && <p className="text-red-500 mb-4">{error}</p>}
      <div>{renderComments(comments)}</div>
      {isAuthenticated ? (
        <form onSubmit={handleSubmit} className="mt-4">
          {replyTo && <p className="mb-2 text-sm text-gray-600">Replying to comment {replyTo}</p>}
          <textarea
            value={newComment}
            onChange={(e) => setNewComment(e.target.value)}
            placeholder="Write your comment here..."
            className="w-full p-2 border rounded mb-2 focus:border-blue-500 focus:ring-1 focus:ring-blue-500"
          />
          <div className="flex items-center">
            <button 
              type="submit" 
              className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
            >
              Post Comment
            </button>
            {replyTo && (
              <button
                type="button"
                onClick={() => setReplyTo(null)}
                className="ml-2 text-sm text-gray-500 hover:text-gray-700 underline focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2"
              >
                Cancel Reply
              </button>
            )}
          </div>
        </form>
      ) : (
        <p>
          <a
            href={`/admin/login?returnUrl=${encodeURIComponent(pathname)}`}
            className="text-blue-500 hover:text-blue-600 underline focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
          >
            Login to comment
          </a>
        </p>
      )}
    </div>
  );
}

================
File: portfolio.next/src/components/EntryOverview.tsx
================
// portfolio.next/src/components/EntryOverview.tsx
import React from "react";

interface EntryProps {
  title: string;
  company: string;
  startDate: string;
  endDate: string;
  location: string;
  skills: string[];
  onClick: () => void;
}

const EntryOverview: React.FC<EntryProps> = ({ title, company, startDate, endDate, location, skills, onClick }) => {
  return (
    <div
      className="border p-4 rounded-lg shadow-md bg-white cursor-pointer hover:bg-gray-100 transition"
      onClick={onClick}
    >
      <h3 className="text-lg font-bold">{title}</h3>
      <p className="text-sm text-gray-600">{company}</p>
      <p className="text-sm">
        {startDate} - {endDate}
      </p>
      <p className="text-sm">
        {location}
      </p>
      <div className="flex flex-wrap gap-2 mt-2">
        {skills.map((skill, index) => (
          <span
            key={index}
            className="px-3 py-1 text-sm font-medium text-gray-700 bg-gray-200 rounded-full"
          >
            {skill}
          </span>
        ))}
      </div>
    </div>
  );
};

export default EntryOverview;

================
File: portfolio.next/src/components/Footer.tsx
================
export default function Footer (){
    return (
        <footer className="bg-gray-800 text-white text-center py-4 mt-6">
            <p>&copy; {new Date().getFullYear()} michel-roberge.com. All Rights Reserved.</p>
        </footer>
    );
}

================
File: portfolio.next/src/components/Header.tsx
================
"use client";
import Link from "next/link";
import { useRouter } from "next/navigation";
import { useAuth } from "@/context/AuthContext";
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faAlignLeft, faCog, faContactCard, faSignInAlt, faSignOutAlt } from '@fortawesome/free-solid-svg-icons';
import { usePathname } from "next/navigation";
import { AUTH_API } from "@/lib/constants";

export default function Header() {
  const { isAdmin, isAuthenticated, refreshAuth } = useAuth();
  const pathname = usePathname();
  const router = useRouter();

  async function handleLogout() {
    try {
      const res = await fetch(AUTH_API.auth.logout, {
        credentials: "include",
      });
      if (res.ok) {
        await refreshAuth();
        router.refresh();
      }
    } catch (error) {
      console.error("Logout failed", error);
    }
  }

  return (
    <header className="bg-gray-800 text-white py-6 relative">
      <div className="container mx-auto px-4 flex justify-between items-center">
        <Link href="/">
          <div>
            <h1 className="text-3xl font-bold hover:text-gray-300 transition">
              Curious Coder: A Portfolio
            </h1>
            <p className="text-lg">a.k.a. michel-roberge.com</p>
            <p className="text-xs">(the Northern Developer)</p>
          </div>
        </Link>
        <div className="flex items-center gap-4">

        <Link href="/pages/about" className="flex items-center gap-2 text-white hover:text-gray-300">
              <FontAwesomeIcon icon={faContactCard} className="w-6 h-6" />
              <span>About me</span>
            </Link>

        <Link href="/career" className="flex items-center gap-2 text-white hover:text-gray-300">
              <FontAwesomeIcon icon={faAlignLeft} className="w-6 h-6" />
              <span>Experience</span>
            </Link>


          {isAuthenticated && isAdmin && (
            <Link href={`/admin`} className="flex items-center gap-2 text-white hover:text-gray-300">
              <FontAwesomeIcon icon={faCog} className="w-6 h-6" />
              <span>Admin Panel</span>
            </Link>
          )}

          {!isAuthenticated ? (
            <Link href={`/admin/login?returnUrl=${encodeURIComponent(pathname)}`} className="flex items-center gap-2 text-white hover:text-gray-300">
              <FontAwesomeIcon icon={faSignInAlt} className="w-6 h-6" />
              <span>Login</span>
            </Link>
          ) : (
            <button onClick={handleLogout} className="flex items-center gap-2 text-white hover:text-gray-300">
              <FontAwesomeIcon icon={faSignOutAlt} className="w-6 h-6" />
              <span>Logout</span>
            </button>
          )}
        </div>
      </div>
    </header>
  );
}

================
File: portfolio.next/src/components/Home.tsx
================
'use client';
import { useState } from 'react';
import { Project } from '@/models/Project';
import { BlogEntry } from '@/models/BlogEntry';
import Link from 'next/link';

interface HomeProps {
  blogEntries: BlogEntry[];
  projects: Project[];
}

export default function Home({ blogEntries, projects }: HomeProps) {
  const [showBlogs, setShowBlogs] = useState(true);
  const publishedProjects = projects.filter((project: Project) => !project.isDraft);
  const publishedBlogEntries = blogEntries.filter((blog: BlogEntry) => !blog.isDraft);

  return (
    <main className="container mx-auto px-4 py-8">
      {/* Mobile Toggle */}
      <div className="md:hidden mb-6">
        <div className="flex rounded-lg border border-gray-200 dark:border-gray-700 overflow-hidden">
          <button
            onClick={() => setShowBlogs(true)}
            aria-pressed={showBlogs}
            className={`flex-1 py-2 px-4 text-center transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 ${
              showBlogs
                ? 'bg-blue-500 text-white'
                : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'
            }`}
          >
            Blog Posts
          </button>
          <button
            onClick={() => setShowBlogs(false)}
            aria-pressed={!showBlogs}
            className={`flex-1 py-2 px-4 text-center transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 ${
              !showBlogs
                ? 'bg-blue-500 text-white'
                : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'
            }`}
          >
            Projects
          </button>
        </div>
      </div>

      {/* Desktop Layout */}
      <div className="flex flex-col md:flex-row md:gap-8">
        {/* Blog Posts Section - Hidden on mobile when projects are shown */}
        <section 
          role="region"
          aria-label="Latest Blog Posts"
          className={`md:w-2/3 ${!showBlogs ? 'hidden md:block' : ''}`}>
          <h2 className="text-3xl font-bold mb-6 text-gray-900 dark:text-gray-100">Latest Blog Posts</h2>
          <div className="space-y-6">
            {publishedBlogEntries.length === 0 ? (
              <div className="text-center py-8 text-gray-500 dark:text-gray-400">
                No blog posts available.
              </div>
            ) : (
              publishedBlogEntries.map((blog: BlogEntry) => (
                <div key={blog._id} className="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden transition-shadow hover:shadow-lg">
                  <div className="p-6">
                    <h3 className="text-xl font-semibold mb-2 text-gray-900 dark:text-gray-100">
                      <Link 
                        href={`/blogs/${blog.link}`} 
                        className="hover:text-blue-500 transition-colors focus:outline-none focus:text-blue-500"
                      >
                        {blog.title}
                      </Link>
                    </h3>
                    <p className="text-gray-600 dark:text-gray-300 mb-4">{blog.excerpt}</p>
                    <div className="flex flex-wrap gap-2">
                      {blog.tags.map((tag: string) => (
                        <span
                          key={tag}
                          className="px-2 py-1 text-sm bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 rounded"
                        >
                          {tag}
                        </span>
                      ))}
                    </div>
                  </div>
                </div>
              ))
            )}
          </div>
        </section>

        {/* Projects Section - Hidden on mobile when blogs are shown */}
        <section 
          role="region"
          aria-label="Projects"
          className={`md:w-1/3 ${showBlogs ? 'hidden md:block' : ''}`}>
          <h2 className="text-3xl font-bold mb-6 text-gray-900 dark:text-gray-100">Projects</h2>
          <div className="space-y-6">
            {publishedProjects.length === 0 ? (
              <div className="text-center py-8 text-gray-500 dark:text-gray-400">
                No projects available.
              </div>
            ) : (
              publishedProjects.map((project: Project) => (
                <div key={project._id} className="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden transition-shadow hover:shadow-lg">
                  <div className="p-6">
                    <h3 className="text-xl font-semibold mb-2 text-gray-900 dark:text-gray-100">
                      <Link 
                        href={`${project.link}`} 
                        className="hover:text-blue-500 transition-colors focus:outline-none focus:text-blue-500"
                      >
                        {project.title}
                      </Link>
                    </h3>
                    <p className="text-gray-600 dark:text-gray-300 mb-4">{project.excerpt}</p>
                    <div className="flex flex-wrap gap-2">
                      {project.tags.map((tag: string) => (
                        <span
                          key={tag}
                          className="px-2 py-1 text-sm bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 rounded"
                        >
                          {tag}
                        </span>
                      ))}
                    </div>
                    {project.link && (
                      <div className="mt-4">
                        <a
                          href={project.link}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="text-sm text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 transition-colors focus:outline-none focus:text-blue-700 dark:focus:text-blue-300"
                        >
                          View Project
                        </a>
                      </div>
                    )}
                  </div>
                </div>
              ))
            )}
          </div>
        </section>
      </div>
    </main>
  );
}

================
File: portfolio.next/src/components/layouts/AdminLayout.tsx
================
interface AdminLayoutProps {
  children: React.ReactNode;
}

export default function AdminLayout({ children }: AdminLayoutProps) {
  return <>{children}</>;
}

================
File: portfolio.next/src/components/MarkdownEditor.d.ts
================
import { FC } from 'react';

interface MarkdownEditorProps {
  value: string;
  onChange: (value: string) => void;
}

declare const MarkdownEditor: FC<MarkdownEditorProps>;
export default MarkdownEditor;

================
File: portfolio.next/src/components/MarkdownEditor.tsx
================
'use client';

import { useState } from 'react';
import { marked } from 'marked';

interface Props {
  value: string;
  onChange: (value: string) => void;
}

export default function MarkdownEditor({ value, onChange }: Props) {
  const [isPreview, setIsPreview] = useState(false);

  return (
    <div className="space-y-2">
      <div className="flex justify-end">
        <button
          type="button"
          onClick={() => setIsPreview(!isPreview)}
          className="text-sm text-blue-600 hover:text-blue-800"
        >
          {isPreview ? 'Edit' : 'Preview'}
        </button>
      </div>

      {isPreview ? (
        <div 
          className="prose prose-sm max-w-none p-4 border rounded-md min-h-[200px] bg-gray-50"
          dangerouslySetInnerHTML={{ __html: marked(value) }}
        />
      ) : (
        <textarea
          value={value}
          onChange={(e) => onChange(e.target.value)}
          className="w-full min-h-[200px] p-4 border rounded-md focus:border-blue-500 focus:ring-1 focus:ring-blue-500"
          placeholder="Write your content in Markdown..."
        />
      )}
    </div>
  );
}

================
File: portfolio.next/src/components/MarkdownEditor/index.d.ts
================
import { FC } from 'react';

export interface MarkdownEditorProps {
  value: string;
  onChange: (value: string) => void;
}

declare const MarkdownEditor: FC<MarkdownEditorProps>;
export default MarkdownEditor;

================
File: portfolio.next/src/components/MarkdownEditor/index.tsx
================
import { useState } from 'react';
import { marked } from 'marked';
import type { MarkdownEditorProps } from './index.d';

export default function MarkdownEditor({ value, onChange }: MarkdownEditorProps) {
  const [activeTab, setActiveTab] = useState<'edit' | 'preview'>('edit');

  return (
    <div className="space-y-2">
      <div className="flex border-b">
        <button
          type="button"
          className={`px-4 py-2 ${activeTab === 'edit' ? 'border-b-2 border-blue-500 font-semibold' : 'text-gray-500'}`}
          onClick={() => setActiveTab('edit')}
        >
          Edit
        </button>
        <button
          type="button"
          className={`px-4 py-2 ${activeTab === 'preview' ? 'border-b-2 border-blue-500 font-semibold' : 'text-gray-500'}`}
          onClick={() => setActiveTab('preview')}
        >
          Preview
        </button>
      </div>

      {activeTab === 'edit' ? (
        <textarea
          value={value}
          onChange={(e) => onChange(e.target.value)}
          className="w-full h-64 p-2 border rounded-md focus:border-blue-500 focus:ring-1 focus:ring-blue-500"
          placeholder="Write your content here (Markdown supported)"
        />
      ) : (
        <div 
          className="w-full h-64 p-2 border rounded-md bg-gray-50 overflow-auto prose prose-sm max-w-none"
          dangerouslySetInnerHTML={{ __html: marked.parse(value) }}
        />
      )}
    </div>
  );
}

================
File: portfolio.next/src/components/project/ProjectView.tsx
================
"use client";

import { Project } from "@/models/Project";
import { marked } from "marked";

export default function ProjectView({ project }: { project: Project }) {
  return (
    <main className="container mx-auto px-6 py-10 flex flex-col flex-1">
      <h1 className="text-3xl font-bold">{project.title}</h1>

      <div
        className="mt-4 prose lg:prose-lg xl:prose-xl max-w-none"
        dangerouslySetInnerHTML={{ __html: marked.parse(project.description) }}
      />
    </main>
  );
}

================
File: portfolio.next/src/components/Search.tsx
================
'use client';
import { useSearch } from "@/context/SearchContext";

export default function Search() {
    const { query, setQuery, results, handleSearch } = useSearch();

  return (
    <div className="relative w-full max-w-lg mx-auto mt-6">
      <input
        type="text"
        className="w-full p-3 border rounded"
        placeholder="Search projects, blogs, or skills..."
        value={query}
        onChange={(e) => setQuery(e.target.value)}
        onKeyPress={(e) => e.key === "Enter" && handleSearch()}
      />
      <button
        className="absolute right-2 top-2 px-4 py-1 bg-gray-800 hover:bg-gray-600 transition text-white rounded"
        onClick={handleSearch}
      >
        Search
      </button>
      {results.length > 0 && (
        <div className="mt-4 p-4 border rounded bg-white shadow-md">
          <h3 className="text-lg font-semibold">Results:</h3>
          <ul>
            {results.map((result, index) => (
              <li key={index} className="mt-2">
                <a href={result.link} className="text-blue-500 hover:underline">
                  {result.title} ({result.type})
                </a>
                <p className="text-gray-600 text-sm">{result.description}</p>
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
}

================
File: portfolio.next/src/components/SectionToggle.tsx
================
"use client";

interface SectionToggleProps {
  activeSection: "blogs" | "projects";
  setActiveSection: (section: "blogs" | "projects") => void;
}

export default function SectionToggle({ activeSection, setActiveSection }: SectionToggleProps) {
  return (
    <div className="flex md:hidden justify-center mb-4 border-b">
      <button
        type="button"
        className={`w-1/2 p-2 text-center ${
          activeSection === "blogs" ? "border-b-2 border-blue-500 font-bold" : "text-gray-500"
        }`}
        onClick={() => setActiveSection("blogs")}
      >
        Blogs
      </button>
      <button
        type="button"
        className={`w-1/2 p-2 text-center ${
          activeSection === "projects" ? "border-b-2 border-blue-500 font-bold" : "text-gray-500"
        }`}
        onClick={() => setActiveSection("projects")}
      >
        Projects
      </button>
    </div>
  );
}

================
File: portfolio.next/src/components/WarmUp.tsx
================
"use client";

import { useEffect, useState } from "react";
import { ADMIN_API } from "@/lib/constants";
import { AIConfig } from "@/models/AIConfig";

interface WarmUpProps {
  onComplete?: () => void;
}

export default function WarmUp({ onComplete }: WarmUpProps) {
  const [isWarmedUp, setIsWarmedUp] = useState(false);

  useEffect(() => {
    async function checkWarmupStatus() {
      try {
        const response = await fetch(ADMIN_API.ai.config, {
          credentials: "include",
        });

        if (!response.ok) {
          const error = await response.json();
          throw new Error(error.message || "Failed to check warmup status");
        }

        const data: AIConfig = await response.json();
        setIsWarmedUp(data.isWarmedUp);

        if (data.isWarmedUp && onComplete) {
          onComplete();
        }
      } catch (err) {
        console.error("Failed to check warmup status:", err);
        setTimeout(checkWarmupStatus, 5000); // Retry in 5 seconds if error
      }
    }

    const interval = setInterval(checkWarmupStatus, 2000); // Check every 2 seconds
    return () => clearInterval(interval);
  }, [onComplete]);

  if (isWarmedUp) {
    return null;
  }

  return (
    <div className="fixed bottom-4 right-4 bg-yellow-100 p-4 rounded-lg shadow-lg">
      <p className="text-yellow-800">
        Warming up AI models... This might take a few seconds.
      </p>
    </div>
  );
}

================
File: portfolio.next/src/context/AuthContext.tsx
================
// portfolio.next/src/context/AuthContext.tsx
"use client";
import { createContext, useContext, useState, useEffect } from "react";
import { useRouter } from "next/navigation"; 
import { AUTH_API, APP_ROUTES } from "@/lib/constants";
import { User } from '@/models/User';
import { checkAuthStatus } from '@/services/authService';

interface AuthContextType {
  user: User | null;
  loading: boolean;
  error: string | null;
  isAuthenticated: boolean;
  isAdmin: boolean;
  login: (username: string, password: string) => Promise<void>;
  logout: () => Promise<void>;
  refreshAuth: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(false); // Start as not loading
  const [error, setError] = useState<string | null>(null);
  const router = useRouter();

  const isAuthenticated = !!user;
  const isAdmin = user?.isAdmin ?? false;

  // Check auth status when component mounts
  useEffect(() => {
    refreshAuth();
  }, []);

  async function refreshAuth() {
    try {
      const { authenticated, user: authUser } = await checkAuthStatus();
      
      if (!authenticated) {
        setUser(null);
        return;
      }

      setUser(authUser);
    } catch (err) {
      console.error('Failed to refresh auth:', err);
      setUser(null);
      setError("Authentication failed");
    }
  }

  async function login(username: string, password: string): Promise<void> {
    setLoading(true);
    setError(null);

    try {
      const res = await fetch(AUTH_API.auth.login, {
        method: "POST",
        credentials: "include",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ username, password }),
      });

      const data = await res.json();

      if (!res.ok) {
        setError(data.message || "Login failed");
        return;
      }

      await refreshAuth(); // Use refreshAuth instead of directly setting user
    } catch (err) {
      console.error('Failed to login:', err);
      setError("Login failed");
    } finally {
      setLoading(false);
    }
  }

  async function logout(): Promise<void> {
    try {
      await fetch(AUTH_API.auth.logout, {
        method: "POST",
        credentials: "include",
      });
    } catch (err) {
      console.error('Failed to logout:', err);
    } finally {
      setUser(null);
      router.push(APP_ROUTES.auth.login);
    }
  }

  return (
    <AuthContext.Provider value={{ 
      user, 
      loading, 
      error, 
      isAuthenticated,
      isAdmin,
      login, 
      logout, 
      refreshAuth 
    }}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
}

================
File: portfolio.next/src/context/ChatContext.tsx
================
"use client";
import { createContext, useContext, useState, useEffect, ReactNode } from "react";
import { AUTH_API } from "@/lib/constants";

type ChatMessage = {
  role: "user" | "ai";
  text: string;
};

type ChatContextType = {
  messages: ChatMessage[];
  addMessage: (message: ChatMessage) => void;
  clearChat: () => void;
};

const ChatContext = createContext<ChatContextType | undefined>(undefined);

export function ChatProvider({ children }: { children: ReactNode }) {
  const [messages, setMessages] = useState<ChatMessage[]>([]);

  // Fetch greeting and context when chat initializes
  useEffect(() => {
    async function fetchChatData() {
      try {
        const greeting = await loadContext();

        if (greeting) {
          setMessages([
            { role: "ai", text: greeting },
          ]);
        } else {
          setMessages([{ role: "ai", text: "Hello! Ask me anything about my projects or skills." }]);
        }
      } catch (error) {
        console.error("Failed to fetch chat initialization data:", error);
        setMessages([{ role: "ai", text: "Hello! Ask me anything about my projects or skills." }]);
      }
    }

    fetchChatData();
  }, []);

  const loadContext = async () => {
    try {
      const greetingRes = await fetch(AUTH_API.chat, {
        credentials: "include",
      });
      const greeting = await greetingRes.json();

      if (!greetingRes.ok) {
        const error = await greetingRes.json();
        throw new Error(error.message || "Failed to fetch chat greeting");
      }

      return greeting;
    } catch (error) {
      console.error("Failed to load chat context:", error);
      return null;
    }
  };

  const addMessage = (message: ChatMessage) => {
    setMessages((prev) => [...prev, message]);
  };

  const clearChat = () => {
    setMessages([{ role: "ai", text: "Hello! Ask me anything about my projects or skills." }]);
  };

  return (
    <ChatContext.Provider value={{ messages, addMessage, clearChat }}>
      {children}
    </ChatContext.Provider>
  );
}

export function useChat() {
  const context = useContext(ChatContext);
  if (!context) {
    throw new Error("useChat must be used within a ChatProvider");
  }
  return context;
}

================
File: portfolio.next/src/context/SearchContext.tsx
================
'use client';
import { createContext, useContext, useState, ReactNode } from "react";
import { Project } from "@/models/Project";
import { PUBLIC_API } from "@/lib/constants";

interface SearchResult {
  title: string;
  description: string;
  type: "project" | "blog" | "career";
  link: string;
}

interface SearchContextType {
  query: string;
  setQuery: (query: string) => void;
  results: SearchResult[];
  handleSearch: () => Promise<void>;
}

const SearchContext = createContext<SearchContextType | undefined>(undefined);

export function SearchProvider({ children }: { children: ReactNode }) {
  const [query, setQuery] = useState<string>("");
  const [results, setResults] = useState<SearchResult[]>([]);

  async function searchProjects(query: string): Promise<Project[]> {
    try {
      const response = await fetch(PUBLIC_API.project.search(query), {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.message || "Failed to search projects");
      }

      return response.json();
    } catch (error) {
      console.error("Failed to search projects:", error);
      return [];
    }
  }

  const handleSearch = async () => {
    if (!query.trim()) {
      setResults([]); // Clear results if query is empty
      return;
    }

    try {
      const projects = await searchProjects(query);
      const searchResults: SearchResult[] = projects
        .filter(project => project.link) // Only include projects with valid links
        .map((project) => ({
          title: project.title,
          description: project.description,
          type: "project",
          link: project.link!, // Safe to use ! here as we filtered undefined links
        }));

      setResults(searchResults);
    } catch (error) {
      console.error("Search failed:", error);
      setResults([]);
    }
  };

  return (
    <SearchContext.Provider value={{ query, setQuery, results, handleSearch }}>
      {children}
    </SearchContext.Provider>
  );
}

export function useSearch() {
  const context = useContext(SearchContext);
  if (context === undefined) {
    throw new Error("useSearch must be used within a SearchProvider");
  }
  return context;
}

================
File: portfolio.next/src/hooks/useWebSocketChat.tsx
================
import { useState, useEffect, useRef, useCallback, useMemo } from "react";
import { useChat } from "@/context/ChatContext";

export function useWebSocketChat(isOpen: boolean) {
  const { addMessage } = useChat();
  const wsRef = useRef<WebSocket | null>(null);
  const [isStreaming, setIsStreaming] = useState(false);
  const streamingResponseRef = useRef("");
  const [streamingResponse, setStreamingResponse] = useState("");

  const wsUrl = useMemo(() => {
    const apiUrl = process.env.NEXT_PUBLIC_API_URL || "http://localhost:5000";
    return apiUrl.replace(/^http/, "ws");
  }, []);

  useEffect(() => {
    if (isOpen && !wsRef.current) {
      const websocket = new WebSocket(wsUrl);

      websocket.onopen = () => console.log("Connected to WebSocket");

      websocket.onmessage = (event) => {
        const data = JSON.parse(event.data);

        if (data.response) {
          setIsStreaming(true);
          streamingResponseRef.current += data.response;
          setStreamingResponse(streamingResponseRef.current);
        }

        if (data.done) {
          setIsStreaming(false);
        }
      };

      websocket.onclose = () => {
        console.log("WebSocket disconnected");
        wsRef.current = null;
      };

      wsRef.current = websocket;
    }

    return () => {
      wsRef.current?.close();
      wsRef.current = null;
    };
  }, [isOpen, wsUrl]);

  const safeAddMessage = useCallback(
    (message: { role: "user" | "ai"; text: string }) => {
      addMessage(message);
    },
    [addMessage]
  );

  useEffect(() => {
    if (!isStreaming && streamingResponseRef.current) {
      safeAddMessage({ role: "ai", text: streamingResponseRef.current });
      streamingResponseRef.current = "";
      setStreamingResponse("");
    }
  }, [isStreaming, safeAddMessage]);

  return { wsRef, isStreaming, streamingResponse, setStreamingResponse, setIsStreaming };
}

================
File: portfolio.next/src/lib/auth.ts
================
import { cookies } from 'next/headers';
import { redirect } from 'next/navigation';
import { AUTH_API, APP_ROUTES } from '@/lib/constants';
import { User } from '@/models/User';

/**
 * Get the authenticated user's status server-side
 */
export async function getAuthStatus(): Promise<{ isAuthenticated: boolean; user: User | null, isAdmin: boolean }> {
    try {
        const res = await fetch(AUTH_API.auth.status, {
            headers: {
                Cookie: cookies().toString(),
            },
            cache: 'no-store',
        });

        console.log('🔍 [DEBUG] getAuthStatus res.ok:', res.ok);

        if (!res.ok) {
            return { isAuthenticated: false, user: null, isAdmin: false };
        }

        const {user} = await res.json();
        console.log('🔍 [DEBUG] getAuthStatus user:', user);

        return { isAuthenticated: true, user, isAdmin: user.isAdmin };
    } catch (error) {
        console.error('Failed to get auth status:', error);
        return { isAuthenticated: false, user: null, isAdmin: false };
    }
}

/**
 * Protect a route server-side, redirecting to login if not authenticated
 * or not an admin
 */
export async function protectAdminRoute() {
    const { isAuthenticated, user, isAdmin } = await getAuthStatus();
    
    console.log('🔍 [DEBUG] protectAdminRoute isAuthenticated:', isAuthenticated, 'isAdmin:', isAdmin);

    if (!isAuthenticated || !isAdmin) {
        redirect(APP_ROUTES.auth.login);
    }

    return { user };
}

================
File: portfolio.next/src/lib/constants.ts
================
export const BASE_URL = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000';
export const REMOTE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000';
export const API_BASE = "/api";

// Public API endpoints (no auth required)
export const PUBLIC_API = {
  blog: {
    list: `${REMOTE_URL}${API_BASE}/blogs`,
    get: (id: string) => `${REMOTE_URL}${API_BASE}/blogs/${id}`,
    search: (query: string) => `${REMOTE_URL}${API_BASE}/blogs/search?q=${encodeURIComponent(query)}`,
  },
  project: {
    list: `${REMOTE_URL}${API_BASE}/projects`,
    get: (id: string) => `${REMOTE_URL}${API_BASE}/projects/${id}`,
    search: (query: string) => `${REMOTE_URL}${API_BASE}/projects/search?q=${encodeURIComponent(query)}`,
  },
  career: {
    list: `${REMOTE_URL}${API_BASE}/career/timeline`,
    get: (id: string) => `${REMOTE_URL}${API_BASE}/career/timeline/${id}`,
  },
  page: {
    list: `${REMOTE_URL}${API_BASE}/pages`,
    get: (id: string) => `${REMOTE_URL}${API_BASE}/pages/${id}`,
  },
  file: {
    list: `${REMOTE_URL}${API_BASE}/files`,
    get: (id: string) => `${REMOTE_URL}${API_BASE}/files/${id}`,
  },
  home: {
    get: `${REMOTE_URL}${API_BASE}/home`,
    search: (query: string) => `${REMOTE_URL}${API_BASE}/home/search?q=${query}`,
  },
  comment: {
    list: `${REMOTE_URL}${API_BASE}/comments`,
    get: (id: string) => `${REMOTE_URL}${API_BASE}/comments/${id}`,
  },
  search: `${REMOTE_URL}${API_BASE}/search`,
} as const;

// Protected API endpoints (require authentication)
export const AUTH_API = {
  auth: {
    login: `${REMOTE_URL}${API_BASE}/auth/login`,
    logout: `${REMOTE_URL}${API_BASE}/auth/logout`,
    status: `${REMOTE_URL}${API_BASE}/auth/status`,
    oauth: {
      google: `${REMOTE_URL}${API_BASE}/auth/oauth2/google`,
      facebook: `${REMOTE_URL}${API_BASE}/auth/oauth2/facebook`,
    }
  },
  chat: `${REMOTE_URL}${API_BASE}/chat`,
  comment: {
    create: `${REMOTE_URL}${API_BASE}/comments`,
    update: (id: string) => `${REMOTE_URL}${API_BASE}/comments/${id}`,
    delete: (id: string) => `${REMOTE_URL}${API_BASE}/comments/${id}`,
  },
} as const;

// Admin API endpoints (require authentication and admin role)
export const ADMIN_API = {
  blog: {
    list:  `${REMOTE_URL}${API_BASE}/admin/blogs`,
    create: `${REMOTE_URL}${API_BASE}/admin/blogs`,
    update: (id: string) => `${REMOTE_URL}${API_BASE}/admin/blogs/${id}`,
    delete: (id: string) => `${REMOTE_URL}${API_BASE}/admin/blogs/${id}`,
    generateEmbeddings: `${REMOTE_URL}${API_BASE}/admin/blogs/generate-embeddings`,
  },
  project: {
    create: `${REMOTE_URL}${API_BASE}/admin/projects`,
    update: (id: string) => `${REMOTE_URL}${API_BASE}/admin/projects/${id}`,
    delete: (id: string) => `${REMOTE_URL}${API_BASE}/admin/projects/${id}`,
    archive: (id: string) => `${REMOTE_URL}${API_BASE}/admin/projects/${id}/archive`,
  },
  career: {
    create: `${REMOTE_URL}${API_BASE}/admin/career/timeline`,
    update: (id: string) => `${REMOTE_URL}${API_BASE}/admin/career/timeline/${id}`,
    delete: (id: string) => `${REMOTE_URL}${API_BASE}/admin/career/timeline/${id}`,
    addLink: (id: string) => `${REMOTE_URL}${API_BASE}/admin/career/timeline/${id}/link`,
    parseLinkedIn: `${REMOTE_URL}${API_BASE}/admin/career/parse-linkedin`,
    bulkImport: `${REMOTE_URL}${API_BASE}/admin/career/timeline/bulk`,
  },
  file: {
    upload: `${REMOTE_URL}${API_BASE}/admin/files/upload`,
    update: (id: string) => `${REMOTE_URL}${API_BASE}/admin/files/${id}`,
    delete: (id: string) => `${REMOTE_URL}${API_BASE}/admin/files/${id}`,
  },
  page: {
    create: `${REMOTE_URL}${API_BASE}/admin/pages`,
    update: (id: string) => `${REMOTE_URL}${API_BASE}/pages/${id}`,
    delete: (id: string) => `${REMOTE_URL}${API_BASE}/pages/${id}`,
  },
  user: {
    list: `${REMOTE_URL}${API_BASE}/admin/users`,
    create: `${REMOTE_URL}${API_BASE}/admin/users`,
    update: (id: string) => `${REMOTE_URL}${API_BASE}/admin/users/${id}`,
    delete: (id: string) => `${REMOTE_URL}${API_BASE}/admin/users/${id}`,
    updateAdmin: (id: string) => `${REMOTE_URL}${API_BASE}/admin/users/${id}/admin`,
    adminExists: `${REMOTE_URL}${API_BASE}/admin/users/admin-exists`,
    initialize: `${REMOTE_URL}${API_BASE}/admin/users/initialize`,
  },
  providerConfig: {
    list: `${REMOTE_URL}${API_BASE}/admin/provider-configs`,
    get: (provider: string) => `${REMOTE_URL}${API_BASE}/provider-configs/${provider}`,
    create: `${REMOTE_URL}${API_BASE}/admin/provider-configs`,
    update: (id: string) => `${REMOTE_URL}${API_BASE}/admin/provider-configs/${id}`,
    delete: (id: string) => `${REMOTE_URL}${API_BASE}/admin/provider-configs/${id}`,
  },
  analytics: {
    list: `${REMOTE_URL}${API_BASE}/admin/analytics`,
    trackPage: `${REMOTE_URL}${API_BASE}/admin/analytics/track-page`,
    trackEvent: `${REMOTE_URL}${API_BASE}/admin/analytics/track-event`,
    telemetry: `${REMOTE_URL}${API_BASE}/admin/analytics/telemetry`,
  },
  ai: {
    complete: `${REMOTE_URL}${API_BASE}/admin/ai/complete`,
    embeddings: `${REMOTE_URL}${API_BASE}/admin/ai/embeddings`,
    similaritySearch: `${REMOTE_URL}${API_BASE}/admin/ai/similarity-search`,
    config: `${REMOTE_URL}${API_BASE}/admin/ai/config`,
    initialize: `${REMOTE_URL}${API_BASE}/admin/ai/initialize`,
  },
  comment: {
    list: `${REMOTE_URL}${API_BASE}/admin/comments/all`,
    delete: (id: string) => `${REMOTE_URL}${API_BASE}/admin/comments/${id}`,
  },
} as const;

// Frontend routes
export const APP_ROUTES = {
  auth: {
    login: '/admin/login',
  },
  admin: {
    home: '/admin',
    blogs: {
      list: '/admin/blogs',
      create: '/admin/blogs/create',
      edit: (id: string) => `/admin/blogs/edit/${id}`,
    },
    projects: {
      list: '/admin/projects',
      create: '/admin/projects/create',
      edit: (id: string) => `/admin/projects/edit/${id}`,
    },
    pages: {
      list: '/admin/pages',
      create: '/admin/pages/create',
      edit: (id: string) => `/admin/pages/edit/${id}`,
    },
    career: {
      list: '/admin/career',
      create: '/admin/career/create',
      edit: (id: string) => `/admin/career/edit/${id}`,
    },
    users: {
      list: '/admin/users',
      create: '/admin/users/create',
      edit: (id: string) => `/admin/users/edit/${id}`,
    },
    settings: '/admin/settings',
  },
} as const;

================
File: portfolio.next/src/models/AdminCheck.ts
================
/**
 * Response from checking if an admin user exists
 */
export interface AdminCheckResponse {
  exists: boolean;
}

================
File: portfolio.next/src/models/AdminInit.ts
================
/**
 * Request to initialize the first admin user
 */
export interface AdminInitRequest {
  username: string;
  password: string;
  isAdmin: boolean;
}

================
File: portfolio.next/src/models/AI.ts
================
/**
 * Represents an AI configuration
 */
export interface AIConfig {
    provider: "ollama" | "openai";
    clientId?: string;
    clientSecret?: string;
}

/**
 * Represents a chat message
 */
export interface ChatMessage {
    role: 'user' | 'assistant';
    content: string;
}

/**
 * Represents an AI response
 */
export interface AIResponse {
    text: string;
    tokens: number;
    model: string;
}

/**
 * Represents a search result
 */
export interface SearchResult {
    title: string;
    description: string;
    type: 'blog' | 'project';
    link: string;
    score: number;
}

================
File: portfolio.next/src/models/AIConfig.ts
================
/**
 * Model representing AI configuration settings
 */
export interface AIConfig {
  provider: "ollama" | "openai";
  clientId?: string;
  clientSecret?: string;
  isWarmedUp: boolean;
}

================
File: portfolio.next/src/models/Analytics.ts
================
/**
 * Valid types for analytics event data values
 */
export type EventDataValue = string | number | boolean | null;

/**
 * Represents analytics data for the portfolio
 */
export interface AnalyticsData {
    users: number;
    blogPosts: number;
    projects: number;
    sessions: number;
    pageHits: number;
    topPages: Array<{
        path: string;
        hits: number;
    }>;
    topEvents: Array<{
        name: string;
        count: number;
    }>;
    lastUpdated?: string;
}

/**
 * Represents a page view event
 */
export interface PageView {
    path: string;
    timestamp: string;
    userId?: string;
    sessionId?: string;
}

/**
 * Represents a custom analytics event
 */
export interface AnalyticsEvent {
    name: string;
    data?: Record<string, EventDataValue>;
    timestamp: string;
    userId?: string;
    sessionId?: string;
}

/**
 * Represents telemetry data for the admin dashboard
 */
export interface TelemetryData {
    pageViews: number;
    uniqueVisitors: number;
    topPages: Array<{ 
        path: string; 
        views: number;
    }>;
}

/**
 * Valid types for error details values
 */
export type ErrorDetailValue = string | number | boolean | null | Error;

/**
 * Represents an error response from the analytics API
 */
export interface AnalyticsError {
    message: string;
    code?: string;
    details?: Record<string, ErrorDetailValue>;
}

================
File: portfolio.next/src/models/BlogEntry.ts
================
/**
 * Base blog entry interface with common properties
 */
export interface BaseBlogEntry {
  title: string;
  excerpt: string;
  body: string;
  tags: string[];
  isDraft: boolean;
  publishAt?: string | null;
}

/**
 * Full blog entry model returned from the API
 */
export interface BlogEntry extends BaseBlogEntry {
  _id: string;
  link: string;
  createdAt: string;
  updatedAt: string;
}

/**
 * Data required to create a new blog entry
 */
export interface BlogEntryCreate extends BaseBlogEntry {
  link: string; // Will be generated on the backend
}

/**
 * Data for updating an existing blog entry
 * All fields are optional since we can update any subset of the base fields
 */
export type BlogEntryUpdate = Partial<BaseBlogEntry>;

================
File: portfolio.next/src/models/Career.ts
================
/**
 * Represents a link in a timeline event
 */
export interface TimelineLink {
    url: string;
    title: string;
    description?: string;
}

/**
 * Represents a timeline event
 */
export interface TimelineEvent {
    _id: string;
    title: string;
    company: string;
    location: string;
    startDate: string;
    endDate: string | null;
    description: string;
    skills: string[];
    links: TimelineLink[];
    order: number;
    visible: boolean;
    createdAt: string;
    updatedAt: string;
}

/**
 * Represents the career timeline
 */
export interface CareerTimeline {
    events: TimelineEvent[];
    lastUpdated: string;
}

================
File: portfolio.next/src/models/CareerEntry.ts
================
export interface BaseCareerEntry {
  title: string;
  company: string;
  location: string;
  description: string;
  startDate: string;
  endDate: string | null;
  skills: string[];
  highlights?: string[];
  url?: string;
  importedFromLinkedIn?: boolean;
}

export interface CareerEntry extends BaseCareerEntry {
  _id: string;
  type: 'job' | 'education' | 'certification';
  order?: number;
  createdAt: string;
  updatedAt: string;
}

export interface CareerEntryCreate extends BaseCareerEntry {
  type: 'job' | 'education' | 'certification';
}

// Helper function to create a CareerEntry from LinkedIn data
export function createCareerEntryFromLinkedIn(linkedInData: {
  title: string;
  company: string;
  location: string;
  startDate: string;
  endDate: string | null;
  description: string;
  skills: string[];
  linkedInUrl?: string;
}): CareerEntryCreate {
  return {
    ...linkedInData,
    type: 'job',
    url: linkedInData.linkedInUrl,
    highlights: [],
    importedFromLinkedIn: true,
  };
}

================
File: portfolio.next/src/models/ChatMessage.ts
================
/**
 * Model representing a message in a chat conversation with AI
 */
export interface ChatMessage {
  role: 'user' | 'assistant';
  content: string;
}

================
File: portfolio.next/src/models/Comment.ts
================
/**
 * Model representing a user comment
 */
export interface Comment {
  _id: string;
  author: string;
  text: string;
  createdAt: string;
  updatedAt?: string;
  redacted: boolean;
  replies: Comment[];
  userId?: string; // To identify if the current user owns this comment
}

/**
 * Interface for updating a comment
 */
export interface CommentUpdate {
  text: string;
}

/**
 * Interface for creating a new comment
 */
export interface CommentCreate {
  text: string;
  parentId?: string; // For replies
}

================
File: portfolio.next/src/models/FileInfo.ts
================
export interface BaseFileInfo {
  filename: string;
  originalName: string;
  contentType: string;
  isPublic: boolean;
  context: 'blog' | 'project' | 'profile' | 'other';
  size: number;
}

export interface FileMetadata {
  entityId: string;
  context: 'blog' | 'project' | 'profile' | 'other';
  uploadedBy: string;
  isPublic: boolean;
  size: number;
  uploadDate?: string;
}

export interface FileInfo extends BaseFileInfo {
  _id: string;
  metadata: FileMetadata;
  uploadDate?: string;
  length?: number;
  chunkSize?: number;
}

/*
      {
        "_id": "67cb0ebf2ec18c7799cb6e99",
        "length": 4004,
        "chunkSize": 261120,
        "uploadDate": "2025-03-07T15:20:31.656Z",
        "filename": "uploaded_file",
        "metadata": {
            "contentType": "multipart/form-data",
            "uploadedBy": null,
            "isPublic": true,
            "entityId": "67bb7eb8a3e8ac56032b8378",
            "type": "project"
        }
*/

================
File: portfolio.next/src/models/HomePage.ts
================
import { BlogEntry } from './BlogEntry';
import { Project } from './Project';

/**
 * Represents the home page data
 */
export interface HomePage {
    blogs: BlogEntry[];
    projects: Project[];
    featuredBlogs: BlogEntry[];
    featuredProjects: Project[];
    stats: {
        totalBlogs: number;
        totalProjects: number;
        lastUpdated: string;
    };
}

================
File: portfolio.next/src/models/Page_new.ts
================
export interface BasePage {
  title: string;
  slug: string;
  content: string;
  tags: string[];
}

export interface Page extends BasePage {
  _id: string;
  createdAt: string;
  updatedAt: string;
}

================
File: portfolio.next/src/models/Page.ts
================
export interface BasePage {
  title: string;
  slug: string;
  content: string;
  tags: string[];
}

export interface Page extends BasePage {
  _id: string;
  createdAt: string;
  updatedAt: string;
}

export type PageFormData = BasePage & { _id?: string };

================
File: portfolio.next/src/models/Project.ts
================
export interface BaseProject {
  title: string;
  excerpt: string;
  description: string;
  tags: string[];
  isDraft: boolean;
  status: 'planned' | 'in-progress' | 'completed' | 'on-hold';
  startDate?: string;
  endDate?: string;
  publishAt?: string | null;
  image?: string;
  link?: string;
  industry?: string;
  technologies: string[];
}

export interface Project extends BaseProject {
  _id: string;
  createdAt: string;
  updatedAt: string;
}

// Create interface extends base but may have additional validation or defaults
export interface ProjectCreate extends BaseProject {
  publishAt?: string | null; // Make publishAt explicitly optional for create
  image?: string; // Ensure image is optional during creation
  startDate?: string; // Ensure startDate is optional during creation
  endDate?: string; // Ensure endDate is optional during creation
  technologies: string[]; // Ensure technologies is required during creation
}

================
File: portfolio.next/src/models/ProviderConfig.ts
================
// portfolio.next/src/models/ProviderConfig.ts

export interface ProviderConfig {
  _id: string;
  name: string;
  apiKey?: string;
  baseUrl?: string;
  status: 'active' | 'inactive';
  createdAt: string;
  updatedAt: string;
}

================
File: portfolio.next/src/models/User.ts
================
/**
 * Base user interface with common properties
 */
export interface BaseUser {
  username: string;
  isAdmin: boolean;
}

/**
 * Full user model returned from the API
 */
export interface User extends BaseUser {
  _id: string;
  createdAt: string;
  updatedAt: string;
}

/**
 * Data required to create a new user
 */
export interface UserCreate extends BaseUser {
  password: string;
}

/**
 * Data for updating an existing user
 */
export interface UserUpdate extends Partial<BaseUser> {
  password?: string;
}

/**
 * Form data for creating a new user
 */
export interface UserCreateFormData {
  username: string;
  password: string;
  confirmPassword: string;
  isAdmin: boolean;
}

/**
 * Convert form data to UserCreate model
 * This ensures type safety when transforming form data to API model
 * @param formData - The form data to convert
 * @returns UserCreate - The data ready for API submission
 */
export function toUserCreate(formData: UserCreateFormData): UserCreate {
  return {
    username: formData.username,
    password: formData.password,
    isAdmin: formData.isAdmin
  };
}

================
File: portfolio.next/src/services/adminService.ts
================
import { ADMIN_API } from '@/lib/constants';
import { AdminCheckResponse } from '@/models/AdminCheck';
import { AdminInitRequest } from '@/models/AdminInit';

/**
 * Check if an admin user exists in the system
 */
export async function checkAdminExists(): Promise<AdminCheckResponse> {
  try {
    const res = await fetch(ADMIN_API.user.adminExists, {
      credentials: "include",
    });

    if (!res.ok) {
      const error = await res.json();
      throw new Error(error.message || "Failed to check admin status");
    }

    return res.json();
  } catch (err) {
    console.error("Failed to check admin status:", err);
    throw err;
  }
}

/**
 * Initialize the first admin user in the system
 */
export async function initializeAdmin(request: AdminInitRequest): Promise<void> {
  try {
    const res = await fetch(ADMIN_API.user.initialize, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(request),
    });

    if (!res.ok) {
      const error = await res.json();
      throw new Error(error.message || "Failed to create admin account");
    }
  } catch (err) {
    console.error("Failed to create admin account:", err);
    throw err;
  }
}

================
File: portfolio.next/src/services/aiService.ts
================
import { ADMIN_API } from '@/lib/constants';
import { AIConfig, AIResponse, SearchResult } from '@/models/AI';

/**
 * Get AI completion
 */
export async function getCompletion(prompt: string): Promise<AIResponse> {
    try {
        const res = await fetch(ADMIN_API.ai.complete, {
            method: "POST",
            credentials: "include",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({ prompt }),
        });

        if (!res.ok) {
            const error = await res.json();
            throw new Error(error.message || "Failed to get AI completion");
        }

        return res.json();
    } catch (error) {
        console.error("Failed to get AI completion:", error);
        throw error;
    }
}

/**
 * Get embeddings for text
 */
export async function getEmbeddings(text: string): Promise<number[]> {
    try {
        const res = await fetch(ADMIN_API.ai.embeddings, {
            method: "POST",
            credentials: "include",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({ text }),
        });

        if (!res.ok) {
            const error = await res.json();
            throw new Error(error.message || "Failed to get embeddings");
        }

        return res.json();
    } catch (error) {
        console.error("Failed to get embeddings:", error);
        throw error;
    }
}

/**
 * Search for similar content
 */
export async function searchSimilar(query: string): Promise<SearchResult[]> {
    try {
        const res = await fetch(ADMIN_API.ai.similaritySearch, {
            method: "POST",
            credentials: "include",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({ query }),
        });

        if (!res.ok) {
            const error = await res.json();
            throw new Error(error.message || "Failed to search similar content");
        }

        return res.json();
    } catch (error) {
        console.error("Failed to search similar content:", error);
        throw error;
    }
}

/**
 * Get AI configuration
 */
export async function getAIConfig(): Promise<AIConfig> {
    try {
        const res = await fetch(ADMIN_API.ai.config, {
            credentials: "include",
        });

        if (!res.ok) {
            const error = await res.json();
            throw new Error(error.message || "Failed to get AI configuration");
        }

        return res.json();
    } catch (error) {
        console.error("Failed to get AI configuration:", error);
        throw error;
    }
}

/**
 * Update AI configuration
 */
export async function updateAIConfig(config: AIConfig): Promise<void> {
    try {
        const res = await fetch(ADMIN_API.ai.config, {
            method: "PUT",
            credentials: "include",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(config),
        });

        if (!res.ok) {
            const error = await res.json();
            throw new Error(error.message || "Failed to update AI configuration");
        }
    } catch (error) {
        console.error("Failed to update AI configuration:", error);
        throw error;
    }
}

================
File: portfolio.next/src/services/analyticsService.ts
================
// portfolio.next/src/services/analyticsService.ts
import { ADMIN_API } from '@/lib/constants';
import { 
    AnalyticsData, 
    TelemetryData, 
    AnalyticsError,
    EventDataValue 
} from '@/models/Analytics';

const ANALYTICS_ERRORS = {
    FETCH_FAILED: "Failed to fetch analytics data",
    NETWORK_ERROR: "Network error while fetching analytics",
    UNAUTHORIZED: "Unauthorized access to analytics",
    TRACK_FAILED: "Failed to track analytics",
} as const;

/**
 * Fetch analytics data for the portfolio dashboard
 * @throws {Error} With domain-specific error message if fetch fails
 */
export async function fetchAnalytics(): Promise<AnalyticsData> {
    try {
        const res = await fetch(ADMIN_API.analytics.list, {
            credentials: "include",
            headers: {
                "Accept": "application/json",
            },
        });

        if (!res.ok) {
            const error = await res.json() as AnalyticsError;
            if (res.status === 401) {
                throw new Error(ANALYTICS_ERRORS.UNAUTHORIZED);
            }
            throw new Error(error.message || ANALYTICS_ERRORS.FETCH_FAILED);
        }

        const data = await res.json();
        return {
            ...data,
            lastUpdated: new Date().toISOString(),
        } as AnalyticsData;
    } catch (error) {
        console.error("Analytics service error:", error);
        if (error instanceof Error) {
            throw error;
        }
        throw new Error(ANALYTICS_ERRORS.NETWORK_ERROR);
    }
}

/**
 * Track a page view
 */
export async function trackPageView(path: string): Promise<void> {
    try {
        const res = await fetch(ADMIN_API.analytics.trackPage, {
            method: "POST",
            credentials: "include",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({ path }),
        });

        if (!res.ok) {
            const error = await res.json() as AnalyticsError;
            if (res.status === 401) {
                throw new Error(ANALYTICS_ERRORS.UNAUTHORIZED);
            }
            throw new Error(error.message || ANALYTICS_ERRORS.TRACK_FAILED);
        }
    } catch (error) {
        console.error("Analytics service error:", error);
        if (error instanceof Error) {
            throw error;
        }
        throw new Error(ANALYTICS_ERRORS.NETWORK_ERROR);
    }
}

/**
 * Track a custom event
 * @param event - Name of the event to track
 * @param data - Optional event data with type-safe values
 */
export async function trackEvent(event: string, data?: Record<string, EventDataValue>): Promise<void> {
    try {
        const res = await fetch(ADMIN_API.analytics.trackEvent, {
            method: "POST",
            credentials: "include",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({ event, data }),
        });

        if (!res.ok) {
            const error = await res.json() as AnalyticsError;
            if (res.status === 401) {
                throw new Error(ANALYTICS_ERRORS.UNAUTHORIZED);
            }
            throw new Error(error.message || ANALYTICS_ERRORS.TRACK_FAILED);
        }
    } catch (error) {
        console.error("Analytics service error:", error);
        if (error instanceof Error) {
            throw error;
        }
        throw new Error(ANALYTICS_ERRORS.NETWORK_ERROR);
    }
}

/**
 * Fetch telemetry data for the admin dashboard
 */
export async function fetchTelemetry(): Promise<TelemetryData> {
    try {
        const res = await fetch(ADMIN_API.analytics.telemetry, {
            credentials: "include",
            headers: {
                "Accept": "application/json",
            },
        });

        if (!res.ok) {
            const error = await res.json() as AnalyticsError;
            if (res.status === 401) {
                throw new Error(ANALYTICS_ERRORS.UNAUTHORIZED);
            }
            throw new Error(error.message || ANALYTICS_ERRORS.FETCH_FAILED);
        }

        const data = await res.json();
        return {
            ...data,
            lastUpdated: new Date().toISOString(),
        } as TelemetryData;
    } catch (error) {
        console.error("Analytics service error:", error);
        if (error instanceof Error) {
            throw error;
        }
        throw new Error(ANALYTICS_ERRORS.NETWORK_ERROR);
    }
}

================
File: portfolio.next/src/services/authService.ts
================
import { AUTH_API } from "@/lib/constants";
import { User } from "@/models/User";

/**
 * Interface representing the response from authentication checks.
 */
export interface AuthResponse {
  /**
   * Whether the user is authenticated.
   */
  authenticated: boolean;
  /**
   * The authenticated user, or null if not authenticated.
   */
  user: User | null;
  /**
   * Optional message providing additional context.
   */
  message?: string;
}

/**
 * Interface for login credentials
 */
export interface LoginCredentials {
  /**
   * The username for login.
   */
  username: string;
  /**
   * The password for login.
   */
  password: string;
}

/**
 * Login user with credentials
 */
export async function login(credentials: LoginCredentials): Promise<AuthResponse> {
  try {
    const res = await fetch(AUTH_API.auth.login, {
      method: "POST",
      credentials: "include",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(credentials),
    });

    if (!res.ok) {
      const error = await res.json();
      throw new Error(error.message || "Login failed");
    }

    return res.json();
  } catch (error) {
    console.error("Login failed:", error);
    throw error;
  }
}

/**
 * Check authentication status
 */
export async function checkAuthStatus(): Promise<AuthResponse> {
  try {
    const res = await fetch(AUTH_API.auth.status, {
      method: "GET",
      credentials: "include"
    });

    if (!res.ok) {
      return { authenticated: false, user: null };
    }

    const data = await res.json();
    return {
      authenticated: true,
      user: data.user,
    };
  } catch (error) {
    console.error("Auth check failed:", error);
    return { authenticated: false, user: null, message: "Auth check failed" };
  }
}

/**
 * Logout current user
 */
export async function logout(): Promise<void> {
  try {
    const res = await fetch(AUTH_API.auth.logout, {
      method: "POST",
      credentials: "include",
    });

    if (!res.ok) {
      const error = await res.json();
      throw new Error(error.message || "Logout failed");
    }
  } catch (error) {
    console.error("Logout failed:", error);
    throw error;
  }
}

================
File: portfolio.next/src/services/blogService.ts
================
// portfolio.next/src/services/blogService.ts

import { BlogEntry, BlogEntryCreate, BlogEntryUpdate } from "@/models/BlogEntry";
import { PUBLIC_API, ADMIN_API } from "@/lib/constants";

/**
 * Fetches all blog entries
 */
export async function fetchBlogEntries(isAdmin: boolean = false, cookieHeader : string | null = null): Promise<BlogEntry[]> {
  try {
    const url = isAdmin ? ADMIN_API.blog.list : PUBLIC_API.blog.list;

    const headers: HeadersInit = cookieHeader
    ? { Cookie: cookieHeader } // Pass cookies for SSR requests
    : {};

    const response = await fetch(url, {
      credentials: "include",
      headers,
      cache: "no-store",
    });

    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.message || "Failed to fetch blog entries");
    }
    return await response.json();
  } catch (err) {
    console.error("Failed to fetch blog entries:", err);
    throw err;
  }
}

/**
 * Fetches a single blog entry by ID
 */
export async function fetchBlogEntry(id: string): Promise<BlogEntry> {
  try {
    const response = await fetch(PUBLIC_API.blog.get(id), {
      credentials: "include",
    });

    if (!response.ok) {
      throw new Error("Failed to fetch blog entry");
    }

    return await response.json();
  } catch (err) {
    console.error("Failed to fetch blog entry:", err);
    throw err;
  }
}

/**
 * Creates a new blog entry
 */
export async function createBlogEntry(blog: BlogEntryCreate): Promise<BlogEntry> {
  try {
    const response = await fetch(ADMIN_API.blog.create, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      credentials: "include",
      body: JSON.stringify(blog),
    });

    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.message || "Failed to create blog entry");
    }

    return await response.json();
  } catch (err) {
    console.error("Failed to create blog entry:", err);
    throw err;
  }
}

/**
 * Updates an existing blog entry
 */
export async function updateBlogEntry(id: string, blog: BlogEntryUpdate): Promise<BlogEntry> {
  try {
    const response = await fetch(ADMIN_API.blog.update(id), {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
      credentials: "include",
      body: JSON.stringify(blog),
    });

    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.message || "Failed to update blog entry");
    }

    return await response.json();
  } catch (err) {
    console.error("Failed to update blog entry:", err);
    throw err;
  }
}

/**
 * Deletes a blog entry
 */
export async function deleteBlogEntry(id: string): Promise<void> {
  try {
    const response = await fetch(ADMIN_API.blog.delete(id), {
      method: "DELETE",
      credentials: "include",
    });

    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.message || "Failed to delete blog entry");
    }
  } catch (err) {
    console.error("Failed to delete blog entry:", err);
    throw err;
  }
}

================
File: portfolio.next/src/services/careerService.ts
================
import { PUBLIC_API, ADMIN_API } from '@/lib/constants';
import { CareerEntry } from '@/models/CareerEntry';

/**
 * Interface for LinkedIn parse result
 */
export interface LinkedInParseResult {
    title: string;
    company: string;
    location: string;
    startDate: string;
    endDate: string | null;
    description: string;
}

/**
 * Fetch all career entries
 */
export async function fetchCareerTimeline(): Promise<CareerEntry[]> {
    try {
        const res = await fetch(PUBLIC_API.career.list, {
            credentials: "include",
        });

        if (!res.ok) {
            const error = await res.json();
            throw new Error(error.message || "Failed to fetch career timeline");
        }

        return res.json();
    } catch (error) {
        console.error("Failed to fetch career timeline:", error);
        throw error;
    }
}

/**
 * Fetch a career entry by ID
 */
export async function fetchCareerEntry(id: string): Promise<CareerEntry> {
    try {
        const res = await fetch(PUBLIC_API.career.get(id), {
            credentials: "include",
        });

        if (!res.ok) {
            const error = await res.json();
            throw new Error(error.message || "Failed to fetch career entry");
        }

        return res.json();
    } catch (error) {
        console.error("Failed to fetch career entry:", error);
        throw error;
    }
}

/**
 * Save (create or update) a career entry
 */
export async function saveCareerEntry(entry: Partial<CareerEntry> & { _id?: string }): Promise<CareerEntry> {
    try {
        if (entry._id) {
            // Update existing entry
            const res = await fetch(ADMIN_API.career.update(entry._id), {
                method: "PUT",
                credentials: "include",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(entry),
            });

            if (!res.ok) {
                const error = await res.json();
                throw new Error(error.message || "Failed to update career entry");
            }

            return res.json();
        } else {
            // Create new entry
            const res = await fetch(ADMIN_API.career.create, {
                method: "POST",
                credentials: "include",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(entry),
            });

            if (!res.ok) {
                const error = await res.json();
                throw new Error(error.message || "Failed to create career entry");
            }

            return res.json();
        }
    } catch (error) {
        console.error("Failed to save career entry:", error);
        throw error;
    }
}

/**
 * Delete a career entry
 */
export async function deleteCareerEntry(id: string): Promise<void> {
    try {
        const res = await fetch(ADMIN_API.career.delete(id), {
            method: "DELETE",
            credentials: "include",
        });

        if (!res.ok) {
            const error = await res.json();
            throw new Error(error.message || "Failed to delete career entry");
        }
    } catch (error) {
        console.error("Failed to delete career entry:", error);
        throw error;
    }
}

/**
 * Parse LinkedIn HTML data on the backend
 */
export async function parseLinkedInHTMLBackend(rawHTML: string): Promise<LinkedInParseResult[]> {
    try {
        const res = await fetch(ADMIN_API.career.parseLinkedIn, {
            method: "POST",
            credentials: "include",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({ rawHTML }),
        });

        if (!res.ok) {
            const error = await res.json();
            throw new Error(error.message || "Failed to parse LinkedIn data");
        }

        return res.json();
    } catch (error) {
        console.error("Failed to parse LinkedIn data:", error);
        throw error;
    }
}

/**
 * Save parsed LinkedIn jobs to the backend
 */
export async function saveParsedJobs(jobs: LinkedInParseResult[]): Promise<CareerEntry[]> {
    try {
        const res = await fetch(ADMIN_API.career.bulkImport, {
            method: "POST",
            credentials: "include",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(jobs),
        });

        if (!res.ok) {
            const error = await res.json();
            throw new Error(error.message || "Failed to save parsed jobs");
        }

        return res.json();
    } catch (error) {
        console.error("Failed to save parsed jobs:", error);
        throw error;
    }
}

================
File: portfolio.next/src/services/commentService.ts
================
import { AUTH_API, ADMIN_API } from '@/lib/constants';
import { Comment, CommentUpdate, CommentCreate } from '@/models/Comment';

/**
 * Fetch all comments for admin management
 */
export async function fetchAllComments(): Promise<Comment[]> {
  try {
    const res = await fetch(ADMIN_API.comment.list, {
      credentials: "include",
    });

    if (!res.ok) {
      const error = await res.json();
      throw new Error(error.message || "Failed to fetch comments");
    }

    return res.json();
  } catch (err) {
    console.error("Failed to fetch comments:", err);
    throw err;
  }
}

/**
 * Redact a comment by its ID (admin only)
 */
export async function redactComment(id: string): Promise<void> {
  try {
    const res = await fetch(ADMIN_API.comment.delete(id), {
      method: "DELETE",
      credentials: "include",
    });

    if (!res.ok) {
      const error = await res.json();
      throw new Error(error.message || "Failed to redact comment");
    }
  } catch (err) {
    console.error("Failed to redact comment:", err);
    throw err;
  }
}

/**
 * Create a new comment or reply (auth required)
 */
export async function createComment(comment: CommentCreate): Promise<Comment> {
  try {
    const res = await fetch(AUTH_API.comment.create, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      credentials: "include",
      body: JSON.stringify(comment),
    });

    if (!res.ok) {
      const error = await res.json();
      throw new Error(error.message || "Failed to create comment");
    }

    return res.json();
  } catch (err) {
    console.error("Failed to create comment:", err);
    throw err;
  }
}

/**
 * Update a user's own comment (auth required)
 */
export async function updateComment(id: string, update: CommentUpdate): Promise<Comment> {
  try {
    const res = await fetch(AUTH_API.comment.update(id), {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
      credentials: "include",
      body: JSON.stringify(update),
    });

    if (!res.ok) {
      const error = await res.json();
      throw new Error(error.message || "Failed to update comment");
    }

    return res.json();
  } catch (err) {
    console.error("Failed to update comment:", err);
    throw err;
  }
}

/**
 * Delete a user's own comment (auth required)
 */
export async function deleteComment(id: string): Promise<void> {
  try {
    const res = await fetch(AUTH_API.comment.delete(id), {
      method: "DELETE",
      credentials: "include",
    });

    if (!res.ok) {
      const error = await res.json();
      throw new Error(error.message || "Failed to delete comment");
    }
  } catch (err) {
    console.error("Failed to delete comment:", err);
    throw err;
  }
}

================
File: portfolio.next/src/services/fileService.ts
================
import { PUBLIC_API, ADMIN_API } from '@/lib/constants';
import { FileInfo } from '@/models/FileInfo';

/**
 * Fetch files with optional filtering
 */
export async function fetchFiles(entityId?: string, context?: string): Promise<FileInfo[]> {
    try {
        const url = new URL(PUBLIC_API.file.list);
        if (entityId) url.searchParams.append("entityId", entityId);
        if (context) url.searchParams.append("context", context);

        const res = await fetch(url.toString(), {
            credentials: "include", // Include for potential admin access
        });

        if (!res.ok) {
            const error = await res.json();
            throw new Error(error.message || "Failed to fetch files");
        }

        return res.json();
    } catch (error) {
        console.error("Failed to fetch files:", error);
        throw error;
    }
}

/**
 * Upload a file with metadata
 */
export async function uploadFile(
    file: File,
    entityId: string,
    context: string,
    isPublic: boolean = false
): Promise<FileInfo> {
    try {
        const formData = new FormData();
        formData.append("file", file);
        formData.append("entityId", entityId);
        formData.append("context", context);
        formData.append("isPublic", isPublic.toString());

        const url = new URL(ADMIN_API.file.upload);
        url.searchParams.append("entityId", entityId);
        url.searchParams.append("context", context);
        url.searchParams.append("isPublic", isPublic.toString());

        const res = await fetch(url.toString(), {
            method: "POST",
            credentials: "include",
            body: formData,
        });

        if (!res.ok) {
            const error = await res.json();
            throw new Error(error.message || "Failed to upload file");
        }

        return res.json();
    } catch (error) {
        console.error("Failed to upload file:", error);
        throw error;
    }
}

/**
 * Update file metadata
 */
export async function updateFile(id: string, metadata: Partial<FileInfo>): Promise<FileInfo> {
    try {
        const res = await fetch(ADMIN_API.file.update(id), {
            method: "PUT",
            credentials: "include",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(metadata),
        });

        if (!res.ok) {
            const error = await res.json();
            throw new Error(error.message || "Failed to update file");
        }

        return res.json();
    } catch (error) {
        console.error("Failed to update file:", error);
        throw error;
    }
}

/**
 * Delete a file
 */
export async function deleteFile(id: string): Promise<void> {
    try {
        const res = await fetch(ADMIN_API.file.delete(id), {
            method: "DELETE",
            credentials: "include",
        });

        if (!res.ok) {
            const error = await res.json();
            throw new Error(error.message || "Failed to delete file");
        }
    } catch (error) {
        console.error("Failed to delete file:", error);
        throw error;
    }
}

================
File: portfolio.next/src/services/homePageService.ts
================
// services/homePageService.ts
import { BlogEntry } from '@/models/BlogEntry';
import { Project } from '@/models/Project';
import { PUBLIC_API } from '@/lib/constants';

/**
 * Get home page data including blogs and projects
 */
export async function getHomePageData(): Promise<{ blogEntries: BlogEntry[]; projects: Project[] }> {
  try {
    const [blogsRes, projectsRes] = await Promise.all([
      fetch(PUBLIC_API.blog.list, {
        credentials: "include",
      }),
      fetch(PUBLIC_API.project.list, {
        credentials: "include",
      })
    ]);

    if (!blogsRes.ok || !projectsRes.ok) {
      const error = !blogsRes.ok ? await blogsRes.json() : await projectsRes.json();
      throw new Error(error.message || "Failed to fetch homepage data");
    }

    const [blogEntries, projects] = await Promise.all([
      blogsRes.json(),
      projectsRes.json()
    ]);

    return { blogEntries, projects };
  } catch (error) {
    console.error("Failed to fetch homepage data:", error);
    throw error;
  }
}

================
File: portfolio.next/src/services/pageService.ts
================
import { PUBLIC_API, ADMIN_API } from "@/lib/constants";
import { Page } from "@/models/Page";

/**
 * Fetch a page by slug
 */
export async function fetchPageBySlug(slug: string, fromCache: boolean = true): Promise<Page> {
    try {
        const res = await fetch(`${PUBLIC_API.page.list}/slug/${slug}`, {
            credentials: "include", // Include for potential admin access
            ...(fromCache ? {} : { cache: "no-store" }),
        });

        if (!res.ok) {
            const error = await res.json();
            throw new Error(error.message || "Failed to fetch page");
        }

        return res.json();
    } catch (error) {
        console.error("Failed to fetch page:", error);
        throw error;
    }
}

/**
 * Fetch all pages
 */
export async function fetchPages(): Promise<Page[]> {
    try {
        const res = await fetch(PUBLIC_API.page.list, {
            credentials: "include", // Include for potential admin access
        });

        if (!res.ok) {
            const error = await res.json();
            throw new Error(error.message || "Failed to fetch pages");
        }

        return res.json();
    } catch (error) {
        console.error("Failed to fetch pages:", error);
        throw error;
    }
}

/**
 * Create a new page
 */
export async function createPage(page: Omit<Page, '_id'>): Promise<Page> {
    try {
        const res = await fetch(ADMIN_API.page.create, {
            method: "POST",
            credentials: "include",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(page),
        });

        if (!res.ok) {
            const error = await res.json();
            throw new Error(error.message || "Failed to create page");
        }

        return res.json();
    } catch (error) {
        console.error("Failed to create page:", error);
        throw error;
    }
}

/**
 * Update an existing page
 */
export async function updatePage(id: string, page: Partial<Page>): Promise<Page> {
    try {
        const res = await fetch(ADMIN_API.page.update(id), {
            method: "PUT",
            credentials: "include",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(page),
        });

        if (!res.ok) {
            const error = await res.json();
            throw new Error(error.message || "Failed to update page");
        }

        return res.json();
    } catch (error) {
        console.error("Failed to update page:", error);
        throw error;
    }
}

/**
 * Delete a page
 */
export async function deletePage(id: string): Promise<void> {
    try {
        const res = await fetch(ADMIN_API.page.delete(id), {
            method: "DELETE",
            credentials: "include",
        });

        if (!res.ok) {
            const error = await res.json();
            throw new Error(error.message || "Failed to delete page");
        }
    } catch (error) {
        console.error("Failed to delete page:", error);
        throw error;
    }
}

================
File: portfolio.next/src/services/projectService.ts
================
// portfolio.next/src/services/projectService.ts
import { Project, ProjectCreate } from "@/models/Project";
import { PUBLIC_API, ADMIN_API } from "@/lib/constants";

/**
 * Fetch a project by ID
 */
export async function fetchProject(id: string): Promise<Project> {
    try {
        const res = await fetch(PUBLIC_API.project.get(id), {
            credentials: "include", // Include for potential admin access
        });

        if (!res.ok) {
            const error = await res.json();
            throw new Error(error.message || "Failed to fetch project");
        }

        return res.json();
    } catch (error) {
        console.error("Failed to fetch project:", error);
        throw error;
    }
}

/**
 * Fetch all projects
 */
export async function fetchProjects(): Promise<Project[]> {
    try {
        const res = await fetch(PUBLIC_API.project.list, {
            credentials: "include", // Include for potential admin access
        });

        if (!res.ok) {
            const error = await res.json();
            throw new Error(error.message || "Failed to fetch projects");
        }

        return res.json();
    } catch (error) {
        console.error("Failed to fetch projects:", error);
        throw error;
    }
}

/**
 * Create a new project
 */
export async function createProject(projectData: ProjectCreate): Promise<Project> {
    try {
        const res = await fetch(ADMIN_API.project.create, {
            method: "POST",
            credentials: "include",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                ...projectData,
                status: projectData.status || 'planned',
                technologies: projectData.technologies || []
            }),
        });

        if (!res.ok) {
            const error = await res.json();
            throw new Error(error.message || "Failed to create project");
        }

        return res.json();
    } catch (error) {
        console.error("Failed to create project:", error);
        throw error;
    }
}

/**
 * Update an existing project
 */
export async function updateProject(id: string, projectData: Partial<Project>): Promise<Project> {
    try {
        const res = await fetch(ADMIN_API.project.update(id), {
            method: "PUT",
            credentials: "include",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(projectData),
        });

        if (!res.ok) {
            const error = await res.json();
            throw new Error(error.message || "Failed to update project");
        }

        return res.json();
    } catch (error) {
        console.error("Failed to update project:", error);
        throw error;
    }
}

/**
 * Delete a project
 */
export async function deleteProject(id: string): Promise<void> {
    try {
        const res = await fetch(ADMIN_API.project.delete(id), {
            method: "DELETE",
            credentials: "include",
        });

        if (!res.ok) {
            const error = await res.json();
            throw new Error(error.message || "Failed to delete project");
        }
    } catch (error) {
        console.error("Failed to delete project:", error);
        throw error;
    }
}

/**
 * Archive a project
 */
export async function archiveProject(id: string): Promise<void> {
    try {
        const res = await fetch(ADMIN_API.project.archive(id), {
            method: "PUT",
            credentials: "include",
        });

        if (!res.ok) {
            const error = await res.json();
            throw new Error(error.message || "Failed to archive project");
        }
    } catch (error) {
        console.error("Failed to archive project:", error);
        throw error;
    }
}

/**
 * Search for projects
 */
export async function searchProjects(query: string): Promise<Project[]> {
    try {
        const res = await fetch(PUBLIC_API.project.search(query), {
            credentials: "include", // Include for potential admin access
        });

        if (!res.ok) {
            const error = await res.json();
            throw new Error(error.message || "Failed to search projects");
        }

        return res.json();
    } catch (error) {
        console.error("Failed to search projects:", error);
        throw error;
    }
}

================
File: portfolio.next/src/services/providerConfigService.ts
================
// portfolio.next/src/services/providerConfigService.ts

import { ADMIN_API } from '@/lib/constants';
import { ProviderConfig } from '@/models/ProviderConfig';

/**
 * Fetch provider configuration
 */
export async function fetchProviderConfig(provider: string): Promise<ProviderConfig> {
    try {
        const res = await fetch(ADMIN_API.providerConfig.get(provider), {
            credentials: "include",
        });

        if (!res.ok) {
            const error = await res.json();
            throw new Error(error.message || "Failed to fetch provider configuration");
        }

        return res.json();
    } catch (error) {
        console.error("Failed to fetch provider configuration:", error);
        throw error;
    }
}

/**
 * Fetch provider configuration
 */
export async function fetchProviderConfigs(): Promise<ProviderConfig[]> {
    try {
        const res = await fetch(ADMIN_API.providerConfig.list, {
            credentials: "include",
        });

        if (!res.ok) {
            const error = await res.json();
            throw new Error(error.message || "Failed to fetch provider configuration");
        }

        return res.json();
    } catch (error) {
        console.error("Failed to fetch provider configuration:", error);
        throw error;
    }
}

/**
 * Create a new provider configuration
 */
export async function createProviderConfig(config: Omit<ProviderConfig, '_id'>): Promise<ProviderConfig> {
    try {
        const res = await fetch(ADMIN_API.providerConfig.create, {
            method: "POST",
            credentials: "include",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(config),
        });

        if (!res.ok) {
            const error = await res.json();
            throw new Error(error.message || "Failed to create provider configuration");
        }

        return res.json();
    } catch (error) {
        console.error("Failed to create provider configuration:", error);
        throw error;
    }
}

/**
 * Update an existing provider configuration
 */
export async function updateProviderConfig(id: string, config: Partial<ProviderConfig>): Promise<ProviderConfig> {
    try {
        const res = await fetch(ADMIN_API.providerConfig.update(id), {
            method: "PUT",
            credentials: "include",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(config),
        });

        if (!res.ok) {
            const error = await res.json();
            throw new Error(error.message || "Failed to update provider configuration");
        }

        return res.json();
    } catch (error) {
        console.error("Failed to update provider configuration:", error);
        throw error;
    }
}

/**
 * Delete a provider configuration
 */
export async function deleteProviderConfig(id: string): Promise<void> {
    try {
        const res = await fetch(ADMIN_API.providerConfig.delete(id), {
            method: "DELETE",
            credentials: "include",
        });

        if (!res.ok) {
            const error = await res.json();
            throw new Error(error.message || "Failed to delete provider configuration");
        }
    } catch (error) {
        console.error("Failed to delete provider configuration:", error);
        throw error;
    }
}

================
File: portfolio.next/src/services/userService.ts
================
// portfolio.next/src/services/userService.ts

import { ADMIN_API } from "@/lib/constants";
import { User, UserCreate } from "@/models/User";

/**
 * Fetch all users
 */
export async function fetchUsers(): Promise<User[]> {
    try {
        const response = await fetch(ADMIN_API.user.list, {
            credentials: "include",
        });

        if (!response.ok) {
            const error = await response.json();
            throw new Error(error.message || "Failed to fetch users");
        }

        return response.json();
    } catch (error) {
        console.error("Failed to fetch users:", error);
        throw error;
    }
}

/**
 * Create a new user
 */
export async function createUser(user: UserCreate): Promise<User> {
    try {
        const response = await fetch(ADMIN_API.user.create, {
            method: "POST",
            credentials: "include",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(user),
        });

        if (!response.ok) {
            const error = await response.json();
            throw new Error(error.message || "Failed to create user");
        }

        return response.json();
    } catch (error) {
        console.error("Failed to create user:", error);
        throw error;
    }
}

/**
 * Update an existing user
 */
export async function updateUser(id: string, user: Partial<User>): Promise<User> {
    try {
        const response = await fetch(ADMIN_API.user.update(id), {
            method: "PUT",
            credentials: "include",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(user),
        });

        if (!response.ok) {
            const error = await response.json();
            throw new Error(error.message || "Failed to update user");
        }

        return response.json();
    } catch (error) {
        console.error("Failed to update user:", error);
        throw error;
    }
}

/**
 * Update user admin status
 */
export async function updateUserAdmin(id: string, isAdmin: boolean): Promise<User> {
    try {
        const response = await fetch(ADMIN_API.user.updateAdmin(id), {
            method: "PUT",
            credentials: "include",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({ isAdmin }),
        });

        if (!response.ok) {
            const error = await response.json();
            throw new Error(error.message || "Failed to update user admin status");
        }

        return response.json();
    } catch (error) {
        console.error("Failed to update user admin status:", error);
        throw error;
    }
}

/**
 * Delete a user
 */
export async function deleteUser(id: string): Promise<void> {
    try {
        const response = await fetch(ADMIN_API.user.delete(id), {
            method: "DELETE",
            credentials: "include",
        });

        if (!response.ok) {
            const error = await response.json();
            throw new Error(error.message || "Failed to delete user");
        }
    } catch (error) {
        console.error("Failed to delete user:", error);
        throw error;
    }
}

================
File: portfolio.next/tailwind.config.ts
================
import type { Config } from "tailwindcss";

export default {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        background: "var(--background)",
        foreground: "var(--foreground)",
      },
    },
  },
  plugins: [require("@tailwindcss/typography")], // Add this line
} satisfies Config;

================
File: portfolio.next/tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": [
        "./src/*"
      ]
    },
    "types": [
      "jest",
      "node"
    ]
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts",
    "jest.config.ts",
    "next.config.js",
    "jest.setup.ts"
, "src/app/admin/page.tsx.old"  ],
  "exclude": [
    "node_modules"
  ]
}

================
File: portfolio.next/tsconfig.test.json
================
{
    "compilerOptions": {
      "target": "ES2017",
      "lib": ["dom", "dom.iterable", "esnext"],
      "allowJs": true,
      "skipLibCheck": true,
      "strict": true,
      "noEmit": true,
      "esModuleInterop": true,
      "module": "esnext",
      "moduleResolution": "bundler",
      "resolveJsonModule": true,
      "isolatedModules": true,
      "jsx": "react-jsx", // <-- Changed from "preserve" to "react-jsx"
      "incremental": true,
      "plugins": [
        {
          "name": "next"
        }
      ],
      "paths": {
        "@/*": ["./src/*"]
      },
      "types": ["jest", "node"]
    },
    "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts", "jest.config.js"],
    "exclude": ["node_modules"]
  }

================
File: portfolio.node/__tests__/app.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const app = require('../../src/app');



describe('app.js', () => {
    test('should be defined', () => {
        expect(app).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof app).toBe('object' || 'function');
    });

    if (typeof app === 'object' && app !== null) {
        Object.keys(app).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof app[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/authServices.test.js
================
// portfolio.node/__tests__/authService.test.js
jest.setTimeout(30000); // Extend timeout for database operations

const mongoose = require('mongoose');
const { MongoMemoryServer } = require('mongodb-memory-server');
const authService = require('../src/services/authService');
const User = require('../src/models/User');

let mongoServer;

beforeAll(async () => {
  // Start an in-memory MongoDB instance
  mongoServer = await MongoMemoryServer.create();
  const uri = mongoServer.getUri();
  await mongoose.connect(uri);
});

afterAll(async () => {
  // Drop the database and disconnect
  await mongoose.connection.dropDatabase();
  await mongoose.disconnect();
  await mongoServer.stop();
});

describe('Auth Service', () => {
  it('should register a new user', async () => {
    const user = await authService.registerUser({ username: 'testuser', password: 'testpass' });
    expect(user.username).toBe('testuser');
  });

  it('should not allow duplicate user registration', async () => {
    // Register a user first
    await authService.registerUser({ username: 'dupuser', password: 'testpass' });
    // Attempt duplicate registration should throw an error
    await expect(
      authService.registerUser({ username: 'dupuser', password: 'testpass' })
    ).rejects.toThrow('User already exists');
  });

  it('should login a user and return a token', async () => {
    await authService.registerUser({ username: 'loginuser', password: 'testpass' });
    const token = await authService.loginUser({ username: 'loginuser', password: 'testpass' });
    expect(token).toBeDefined();
    expect(typeof token).toBe('string');
  });

  it('should throw an error for invalid login credentials', async () => {
    await expect(
      authService.loginUser({ username: 'nonexistent', password: 'testpass' })
    ).rejects.toThrow('Invalid credentials');
  });

  it('should verify a valid token', async () => {
    await authService.registerUser({ username: 'verifyuser', password: 'testpass' });
    const token = await authService.loginUser({ username: 'verifyuser', password: 'testpass' });
    const decoded = authService.verifyToken(token);
    expect(decoded.username).toBe('verifyuser');
  });

  it('should throw an error for an invalid token', () => {
    expect(() => authService.verifyToken('invalidtoken')).toThrow('Invalid token');
  });
});

================
File: portfolio.node/__tests__/blogService.test.js
================
// portfolio.node/__tests__/blogService.test.js
const mongoose = require("mongoose");
const { MongoMemoryServer } = require("mongodb-memory-server");
const BlogEntry = require("../src/models/BlogEntry");
const blogService = require("../src/services/blogService");

beforeAll(async () => {
    // Create an in-memory MongoDB instance
    mongoServer = await MongoMemoryServer.create();
    const uri = mongoServer.getUri();
    await mongoose.connect(uri);
  });
  
afterAll(async () => {
    // Drop the test database and disconnect
    await mongoose.connection.dropDatabase();
    await mongoose.disconnect();
    await mongoServer.stop();
});
  
describe("Blog Service", () => {
  it("should create a new blog entry", async () => {
    const data = {
      title: "Test Blog",
      date: "2025-02-22",
      excerpt: "Test excerpt",
      body: "Test body content",
    };
    const blogEntry = await blogService.createBlogEntry(data);
    expect(blogEntry.title).toBe("Test Blog");
    expect(blogEntry.excerpt).toBe("Test excerpt");
  });

  // Additional tests for getAllBlogEntries, getBlogEntryById, etc.
});

================
File: portfolio.node/__tests__/blogValidation.test.js
================
// portfolio.node/__tests__/blogValidation.test.js
const request = require("supertest");
const express = require("express");
const bodyParser = require("express").json;
const validate = require("../src/middlewares/validate");
const { createBlogSchema } = require("../src/validators/blogValidator");

const app = express();
app.use(bodyParser());
// Set up a dummy endpoint that uses the validation middleware.
app.post("/test", validate(createBlogSchema), (req, res) => {
  res.status(200).json({ success: true });
});

describe("Blog Validation Middleware", () => {
  it("should pass validation for valid data", async () => {
    const validData = {
      title: "A Valid Blog Title",
      publishAt: "2025-02-22T00:00:00.000Z",
      excerpt: "This is a valid excerpt.",
      body: "This is the body of the blog.",
    };

    const res = await request(app).post("/test").send(validData);
    expect(res.statusCode).toBe(200);
    expect(res.body.success).toBe(true);
  });

  it("should fail validation for invalid data", async () => {
    const invalidData = {
      title: "No", // Too short
      publishAt: "invalid-date",
      excerpt: "x".repeat(600), // Too long
      body: "", // Empty body
    };

    const res = await request(app).post("/test").send(invalidData);
    expect(res.statusCode).toBe(400);
    expect(res.body.error).toBeDefined();
  });
});

================
File: portfolio.node/__tests__/cache.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const cache = require('../../src/cache');



describe('cache.js', () => {
    test('should be defined', () => {
        expect(cache).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof cache).toBe('object' || 'function');
    });

    if (typeof cache === 'object' && cache !== null) {
        Object.keys(cache).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof cache[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/commentRoutes.test.js
================
// portfolio.node/__tests__/commentRoutes.test.js
const request = require("supertest");
const mongoose = require("mongoose");
const { MongoMemoryServer } = require("mongodb-memory-server");
const { createApp } = require("../src/app");

let app;
let mongoServer;

beforeAll(async () => {
  // Start in-memory MongoDB instance
  mongoServer = await MongoMemoryServer.create();
  const uri = mongoServer.getUri();
  process.env.MONGO_URI = uri;
  app = await createApp();
});

afterAll(async () => {
  await mongoose.connection.dropDatabase();
  await mongoose.disconnect();
  await mongoServer.stop();
});

describe("Comment Routes", () => {
  let createdCommentId;
  // Create a dummy blog ID for testing
  const blogId = new mongoose.Types.ObjectId();

  test("POST /api/comments creates a new comment", async () => {
    const res = await request(app)
      .post("/api/comments")
      .send({
        author: "Test Author",
        text: "This is a test comment",
        blog: blogId.toString(),
      });
    expect(res.statusCode).toBe(201);
    expect(res.body.author).toBe("Test Author");
    createdCommentId = res.body._id;
  });

  test("GET /api/comments/blog/:blogId retrieves comments with nested replies", async () => {
    const res = await request(app)
      .get(`/api/comments/blog/${blogId.toString()}`)
      .send();
    expect(res.statusCode).toBe(200);
    expect(Array.isArray(res.body)).toBe(true);
    // We should retrieve at least the comment we just created
    expect(res.body.length).toBeGreaterThanOrEqual(1);
  });

  test("PUT /api/comments/:id updates a comment (auth required)", async () => {
    const res = await request(app)
      .put(`/api/comments/${createdCommentId}`)
      .set("Cookie", "session=dummy") // Set dummy cookie to bypass auth middleware
      .send({ text: "Updated comment text" });
    expect(res.statusCode).toBe(200);
    expect(res.body.text).toBe("Updated comment text");
  });

  test("DELETE /api/comments/:id redacts a comment (auth required)", async () => {
    const res = await request(app)
      .delete(`/api/comments/${createdCommentId}`)
      .set("Cookie", "session=dummy") // Set dummy cookie to bypass auth middleware
      .send();
    expect(res.statusCode).toBe(200);
    expect(res.body.comment.redacted).toBe(true);
  });

  test("Nested replies retrieval returns full tree", async () => {
    // Create a root comment.
    const rootRes = await request(app)
      .post("/api/comments")
      .send({
        author: "Root Author",
        text: "Root comment",
        blog: blogId.toString()
      });
    const rootId = rootRes.body._id;
  
    // Create first-level reply.
    const reply1Res = await request(app)
      .post("/api/comments")
      .send({
        author: "Reply1",
        text: "First reply",
        blog: blogId.toString(),
        parent: rootId
      });
    const reply1Id = reply1Res.body._id;
  
    // Create second-level reply (reply to first-level reply).
    await request(app)
      .post("/api/comments")
      .send({
        author: "Reply2",
        text: "Second level reply",
        blog: blogId.toString(),
        parent: reply1Id
      });
  
    // Fetch comments and verify nested structure.
    const res = await request(app).get(`/api/comments/blog/${blogId.toString()}`).send();
    expect(res.statusCode).toBe(200);
    const rootComment = res.body.find((c) => c._id === rootId);
    expect(rootComment).toBeDefined();
    expect(rootComment.replies).toHaveLength(1);
    expect(rootComment.replies[0]._id).toBe(reply1Id);
    expect(rootComment.replies[0].replies).toHaveLength(1);
  });
  
  test("POST /api/comments returns error for non-existent parent", async () => {
    const fakeParentId = "000000000000000000000000"; // Valid ObjectId format but non-existent.
    const res = await request(app)
      .post("/api/comments")
      .send({
        author: "Test",
        text: "Should fail",
        blog: blogId.toString(),
        parent: fakeParentId
      });
    expect(res.statusCode).toBe(400);
    expect(res.body.error).toMatch(/Parent comment not found/);
  });
  
});

================
File: portfolio.node/__tests__/config/db.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const db = require('../../src/config/db');



describe('config/db.js', () => {
    test('should be defined', () => {
        expect(db).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof db).toBe('object' || 'function');
    });

    if (typeof db === 'object' && db !== null) {
        Object.keys(db).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof db[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/config/passport.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const passport = require('../../src/config/passport');



describe('config/passport.js', () => {
    test('should be defined', () => {
        expect(passport).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof passport).toBe('object' || 'function');
    });

    if (typeof passport === 'object' && passport !== null) {
        Object.keys(passport).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof passport[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/config/swagger.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const swagger = require('../../src/config/swagger');



describe('config/swagger.js', () => {
    test('should be defined', () => {
        expect(swagger).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof swagger).toBe('object' || 'function');
    });

    if (typeof swagger === 'object' && swagger !== null) {
        Object.keys(swagger).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof swagger[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/jest-setup.js
================
const { MongoMemoryServer } = require('mongodb-memory-server');
const mongoose = require('mongoose');
require('dotenv').config({ path: '.env.test' });

let mongoServer;

beforeAll(async () => {
    // Start in-memory MongoDB
    mongoServer = await MongoMemoryServer.create();
    const mongoUri = mongoServer.getUri();
    process.env.MONGO_URI = mongoUri;

    // Connect Mongoose to in-memory database
    await mongoose.connect(mongoUri);

    // Mock external dependencies (Ollama, Qdrant)
    jest.mock('../src/services/ollamaService', () => ({
        generateEmbedding: jest.fn().mockResolvedValue([0.1, 0.2, 0.3]),
    }));

    jest.mock('../src/services/qdrantService', () => ({
        searchVectors: jest.fn().mockResolvedValue([]),
    }));
});

afterAll(async () => {
    await mongoose.disconnect();
    await mongoServer.stop();
});

================
File: portfolio.node/__tests__/jest-setup.test.js
================
describe('Environment Variables', () => {
    it('should load MONGO_URI from .env.test', () => {
      expect(process.env.MONGO_URI).toBeDefined();
      // Optionally, you can check for a specific value
      expect(process.env.MONGO_URI).toBe('mongodb://10.0.0.151:27017/portfolio-test');
    });
  });

================
File: portfolio.node/__tests__/middlewares/admin.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const admin = require('../../src/middlewares/admin');



describe('middlewares/admin.js', () => {
    test('should be defined', () => {
        expect(admin).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof admin).toBe('object' || 'function');
    });

    if (typeof admin === 'object' && admin !== null) {
        Object.keys(admin).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof admin[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/middlewares/auth.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const auth = require('../../src/middlewares/auth');



describe('middlewares/auth.js', () => {
    test('should be defined', () => {
        expect(auth).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof auth).toBe('object' || 'function');
    });

    if (typeof auth === 'object' && auth !== null) {
        Object.keys(auth).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof auth[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/middlewares/metrics.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const metrics = require('../../src/middlewares/metrics');



describe('middlewares/metrics.js', () => {
    test('should be defined', () => {
        expect(metrics).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof metrics).toBe('object' || 'function');
    });

    if (typeof metrics === 'object' && metrics !== null) {
        Object.keys(metrics).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof metrics[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/middlewares/validate.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const validate = require('../../src/middlewares/validate');



describe('middlewares/validate.js', () => {
    test('should be defined', () => {
        expect(validate).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof validate).toBe('object' || 'function');
    });

    if (typeof validate === 'object' && validate !== null) {
        Object.keys(validate).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof validate[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/models/BlogEntry.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const BlogEntry = require('../../src/models/BlogEntry');



describe('models/BlogEntry.js', () => {
    test('should be defined', () => {
        expect(BlogEntry).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof BlogEntry).toBe('object' || 'function');
    });

    if (typeof BlogEntry === 'object' && BlogEntry !== null) {
        Object.keys(BlogEntry).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof BlogEntry[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/models/CareerTimeline.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const CareerTimeline = require('../../src/models/CareerTimeline');



describe('models/CareerTimeline.js', () => {
    test('should be defined', () => {
        expect(CareerTimeline).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof CareerTimeline).toBe('object' || 'function');
    });

    if (typeof CareerTimeline === 'object' && CareerTimeline !== null) {
        Object.keys(CareerTimeline).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof CareerTimeline[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/models/ChatMessage.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const ChatMessage = require('../../src/models/ChatMessage');



describe('models/ChatMessage.js', () => {
    test('should be defined', () => {
        expect(ChatMessage).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof ChatMessage).toBe('object' || 'function');
    });

    if (typeof ChatMessage === 'object' && ChatMessage !== null) {
        Object.keys(ChatMessage).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof ChatMessage[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/models/Comment.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const Comment = require('../../src/models/Comment');



describe('models/Comment.js', () => {
    test('should be defined', () => {
        expect(Comment).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof Comment).toBe('object' || 'function');
    });

    if (typeof Comment === 'object' && Comment !== null) {
        Object.keys(Comment).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof Comment[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/models/Counters.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const Counters = require('../../src/models/Counters');



describe('models/Counters.js', () => {
    test('should be defined', () => {
        expect(Counters).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof Counters).toBe('object' || 'function');
    });

    if (typeof Counters === 'object' && Counters !== null) {
        Object.keys(Counters).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof Counters[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/models/Embedding.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const Embedding = require('../../src/models/Embedding');



describe('models/Embedding.js', () => {
    test('should be defined', () => {
        expect(Embedding).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof Embedding).toBe('object' || 'function');
    });

    if (typeof Embedding === 'object' && Embedding !== null) {
        Object.keys(Embedding).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof Embedding[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/models/Metadata.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const Metadata = require('../../src/models/Metadata');



describe('models/Metadata.js', () => {
    test('should be defined', () => {
        expect(Metadata).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof Metadata).toBe('object' || 'function');
    });

    if (typeof Metadata === 'object' && Metadata !== null) {
        Object.keys(Metadata).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof Metadata[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/models/Page.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const Page = require('../../src/models/Page');



describe('models/Page.js', () => {
    test('should be defined', () => {
        expect(Page).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof Page).toBe('object' || 'function');
    });

    if (typeof Page === 'object' && Page !== null) {
        Object.keys(Page).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof Page[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/models/Project.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const Project = require('../../src/models/Project');



describe('models/Project.js', () => {
    test('should be defined', () => {
        expect(Project).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof Project).toBe('object' || 'function');
    });

    if (typeof Project === 'object' && Project !== null) {
        Object.keys(Project).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof Project[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/models/Prompt.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const Prompt = require('../../src/models/Prompt');



describe('models/Prompt.js', () => {
    test('should be defined', () => {
        expect(Prompt).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof Prompt).toBe('object' || 'function');
    });

    if (typeof Prompt === 'object' && Prompt !== null) {
        Object.keys(Prompt).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof Prompt[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/models/ProviderConfig.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const ProviderConfig = require('../../src/models/ProviderConfig');



describe('models/ProviderConfig.js', () => {
    test('should be defined', () => {
        expect(ProviderConfig).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof ProviderConfig).toBe('object' || 'function');
    });

    if (typeof ProviderConfig === 'object' && ProviderConfig !== null) {
        Object.keys(ProviderConfig).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof ProviderConfig[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/models/User.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const User = require('../../src/models/User');



describe('models/User.js', () => {
    test('should be defined', () => {
        expect(User).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof User).toBe('object' || 'function');
    });

    if (typeof User === 'object' && User !== null) {
        Object.keys(User).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof User[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/projectServices.test.js
================
const mongoose = require("mongoose");
const { MongoMemoryServer } = require("mongodb-memory-server");
const projectService = require("../src/services/projectService");
const Project = require("../src/models/Project");

let mongoServer;

beforeAll(async () => {
  // Start in-memory MongoDB instance
  mongoServer = await MongoMemoryServer.create();
  const uri = mongoServer.getUri();
  await mongoose.connect(uri);
});

afterAll(async () => {
  // Clean up and disconnect
  await mongoose.connection.dropDatabase();
  await mongoose.disconnect();
  await mongoServer.stop();
});

describe("Project Service", () => {
  it("should create a new project", async () => {
    const data = {
      title: "Test Project",
      description: "A test project",
      image: "test.jpg",
      link: "http://example.com",
    };
    const project = await projectService.createProject(data);
    expect(project.title).toBe("Test Project");
    expect(project.description).toBe("A test project");
  });

  it("should get all projects", async () => {
    // Create two projects first
    const data1 = {
      title: "Project 1",
      description: "Description 1",
      image: "image1.jpg",
      link: "http://project1.com",
    };
    const data2 = {
      title: "Project 2",
      description: "Description 2",
      image: "image2.jpg",
      link: "http://project2.com",
    };
    await projectService.createProject(data1);
    await projectService.createProject(data2);

    const projects = await projectService.getAllProjects();
    expect(projects.length).toBeGreaterThanOrEqual(2);
  });

  it("should get a project by id", async () => {
    const data = {
      title: "GetById Project",
      description: "Test get project by id",
      image: "getbyid.jpg",
      link: "http://getbyid.com",
    };
    const createdProject = await projectService.createProject(data);
    const foundProject = await projectService.getProjectById(createdProject._id);
    expect(foundProject).not.toBeNull();
    expect(foundProject.title).toBe("GetById Project");
  });

  it("should update a project", async () => {
    const data = {
      title: "Old Project Title",
      description: "Old description",
      image: "old.jpg",
      link: "http://old.com",
    };
    const createdProject = await projectService.createProject(data);

    const updateData = {
      title: "New Project Title",
      description: "New description",
    };
    const updatedProject = await projectService.updateProject(createdProject._id, updateData);
    expect(updatedProject.title).toBe("New Project Title");
    expect(updatedProject.description).toBe("New description");
  });

  it("should delete a project", async () => {
    const data = {
      title: "Project to delete",
      description: "This project will be deleted",
      image: "delete.jpg",
      link: "http://delete.com",
    };
    const createdProject = await projectService.createProject(data);
    const deletedProject = await projectService.deleteProject(createdProject._id);
    expect(deletedProject).not.toBeNull();

    // Confirm deletion by trying to retrieve the project
    const shouldBeNull = await projectService.getProjectById(createdProject._id);
    expect(shouldBeNull).toBeNull();
  });
});

================
File: portfolio.node/__tests__/routes/aiRoutes.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const aiRoutes = require('../../src/routes/aiRoutes');


jest.mock('../../src/middlewares/auth', () => (req, res, next) => next());
jest.mock('../../src/middlewares/admin', () => (req, res, next) => next());


describe('routes/aiRoutes.js', () => {
    test('should be defined', () => {
        expect(aiRoutes).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof aiRoutes).toBe('object' || 'function');
    });

    if (typeof aiRoutes === 'object' && aiRoutes !== null) {
        Object.keys(aiRoutes).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof aiRoutes[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/routes/authRoutes.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const authRoutes = require('../../src/routes/authRoutes');


jest.mock('../../src/middlewares/auth', () => (req, res, next) => next());
jest.mock('../../src/middlewares/admin', () => (req, res, next) => next());


describe('routes/authRoutes.js', () => {
    test('should be defined', () => {
        expect(authRoutes).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof authRoutes).toBe('object' || 'function');
    });

    if (typeof authRoutes === 'object' && authRoutes !== null) {
        Object.keys(authRoutes).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof authRoutes[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/routes/blogRoutes.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const blogRoutes = require('../../src/routes/blogRoutes');


jest.mock('../../src/middlewares/auth', () => (req, res, next) => next());
jest.mock('../../src/middlewares/admin', () => (req, res, next) => next());


describe('routes/blogRoutes.js', () => {
    test('should be defined', () => {
        expect(blogRoutes).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof blogRoutes).toBe('object' || 'function');
    });

    if (typeof blogRoutes === 'object' && blogRoutes !== null) {
        Object.keys(blogRoutes).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof blogRoutes[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/routes/careerTimelineRoutes.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const careerTimelineRoutes = require('../../src/routes/careerTimelineRoutes');


jest.mock('../../src/middlewares/auth', () => (req, res, next) => next());
jest.mock('../../src/middlewares/admin', () => (req, res, next) => next());


describe('routes/careerTimelineRoutes.js', () => {
    test('should be defined', () => {
        expect(careerTimelineRoutes).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof careerTimelineRoutes).toBe('object' || 'function');
    });

    if (typeof careerTimelineRoutes === 'object' && careerTimelineRoutes !== null) {
        Object.keys(careerTimelineRoutes).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof careerTimelineRoutes[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/routes/chatRoutes.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const chatRoutes = require('../../src/routes/chatRoutes');


jest.mock('../../src/middlewares/auth', () => (req, res, next) => next());
jest.mock('../../src/middlewares/admin', () => (req, res, next) => next());


describe('routes/chatRoutes.js', () => {
    test('should be defined', () => {
        expect(chatRoutes).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof chatRoutes).toBe('object' || 'function');
    });

    if (typeof chatRoutes === 'object' && chatRoutes !== null) {
        Object.keys(chatRoutes).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof chatRoutes[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/routes/commentRoutes.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const commentRoutes = require('../../src/routes/commentRoutes');


jest.mock('../../src/middlewares/auth', () => (req, res, next) => next());
jest.mock('../../src/middlewares/admin', () => (req, res, next) => next());


describe('routes/commentRoutes.js', () => {
    test('should be defined', () => {
        expect(commentRoutes).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof commentRoutes).toBe('object' || 'function');
    });

    if (typeof commentRoutes === 'object' && commentRoutes !== null) {
        Object.keys(commentRoutes).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof commentRoutes[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/routes/embeddingRoutes.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const embeddingRoutes = require('../../src/routes/embeddingRoutes');


jest.mock('../../src/middlewares/auth', () => (req, res, next) => next());
jest.mock('../../src/middlewares/admin', () => (req, res, next) => next());


describe('routes/embeddingRoutes.js', () => {
    test('should be defined', () => {
        expect(embeddingRoutes).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof embeddingRoutes).toBe('object' || 'function');
    });

    if (typeof embeddingRoutes === 'object' && embeddingRoutes !== null) {
        Object.keys(embeddingRoutes).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof embeddingRoutes[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/routes/fileRoutes.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const fileRoutes = require('../../src/routes/fileRoutes');


jest.mock('../../src/middlewares/auth', () => (req, res, next) => next());
jest.mock('../../src/middlewares/admin', () => (req, res, next) => next());


describe('routes/fileRoutes.js', () => {
    test('should be defined', () => {
        expect(fileRoutes).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof fileRoutes).toBe('object' || 'function');
    });

    if (typeof fileRoutes === 'object' && fileRoutes !== null) {
        Object.keys(fileRoutes).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof fileRoutes[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/routes/oauthRoutes.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const oauthRoutes = require('../../src/routes/oauthRoutes');


jest.mock('../../src/middlewares/auth', () => (req, res, next) => next());
jest.mock('../../src/middlewares/admin', () => (req, res, next) => next());


describe('routes/oauthRoutes.js', () => {
    test('should be defined', () => {
        expect(oauthRoutes).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof oauthRoutes).toBe('object' || 'function');
    });

    if (typeof oauthRoutes === 'object' && oauthRoutes !== null) {
        Object.keys(oauthRoutes).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof oauthRoutes[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/routes/pageRoutes.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const pageRoutes = require('../../src/routes/pageRoutes');


jest.mock('../../src/middlewares/auth', () => (req, res, next) => next());
jest.mock('../../src/middlewares/admin', () => (req, res, next) => next());


describe('routes/pageRoutes.js', () => {
    test('should be defined', () => {
        expect(pageRoutes).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof pageRoutes).toBe('object' || 'function');
    });

    if (typeof pageRoutes === 'object' && pageRoutes !== null) {
        Object.keys(pageRoutes).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof pageRoutes[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/routes/projectRoutes.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const projectRoutes = require('../../src/routes/projectRoutes');


jest.mock('../../src/middlewares/auth', () => (req, res, next) => next());
jest.mock('../../src/middlewares/admin', () => (req, res, next) => next());


describe('routes/projectRoutes.js', () => {
    test('should be defined', () => {
        expect(projectRoutes).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof projectRoutes).toBe('object' || 'function');
    });

    if (typeof projectRoutes === 'object' && projectRoutes !== null) {
        Object.keys(projectRoutes).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof projectRoutes[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/routes/promptRoutes.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const promptRoutes = require('../../src/routes/promptRoutes');


jest.mock('../../src/middlewares/auth', () => (req, res, next) => next());
jest.mock('../../src/middlewares/admin', () => (req, res, next) => next());


describe('routes/promptRoutes.js', () => {
    test('should be defined', () => {
        expect(promptRoutes).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof promptRoutes).toBe('object' || 'function');
    });

    if (typeof promptRoutes === 'object' && promptRoutes !== null) {
        Object.keys(promptRoutes).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof promptRoutes[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/routes/providerConfigRoutes.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const providerConfigRoutes = require('../../src/routes/providerConfigRoutes');


jest.mock('../../src/middlewares/auth', () => (req, res, next) => next());
jest.mock('../../src/middlewares/admin', () => (req, res, next) => next());


describe('routes/providerConfigRoutes.js', () => {
    test('should be defined', () => {
        expect(providerConfigRoutes).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof providerConfigRoutes).toBe('object' || 'function');
    });

    if (typeof providerConfigRoutes === 'object' && providerConfigRoutes !== null) {
        Object.keys(providerConfigRoutes).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof providerConfigRoutes[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/routes/searchRoutes.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const searchRoutes = require('../../src/routes/searchRoutes');


jest.mock('../../src/middlewares/auth', () => (req, res, next) => next());
jest.mock('../../src/middlewares/admin', () => (req, res, next) => next());


describe('routes/searchRoutes.js', () => {
    test('should be defined', () => {
        expect(searchRoutes).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof searchRoutes).toBe('object' || 'function');
    });

    if (typeof searchRoutes === 'object' && searchRoutes !== null) {
        Object.keys(searchRoutes).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof searchRoutes[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/routes/userRoutes.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const userRoutes = require('../../src/routes/userRoutes');


jest.mock('../../src/middlewares/auth', () => (req, res, next) => next());
jest.mock('../../src/middlewares/admin', () => (req, res, next) => next());


describe('routes/userRoutes.js', () => {
    test('should be defined', () => {
        expect(userRoutes).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof userRoutes).toBe('object' || 'function');
    });

    if (typeof userRoutes === 'object' && userRoutes !== null) {
        Object.keys(userRoutes).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof userRoutes[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/server.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const server = require('../../src/server');



describe('server.js', () => {
    test('should be defined', () => {
        expect(server).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof server).toBe('object' || 'function');
    });

    if (typeof server === 'object' && server !== null) {
        Object.keys(server).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof server[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/services/authService.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const authService = require('../../src/services/authService');



describe('services/authService.js', () => {
    test('should be defined', () => {
        expect(authService).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof authService).toBe('object' || 'function');
    });

    if (typeof authService === 'object' && authService !== null) {
        Object.keys(authService).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof authService[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/services/blogService.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const blogService = require('../../src/services/blogService');



describe('services/blogService.js', () => {
    test('should be defined', () => {
        expect(blogService).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof blogService).toBe('object' || 'function');
    });

    if (typeof blogService === 'object' && blogService !== null) {
        Object.keys(blogService).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof blogService[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/services/chatService.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const chatService = require('../../src/services/chatService');



describe('services/chatService.js', () => {
    test('should be defined', () => {
        expect(chatService).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof chatService).toBe('object' || 'function');
    });

    if (typeof chatService === 'object' && chatService !== null) {
        Object.keys(chatService).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof chatService[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/services/commentService.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const commentService = require('../../src/services/commentService');



describe('services/commentService.js', () => {
    test('should be defined', () => {
        expect(commentService).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof commentService).toBe('object' || 'function');
    });

    if (typeof commentService === 'object' && commentService !== null) {
        Object.keys(commentService).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof commentService[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/services/counterService.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const counterService = require('../../src/services/counterService');



describe('services/counterService.js', () => {
    test('should be defined', () => {
        expect(counterService).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof counterService).toBe('object' || 'function');
    });

    if (typeof counterService === 'object' && counterService !== null) {
        Object.keys(counterService).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof counterService[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/services/embeddingService.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const embeddingService = require('../../src/services/embeddingService');



describe('services/embeddingService.js', () => {
    test('should be defined', () => {
        expect(embeddingService).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof embeddingService).toBe('object' || 'function');
    });

    if (typeof embeddingService === 'object' && embeddingService !== null) {
        Object.keys(embeddingService).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof embeddingService[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/services/fileService.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const fileService = require('../../src/services/fileService');



describe('services/fileService.js', () => {
    test('should be defined', () => {
        expect(fileService).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof fileService).toBe('object' || 'function');
    });

    if (typeof fileService === 'object' && fileService !== null) {
        Object.keys(fileService).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof fileService[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/services/llmService.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const llmService = require('../../src/services/llmService');



describe('services/llmService.js', () => {
    test('should be defined', () => {
        expect(llmService).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof llmService).toBe('object' || 'function');
    });

    if (typeof llmService === 'object' && llmService !== null) {
        Object.keys(llmService).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof llmService[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/services/ollamaService.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const ollamaService = require('../../src/services/ollamaService');



describe('services/ollamaService.js', () => {
    test('should be defined', () => {
        expect(ollamaService).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof ollamaService).toBe('object' || 'function');
    });

    if (typeof ollamaService === 'object' && ollamaService !== null) {
        Object.keys(ollamaService).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof ollamaService[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/services/pageService.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const pageService = require('../../src/services/pageService');



describe('services/pageService.js', () => {
    test('should be defined', () => {
        expect(pageService).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof pageService).toBe('object' || 'function');
    });

    if (typeof pageService === 'object' && pageService !== null) {
        Object.keys(pageService).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof pageService[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/services/projectService.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const projectService = require('../../src/services/projectService');



describe('services/projectService.js', () => {
    test('should be defined', () => {
        expect(projectService).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof projectService).toBe('object' || 'function');
    });

    if (typeof projectService === 'object' && projectService !== null) {
        Object.keys(projectService).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof projectService[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/services/promptService.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const promptService = require('../../src/services/promptService');



describe('services/promptService.js', () => {
    test('should be defined', () => {
        expect(promptService).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof promptService).toBe('object' || 'function');
    });

    if (typeof promptService === 'object' && promptService !== null) {
        Object.keys(promptService).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof promptService[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/services/providerConfigService.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const providerConfigService = require('../../src/services/providerConfigService');



describe('services/providerConfigService.js', () => {
    test('should be defined', () => {
        expect(providerConfigService).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof providerConfigService).toBe('object' || 'function');
    });

    if (typeof providerConfigService === 'object' && providerConfigService !== null) {
        Object.keys(providerConfigService).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof providerConfigService[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/services/qdrantService.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const qdrantService = require('../../src/services/qdrantService');



describe('services/qdrantService.js', () => {
    test('should be defined', () => {
        expect(qdrantService).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof qdrantService).toBe('object' || 'function');
    });

    if (typeof qdrantService === 'object' && qdrantService !== null) {
        Object.keys(qdrantService).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof qdrantService[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/services/searchService.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const searchService = require('../../src/services/searchService');



describe('services/searchService.js', () => {
    test('should be defined', () => {
        expect(searchService).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof searchService).toBe('object' || 'function');
    });

    if (typeof searchService === 'object' && searchService !== null) {
        Object.keys(searchService).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof searchService[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/services/userService.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const userService = require('../../src/services/userService');



describe('services/userService.js', () => {
    test('should be defined', () => {
        expect(userService).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof userService).toBe('object' || 'function');
    });

    if (typeof userService === 'object' && userService !== null) {
        Object.keys(userService).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof userService[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/services/warmUpService.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const warmUpService = require('../../src/services/warmUpService');



describe('services/warmUpService.js', () => {
    test('should be defined', () => {
        expect(warmUpService).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof warmUpService).toBe('object' || 'function');
    });

    if (typeof warmUpService === 'object' && warmUpService !== null) {
        Object.keys(warmUpService).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof warmUpService[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/services/wsChatService.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const wsChatService = require('../../src/services/wsChatService');



describe('services/wsChatService.js', () => {
    test('should be defined', () => {
        expect(wsChatService).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof wsChatService).toBe('object' || 'function');
    });

    if (typeof wsChatService === 'object' && wsChatService !== null) {
        Object.keys(wsChatService).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof wsChatService[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/tracing.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const tracing = require('../../src/tracing');



describe('tracing.js', () => {
    test('should be defined', () => {
        expect(tracing).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof tracing).toBe('object' || 'function');
    });

    if (typeof tracing === 'object' && tracing !== null) {
        Object.keys(tracing).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof tracing[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/userService.test.js
================
jest.setTimeout(30000); // Increase timeout for database operations

const mongoose = require("mongoose");
const { MongoMemoryServer } = require("mongodb-memory-server");
const userService = require("../src/services/userService");
const User = require("../src/models/User");

let mongoServer;

beforeAll(async () => {
  mongoServer = await MongoMemoryServer.create();
  const uri = mongoServer.getUri();
  process.env.MONGO_URI = uri;
  await mongoose.connect(uri);
});

afterAll(async () => {
  await mongoose.connection.dropDatabase();
  await mongoose.disconnect();
  await mongoServer.stop();
});

describe("User Service", () => {
  it("should create a new user", async () => {
    const userData = { username: "testuser", password: "testpass" };
    const user = await userService.createUser(userData);
    expect(user.username).toBe("testuser");
  });

  it("should throw an error if username or password is missing", async () => {
    await expect(userService.createUser({ username: "", password: "testpass" }))
      .rejects.toThrow("Username and password are required");
  });

  it("should throw an error if the user already exists", async () => {
    const userData = { username: "duplicateUser", password: "testpass" };
    // Create the user the first time.
    await userService.createUser(userData);
    // Try creating the same user again.
    await expect(userService.createUser(userData))
      .rejects.toThrow("User already exists");
  });
});

================
File: portfolio.node/__tests__/utils/cache.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const cache = require('../../src/utils/cache');



describe('utils/cache.js', () => {
    test('should be defined', () => {
        expect(cache).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof cache).toBe('object' || 'function');
    });

    if (typeof cache === 'object' && cache !== null) {
        Object.keys(cache).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof cache[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/utils/generatePrompt.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const generatePrompt = require('../../src/utils/generatePrompt');



describe('utils/generatePrompt.js', () => {
    test('should be defined', () => {
        expect(generatePrompt).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof generatePrompt).toBe('object' || 'function');
    });

    if (typeof generatePrompt === 'object' && generatePrompt !== null) {
        Object.keys(generatePrompt).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof generatePrompt[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/__tests__/validators/blogValidator.test.js
================
const { describe, test, expect, jest } = require('@jest/globals');
const blogValidator = require('../../src/validators/blogValidator');



describe('validators/blogValidator.js', () => {
    test('should be defined', () => {
        expect(blogValidator).toBeDefined();
    });

    test('should have expected methods and properties', () => {
        expect(typeof blogValidator).toBe('object' || 'function');
    });

    if (typeof blogValidator === 'object' && blogValidator !== null) {
        Object.keys(blogValidator).forEach(method => {
            test(`method ${method} should be defined`, () => {
                expect(typeof blogValidator[method]).toBe('function');
            });
        });
    }
});

================
File: portfolio.node/Dockerfile
================
FROM node:22
WORKDIR /app
COPY . .
RUN npm install
CMD ["node", "./src/server.js"]

================
File: portfolio.node/jest.config.js
================
module.exports = {
  setupFilesAfterEnv: ['<rootDir>/__tests__/jest-setup.js'],
  testEnvironment: 'node',
  transform: {},
  // extensionsToTreatAsEsm: ['.js', '.mjs'],
};

================
File: portfolio.node/jest.setup.js
================
require('dotenv').config({ path: '.env.test' });
jest.setTimeout(10000); // Increase the global timeout to 10 seconds

================
File: portfolio.node/package.json
================
{
  "name": "portfolio.node",
  "version": "1.0.0",
  "description": "",
  "scripts": {
    "start": "node src/server.js",
    "dev": "cross-env NODE_ENV=development nodemon src/server.js",
    "test": "cross-env NODE_ENV=test jest",
    "test:watch": "cross-env NODE_ENV=test jest --watch"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "type": "commonjs",
  "dependencies": {
    "@opentelemetry/api": "^1.9.0",
    "@opentelemetry/auto-instrumentations-node": "^0.56.1",
    "@opentelemetry/exporter-trace-otlp-http": "^0.57.2",
    "@opentelemetry/sdk-node": "^0.57.2",
    "@qdrant/js-client-rest": "^1.13.0",
    "bcrypt": "^5.1.1",
    "cheerio": "^1.0.0",
    "cookie-parser": "^1.4.7",
    "cors": "^2.8.5",
    "dotenv": "^16.4.7",
    "express": "^4.21.2",
    "express-session": "^1.18.1",
    "gridfs-stream": "^1.1.1",
    "joi": "^17.13.3",
    "jsonwebtoken": "^9.0.2",
    "marked": "^15.0.7",
    "mongoose": "^8.12.1",
    "multer": "^1.4.5-lts.1",
    "node-cache": "^5.1.2",
    "passport": "^0.7.0",
    "passport-facebook": "^3.0.0",
    "passport-github": "^1.1.0",
    "passport-google-oauth20": "^2.0.0",
    "passport-microsoft": "^2.1.0",
    "pdf-parse": "^1.1.1",
    "qdrant-client": "^0.0.1",
    "swagger-ui-express": "^5.0.1",
    "ws": "^8.18.1",
    "yamljs": "^0.3.0"
  },
  "devDependencies": {
    "@types/jest": "^29.5.14",
    "@types/supertest": "^6.0.2",
    "cross-env": "^7.0.3",
    "jest": "^29.7.0",
    "mongodb-memory-server": "^10.1.4",
    "nodemon": "^3.1.9",
    "supertest": "^7.0.0"
  }
}

================
File: portfolio.node/routes.md
================
# API Routes Documentation

## Authentication Levels
- **None**: Publicly accessible endpoints
- **User**: Requires valid authentication token
- **Admin**: Requires valid authentication token and admin role

## Public Routes

### Authentication
- **POST** `/api/auth/register`
  - Auth: None
  - Description: Register a new user
  - Parameters:
    - `username` (string)
    - `password` (string)

- **POST** `/api/auth/login`
  - Auth: None
  - Description: Authenticate user and receive token
  - Parameters:
    - `username` (string)
    - `password` (string)

- **GET** `/api/auth/status`
  - Auth: None
  - Description: Check authentication status and setup requirement
  - Parameters: None

- **GET** `/api/auth/logout`
  - Auth: None
  - Description: Clear authentication token
  - Parameters: None

### Blogs
- **GET** `/api/blogs`
  - Auth: None
  - Description: Retrieve all published blog posts
  - Parameters: None

- **GET** `/api/blogs/search`
  - Auth: None
  - Description: Search published blog posts
  - Parameters:
    - `q` (query string)
    - `limit` (optional, default: 10)
    - `minScore` (optional, default: 0.7)

- **GET** `/api/blogs/:id`
  - Auth: None
  - Description: Retrieve a single published blog post
  - Parameters:
    - `id` (path parameter)

### Projects
- **GET** `/api/projects`
  - Auth: None
  - Description: Retrieve all published projects
  - Parameters: None

- **POST** `/api/projects/search`
  - Auth: None
  - Description: Search projects using hybrid search
  - Parameters:
    - `query` (string)
    - `limit` (optional)
    - `minScore` (optional)

### Career Timeline
- **GET** `/api/career`
  - Auth: None
  - Description: Get career timeline entries
  - Parameters: None

### Pages
- **GET** `/api/pages/:slug`
  - Auth: None
  - Description: Get page content by slug
  - Parameters:
    - `slug` (path parameter)

### Files
- **GET** `/api/files/:filename`
  - Auth: None
  - Description: Get file by filename
  - Parameters:
    - `filename` (path parameter)

### Search
- **POST** `/api/search`
  - Auth: None
  - Description: Global search across all entities
  - Parameters:
    - `query` (string)
    - `limit` (optional)
    - `minScore` (optional)

### Chat
- **POST** `/api/chat`
  - Auth: None
  - Description: Process chat message
  - Parameters:
    - `sessionId` (string)
    - `query` (string)
    - `history` (optional, array)
    - `webContext` (optional, string)

- **GET** `/api/chat`
  - Auth: None
  - Description: Get chat history
  - Parameters:
    - `sessionId` (query parameter)

- **GET** `/api/chat/greeting`
  - Auth: None
  - Description: Get random AI greeting
  - Parameters: None

- **GET** `/api/chat/warmup-status`
  - Auth: None
  - Description: Check if AI warmup is complete
  - Parameters: None

## User Authenticated Routes

### Comments
- **POST** `/api/comments`
  - Auth: User
  - Description: Create a new comment
  - Parameters: Comment data in body

## Admin Routes

### Blog Management
- **GET** `/api/admin/blogs`
  - Auth: Admin
  - Description: Get all blog posts (including drafts and future posts)
  - Parameters: None

- **GET** `/api/admin/blogs/:id`
  - Auth: Admin
  - Description: Get a specific blog post
  - Parameters:
    - `id` (path parameter)

- **POST** `/api/admin/blogs`
  - Auth: Admin
  - Description: Create a new blog post
  - Parameters: Blog data in body

- **PUT** `/api/admin/blogs/:id`
  - Auth: Admin
  - Description: Update a blog post
  - Parameters:
    - `id` (path parameter)
    - Blog data in body

- **DELETE** `/api/admin/blogs/:id`
  - Auth: Admin
  - Description: Delete a blog post
  - Parameters:
    - `id` (path parameter)

### Project Management
- **GET** `/api/admin/projects`
  - Auth: Admin
  - Description: Get all projects (including drafts and future posts)
  - Parameters: None

- **GET** `/api/admin/projects/:id`
  - Auth: Admin
  - Description: Get a specific project
  - Parameters:
    - `id` (path parameter)

- **POST** `/api/admin/projects`
  - Auth: Admin
  - Description: Create a new project
  - Parameters: Project data in body

- **PUT** `/api/admin/projects/:id`
  - Auth: Admin
  - Description: Update a project
  - Parameters:
    - `id` (path parameter)
    - Project data in body

- **DELETE** `/api/admin/projects/:id`
  - Auth: Admin
  - Description: Delete a project
  - Parameters:
    - `id` (path parameter)

### Provider Configuration
- **GET** `/api/admin/provider-config`
  - Auth: Admin
  - Description: Get all provider configurations
  - Parameters: None

- **POST** `/api/admin/provider-config`
  - Auth: Admin
  - Description: Create/Update provider configuration
  - Parameters: Provider config data in body

- **DELETE** `/api/admin/provider-config/:id`
  - Auth: Admin
  - Description: Delete provider configuration
  - Parameters:
    - `id` (path parameter)

### Career Timeline Management
- **GET** `/api/admin/career`
  - Auth: Admin
  - Description: Get all career entries (including drafts and future posts)
  - Parameters: None

- **GET** `/api/admin/career/:id`
  - Auth: Admin
  - Description: Get a specific career entry
  - Parameters:
    - `id` (path parameter)

- **POST** `/api/admin/career`
  - Auth: Admin
  - Description: Create career timeline entry
  - Parameters: Career entry data in body

- **PUT** `/api/admin/career/:id`
  - Auth: Admin
  - Description: Update career timeline entry
  - Parameters:
    - `id` (path parameter)
    - Career entry data in body

- **DELETE** `/api/admin/career/:id`
  - Auth: Admin
  - Description: Delete career timeline entry
  - Parameters:
    - `id` (path parameter)

### Page Management
- **GET** `/api/admin/pages`
  - Auth: Admin
  - Description: Get all pages (including drafts)
  - Parameters: None

- **GET** `/api/admin/pages/:id`
  - Auth: Admin
  - Description: Get a specific page
  - Parameters:
    - `id` (path parameter)

- **POST** `/api/admin/pages`
  - Auth: Admin
  - Description: Create a new page
  - Parameters: Page data in body

- **PUT** `/api/admin/pages/:id`
  - Auth: Admin
  - Description: Update a page
  - Parameters:
    - `id` (path parameter)
    - Page data in body

- **DELETE** `/api/admin/pages/:id`
  - Auth: Admin
  - Description: Delete a page
  - Parameters:
    - `id` (path parameter)

### File Management
- **GET** `/api/admin/files`
  - Auth: Admin
  - Description: Get all files
  - Parameters: None

- **GET** `/api/admin/files/:filename`
  - Auth: Admin
  - Description: Get specific file details
  - Parameters:
    - `filename` (path parameter)

- **POST** `/api/admin/files/upload`
  - Auth: Admin
  - Description: Upload file
  - Parameters: File data (multipart/form-data)

- **DELETE** `/api/admin/files/:filename`
  - Auth: Admin
  - Description: Delete file
  - Parameters:
    - `filename` (path parameter)

================
File: portfolio.node/src/app.js
================
// Telemetry first
require('./tracing');
// The rest.
require("dotenv").config({ path: `.env.${process.env.NODE_ENV}.local` });

console.log(`✅ Loaded environment: .env.${process.env.NODE_ENV}.local`);

const express = require("express");
const cookieParser = require("cookie-parser");
const cors = require("cors");

const connectDB = require("./config/db");
const { passport, setupStrategies } = require("./config/passport");
const { warmupLLM } = require("./services/warmUpService");

const requestLogger = require("./middlewares/requestLogger");

const authRoutes = require("./routes/authRoutes");
const projectRoutes = require("./routes/projectRoutes");
const blogRoutes = require("./routes/blogRoutes");
const oauthRoutes = require("./routes/oauthRoutes");
const commentRoutes = require("./routes/commentRoutes");
const searchRoutes = require("./routes/searchRoutes");
const chatRoutes = require("./routes/chatRoutes");
const embeddingRoutes = require("./routes/embeddingRoutes");
const promptRoutes = require("./routes/promptRoutes");
const fileRoutes = require("./routes/fileRoutes");
const careerTimelineRoutes = require("./routes/careerTimelineRoutes");
const pageRoutes = require("./routes/pageRoutes");
const aiRoutes = require("./routes/aiRoutes");

const { prepopulateDefaultConfigs } = require("./services/providerConfigService");
const metricsMiddleware = require("./middlewares/metrics");

const { swaggerMiddleware, swaggerSetup } = require('./config/swagger');

const adminRoutes = require("./routes/admin");

async function createApp() {
  // Connect to the database
  await connectDB();

  // default configuration population
  await prepopulateDefaultConfigs();

  const app = express();
  
  if ( process.env.ALLOW_CORS){
    app.use(cors({
      origin: process.env.ALLOW_CORS || "http://localhost:3000",
      credentials: true, // Allow cookies to be sent
    }));
  }
  
  if ( process.env.LOG_HTTP_REQUESTS==="true"){
    app.use(requestLogger);
  }

  app.use(express.json({ limit: '50mb' }));
  app.use(express.urlencoded({ limit: '50mb', extended: true }));
  app.use(cookieParser());

  app.use(metricsMiddleware);
 
setupStrategies()
  .then(() => {
    console.log("Passport strategies initialized successfully."); 
    // Start your Express server here...
  })
  .catch((err) => {
    console.error("Error initializing passport strategies:", err);
  });

  app.use(passport.initialize());  

  // Swagger Documentation
  app.use('/api/docs', swaggerMiddleware, swaggerSetup);

  // Public Routes (no auth required)
  app.use("/api/blogs", blogRoutes);
  app.use("/api/projects", projectRoutes);
  app.use("/api/pages", pageRoutes);
  app.use("/api/career", careerTimelineRoutes);
  app.use("/api/search", searchRoutes);
  app.use("/api/files", fileRoutes);

  // Authentication Routes
  app.use("/api/auth", authRoutes);
  app.use("/api/auth/oauth2", oauthRoutes);

  // Protected Routes (require authentication)
  app.use("/api/comments", commentRoutes);
  app.use("/api/chat", chatRoutes);
  app.use("/api/embeddings", embeddingRoutes);
  app.use("/api/prompts", promptRoutes);
  app.use("/api/ai", aiRoutes);

  // Admin Routes (require authentication and admin role)
  app.use("/api/admin", adminRoutes);

  // Warm-up LLM at startup
  warmupLLM().then(() => {
    console.log("🚀 Warm-up complete!");
  }).catch(err => {
    console.error("⚠️ Warm-up encountered an issue:", err);
  });
  
  return app;
}

module.exports = { createApp };

================
File: portfolio.node/src/cache.js
================
const cache = {
    blogs: {},
    projects: {},
    "blogs-timestamp": 0,
    "projects-timestamp": 0,
  };
  
  const CACHE_TTL = 5 * 60 * 1000; // 5 minutes
  
  // ✅ Check if cache is valid based on timestamp
  function isCacheValid(key) {
    return Date.now() - cache[`${key}-timestamp`] < CACHE_TTL;
  }
  
  // ✅ Get all cached data or fetch if expired
  async function getAllCached(key, fetchFunction) {
    if (isCacheValid(key)) {
      console.log(`Using cached ${key} data`);
      return Object.values(cache[key]); // Return all cached items
    }
  
    console.log(`Refreshing ${key} cache`);
    const data = await fetchFunction();
    cache[key] = {}; // Reset key storage
  
    data.forEach((item) => {
      cache[key][item._id] = item; // Store by ID
    });
  
    cache[`${key}-timestamp`] = Date.now();
    return data;
  }
  
  // ✅ Get a single item from cache or fetch if missing
  async function getCachedById(key, id, fetchFunction) {
    if (cache[key][id]) {
      console.log(`Using cached ${key} entry: ${id}`);
      return cache[key][id];
    }
  
    console.log(`Fetching ${key} entry: ${id} from DB`);
    const item = await fetchFunction(id);
    if (item) {
      cache[key][id] = item;
    }
    return item;
  }
  
  // ✅ Add a new item to cache
  function addToCache(key, item) {
    cache[key][item._id] = item;
  }
  
  // ✅ Reset cache manually (useful for updates/deletes)
  function clearCache(key) {
    cache[key] = {};
    cache[`${key}-timestamp`] = 0;
  }
  
  module.exports = { getAllCached, getCachedById, addToCache, clearCache };

================
File: portfolio.node/src/config/db.js
================
const mongoose = require("mongoose");

const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGO_URI);
    console.log("MongoDB Connected");
  } catch (error) {
    console.error("MongoDB Connection Failed", error);
    process.exit(1);
  }
};

module.exports = connectDB;

================
File: portfolio.node/src/config/passport.js
================
// portfolio.node/src/config/passport.js
const passport = require("passport");
const GoogleStrategy = require("passport-google-oauth20").Strategy;
const FacebookStrategy = require("passport-facebook").Strategy;
const GitHubStrategy = require("passport-github").Strategy;
const MicrosoftStrategy = require("passport-microsoft").Strategy;
const providerConfigService = require("../services/providerConfigService");

// Serialize and deserialize user (for session support, if needed)
passport.serializeUser((user, done) => {
  done(null, user.id);
});
passport.deserializeUser(async (id, done) => {
  try {
    const User = require("../models/User");
    const user = await User.findById(id);
    done(null, user);
  } catch (err) {
    done(err, null);
  }
});

// Helper: Register or fetch a consumer user
async function findOrCreateUser(providerId, email) {
  const User = require("../models/User");
  const authService = require("../services/authService");
  let user = await User.findOne({ username: email });
  if (!user) {
    // Use a dummy password based on providerId (in production, store provider data separately)
    user = await authService.registerUser({ username: email, password: "oauth_" + providerId, isAdmin: false });
  }
  return user;
}

// Helper function to set up an OAuth strategy for a provider
async function setupOAuthStrategy(providerName, StrategyClass, defaultOptions) {
  const providerConfig = await providerConfigService.getConfigByProvider(providerName);
  const clientID = (providerConfig && providerConfig.clientId) || defaultOptions.clientID;
  const clientSecret = (providerConfig && providerConfig.clientSecret) || defaultOptions.clientSecret;
  const callbackURL = (providerConfig && providerConfig.callbackURL) || defaultOptions.callbackURL;

  const strategyOptions = {
    ...defaultOptions,
    clientID,
    clientSecret,
    callbackURL,
  };

  if (clientID && clientSecret && callbackURL) {
    passport.use(
      new StrategyClass(strategyOptions, async (accessToken, refreshToken, profile, done) => {
        try {
          // For GitHub, use a fallback email if none is provided.
          let email;
          if (providerName === "github") {
            email = profile.emails && profile.emails[0].value ? profile.emails[0].value : profile.username + "@github.com";
          } else {
            email = profile.emails && profile.emails[0].value;
          }
          if (!email) throw new Error(`No email returned from ${providerName}`);
          const user = await findOrCreateUser(profile.id, email);
          return done(null, user);
        } catch (error) {
          return done(error, null);
        }
      })
    );
    console.log(`Registered strategy for ${providerName}`);
  } else {
    console.warn(`Missing configuration for ${providerName}, strategy not registered.`);
  }
}

// Set up strategies for all providers
async function setupStrategies() {
  await Promise.all([
    setupOAuthStrategy("google", GoogleStrategy, {
      clientID: process.env.GOOGLE_CLIENT_ID,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET,
      callbackURL: process.env.GOOGLE_CALLBACK_URL || "/api/auth/oauth2/google/callback",
      scope: ["profile", "email"],
    }),
    setupOAuthStrategy("facebook", FacebookStrategy, {
      clientID: process.env.FACEBOOK_CLIENT_ID,
      clientSecret: process.env.FACEBOOK_CLIENT_SECRET,
      callbackURL: process.env.FACEBOOK_CALLBACK_URL || "/api/auth/oauth2/facebook/callback",
      profileFields: ["id", "emails", "name"],
    }),
    setupOAuthStrategy("github", GitHubStrategy, {
      clientID: process.env.GITHUB_CLIENT_ID,
      clientSecret: process.env.GITHUB_CLIENT_SECRET,
      callbackURL: process.env.GITHUB_CALLBACK_URL || "/api/auth/oauth2/github/callback",
      scope: ["user:email"],
    }),
    setupOAuthStrategy("microsoft", MicrosoftStrategy, {
      clientID: process.env.MICROSOFT_CLIENT_ID,
      clientSecret: process.env.MICROSOFT_CLIENT_SECRET,
      callbackURL: process.env.MICROSOFT_CALLBACK_URL || "/api/auth/oauth2/microsoft/callback",
      scope: ["user.read"],
    }),
  ]);
}

module.exports = { passport, setupStrategies };

================
File: portfolio.node/src/config/swagger.js
================
const swaggerUi = require('swagger-ui-express');
const yaml = require('yamljs');
const path = require('path');

// Load OpenAPI YAML file
const openApiDoc = yaml.load(path.join(__dirname, '../docs/openapi.yml'));

// Middleware to serve Swagger UI
const swaggerMiddleware = swaggerUi.serve;
const swaggerSetup = swaggerUi.setup(openApiDoc);

module.exports = { swaggerMiddleware, swaggerSetup };

================
File: portfolio.node/src/docs/openapi.1.4.0.yml
================
openapi: 3.0.0
info:
  title: Portfolio API
  description: API for managing blogs, projects, AI chat, embeddings, search, and career timeline.
  version: 1.4.0

servers:
  - url: http://localhost:5000/api
    description: Local Development Server
  - url: https://yourdomain.com/api
    description: Production Server

tags:
  - name: Authentication
    description: User authentication and session management
  - name: Blogs
    description: Blog creation, retrieval, updates, and deletion
  - name: Projects
    description: Project portfolio management
  - name: AI Chat
    description: AI-powered chatbot using local LLM
  - name: Search
    description: Semantic search and source code search
  - name: Embeddings
    description: Vector embeddings for AI-powered search
  - name: Career Timeline
    description: Interactive career timeline and skills mapping
  - name: Users
    description: Users management (admin)
  - name: Prompts
    description: Prompts configuration and fine tuning

paths:
  /auth/login:
    post:
      tags: [Authentication]
      summary: Login a user (session-based auth)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Login successful
        "401":
          description: Invalid credentials

  /auth/check:
    get:
      tags: [Authentication]
      summary: Check if user logged and session valid
      responses:
        "200":
          description: User logged in
        "401":
          description: User not logged in

  /auth/logout:
    get:
      tags: [Authentication]
      summary: Logout user (clears session)
      responses:
        "200":
          description: User logged out successfully

  /blogs:
    get:
      tags: [Blogs]
      summary: Retrieve all blog posts
      responses:
        "200":
          description: List of blog posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Blog"
    post:
      tags: [Blogs]
      summary: Create a new blog post
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BlogRequest"
      responses:
        "201":
          description: Blog created
        "400":
          description: Validation error

  /blogs/{id}:
    get:
      tags: [Blogs]
      summary: Get a specific blog post
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Blog entry retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Blog"
        "404":
          description: Blog not found
    put:
      tags: [Blogs]
      summary: Update a blog post
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BlogRequest"
      responses:
        "200":
          description: Blog updated
        "404":
          description: Blog not found
    delete:
      tags: [Blogs]
      summary: Delete a blog post
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Blog deleted
        "404":
          description: Blog not found

  /projects:
    get:
      tags: [Projects]
      summary: Retrieve all projects
      responses:
        "200":
          description: List of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Project"
    post:
      tags: [Projects]
      summary: Create a new project
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectRequest"
      responses:
        "201":
          description: Project created
        "400":
          description: Validation error

  /projects/{id}:
    put:
      tags: [Projects]
      summary: Update a project
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectRequest"
      responses:
        "200":
          description: Project updated
        "404":
          description: Project not found
    delete:
      tags: [Projects]
      summary: Delete a project
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Project deleted
        "404":
          description: Project not found
          
  /projects/generate-embeddings:
    post:
      tags: [Projects]
      summary: Generate AI embeddings for all projects
      description: Uses an AI model to generate embeddings for each project and stores them in Qdrant.
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Successfully generated embeddings
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Embeddings generated for all projects."
                  embeddings:
                    type: array
                    items:
                      $ref: "#/components/schemas/ProjectEmbedding"
        "500":
          description: Internal server error

  /career/timeline:
    get:
      tags: [Career Timeline]
      summary: Retrieve career timeline
      responses:
        "200":
          description: Career timeline retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CareerEntry"
    post:
      tags: [Career Timeline]
      summary: Create a career timeline entry
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CareerEntry"
      responses:
        "201":
          description: Career timeline entry created
    delete:
      tags: [Career Timeline]
      summary: Delete a career timeline entry
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Career timeline entry deleted
  /chat:
    post:
      tags: [AI Chat]
      summary: Process user query with LLM chatbot
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChatRequest"
      responses:
        "200":
          description: Chat response from LLM
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatResponse"
    get:
      tags: [AI Chat]
      summary: Retrieve chat history for a session
      parameters:
        - name: sessionId
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Chat history retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ChatMessage"

  /search/semantic:
    post:
      tags: [Search]
      summary: Perform AI-powered semantic search
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SemanticSearchRequest"
      responses:
        "200":
          description: Search results retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SearchResult"

  /search/codebase:
    post:
      tags: [Search]
      summary: Search within indexed source code
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CodeSearchRequest"
      responses:
        "200":
          description: Code search results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CodeSearchResult"

  /search/{collection}:
    post:
      tags: [Search]
      summary: Search across different Qdrant collections
      description: Performs a vector search within the specified collection.
      parameters:
        - name: collection
          in: path
          required: true
          schema:
            type: string
            example: "projects"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: string
                  example: "AI-powered projects"
      responses:
        "200":
          description: Search results
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object

  /embeddings/generate:
    post:
      tags: [Embeddings]
      summary: Generate embeddings for blogs and projects
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Embeddings generated successfully

  /embeddings/refresh:
    post:
      tags: [Embeddings]
      summary: Refresh embeddings from the database
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Embeddings refreshed successfully

  /embeddings/status:
    get:
      tags: [Embeddings]
      summary: Retrieve embedding sync status
      responses:
        "200":
          description: Embedding sync status retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmbeddingStatus"

  /users/admin-exists:
    get:
      tags: [Users]
      summary: Check if an admin user exists
      description: Returns whether an admin user is already set up in the system.
      responses:
        "200":
          description: Admin existence status
          content:
            application/json:
              schema:
                type: object
                properties:
                  exists:
                    type: boolean
        "500":
          description: Server error

  /users:
    post:
      tags: [Users]
      summary: Create a new user (non-admin)
      description: Creates the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
      responses:
        "201":
          description: User created successfully
        "400":
          description: Invalid request or admin already exists
        "500":
          description: Server error

    get:
      tags: [Users]
      summary: Retrieve all users
      security:
        - cookieAuth: []
      description: Returns a list of all registered users (Admin-only).
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "403":
          description: Forbidden (non-admin access)
        "500":
          description: Server error

  /users/{id}:
    get:
      tags: [Users]
      summary: Retrieve a single user by ID
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found
        "500":
          description: Server error

    put:
      tags: [Users]
      summary: Update a user's information
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
      responses:
        "200":
          description: User updated
        "403":
          description: Forbidden (non-admin access)
        "404":
          description: User not found
        "500":
          description: Server error

    delete:
      tags: [Users]
      summary: Delete a user by ID
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User deleted
        "403":
          description: Forbidden (non-admin access)
        "404":
          description: User not found
        "500":
          description: Server error

  /users/initialize:
    post:
      tags: [Users]
      summary: Create a new administrator 
      description: Creates the first admin user if no admin exists.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
      responses:
        "201":
          description: User created successfully
        "400":
          description: Invalid request or admin already exists
        "500":
          description: Server error

  /embeddings/local-directory:
    post:
      tags: [Embeddings]
      summary: Generate embeddings from a local directory
      description: Parses a local directory and generates embeddings for the contained files.
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmbeddingDirectoryRequest"
      responses:
        "200":
          description: Successfully generated embeddings from the directory
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmbeddingStatus"
        "400":
          description: Invalid request
        "500":
          description: Internal server error

  /embeddings/{id}/metadata:
    put:
      tags: [Embeddings]
      summary: Update metadata for an embedding entry
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmbeddingMetadataRequest"
      responses:
        "200":
          description: Metadata updated successfully
        "404":
          description: Embedding not found
  /embeddings/{id}/vector:
    put:
      tags: [Embeddings]
      summary: Update an embedding vector for a document
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newContent:
                  type: string
                  example: "Updated content of my document."
                metadata:
                  type: object
                  example: { "author": "John Doe", "category": "AI" }
      responses:
        "200":
          description: Embedding updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Embedding"
        "404":
          description: Embedding not found
        "500":
          description: Server error
  /embeddings/{id}:
    delete:
      tags: [Embeddings]
      summary: Delete an embedding by ID
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Embedding deleted successfully
        "404":
          description: Embedding not found
        "500":
          description: Server error
  /embeddings/search:
    post:
      tags: [Embeddings]
      summary: Perform a similarity search in Qdrant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                queryVector:
                  type: array
                  items:
                    type: number
                  example: [0.12, 0.98, 0.33, 0.76]
                topK:
                  type: integer
                  default: 5
                minScore:
                  type: number
                  default: 0.5
      responses:
        "200":
          description: Search results retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EmbeddingSearchResult"
        "500":
          description: Server error

  /embeddings/list:
    get:
      tags: [Embeddings]
      summary: Retrieve a list of all embeddings with metadata
      security:
        - cookieAuth: []
      responses:
        "200":
          description: List of embeddings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EmbeddingEntry"
        "500":
          description: Internal server error

  /embeddings:
    post:
      tags: [Embeddings]
      summary: Store a new embedding for a document
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filePath:
                  type: string
                  example: "/documents/article.txt"
                content:
                  type: string
                  example: "This is the content of my document."
                metadata:
                  type: object
                  example: { "author": "John Doe", "category": "Technology" }
      responses:
        "201":
          description: Embedding stored successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Embedding"
        "400":
          description: Invalid input
        "500":
          description: Server error

  /chat/context:
    post:
      tags: [AI Chat]
      summary: Inject web page context into chat
      description: Allows the frontend to inject a web page's content into the chat session.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebContextRequest"
      responses:
        "200":
          description: Web context added successfully

  /prompts:
    get:
      tags: [Prompts]
      summary: Retrieve all stored prompts
      security:
        - cookieAuth: []
      responses:
        "200":
          description: List of prompts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Prompt"

    post:
      tags: [Prompts]
      summary: Create a new prompt
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PromptRequest"
      responses:
        "201":
          description: Prompt created

  /prompts/{id}:
    put:
      tags: [Prompts]
      summary: Update an existing prompt
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PromptRequest"
      responses:
        "200":
          description: Prompt updated

    delete:
      tags: [Prompts]
      summary: Delete a prompt
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Prompt deleted

components:
  schemas:
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password

    Blog:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        excerpt:
          type: string
        body:
          type: string
        isDraft:
          type: boolean
        publishAt:
          type: string
          format: date-time

    BlogRequest:
      type: object
      properties:
        title:
          type: string
        excerpt:
          type: string
        body:
          type: string
        isDraft:
          type: boolean
        publishAt:
          type: string
          format: date-time

    Project:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        image:
          type: string
        link:
          type: string

    ProjectRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        image:
          type: string
        link:
          type: string

    CareerEntry:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        company:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
          nullable: true
        technologies:
          type: array
          items:
            type: string
            
    ChatRequest:
      type: object
      properties:
        sessionId:
          type: string
        query:
          type: string
        history:
          type: array
          items:
            $ref: "#/components/schemas/ChatMessage"
      required:
        - sessionId
        - query

    ChatResponse:
      type: object
      properties:
        response:
          type: string
          description: AI-generated response
        sources:
          type: array
          description: Sources used for AI-generated response
          items:
            type: string

    ChatMessage:
      type: object
      properties:
        sessionId:
          type: string
          description: Unique chat session ID
        role:
          type: string
          enum: [user, ai]
          description: Whether the message is from the user or AI
        text:
          type: string
          description: Chat message content
        createdAt:
          type: string
          format: date-time
          description: Timestamp of the message

    SemanticSearchRequest:
      type: object
      properties:
        query:
          type: string
        top_k:
          type: integer
          default: 5
      required:
        - query

    SearchResult:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        excerpt:
          type: string
        sourceType:
          type: string
          enum: [blog, project]

    CodeSearchRequest:
      type: object
      properties:
        query:
          type: string
      required:
        - query

    CodeSearchResult:
      type: object
      properties:
        file:
          type: string
        snippet:
          type: string
        lineNumber:
          type: integer

    EmbeddingStatus:
      type: object
      properties:
        lastUpdated:
          type: string
          format: date-time
        totalEmbeddings:
          type: integer

    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        isAdmin:
          type: boolean

    UserRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        isAdmin:
          type: boolean
      required:
        - username
        - password

    ProjectEmbedding:
      type: object
      properties:
        projectId:
          type: string
          example: "6543abcd5678ef9012345678"
        embedding:
          type: array
          items:
            type: number
          description: "The generated AI embedding vector for this project."

    EmbeddingDirectoryRequest:
      type: object
      properties:
        directoryPath:
          type: string
          description: Absolute path to the directory to be processed
        includeExtensions:
          type: array
          items:
            type: string
          example: [".js", ".md", ".txt", ".json"]
        metadata:
          type: object
          additionalProperties: true
          description: Optional metadata for embeddings

    EmbeddingMetadataRequest:
      type: object
      properties:
        metadata:
          type: object
          additionalProperties: true
          description: Metadata to associate with an embedding entry

    EmbeddingEntry:
      type: object
      properties:
        id:
          type: string
        filePath:
          type: string
        metadata:
          type: object
          additionalProperties: true

    Embedding:
      type: object
      properties:
        id:
          type: integer
        filePath:
          type: string
          example: "/documents/article.txt"
        metadata:
          type: object
          example: { "author": "John Doe", "category": "Technology" }
        externalId:
          type: integer
          example: 12345

    EmbeddingSearchResult:
      type: object
      properties:
        id:
          type: integer
        filePath:
          type: string
        score:
          type: number
        metadata:
          type: object

    WebContextRequest:
      type: object
      properties:
        sessionId:
          type: string
          description: Unique identifier for the chat session
        content:
          type: string
          description: Extracted content from the web page
      required:
        - sessionId
        - content

    Prompt:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          description: Friendly name for the prompt
        template:
          type: string
          description: Prompt template with placeholders
        metadata:
          type: object
          additionalProperties: true
          description: Optional metadata for the prompt

    PromptRequest:
      type: object
      properties:
        name:
          type: string
        template:
          type: string
        metadata:
          type: object
          additionalProperties: true

securitySchemes:
  cookieAuth:
    type: apiKey
    in: cookie
    name: auth-token

================
File: portfolio.node/src/docs/openapi.yml
================
openapi: 3.1.0
info:
  title: Portfolio Backend API
  description: |
    Backend API for the portfolio application following Domain Driven Design principles.
    - Frontend project: portfolio.next
    - Backend project: portfolio.node
    - Backend is supported by MongoDB, Qdrant and Ollama
  version: 1.5.0

tags:
  - name: Public
    description: Public endpoints that don't require authentication
  - name: Auth
    description: Authentication and admin setup endpoints
  - name: Blogs
    description: Blog management endpoints
  - name: Projects
    description: Project management endpoints
  - name: Career
    description: Career timeline management endpoints
  - name: Pages
    description: Static page management endpoints
  - name: Comments
    description: Comment management endpoints
  - name: Files
    description: File management endpoints
  - name: Provider Config
    description: External provider configuration endpoints
  - name: Admin
    description: Admin-only endpoints
  - name: Chat
    description: Chat endpoints
  - name: Search
    description: Search endpoints

servers:
  - url: /api
    description: API base URL

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: auth-token
    bearerAuth:
      type: http
      scheme: bearer

  responses:
    DomainError:
      description: Domain-specific error
      content:
        application/json:
          schema:
            type: object
            required:
              - error
            properties:
              error:
                type: string
                description: Domain-specific error message

    UnauthorizedError:
      description: Authentication required
      content:
        application/json:
          schema:
            type: object
            required:
              - error
            properties:
              error:
                type: string
                example: "Authentication required"

    ForbiddenError:
      description: Admin access required
      content:
        application/json:
          schema:
            type: object
            required:
              - error
            properties:
              error:
                type: string
                example: "Admin access required"

    ValidationError:
      description: Invalid request data
      content:
        application/json:
          schema:
            type: object
            required:
              - error
            properties:
              error:
                type: string
                example: "Invalid request data"

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            required:
              - error
            properties:
              error:
                type: string
                example: "Resource not found"

  schemas:
    Blog:
      type: object
      description: Blog entry model representing a blog post
      required:
        - title
        - excerpt
        - body
      properties:
        id:
          type: string
          description: Unique identifier for the blog entry
        title:
          type: string
          description: Blog title
          minLength: 1
          maxLength: 200
        excerpt:
          type: string
          description: Short summary of the blog content
          minLength: 1
          maxLength: 500
        body:
          type: string
          description: Main content of the blog in markdown format
          minLength: 1
        isDraft:
          type: boolean
          description: Whether the blog is in draft status
          default: true
        publishAt:
          type: string
          format: date-time
          description: When to publish the blog
        createdAt:
          type: string
          format: date-time
          description: When the blog was created
        updatedAt:
          type: string
          format: date-time
          description: When the blog was last updated
        tags:
          type: array
          description: List of tags associated with the blog
          items:
            type: string
        slug:
          type: string
          description: URL-friendly version of the title
          pattern: '^[a-z0-9]+(?:-[a-z0-9]+)*$'

    Project:
      type: object
      description: Project model representing a portfolio project
      required:
        - title
        - excerpt
        - description
      properties:
        id:
          type: string
          description: Unique identifier for the project
        title:
          type: string
          description: Project title
          minLength: 1
          maxLength: 200
        excerpt:
          type: string
          description: Short summary of the project
          minLength: 1
          maxLength: 500
        description:
          type: string
          description: Detailed project description in markdown format
          minLength: 1
        isDraft:
          type: boolean
          description: Whether the project is in draft status
          default: true
        publishAt:
          type: string
          format: date-time
          description: When to publish the project
        createdAt:
          type: string
          format: date-time
          description: When the project was created
        updatedAt:
          type: string
          format: date-time
          description: When the project was last updated
        tags:
          type: array
          description: List of technologies used in the project
          items:
            type: string
        links:
          type: object
          description: External links related to the project
          properties:
            github:
              type: string
              format: uri
            demo:
              type: string
              format: uri
        slug:
          type: string
          description: URL-friendly version of the title
          pattern: '^[a-z0-9]+(?:-[a-z0-9]+)*$'

    CareerTimeline:
      type: object
      description: Career timeline entry model representing a work experience
      required:
        - title
        - company
        - startDate
      properties:
        id:
          type: string
          description: Unique identifier for the career entry
        title:
          type: string
          description: Job title
          minLength: 1
          maxLength: 200
        company:
          type: string
          description: Company name
          minLength: 1
          maxLength: 200
        startDate:
          type: string
          format: date
          description: When the position started
        endDate:
          type: string
          format: date
          description: When the position ended (null if current)
        description:
          type: string
          description: Job description in markdown format
        location:
          type: string
          description: Job location
          maxLength: 200
        skills:
          type: array
          description: Skills used in this position
          items:
            type: string
        order:
          type: integer
          description: Display order in the timeline (lower numbers first)
          minimum: 0
        isDraft:
          type: boolean
          description: Whether the entry is in draft status
          default: true

    Comment:
      type: object
      description: Comment model for blog posts and projects
      required:
        - parentType
        - parentId
        - content
      properties:
        id:
          type: string
          description: Unique identifier for the comment
        parentType:
          type: string
          enum: [blog, project]
          description: Type of content being commented on
        parentId:
          type: string
          description: ID of the blog or project
        content:
          type: string
          description: Comment content
          minLength: 1
          maxLength: 1000
        name:
          type: string
          description: Commenter's name
          maxLength: 100
        email:
          type: string
          description: Commenter's email
          format: email
          maxLength: 255
        approved:
          type: boolean
          description: Whether the comment is approved and visible
          default: false
        createdAt:
          type: string
          format: date-time
          description: When the comment was created
        updatedAt:
          type: string
          format: date-time
          description: When the comment was last updated

    Page:
      type: object
      description: Static page model for custom content pages
      required:
        - title
        - content
        - slug
      properties:
        id:
          type: string
          description: Unique identifier for the page
        title:
          type: string
          description: Page title
          minLength: 1
          maxLength: 200
        content:
          type: string
          description: Page content in markdown format
          minLength: 1
        slug:
          type: string
          description: URL-friendly identifier for the page
          pattern: '^[a-z0-9]+(?:-[a-z0-9]+)*$'
        isDraft:
          type: boolean
          description: Whether the page is in draft status
          default: true
        createdAt:
          type: string
          format: date-time
          description: When the page was created
        updatedAt:
          type: string
          format: date-time
          description: When the page was last updated

    ProviderConfig:
      type: object
      description: Configuration model for external service providers
      required:
        - provider
        - config
      properties:
        id:
          type: string
          description: Unique identifier for the provider configuration
        provider:
          type: string
          description: Name of the provider (e.g., 'ollama', 'qdrant')
          enum: [ollama, qdrant]
        config:
          type: object
          description: Provider-specific configuration
          additionalProperties: true
        createdAt:
          type: string
          format: date-time
          description: When the configuration was created
        updatedAt:
          type: string
          format: date-time
          description: When the configuration was last updated

    ChatMessage:
      type: object
      description: Chat message model for AI assistant conversations
      required:
        - content
      properties:
        content:
          type: string
          description: Message content
          minLength: 1
          maxLength: 2000
        sessionId:
          type: string
          description: Chat session identifier for maintaining conversation context
        role:
          type: string
          description: Role of the message sender
          enum: [user, assistant]
        timestamp:
          type: string
          format: date-time
          description: When the message was sent

    AuthCredentials:
      type: object
      description: Authentication credentials for user login and registration
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: Username for authentication
          minLength: 3
          maxLength: 50
          pattern: '^[a-zA-Z0-9_-]+$'
        password:
          type: string
          description: Password for authentication
          format: password
          minLength: 8
          maxLength: 100

paths:
  /auth/register:
    post:
      tags: [Public, Auth]
      summary: Register a new user
      description: Create a new user account with provided credentials
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthCredentials'
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User registered successfully"
                  setupRequired:
                    type: boolean
                    description: "True if this is the first user (admin setup required)"
        400:
          $ref: '#/components/responses/ValidationError'
        409:
          description: Username already exists
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DomainError'

  /auth/login:
    post:
      tags: [Auth]
      summary: Login to admin panel
      description: |
        Authenticate as an admin user.
        Returns authentication tokens on success.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthCredentials'
      responses:
        200:
          description: Login successful
          headers:
            Set-Cookie:
              schema:
                type: string
                example: auth-token=<token>
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Login successful"
                  user:
                    type: object
                    properties:
                      username:
                        type: string
                      isAdmin:
                        type: boolean
        400:
          $ref: '#/components/responses/ValidationError'
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /auth/logout:
    post:
      tags: [Auth]
      summary: Logout from admin panel
      description: |
        Invalidate the current authentication session.
      responses:
        200:
          description: Logged out successfully
          headers:
            Set-Cookie:
              schema:
                type: string
                example: auth-token=; expires=Thu, 01 Jan 1970 00:00:00 GMT
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logged out successfully"

  /auth/status:
    get:
      tags: [Auth]
      summary: Check authentication status
      description: |
        Check if the current session is authenticated and valid.
      responses:
        200:
          description: Authentication status
          content:
            application/json:
              schema:
                type: object
                properties:
                  authenticated:
                    type: boolean
                    description: "True if user is authenticated"
                  setupRequired:
                    type: boolean
                    description: "True if admin setup is required"
                  user:
                    type: object
                    description: "User details if authenticated"
                    properties:
                      username:
                        type: string
                      isAdmin:
                        type: boolean

  /blogs:
    get:
      tags: [Public]
      summary: Get published blogs
      description: Get all published blog entries
      responses:
        200:
          description: List of published blogs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Blog'
        404:
          $ref: '#/components/responses/NotFoundError'

  /blogs/{slug}:
    parameters:
      - name: slug
        in: path
        required: true
        schema:
          type: string
    get:
      tags: [Public]
      summary: Get published blog by slug
      description: Get a specific published blog entry by its slug
      responses:
        200:
          description: Blog details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
        404:
          $ref: '#/components/responses/NotFoundError'

  /blogs/search:
    get:
      tags: [Public]
      summary: Search published blogs
      description: Search through published blog entries
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: minScore
          in: query
          schema:
            type: number
            default: 0.7
      responses:
        200:
          description: Search results
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    score:
                      type: number
                    document:
                      $ref: '#/components/schemas/Blog'
        400:
          $ref: '#/components/responses/ValidationError'

  /projects:
    get:
      tags: [Public]
      summary: Get all published projects
      description: Get a list of all published, non-draft projects
      responses:
        200:
          description: List of published projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        404:
          $ref: '#/components/responses/NotFoundError'

  /projects/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags: [Public]
      summary: Get published project by ID
      description: Get a specific published project by its ID
      responses:
        200:
          description: Project details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        404:
          $ref: '#/components/responses/NotFoundError'

  /projects/search:
    post:
      tags: [Public]
      summary: Search projects
      description: Search through published projects
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - query
              properties:
                query:
                  type: string
                limit:
                  type: integer
                  default: 10
                minScore:
                  type: number
                  default: 0.7
      responses:
        200:
          description: Search results
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    score:
                      type: number
                    document:
                      $ref: '#/components/schemas/Project'
        400:
          $ref: '#/components/responses/ValidationError'

  /chat:
    post:
      tags: [Public, Chat]
      summary: Process chat message
      description: Send a message to the AI assistant and get a response
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatMessage'
      responses:
        200:
          description: Chat response
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
                    description: AI assistant's response
        400:
          $ref: '#/components/responses/ValidationError'
        503:
          description: AI service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DomainError'

  /chat/greeting:
    get:
      tags: [Public, Chat]
      summary: Get random AI greeting
      description: Get a randomly generated greeting from the AI assistant
      responses:
        200:
          description: Random greeting
          content:
            application/json:
              schema:
                type: object
                properties:
                  greeting:
                    type: string
        503:
          description: AI service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DomainError'

  /chat/warmup-status:
    get:
      tags: [Public, Chat]
      summary: Check AI warmup status
      description: Check if the AI model is ready to process requests
      responses:
        200:
          description: Warmup status
          content:
            application/json:
              schema:
                type: object
                properties:
                  warmupComplete:
                    type: boolean
        503:
          description: AI service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DomainError'

  /career:
    get:
      tags: [Public]
      summary: Get published career timeline entries
      description: Get a list of all published career timeline entries
      responses:
        200:
          description: List of published career entries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CareerTimeline'
        404:
          $ref: '#/components/responses/NotFoundError'

  /pages/{slug}:
    parameters:
      - name: slug
        in: path
        required: true
        schema:
          type: string
          description: URL-friendly identifier for the page
    get:
      tags: [Public]
      summary: Get published page
      description: Get a specific published page by its slug
      responses:
        200:
          description: Page content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
        400:
          $ref: '#/components/responses/ValidationError'
        404:
          $ref: '#/components/responses/NotFoundError'

  /files/{filename}:
    parameters:
      - name: filename
        in: path
        required: true
        schema:
          type: string
    get:
      tags: [Public, Files]
      summary: Get public file by filename
      description: Get a specific public file by its filename
      responses:
        200:
          description: File content
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        404:
          $ref: '#/components/responses/NotFoundError'

  /search:
    post:
      tags: [Public, Search]
      summary: Global search across all entities
      description: Search across all published content (blogs, projects, pages)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - query
              properties:
                query:
                  type: string
                limit:
                  type: integer
                  default: 10
                minScore:
                  type: number
                  default: 0.7
      responses:
        200:
          description: Search results
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    score:
                      type: number
                    document:
                      type: object
        400:
          $ref: '#/components/responses/ValidationError'

  /comments/{parentType}/{parentId}:
    parameters:
      - name: parentType
        in: path
        required: true
        schema:
          type: string
          enum: [blog, project]
          description: Type of content being commented on
      - name: parentId
        in: path
        required: true
        schema:
          type: string
          description: ID of the blog or project
    get:
      tags: [Public]
      summary: Get approved comments
      description: |
        Get all approved comments for a specific content item.
        This endpoint is public and returns only approved comments.
      responses:
        200:
          description: List of approved comments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        400:
          $ref: '#/components/responses/ValidationError'
        404:
          description: Parent content not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DomainError'
    post:
      tags: [Public]
      summary: Submit new comment
      description: |
        Submit a new comment for a specific content item.
        The comment will be pending admin approval before being publicly visible.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
                - name
                - email
              properties:
                content:
                  type: string
                  minLength: 1
                  maxLength: 1000
                  description: Comment content
                name:
                  type: string
                  minLength: 1
                  maxLength: 100
                  description: Commenter's name
                email:
                  type: string
                  format: email
                  maxLength: 255
                  description: Commenter's email (will not be publicly displayed)
      responses:
        201:
          description: Comment submitted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Comment submitted and pending approval"
                  id:
                    type: string
                    description: ID of the created comment
        400:
          $ref: '#/components/responses/ValidationError'
        404:
          description: Parent content not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DomainError'

  /admin/comments:
    get:
      tags: [Comments]
      summary: Get all comments
      description: |
        Get all comments regardless of approval status.
        Supports filtering by content type, content ID, and approval status.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      parameters:
        - name: parentType
          in: query
          schema:
            type: string
            enum: [blog, project]
            description: Optional filter by content type
        - name: parentId
          in: query
          schema:
            type: string
            description: Optional filter by content ID
        - name: approved
          in: query
          schema:
            type: boolean
            description: Optional filter by approval status
      responses:
        200:
          description: List of comments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'

  /admin/comments/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          description: Comment identifier
    put:
      tags: [Comments]
      summary: Update comment status
      description: |
        Approve or reject a comment.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - approved
              properties:
                approved:
                  type: boolean
                  description: Whether to approve or reject the comment
      responses:
        200:
          description: Comment updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        400:
          $ref: '#/components/responses/ValidationError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          description: Comment not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DomainError'
    delete:
      tags: [Comments]
      summary: Delete comment
      description: |
        Permanently delete a comment.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        204:
          description: Comment deleted successfully
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          description: Comment not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DomainError'

  /admin/setup:
    post:
      tags: [Auth]
      summary: Initial admin setup
      description: |
        Create the first admin user.
        This endpoint is only available when no admin users exist.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthCredentials'
      responses:
        201:
          description: Admin user created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Admin setup completed"
        400:
          $ref: '#/components/responses/ValidationError'
        409:
          description: Admin already exists
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DomainError'

  /admin/blogs:
    get:
      tags: [Blogs]
      summary: Get all blogs
      description: |
        Get all blogs regardless of draft status.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        200:
          description: List of all blogs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Blog'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
    post:
      tags: [Blogs]
      summary: Create new blog
      description: |
        Create a new blog entry.
        Defaults to draft status.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Blog'
      responses:
        201:
          description: Blog created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
        400:
          $ref: '#/components/responses/ValidationError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'

  /admin/projects:
    get:
      tags: [Projects]
      summary: Get all projects
      description: |
        Get all projects regardless of draft status.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        200:
          description: List of all projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
    post:
      tags: [Projects]
      summary: Create new project
      description: |
        Create a new project entry.
        Defaults to draft status.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        201:
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        400:
          $ref: '#/components/responses/ValidationError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'

  /admin/career:
    get:
      tags: [Career]
      summary: Get all career entries
      description: |
        Get all career timeline entries regardless of draft status.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        200:
          description: List of all career entries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CareerTimeline'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
    post:
      tags: [Career]
      summary: Create new career entry
      description: |
        Create a new career timeline entry.
        Defaults to draft status.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CareerTimeline'
      responses:
        201:
          description: Career entry created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CareerTimeline'
        400:
          $ref: '#/components/responses/ValidationError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'

  /admin/pages:
    get:
      tags: [Pages]
      summary: Get all pages
      description: |
        Get all pages regardless of draft status.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        200:
          description: List of all pages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Page'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
    post:
      tags: [Pages]
      summary: Create new page
      description: |
        Create a new static page.
        Defaults to draft status.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Page'
      responses:
        201:
          description: Page created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
        400:
          $ref: '#/components/responses/ValidationError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'

  /admin/provider-config:
    get:
      tags: [Provider Config]
      summary: Get provider configuration
      description: Get the current configuration for external providers. Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        200:
          description: List of provider configurations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProviderConfig'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
    post:
      tags: [Provider Config]
      summary: Update provider configuration
      description: Update the configuration for external providers. Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProviderConfig'
      responses:
        201:
          description: Provider configuration created/updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderConfig'
        400:
          $ref: '#/components/responses/ValidationError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'

  /admin/files:
    get:
      tags: [Files]
      summary: List all files
      description: Get a list of all uploaded files. Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        200:
          description: List of files
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    filename:
                      type: string
                    size:
                      type: integer
                    lastModified:
                      type: string
                      format: date-time
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
    post:
      tags: [Files]
      summary: Upload file
      description: Upload a new file to the server. Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
      responses:
        201:
          description: File uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  filename:
                    type: string
                  url:
                    type: string
                    format: uri
        400:
          $ref: '#/components/responses/ValidationError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'

  /admin/blogs/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          description: Blog identifier
    get:
      tags: [Blogs]
      summary: Get blog by ID
      description: |
        Get a specific blog entry regardless of draft status.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        200:
          description: Blog details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          description: Blog not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DomainError'
    put:
      tags: [Blogs]
      summary: Update blog
      description: |
        Update a blog entry.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Blog'
      responses:
        200:
          description: Blog updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
        400:
          $ref: '#/components/responses/ValidationError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          description: Blog not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DomainError'
    delete:
      tags: [Blogs]
      summary: Delete blog
      description: |
        Permanently delete a blog entry.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        204:
          description: Blog deleted successfully
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          description: Blog not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DomainError'

  /admin/projects/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          description: Project identifier
    get:
      tags: [Projects]
      summary: Get project by ID
      description: |
        Get a specific project regardless of draft status.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        200:
          description: Project details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DomainError'
    put:
      tags: [Projects]
      summary: Update project
      description: |
        Update a project.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        200:
          description: Project updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        400:
          $ref: '#/components/responses/ValidationError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DomainError'
    delete:
      tags: [Projects]
      summary: Delete project
      description: |
        Permanently delete a project.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        204:
          description: Project deleted successfully
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DomainError'

  /admin/pages/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          description: Page identifier
    get:
      tags: [Pages]
      summary: Get page by ID
      description: |
        Get a specific page regardless of draft status.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        200:
          description: Page details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          description: Page not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DomainError'
    put:
      tags: [Pages]
      summary: Update page
      description: |
        Update a page.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Page'
      responses:
        200:
          description: Page updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
        400:
          $ref: '#/components/responses/ValidationError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          description: Page not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DomainError'
    delete:
      tags: [Pages]
      summary: Delete page
      description: |
        Permanently delete a page.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        204:
          description: Page deleted successfully
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          description: Page not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DomainError'

  /admin/files/{filename}:
    parameters:
      - name: filename
        in: path
        required: true
        schema:
          type: string
          description: Name of the file including extension
    get:
      tags: [Files]
      summary: Get file details
      description: |
        Get details about a specific file.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        200:
          description: File details
          content:
            application/json:
              schema:
                type: object
                properties:
                  filename:
                    type: string
                  size:
                    type: integer
                  lastModified:
                    type: string
                    format: date-time
                  url:
                    type: string
                    format: uri
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DomainError'
    delete:
      tags: [Files]
      summary: Delete file
      description: |
        Permanently delete a file.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        204:
          description: File deleted successfully
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DomainError'

  /admin/career/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          description: Career timeline entry identifier
    get:
      tags: [Career]
      summary: Get career entry by ID
      description: |
        Get a specific career timeline entry regardless of draft status.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        200:
          description: Career timeline entry details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CareerTimeline'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          description: Career timeline entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DomainError'
    put:
      tags: [Career]
      summary: Update career entry
      description: |
        Update a career timeline entry.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CareerTimeline'
      responses:
        200:
          description: Career timeline entry updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CareerTimeline'
        400:
          $ref: '#/components/responses/ValidationError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          description: Career timeline entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DomainError'
    delete:
      tags: [Career]
      summary: Delete career entry
      description: |
        Permanently delete a career timeline entry.
        Requires admin authentication.
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        204:
          description: Career timeline entry deleted successfully
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          description: Career timeline entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DomainError'

================
File: portfolio.node/src/middlewares/admin.js
================
module.exports = (req, res, next) => {
    if (!req.user || !req.user.isAdmin) {
      return res.status(403).json({ message: "Forbidden: Admin access required" });
    }
    next();
  };

================
File: portfolio.node/src/middlewares/auth.js
================
const authService = require("../services/authService");

module.exports = (req, res, next) => {
  const token = req.cookies["auth-token"];
  if (!token) {
    return res.status(401).json({ message: "Unauthorized" });
  }

  try {
    const decoded = authService.verifyToken(token);
    req.user = decoded; 
    next();
  } catch (error) {
    return res.status(401).json({ message: "Invalid or expired token" });
  }
};

================
File: portfolio.node/src/middlewares/metrics.js
================
// portfolio.node/src/middleware/metrics.js
'use strict';

const opentelemetry = require('@opentelemetry/api');

// Get a meter instance; the name can be anything that identifies your service.
const meter = opentelemetry.metrics.getMeter('portfolio-node');

// Create a histogram metric to record request durations (in seconds).
const requestDurationHistogram = meter.createHistogram('http_request_duration_seconds', {
  description: 'Duration of HTTP requests in seconds',
  // Optional: define bucket boundaries if desired
  boundaries: [0.1, 0.5, 1, 2, 5, 10],
});

module.exports = function metricsMiddleware(req, res, next) {
  // Record the start time using high-resolution timer.
  const start = process.hrtime();
  
  // When the response is finished, calculate duration and record metric.
  res.on('finish', () => {
    const diff = process.hrtime(start);
    const durationSeconds = diff[0] + diff[1] / 1e9; // seconds

    // Record the duration along with labels to distinguish endpoints.
    requestDurationHistogram.record(durationSeconds, {
      route: req.route ? req.route.path : req.path,
      method: req.method,
      statusCode: res.statusCode,
    });
  });
  
  next();
};

================
File: portfolio.node/src/middlewares/requestLogger.js
================
const requestLogger = (req, res, next) => {
    const startTime = Date.now();

    // Log request details
    console.log('\ud83d\udcdd [Request] Incoming request', {
        method: req.method,
        url: req.url,
        origin: req.get('origin'),
        userAgent: req.get('user-agent'),
        referer: req.get('referer'),
        host: req.get('host'),
        cookies: req.cookies,
        timestamp: new Date().toISOString()
    });

    // Intercept the response to log its status
    const originalSend = res.send;
    res.send = function(body) {
        const duration = Date.now() - startTime;
        
        // Log response details
        console.log('\ud83d\udcdd [Response]', {
            method: req.method,
            url: req.url,
            status: res.statusCode,
            duration: `${duration}ms`,
            timestamp: new Date().toISOString(),
            bodyLength: body ? body.length : 0
        });

        // If there's an error status, log more details
        if (res.statusCode >= 400) {
            console.error('\u274c [Error Response]', {
                method: req.method,
                url: req.url,
                status: res.statusCode,
                body: typeof body === 'string' ? body : JSON.stringify(body),
                timestamp: new Date().toISOString()
            });
        }

        originalSend.call(this, body);
    };

    next();
};

module.exports = requestLogger;

================
File: portfolio.node/src/middlewares/validate.js
================
// portfolio.node/src/middleware/validate.js
module.exports = (schema) => {
    return (req, res, next) => {
      const { error } = schema.validate(req.body);
      if (error) {
        return res.status(400).json({ error: error.details[0].message });
      }
      next();
    };
  };

================
File: portfolio.node/src/models/BlogEntry.js
================
const mongoose = require("mongoose");
const counterService = require("../services/counterService");

const BlogEntrySchema = new mongoose.Schema({
  title: { type: String, required: true },
  excerpt: { type: String, required: true },
  // Blog body stored in Markdown format.
  body: { type: String, required: true },
  isDraft: { type: Boolean, default: false },
  publishAt: { type: Date },
  vectorId : {type: Number, unique: true },
  link : {type : String, default: null},
  tags: {type: Array, default: []}

}, { timestamps: true });

// Generate slug and link from title.
BlogEntrySchema.pre('save', async function(next) {
  const slug = this.title
    .toLowerCase()
    .replace(/[^\w\s-]/g, '') // Remove special characters.
    .replace(/\s+/g, '-')     // Replace spaces with hyphens.
    .replace(/-+/g, '-');     // Collapse multiple hyphens.
  
  this.link = this.link || `${slug}-${this._id}`;
  this.vectorId = this.vectorId || await counterService.getNextVectorId();
  next();
});

module.exports = mongoose.model("BlogEntry", BlogEntrySchema);

================
File: portfolio.node/src/models/CareerTimeline.js
================
const mongoose = require("mongoose");
const counterService = require("../services/counterService");

const CareerTimelineSchema = new mongoose.Schema({
  title: { type: String, required: true }, // Job title, role, or key milestone
  company: { type: String }, // Employer or organization
  startDate: { type: Date, required: true },
  endDate: { type: Date, default: null }, // Null if currently active
  description: { type: String }, // Brief description of responsibilities
  skills: [{ type: String }], // List of skills used
  linkedEntries: [{ type: mongoose.Schema.Types.ObjectId, ref: "CareerTimeline" }], // Links to related events
  importedFromLinkedIn: { type: Boolean, default: false }, // Flag for LinkedIn imports
  vectorId : {type: Number, unique: true },
});

// Generate slug and link from title.
CareerTimelineSchema.pre('save', async function(next) {
  this.vectorId = this.vectorId || await counterService.getNextVectorI("career_vectorid");
  next();
});

module.exports = mongoose.model("CareerTimeline", CareerTimelineSchema);

================
File: portfolio.node/src/models/ChatMessage.js
================
// portfolio.node/src/models/ChatMessage.js
const mongoose = require("mongoose");

const chatMessageSchema = new mongoose.Schema(
  {
    sessionId: {
      type: String,
      required: true,
      index: true, // Optimized lookup
    },
    role: {
      type: String,
      enum: ["user", "ai"],
      required: true,
    },
    text: {
      type: String,
      required: true,
    },
  },
  {
    timestamps: true, // Adds createdAt and updatedAt fields
  }
);

module.exports = mongoose.model("ChatMessage", chatMessageSchema);

================
File: portfolio.node/src/models/Comment.js
================
const mongoose = require("mongoose");

const CommentSchema = new mongoose.Schema(
  {
    // The author of the comment (could be a username or user ID)
    author: { type: String, required: true },
    // The text content of the comment
    text: { type: String, required: true },
    // Reference to the blog post this comment is associated with
    blog: { type: mongoose.Schema.Types.ObjectId, ref: "BlogEntry", required: true },
    // For nested replies: if this comment is a reply, reference its parent comment.
    parent: { type: mongoose.Schema.Types.ObjectId, ref: "Comment", default: null },
    // Flag to indicate if the comment has been redacted (i.e., moderated)
    redacted: { type: Boolean, default: false },
  },
  {
    timestamps: true, // Automatically adds createdAt and updatedAt fields.
  }
);

module.exports = mongoose.model("Comment", CommentSchema);

================
File: portfolio.node/src/models/Counters.js
================
// portfolio.node/src/models/ProviderConfig.js
const mongoose = require("mongoose");

const CounterSchema = new mongoose.Schema({
  Value: { type: Number, required: true},
  Name: {type: String},

}, { timestamps: true });

module.exports = mongoose.model("Counter", CounterSchema);

================
File: portfolio.node/src/models/Embedding.js
================
const mongoose = require("mongoose");
const counterService = require("../services/counterService");

const EmbeddingSchema = new mongoose.Schema({
    filePath: { type: String, required: true },
    metadata: { type: Object, default: {} },
    externalId: { type: Number, required: true},
    vectorId : {type: Number, unique: true },

}, { timestamps: true });

EmbeddingSchema.pre('save', async function(next) {
  this.vectorId = this.vectorId || await counterService.getNextVectorI("embedding_vectorid");
  next();
});

module.exports = mongoose.model("Embedding", EmbeddingSchema);

================
File: portfolio.node/src/models/Metadata.js
================
const MetadataSchema = new mongoose.Schema({
    key: { type: String, required: true },
    value: { type: String, required: true },
    entityId: { type: mongoose.Schema.Types.ObjectId, required: true },
    entityType: { type: String, enum: ["Project", "BlogEntry", "File"], required: true },
  });

================
File: portfolio.node/src/models/Page.js
================
const mongoose = require("mongoose");
const counterService = require("../services/counterService");

const PageSchema = new mongoose.Schema(
  {
    title: { type: String, required: true },
    slug: { type: String, required: true, unique: true }, // URL-friendly identifier
    content: { type: String, required: true }, // Markdown content
    tags: { type: [String], default: [] }, // Tags for categorization
    vectorId : {type: Number, unique: true },
  },
  { timestamps: true }
);

PageSchema.pre('save', async function(next) {
  this.vectorId = this.vectorId || await counterService.getNextVectorId("page_vectorid");
  next();
});

module.exports = mongoose.model("Page", PageSchema);

================
File: portfolio.node/src/models/Project.js
================
// portfolio.node/src/models/Project.js
const mongoose = require("mongoose");
const counterService = require("../services/counterService");

const ProjectSchema = new mongoose.Schema({
  title: { type: String, required: true },
  excerpt: { type: String, required: true, default: "" },
  description: { type: String, required: true },
  image: { type: String },
  link: { type: String },
  isDraft: { type: Boolean, default: false },
  publishAt: { type: Date, default: Date.now },
  tags: { type: [String], default: [] }, 
  industry: { type: String, default: "General" }, 
  vectorId : {type: Number, unique: true },
}, { timestamps: true });

ProjectSchema.pre('save', async function(next) {
  this.vectorId = this.vectorId || await counterService.getNextVectorI("project_vectorid");
  next();
});

module.exports = mongoose.model("Project", ProjectSchema);

================
File: portfolio.node/src/models/Prompt.js
================
const mongoose = require("mongoose");

const PromptSchema = new mongoose.Schema({
    name: { type: String, required: true, unique: true }, // Unique identifier for the prompt
    template: { type: String, required: true }, // The actual text of the prompt
    metadata: { type: Object, default: {} } // Optional metadata
}, { timestamps: true });

module.exports = mongoose.model("Prompt", PromptSchema);

================
File: portfolio.node/src/models/ProviderConfig.js
================
// portfolio.node/src/models/ProviderConfig.js
const mongoose = require("mongoose");

const ProviderConfigSchema = new mongoose.Schema({
  provider: { type: String, required: true, unique: true },
  embeddingModel : { type: String, required: true, default: "mistral"},
  chatModel: { type: String, required: true, default: "mistral"},
  clientId: { type: String, required: true },
  clientSecret: { type: String, required: true },
  callbackURL: { type: String, required: true },
}, { timestamps: true });

module.exports = mongoose.model("ProviderConfig", ProviderConfigSchema);

================
File: portfolio.node/src/models/User.js
================
const mongoose = require("mongoose");
const bcrypt = require("bcrypt");

const UserSchema = new mongoose.Schema({
  username: { type: String, required: true, unique: true },
  passwordHash: { type: String, required: true },
  // New field to indicate if the user has admin privileges.
  isAdmin: { type: Boolean, default: false },
});

// Hash password before saving
UserSchema.pre("save", async function (next) {
  if (!this.isModified("passwordHash")) return next();
  const salt = await bcrypt.genSalt(10);
  this.passwordHash = await bcrypt.hash(this.passwordHash, salt);
  next();
});

// Compare password for login
UserSchema.methods.validatePassword = async function (password) {
  return bcrypt.compare(password, this.passwordHash);
};

module.exports = mongoose.model("User", UserSchema);

================
File: portfolio.node/src/routes/admin/blogRoutes.js
================
const express = require("express");
const authMiddleware = require("../../middlewares/auth");
const adminAuth = require("../../middlewares/admin");
const blogService = require("../../services/blogService");

const router = express.Router();

router.get("/", authMiddleware, adminAuth, async (req, res) => {
    try {

        return await blogService.getAllBlogs({});
        
    } catch (error) {
        console.error("❌ Error fetching blogs:", error.message);
        res.status(500).json({ error: "Failed to fetch blogs" }); // Generic error for public
    }
});
/**
 * @route POST /api/admin/blogs
 * @desc Create a new blog post
 * @access Admin
 */
router.post("/", authMiddleware, adminAuth, async (req, res) => {
    try {
        const newBlog = await blogService.createBlog(req.body);
        res.status(201).json(newBlog);
    } catch (error) {
        console.error("❌ Error creating blog:", error.message);
        res.status(500).json({ error: error.message });
    }
});

/**
 * @route PUT /api/admin/blogs/:id
 * @desc Update a blog post by ID
 * @access Admin
 */
router.put("/:id", authMiddleware, adminAuth, async (req, res) => {
    try {
        const updatedBlog = await blogService.updateBlog(req.params.id, req.body);
        if (!updatedBlog) return res.status(404).json({ error: "Blog not found" });
        res.json(updatedBlog);
    } catch (error) {
        console.error("❌ Error updating blog:", error.message);
        res.status(500).json({ error: error.message });
    }
});

/**
 * @route DELETE /api/admin/blogs/:id
 * @desc Delete a blog post by ID
 * @access Admin
 */
router.delete("/:id", authMiddleware, adminAuth, async (req, res) => {
    try {
        const deleted = await blogService.deleteBlog(req.params.id);
        if (!deleted) return res.status(404).json({ error: "Blog not found" });
        res.json({ message: "Blog deleted successfully" });
    } catch (error) {
        console.error("❌ Error deleting blog:", error.message);
        res.status(500).json({ error: error.message });
    }
});

/**
 * @route POST /api/admin/blogs/generate-embeddings
 * @desc Refresh blog embeddings (delta or full)
 * @access Admin
 */
router.post("/generate-embeddings", authMiddleware, adminAuth, async (req, res) => {
    try {
        const { fullRefresh = false } = req.body;
        const result = await blogService.refreshBlogEmbeddings(fullRefresh);
        res.json(result);
    } catch (error) {
        console.error("❌ Error generating blog embeddings:", error.message);
        res.status(500).json({ error: error.message });
    }
});

module.exports = router;

================
File: portfolio.node/src/routes/admin/index.js
================
/**
 * Admin Routes Index
 * Following Domain Driven Design and Clean Architecture principles
 */

const express = require("express");
const authMiddleware = require("../../middlewares/auth");
const adminAuth = require("../../middlewares/admin");

const blogRoutes = require("./blogRoutes");
const projectRoutes = require("./projectRoutes");
const userRoutes = require("../../routes/userRoutes");
const providerConfigRoutes = require("../../routes/providerConfigRoutes");
const careerRoutes = require("../../routes/careerTimelineRoutes");
const pageRoutes = require("../../routes/pageRoutes");

const router = express.Router();

// Apply auth middleware to all admin routes
router.use(authMiddleware);
router.use(adminAuth);

// Mount admin-specific routes
router.use("/blogs", blogRoutes);
router.use("/projects", projectRoutes);
router.use("/users", userRoutes);
router.use("/provider-configs", providerConfigRoutes);
router.use("/career", careerRoutes);
router.use("/pages", pageRoutes);

module.exports = router;

================
File: portfolio.node/src/routes/admin/projectRoutes.js
================
const express = require("express");
const authMiddleware = require("../../middlewares/auth");
const adminAuth = require("../../middlewares/admin");
const projectService = require("../../services/projectService");

const router = express.Router();

/**
 * @route POST /api/admin/projects
 * @desc Create a new project
 * @access Admin
 */
router.post("/", authMiddleware, adminAuth, async (req, res) => {
    try {
        const newProject = await projectService.createProject(req.body);
        res.status(201).json(newProject);
    } catch (error) {
        console.error("❌ Error creating project:", error.message);
        res.status(500).json({ error: error.message });
    }
});

/**
 * @route PUT /api/admin/projects/:id
 * @desc Update a project by ID
 * @access Admin
 */
router.put("/:id", authMiddleware, adminAuth, async (req, res) => {
    try {
        const updatedProject = await projectService.updateProject(req.params.id, req.body);
        if (!updatedProject) return res.status(404).json({ error: "Project not found" });
        res.json(updatedProject);
    } catch (error) {
        console.error("❌ Error updating project:", error.message);
        res.status(500).json({ error: error.message });
    }
});

/**
 * @route DELETE /api/admin/projects/:id
 * @desc Delete a project by ID
 * @access Admin
 */
router.delete("/:id", authMiddleware, adminAuth, async (req, res) => {
    try {
        const deleted = await projectService.deleteProject(req.params.id);
        if (!deleted) return res.status(404).json({ error: "Project not found" });
        res.json({ message: "Project deleted successfully" });
    } catch (error) {
        console.error("❌ Error deleting project:", error.message);
        res.status(500).json({ error: error.message });
    }
});

module.exports = router;

================
File: portfolio.node/src/routes/aiRoutes.js
================
const express = require("express");
const isAuth = require("../middlewares/auth");
const isAdmin = require("../middlewares/admin");

const { initializeProjectEmbeddings } = require("../services/projectService");
const { initializeBlogEmbeddings } = require("../services/blogService");
const { initializePageEmbeddings } = require("../services/pageService");
const { initializeFileEmbeddings } = require("../services/fileService");

const router = express.Router();

/**
 * 📌 Initialize All Embeddings (Calls Each Service)
 */
router.post("/initialize", isAuth, isAdmin, async (req, res) => {
    try {
        console.log("🔄 Starting global embedding initialization...");
        await initializeProjectEmbeddings();
        await initializeBlogEmbeddings();
        await initializePageEmbeddings();
        await initializeFileEmbeddings();
        console.log("✅ All embeddings initialized successfully!");
        res.json({ message: "Embeddings initialization complete." });
    } catch (error) {
        console.error("❌ Error initializing embeddings:", error);
        res.status(500).json({ error: "Failed to initialize embeddings" });
    }
});

module.exports = router;

================
File: portfolio.node/src/routes/authRoutes.js
================
const express = require("express");
const authService = require("../services/authService");
const User = require('../models/User');
const router = express.Router();

// Register a new user using the auth service
router.post("/register", async (req, res) => {
  try {
    const { username, password, isAdmin } = req.body;
    await authService.registerUser({ username, password, isAdmin });
    res.status(201).json({ message: "User created successfully" });
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
});

// Login a user using the auth service
router.post("/login", async (req, res) => {
  try {
    const { username, password } = req.body;
    const token = await authService.loginUser({ username, password });
    
    // Set the token in an HTTP-only cookie
    res.cookie("auth-token", token, {
      httpOnly: true,
      secure: process.env.NODE_ENV === "production",
      sameSite: "Strict",
      maxAge: 3600000, // 1 hour
    });
    
    res.json({ message: "Login successful" });
  } catch (error) {
    res.status(401).json({ message: error.message });
  }
});

// Check authentication using the auth service
router.get("/status", async (req, res) => {

  const admin = await User.findOne({ isAdmin: true });
  if ( !admin){
    console.debug("authentication failed", "no admin user");
    return res.status(200).json({ authenticated: false, setupRequired: true });
  }
  let token = req.cookies["auth-token"] || req.headers.authorization?.split(" ")[1];

  if (!token) {
    console.debug("authentication failed", "no token");
    return res.status(401).json({ authenticated: false, message: "No token provided" });
  }
  try {
    const decoded = authService.verifyToken(token);
    console.debug("authentication successful", decoded.username);
    res.json({ authenticated: true, user: decoded });
  } catch (error) {
    console.error("authentication failed", error);
    res.status(401).json({ authenticated: false, message: error.message });
  }
});

// Logout by clearing the token cookie
router.get("/logout", (req, res) => {
  res.clearCookie("auth-token");
  res.json({ message: "Logged out" });
});

module.exports = router;

================
File: portfolio.node/src/routes/blogRoutes.js
================
const express = require("express");
const blogService = require("../services/blogService");
const BlogEntry = require("../models/BlogEntry");
const { searchEntitiesHybrid } = require("../services/searchService");

const router = express.Router();

/**
 * Sanitize blog data for public consumption
 * @param {Object} blog - The blog entry to sanitize
 * @returns {Object} - Sanitized blog entry
 */
function sanitizeBlogForPublic(blog) {
    if (!blog) return null;

    // Remove sensitive or admin-only fields
    const {
        isDraft,
        publishAt,
        createdBy,
        updatedBy,
        __v,
        embedding,
        ...publicBlog
    } = blog.toObject();

    // Only include publishAt if it's in the past
    if (publishAt && publishAt <= new Date()) {
        publicBlog.publishAt = publishAt;
    }

    return publicBlog;
}

/**
 * @route GET /api/blogs
 * @desc Retrieve all published blog posts
 * @access Public
 */
router.get("/", async (req, res) => {
    try {
        // Always filter for public posts
        const filter = { 
            isDraft: false, 
            publishAt: { $lte: new Date() }
        };

        const blogs = await blogService.getAllBlogs(filter);
        
        // Sanitize each blog for public consumption
        const sanitizedBlogs = blogs.map(blog => sanitizeBlogForPublic(blog))
            .filter(blog => blog !== null); // Remove any null entries

        res.json(sanitizedBlogs);
    } catch (error) {
        console.error("❌ Error fetching blogs:", error.message);
        res.status(500).json({ error: "Failed to fetch blogs" }); // Generic error for public
    }
});

/**
 * @route GET /api/blogs/search
 * @desc Search published blog posts
 * @access Public
 */
router.get("/search", async (req, res) => {
    try {
        const { q: query, limit = 10, minScore = 0.7 } = req.query;
        if (!query) return res.status(400).json({ error: "Search query is required" });

        // Only search public posts
        const filter = {
            isDraft: false,
            publishAt: { $lte: new Date() }
        };

        const results = await searchEntitiesHybrid(BlogEntry, query, limit, minScore, filter);
        
        // Sanitize search results
        const sanitizedResults = results.map(result => ({
            ...result,
            document: sanitizeBlogForPublic(result.document)
        })).filter(result => result.document !== null);

        res.json(sanitizedResults);
    } catch (error) {
        console.error("❌ Error searching blogs:", error.message);
        res.status(500).json({ error: "Search failed" }); // Generic error for public
    }
});

/**
 * @route GET /api/blogs/:id
 * @desc Retrieve a single published blog post by ID
 * @access Public
 */
router.get("/:id", async (req, res) => {
    try {
        const blog = await blogService.getBlogById(req.params.id);
        if (!blog) return res.status(404).json({ error: "Blog not found" });

        // Check if blog is published
        if (blog.isDraft || (blog.publishAt && blog.publishAt > new Date())) {
            return res.status(404).json({ error: "Blog not found" });
        }

        // Sanitize blog for public consumption
        const sanitizedBlog = sanitizeBlogForPublic(blog);
        if (!sanitizedBlog) {
            return res.status(404).json({ error: "Blog not found" });
        }

        res.json(sanitizedBlog);
    } catch (error) {
        console.error("❌ Error fetching blog:", error.message);
        res.status(500).json({ error: "Failed to fetch blog" }); // Generic error for public
    }
});

module.exports = router;

================
File: portfolio.node/src/routes/careerTimelineRoutes.js
================
const express = require("express");
const CareerTimeline = require("../models/CareerTimeline");
const router = express.Router();
const isAuth = require("../middlewares/auth");
const isAdmin = require("../middlewares/admin");
const cheerio = require("cheerio");

// GET all career timeline entries
router.get("/timeline", async (req, res) => {
  try {
    const entries = await CareerTimeline.find().sort({ startDate: -1 });
    res.json(entries);
  } catch (error) {
    res.status(500).json({ error: "Server error while fetching career timeline entries." });
  }
});

// GET a single timeline entry
router.get("/timeline/:id", async (req, res) => {
  try {
    const entry = await CareerTimeline.findById(req.params.id);
    if (!entry) return res.status(404).json({ error: "Entry not found." });
    res.json(entry);
  } catch (error) {
    res.status(500).json({ error: "Server error." });
  }
});

// CREATE a new career timeline entry
router.post("/timeline", isAuth, isAdmin, async (req, res) => {
  try {
    const newEntry = new CareerTimeline(req.body);
    const savedEntry = await newEntry.save();
    res.status(201).json(savedEntry);
  } catch (error) {
    res.status(400).json({ error: "Invalid data." });
  }
});

// UPDATE an existing entry
router.put("/timeline/:id", isAuth, isAdmin, async (req, res) => {
  try {
    const updatedEntry = await CareerTimeline.findByIdAndUpdate(req.params.id, req.body, { new: true });
    if (!updatedEntry) return res.status(404).json({ error: "Entry not found." });
    res.json(updatedEntry);
  } catch (error) {
    res.status(400).json({ error: "Invalid update request." });
  }
});

// DELETE an entry
router.delete("/timeline/:id", isAuth, isAdmin, async (req, res) => {
  try {
    const deletedEntry = await CareerTimeline.findByIdAndDelete(req.params.id);
    if (!deletedEntry) return res.status(404).json({ error: "Entry not found." });
    res.json({ message: "Entry deleted successfully." });
  } catch (error) {
    res.status(500).json({ error: "Server error while deleting entry." });
  }
});

// API to parse LinkedIn HTML
router.post("/parse-linkedin", async (req, res) => {
  try {
    const { rawHTML } = req.body;
    if (!rawHTML) return res.status(400).json({ error: "No HTML provided" });

    const $ = cheerio.load(rawHTML);
    const jobs = [];

    // Iterate over each job entry
    $(".artdeco-list__item").each((_, element) => {
      const company = $(element).find("a.optional-action-target-wrapper span[aria-hidden='true']").first().text().trim();
      const companyLink = $(element).find("a.optional-action-target-wrapper").attr("href");
      const companyLogo = $(element).find("img.ivm-view-attr__img--centered").attr("src");

      // Extract job title
      $(element).find("div.t-bold span[aria-hidden='true']").each((_, jobElement) => {
        const title = $(jobElement).text().trim();

        // Extract date range
        const dateRange = $(element).find("span.pvs-entity__caption-wrapper").first().text().trim();
        let startDate = "", endDate = "Present";
        if (dateRange.includes(" - ")) {
          const dates = dateRange.split(" - ");
          startDate = dates[0]?.trim();
          endDate = dates[1]?.trim() || "Present";
        }

        // Extract location
        const location = $(element).find("span.t-14.t-normal.t-black--light").last().text().trim();

        // Extract job description
        const description = $(element).find("div.WcTepSkGpUVWbbheKPCszGxDQzmhiNFQ span[aria-hidden='true']").text().trim();

        // Ensure valid job entry
        if (title ) {
          jobs.push({
            title,
            company,
            companyLink: companyLink ? `https://www.linkedin.com${companyLink}` : null,
            companyLogo,
            startDate,
            endDate,
            location,
            description,
          });
        }
      });
    });

    res.json(jobs);
  } catch (error) {
    console.error("Error parsing LinkedIn data:", error);
    res.status(500).json({ error: "Failed to parse LinkedIn data." });
  }
});

function parseDate(dateStr) {
  if (!dateStr || dateStr.toLowerCase().includes("present")) {
    return null; // Store null for current jobs
  }
  
  // Extract only the first part of the date (e.g., "Jan 2018" from "Jan 2018 · 4 yrs 7 mos")
  const cleanDate = dateStr.split("·")[0].trim();

  // Convert to a valid Date object
  const parsedDate = new Date(cleanDate);
  return isNaN(parsedDate) ? null : parsedDate;
}

// Bulk insert parsed jobs into the database
router.post("/timeline/bulk", isAuth, isAdmin, async (req, res) => {
  try {
    const entries = req.body.map((entry) => ({
      title: entry.title,
      company: entry.company,
      startDate: parseDate(entry.startDate),
      endDate: parseDate(entry.endDate),
      location: entry.location,
      description: entry.description,
      importedFromLinkedIn: true,
    }));

    await CareerTimeline.insertMany(entries);
    res.json({ success: true, message: "Career entries imported successfully." });
  } catch (error) {
    console.error("Bulk import error:", error);
    res.status(500).json({ error: "Failed to import LinkedIn data." });
  }
});



module.exports = router;

================
File: portfolio.node/src/routes/chatRoutes.js
================
// portfolio.node/src/routes/chatRoutes.js
const express = require("express");
const router = express.Router();
const { processChat, getChatHistory, getRandomGreeting, getChatStartingContext } = require("../services/chatService");
const { isWarmupComplete } = require("../services/warmUpService");

/**
 * @route POST /api/chat
 * @desc Process user query with AI model
 */
router.post("/", async (req, res) => {
  try {
      const { sessionId, query, history, webContext } = req.body;
      const response = await processChat(sessionId, query, history || [], webContext || "");
      
      res.status(200).json({ response });
  } catch (error) {
      console.error("❌ Chat API error:", error.message);
      res.status(500).json({ error: error.message });
  }
});

/**
 * GET /chat
 * Retrieves the chat history for a given session.
 */
router.get("/", async (req, res) => {
  try {
    const { sessionId } = req.query;
    if (!sessionId) {
      return res.status(400).json({ error: "sessionId is required." });
    }

    const history = await getChatHistory(sessionId);
    return res.status(200).json(history);
  } catch (error) {
    console.error("Error retrieving chat history:", error);
    return res.status(500).json({ error: "Internal server error." });
  }
});

/**
 * @route GET /api/chat/greeting
 * @desc Returns a random AI-generated greeting
 */
router.get("/greeting", async (req, res) => {
  try {
      const greeting = await getRandomGreeting();

    console.log(`greeting`, greeting);

      res.json({ greeting });
  } catch (error) {
      console.error("Error fetching greeting:", error);
      res.status(500).json({ error: "Failed to fetch greeting" });
  }
});

/**
 * @route GET /api/chat/context
 * @desc Returns the precomputed starting context for chat
 */
router.get("/context", async (req, res) => {
  try {
      const context = await getChatStartingContext();
      res.json({ context });
  } catch (error) {
      console.error("Error fetching chat context:", error);
      res.status(500).json({ error: "Failed to fetch chat context" });
  }
});


/**
 * @route GET /api/chat/warmup-status
 * @desc Returns whether the warm-up process is complete
 */
router.get("/warmup-status", (req, res) => {
  res.json({ warmupComplete: isWarmupComplete() });
});


module.exports = router;

================
File: portfolio.node/src/routes/commentRoutes.js
================
// portfolio.node/src/routes/commentRoutes.js
const express = require("express");
const authMiddleware = require("../middlewares/auth"); // Protect endpoints where necessary
const commentService = require("../services/commentService");
const Comment = require("../models/Comment");
const router = express.Router();
const adminAuth = require("../middlewares/admin");

/**
 * Create a new comment.
 * Expected body: { author, text, blog, parent (optional) }
 */
router.post("/", authMiddleware, async (req, res) => {
  try {

    if  (!req.user?.isAdmin === true){
      res.status(403);
    }

    const { author, text, blog, parent } = req.body;
    if (!author || !text || !blog) {
      return res.status(400).json({ error: "author, text, and blog fields are required" });
    }
    // Validate parent existence if provided.
    if (parent) {
      const parentComment = await Comment.findById(parent);
      if (!parentComment) {
        return res.status(400).json({ error: "Parent comment not found" });
      }
    }
    const comment = await commentService.createComment({ author, text, blog, parent });
    res.status(201).json(comment);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

/**
 * Retrieve comments for a specific blog post (including nested replies).
 */
router.get("/blog/:blogId", async (req, res) => {
  try {
    const comments = await commentService.getCommentsByBlog(req.params.blogId);
    res.json(comments);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

/**
 * Update a comment by its ID.
 * Expected body may contain: { text (optional), redacted (optional) }
 */
router.put("/:id", authMiddleware, async (req, res) => {
  try {

    if  (!req.user?.isAdmin === true){
      res.status(403);
    }

    const { text, redacted } = req.body;
    const updateData = {};
    if (text !== undefined) updateData.text = text;
    if (redacted !== undefined) updateData.redacted = redacted;
    const updatedComment = await commentService.updateComment(req.params.id, updateData);
    if (!updatedComment) return res.status(404).json({ error: "Comment not found" });
    res.json(updatedComment);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

/**
 * Redact (soft-delete) a comment by marking it as redacted.
 */
router.delete("/:id", authMiddleware, adminAuth, async (req, res) => {
  const updatedComment = await commentService.redactComment(req.params.id);
  if (!updatedComment) return res.status(404).json({ message: "Comment not found" });
  res.json({ message: "Comment redacted", comment: updatedComment });
});


router.get("/all", authMiddleware, async (req, res) => {
  try {
    const comments = await commentService.getAllComments();
    res.json(comments);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

module.exports = router;

================
File: portfolio.node/src/routes/embeddingRoutes.js
================
const express = require("express");
const {
    generateEmbeddings
} = require("../services/embeddingService");
const {
    storeEmbedding,
    deleteEmbedding,
    searchQdrant,
    dropCollection
} = require("../services/qdrantService");
const isAdmin = require("../middlewares/admin");

const router = express.Router();

/**
 * @route POST /api/embeddings/generate
 * @desc Generate embeddings for a given text (without storing)
 * @access Admin
 */
router.post("/generate", isAdmin, async (req, res) => {
    try {
        const { text } = req.body;
        if (!text) return res.status(400).json({ error: "Text is required" });

        const embedding = await generateEmbeddings(text);
        res.status(200).json({ embedding });
    } catch (error) {
        console.error("❌ Error generating embedding:", error.message);
        res.status(500).json({ error: error.message });
    }
});

/**
 * @route POST /api/embeddings/store
 * @desc Generate embeddings and store them in Qdrant
 * @access Admin
 */
router.post("/", isAdmin, async (req, res) => {
    try {
        const { collection, id, text, metadata } = req.body;
        if (!collection || !id || !text) {
            return res.status(400).json({ error: "Collection, ID, and text are required" });
        }

        const embedding = await generateEmbeddings(text);
        if (!embedding) throw new Error("Failed to generate embedding");

        await storeEmbedding(collection, id, embedding, metadata);
        res.status(201).json({ message: "Embedding stored successfully" });
    } catch (error) {
        console.error("❌ Error storing embedding:", error.message);
        res.status(500).json({ error: error.message });
    }
});

/**
 * @route POST /api/embeddings/search
 * @desc Perform a vector search in Qdrant
 * @access Public
 */
router.post("/search", async (req, res) => {
    try {
        const { query, collection, limit = 5, minScore = 0.5 } = req.body;
        if (!query || !collection) return res.status(400).json({ error: "Query and collection are required" });

        const queryVector = await generateEmbeddings(query);
        if (!queryVector) return res.status(500).json({ error: "Failed to generate query embedding" });

        const results = await searchQdrant(queryVector, collection, limit, minScore);
        res.status(200).json(results);
    } catch (error) {
        console.error("❌ Error performing embedding search:", error.message);
        res.status(500).json({ error: error.message });
    }
});

/**
 * @route DELETE /api/embeddings/:collection/:id
 * @desc Delete an embedding by ID
 * @access Admin
 */
router.delete("/:collection/:id", isAdmin, async (req, res) => {
    try {
        const { collection, id } = req.params;
        const success = await deleteEmbedding(collection, id);
        if (!success) return res.status(404).json({ error: "Embedding not found" });

        res.status(200).json({ message: "Embedding deleted successfully" });
    } catch (error) {
        console.error("❌ Error deleting embedding:", error.message);
        res.status(500).json({ error: error.message });
    }
});

/**
 * @route DELETE /api/embeddings/collection/:collection
 * @desc Drop an entire Qdrant collection
 * @access Admin
 */
router.delete("/collection/:collection", isAdmin, async (req, res) => {
    try {
        const { collection } = req.params;
        await dropCollection(collection);
        res.status(200).json({ message: `Collection "${collection}" dropped successfully.` });
    } catch (error) {
        console.error("❌ Error dropping collection:", error.message);
        res.status(500).json({ error: error.message });
    }
});

module.exports = router;

================
File: portfolio.node/src/routes/fileRoutes.js
================
const express = require("express");
const authMiddleware = require("../middlewares/auth");
const adminAuth = require("../middlewares/admin");
const fileService = require("../services/fileService");
const mongoose = require("mongoose");

const router = express.Router();

/**
 * @route POST /api/files
 * @desc Upload a new file to GridFS
 * @access Admin
 */
router.post("/", authMiddleware, adminAuth, async (req, res) => {
  try {
    const { entityId, context, isPublic } = req.body;
    const newFile = await fileService.uploadFile(req, entityId, context, isPublic);
    res.status(201).json(newFile);
  } catch (error) {
    console.error("❌ Error uploading file:", error.message);
    res.status(500).json({ error: error.message });
  }
});

/**
 * @route GET /api/files
 * @desc Retrieve all file metadata
 * @access Admin
 */
router.get("/", authMiddleware, adminAuth, async (req, res) => {
  try {
    const files = await fileService.getAllFiles();
    res.json(files);
  } catch (error) {
    console.error("❌ Error fetching files:", error.message);
    res.status(500).json({ error: error.message });
  }
});

/**
 * @route GET /api/files/:id
 * @desc Retrieve file metadata by ID
 * @access Admin
 */
router.get("/:id", authMiddleware, adminAuth, async (req, res) => {
  try {
    const file = await fileService.getFileMetadata(req.params.id);
    if (!file) return res.status(404).json({ error: "File not found" });
    res.json(file);
  } catch (error) {
    console.error("❌ Error fetching file metadata:", error.message);
    res.status(500).json({ error: error.message });
  }
});

/**
 * @route GET /api/files/download/:id
 * @desc Download a file from GridFS
 * @access Admin
 */
router.get("/download/:id", authMiddleware, adminAuth, async (req, res) => {
  try {
    const file = await fileService.getFileMetadata(req.params.id);
    if (!file) return res.status(404).json({ error: "File not found" });

    res.setHeader("Content-Disposition", `attachment; filename="${file.filename}"`);
    res.setHeader("Content-Type", file.metadata.contentType);
    fileService.getPublicFile(req.params.id).pipe(res);
  } catch (error) {
    console.error("❌ Error downloading file:", error.message);
    res.status(500).json({ error: error.message });
  }
});

/**
 * @route DELETE /api/files/:id
 * @desc Delete a file from GridFS
 * @access Admin
 */
router.delete("/:id", authMiddleware, adminAuth, async (req, res) => {
  try {
    const deleted = await fileService.deleteFile(req.params.id);
    if (!deleted) return res.status(404).json({ error: "File not found" });
    res.json({ message: "File deleted successfully" });
  } catch (error) {
    console.error("❌ Error deleting file:", error.message);
    res.status(500).json({ error: error.message });
  }
});

module.exports = router;

================
File: portfolio.node/src/routes/oauthRoutes.js
================
// portfolio.node/src/routes/oauthRoutes.js
const express = require("express");
const jwt = require("jsonwebtoken");
const {passport} = require("../config/passport");
const router = express.Router();

const SECRET_KEY = process.env.SECRET_KEY || "your_secret_key";

// Helper function to issue a JWT and set it as a cookie.
function issueToken(req, res, returnUrl) {
  const token = jwt.sign(
    { id: req.user.id, username: req.user.username, isAdmin: req.user.isAdmin },
    SECRET_KEY,
    { expiresIn: "1h" }
  );
  res.cookie("auth-token", token, {
    httpOnly: true,
    secure: process.env.NODE_ENV === "production",
    sameSite: "Strict",
    maxAge: 3600000,
  });
  res.redirect(returnUrl);
}


// Google OAuth2 Routes
router.get("/google", (req, res, next) => {
  const { returnUrl } = req.query;
  // Generate a CSRF token (or use a library) – here we use a simple random string for illustration.
  const csrf = Math.random().toString(36).slice(2);
  // (If you use sessions, store the CSRF token for later verification.)
  const state = Buffer.from(JSON.stringify({ returnUrl, csrf })).toString("base64");
  passport.authenticate("google", { scope: ["profile", "email"], state })(req, res, next);
});


router.get("/google/callback", passport.authenticate("google", { failureRedirect: "/login", session: false  }), (req, res) => {
  let returnUrl = "/";
  if (req.query.state) {
    try {
      const state = JSON.parse(Buffer.from(req.query.state, "base64").toString("utf8"));
      returnUrl = state.returnUrl || "/"; 
      // Optionally: Compare state.csrf with the stored token.
    } catch (e) {
      console.error("Failed to parse state parameter:", e);
    }
  }
  issueToken(req, res, returnUrl);
});


router.get("/facebook", (req, res, next) => {
  const { returnUrl } = req.query;
  // Generate a CSRF token (or use a library) – here we use a simple random string for illustration.
  const csrf = Math.random().toString(36).slice(2);
  // (If you use sessions, store the CSRF token for later verification.)
  const state = Buffer.from(JSON.stringify({ returnUrl, csrf })).toString("base64");
  passport.authenticate("facebook", { scope: ["public_profile", "email"], state })(req, res, next);
});


router.get("/facebook/callback", passport.authenticate("facebook", { failureRedirect: "/login", session: false  }), (req, res) => {
  let returnUrl = "/";
  if (req.query.state) {
    try {
      const state = JSON.parse(Buffer.from(req.query.state, "base64").toString("utf8"));
      returnUrl = state.returnUrl || "/"; 

      // Optionally: Compare state.csrf with the stored token.
    } catch (e) {
      console.error("Failed to parse state parameter:", e);
    }
  }
  issueToken(req, res, returnUrl);
});

router.get("/github", (req, res, next) => {
  const { returnUrl } = req.query;
  // Generate a CSRF token (or use a library) – here we use a simple random string for illustration.
  const csrf = Math.random().toString(36).slice(2);
  // (If you use sessions, store the CSRF token for later verification.)
  const state = Buffer.from(JSON.stringify({ returnUrl, csrf })).toString("base64");
  passport.authenticate("github", { scope: ["user:email"], state })(req, res, next);
});


router.get("/github/callback", passport.authenticate("github", { failureRedirect: "/login", session: false  }), (req, res) => {
  let returnUrl = "/";
  if (req.query.state) {
    try {
      const state = JSON.parse(Buffer.from(req.query.state, "base64").toString("utf8"));
      returnUrl = state.returnUrl || "/"; 
      // Optionally: Compare state.csrf with the stored token.
    } catch (e) {
      console.error("Failed to parse state parameter:", e);
    }
  }
  issueToken(req, res, returnUrl);
});

router.get("/microsoft", (req, res, next) => {
  const { returnUrl } = req.query;
  // Generate a CSRF token (or use a library) – here we use a simple random string for illustration.
  const csrf = Math.random().toString(36).slice(2);
  // (If you use sessions, store the CSRF token for later verification.)
  const state = Buffer.from(JSON.stringify({ returnUrl, csrf })).toString("base64");
  passport.authenticate("microsoft", { scope: ["profile", "email"], state })(req, res, next);
});


router.get("/microsoft/callback", passport.authenticate("microsoft", { failureRedirect: "/login", session: false  }), (req, res) => {
  let returnUrl = "/";
  if (req.query.state) {
    try {
      const state = JSON.parse(Buffer.from(req.query.state, "base64").toString("utf8"));
      returnUrl = state.returnUrl || "/"; 
      // Optionally: Compare state.csrf with the stored token.
    } catch (e) {
      console.error("Failed to parse state parameter:", e);
    }
  }
  issueToken(req, res, returnUrl);
});
module.exports = router;

================
File: portfolio.node/src/routes/pageRoutes.js
================
const express = require("express");
const authMiddleware = require("../middlewares/auth");
const adminAuth = require("../middlewares/admin");
const pageService = require("../services/pageService");
const Page = require("../models/Page"); // For dynamic search
const { searchEntitiesHybrid } = require("../services/searchService");

const router = express.Router();

/**
 * @route POST /api/pages
 * @desc Create a new page
 * @access Admin
 */
router.post("/", authMiddleware, adminAuth, async (req, res) => {
    try {
        const newPage = await pageService.createPage(req.body);
        res.status(201).json(newPage);
    } catch (error) {
        console.error("❌ Error creating page:", error.message);
        res.status(500).json({ error: error.message });
    }
});

/**
 * @route GET /api/pages
 * @desc Retrieve all pages
 * @access Public
 */
router.get("/", async (req, res) => {
    try {
        const pages = await pageService.getAllPages();
        res.json(pages);
    } catch (error) {
        console.error("❌ Error fetching pages:", error.message);
        res.status(500).json({ error: error.message });
    }
});

/**
 * @route GET /api/pages/:id
 * @desc Retrieve a single page by ID
 * @access Public
 */
router.get("/:id", async (req, res) => {
    try {
        const page = await pageService.getPageById(req.params.id);
        if (!page) return res.status(404).json({ error: "Page not found" });
        res.json(page);
    } catch (error) {
        console.error("❌ Error fetching page:", error.message);
        res.status(500).json({ error: error.message });
    }
});

/**
 * @route GET /api/pages/slug/:slug
 * @desc Retrieve a single page by slug
 * @access Public
 */
router.get("/slug/:slug", async (req, res) => {
    try {
        const page = await pageService.getPageBySlug(req.params.slug);
        if (!page) return res.status(404).json({ error: "Page not found" });
        res.json(page);
    } catch (error) {
        console.error("❌ Error fetching page by slug:", error.message);
        res.status(500).json({ error: error.message });
    }
});

/**
 * @route PUT /api/pages/:id
 * @desc Update a page by ID
 * @access Admin
 */
router.put("/:id", authMiddleware, adminAuth, async (req, res) => {
    try {
        const updatedPage = await pageService.updatePage(req.params.id, req.body);
        if (!updatedPage) return res.status(404).json({ error: "Page not found" });
        res.json(updatedPage);
    } catch (error) {
        console.error("❌ Error updating page:", error.message);
        res.status(500).json({ error: error.message });
    }
});

/**
 * @route DELETE /api/pages/:id
 * @desc Delete a page by ID
 * @access Admin
 */
router.delete("/:id", authMiddleware, adminAuth, async (req, res) => {
    try {
        const deleted = await pageService.deletePage(req.params.id);
        if (!deleted) return res.status(404).json({ error: "Page not found" });
        res.json({ message: "Page deleted successfully" });
    } catch (error) {
        console.error("❌ Error deleting page:", error.message);
        res.status(500).json({ error: error.message });
    }
});

/**
 * @route POST /api/pages/generate-embeddings
 * @desc Refresh page embeddings (delta or full)
 * @access Admin
 */
router.post("/generate-embeddings", authMiddleware, adminAuth, async (req, res) => {
    try {
        const { fullRefresh = false } = req.body;
        const result = await pageService.refreshPageEmbeddings(fullRefresh);
        res.json(result);
    } catch (error) {
        console.error("❌ Error generating page embeddings:", error.message);
        res.status(500).json({ error: error.message });
    }
});

/**
 * @route POST /api/pages/search
 * @desc Perform a hybrid search (full-text + vector)
 * @access Public
 */
router.post("/search", async (req, res) => {
    try {
        const { query, limit, minScore } = req.body;
        if (!query) return res.status(400).json({ error: "Query is required" });

        const results = await searchEntitiesHybrid(Page, query, limit, minScore);
        res.json(results);
    } catch (error) {
        console.error("❌ Error searching pages:", error.message);
        res.status(500).json({ error: error.message });
    }
});

module.exports = router;

================
File: portfolio.node/src/routes/projectRoutes.js
================
const express = require("express");
const authMiddleware = require("../middlewares/auth");
const adminAuth = require("../middlewares/admin");
const projectService = require("../services/projectService");
const Project = require("../models/Project"); // For dynamic search
const { searchEntitiesHybrid } = require("../services/searchService");

const router = express.Router();

/**
 * @route POST /api/projects
 * @desc Create a new project
 * @access Admin
 */
router.post("/", authMiddleware, adminAuth, async (req, res) => {
    try {
        const newProject = await projectService.createProject(req.body);
        res.status(201).json(newProject);
    } catch (error) {
        console.error("❌ Error creating project:", error.message);
        res.status(500).json({ error: error.message });
    }
});

/**
 * @route GET /api/projects
 * @desc Retrieve all projects
 * @access Public
 */
router.get("/", async (req, res) => {
    try {
        let filter = {};
        if (!req.cookies["auth-token"]) {
            filter = { isDraft: false, publishAt: { $lte: new Date() } }; // Public filter
        }
        const projects = await projectService.getAllProjects(filter);
        res.json(projects);
    } catch (error) {
        console.error("❌ Error fetching projects:", error.message);
        res.status(500).json({ error: error.message });
    }
});

/**
 * @route GET /api/projects/:id
 * @desc Retrieve a single project by ID
 * @access Public
 */
router.get("/:id", async (req, res) => {
    try {
        const project = await projectService.getProjectById(req.params.id);
        if (!project) return res.status(404).json({ error: "Project not found" });
        res.json(project);
    } catch (error) {
        console.error("❌ Error fetching project:", error.message);
        res.status(500).json({ error: error.message });
    }
});

/**
 * @route PUT /api/projects/:id
 * @desc Update a project by ID
 * @access Admin
 */
router.put("/:id", authMiddleware, adminAuth, async (req, res) => {
    try {
        const updatedProject = await projectService.updateProject(req.params.id, req.body);
        if (!updatedProject) return res.status(404).json({ error: "Project not found" });
        res.json(updatedProject);
    } catch (error) {
        console.error("❌ Error updating project:", error.message);
        res.status(500).json({ error: error.message });
    }
});

/**
 * @route DELETE /api/projects/:id
 * @desc Delete a project by ID
 * @access Admin
 */
router.delete("/:id", authMiddleware, adminAuth, async (req, res) => {
    try {
        const deleted = await projectService.deleteProject(req.params.id);
        if (!deleted) return res.status(404).json({ error: "Project not found" });
        res.json({ message: "Project deleted successfully" });
    } catch (error) {
        console.error("❌ Error deleting project:", error.message);
        res.status(500).json({ error: error.message });
    }
});

/**
 * @route POST /api/projects/generate-embeddings
 * @desc Refresh project embeddings (delta or full)
 * @access Admin
 */
router.post("/generate-embeddings", authMiddleware, adminAuth, async (req, res) => {
    try {
        const { fullRefresh = false } = req.body; // If `true`, refresh all embeddings
        const result = await projectService.refreshProjectEmbeddings(fullRefresh);
        res.json(result);
    } catch (error) {
        console.error("❌ Error generating embeddings:", error.message);
        res.status(500).json({ error: error.message });
    }
});

/**
 * @route POST /api/projects/search
 * @desc Perform a hybrid search (full-text + vector)
 * @access Public
 */
router.post("/search", async (req, res) => {
    try {
        const { query, limit, minScore } = req.body;
        if (!query) return res.status(400).json({ error: "Query is required" });

        const results = await searchEntitiesHybrid(Project, query, limit, minScore);
        res.json(results);
    } catch (error) {
        console.error("❌ Error searching projects:", error.message);
        res.status(500).json({ error: error.message });
    }
});

module.exports = router;

================
File: portfolio.node/src/routes/promptRoutes.js
================
const express = require("express");
const {
    getAllPrompts,
    getPromptById,
    createPrompt,
    updatePrompt,
    deletePrompt
} = require("../services/promptService");

const isAdmin = require("../middlewares/admin"); // Ensure only admins manage prompts
const router = express.Router();

/**
 * @route GET /api/prompts
 * @desc Retrieve all stored prompts
 * @access Admin
 */
router.get("/", isAdmin, async (req, res) => {
    try {
        const prompts = await getAllPrompts();
        res.status(200).json(prompts);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

/**
 * @route GET /api/prompts/:id
 * @desc Retrieve a specific prompt by ID
 * @access Admin
 */
router.get("/:id", isAdmin, async (req, res) => {
    try {
        const prompt = await getPromptById(req.params.id);
        res.status(200).json(prompt);
    } catch (error) {
        res.status(404).json({ error: error.message });
    }
});

/**
 * @route POST /api/prompts
 * @desc Create a new prompt
 * @access Admin
 */
router.post("/", isAdmin, async (req, res) => {
    try {
        const prompt = await createPrompt(req.body);
        res.status(201).json(prompt);
    } catch (error) {
        res.status(400).json({ error: error.message });
    }
});

/**
 * @route PUT /api/prompts/:id
 * @desc Update an existing prompt
 * @access Admin
 */
router.put("/:id", isAdmin, async (req, res) => {
    try {
        const prompt = await updatePrompt(req.params.id, req.body);
        res.status(200).json(prompt);
    } catch (error) {
        res.status(404).json({ error: error.message });
    }
});

/**
 * @route DELETE /api/prompts/:id
 * @desc Delete a prompt
 * @access Admin
 */
router.delete("/:id", isAdmin, async (req, res) => {
    try {
        await deletePrompt(req.params.id);
        res.status(200).json({ message: "Prompt deleted successfully." });
    } catch (error) {
        res.status(404).json({ error: error.message });
    }
});

module.exports = router;

================
File: portfolio.node/src/routes/providerConfigRoutes.js
================
// portfolio.node/src/routes/providerConfigRoutes.js
const express = require("express");
const authMiddleware = require("../middlewares/auth");
const providerConfigService = require("../services/providerConfigService");
const router = express.Router();

// GET /api/provider-configs: Retrieve all provider configurations.
// router.get("/", authMiddleware, async (req, res) => {
//   try {

//     if  (!req.user?.isAdmin === true){
//       res.status(403);
//     }

//     const configs = await providerConfigService.getAllConfigs();
//     res.json(configs);
//   } catch (error) {
//     res.status(500).json({ error: error.message });
//   }
// });

// PUT /api/provider-configs/:provider: Update configuration for a specific provider.
router.put("/:provider", authMiddleware, async (req, res) => {
  try {

    if  (!req.user?.isAdmin === true){
      res.status(403);
    }

    const { provider } = req.params;
    const configData = req.body;
    const updatedConfig = await providerConfigService.updateConfig(provider, configData);
    res.json(updatedConfig);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// GET /api/provider-configs: Retrieve all provider configurations.
router.get("/", authMiddleware, async (req, res) => {
  try {
    if (!req.user?.isAdmin) {
      return res.status(403).json({ error: "Forbidden" });
    }
    const configs = await providerConfigService.getAllConfigs();
    res.json(configs);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// GET /api/provider-configs/ai: Retrieve AI model configuration.
router.get("/ai", authMiddleware, async (req, res) => {
  try {
    const config = await providerConfigService.getAIConfig();
    res.json(config);
  } catch (error) {
    res.status(500).json({ error: "Failed to fetch AI configuration" });
  }
});

// PUT /api/provider-configs/ai: Update AI model configuration.
router.put("/ai", authMiddleware, async (req, res) => {
  try {
    if (!req.user?.isAdmin) {
      return res.status(403).json({ error: "Forbidden" });
    }

    const { provider, clientId, clientSecret } = req.body;
    if (!["ollama", "openai"].includes(provider)) {
      return res.status(400).json({ error: "Invalid provider" });
    }

    const updatedConfig = await providerConfigService.updateConfig(provider, { clientId, clientSecret });
    res.json(updatedConfig);
  } catch (error) {
    res.status(500).json({ error: "Failed to update AI configuration" });
  }
});

module.exports = router;

================
File: portfolio.node/src/routes/searchRoutes.js
================
const express = require("express");
const {searchQdrant} = require("../services/qdrantService");
const { generateEmbeddings } = require("../services/embeddingService");
const router = express.Router();


router.post("/:collection", async (req, res) => {
    const { query } = req.body;
    const { collection } = req.params;
  
    if (!query) return res.status(400).json({ message: "Query is required" });
  
    const embedding = await generateEmbeddings(query);
    if (!embedding) return res.status(500).json({ message: "Failed to generate query embedding" });
  
    const results = await searchQdrant(embedding, collection);
    res.json(results);
  });
  
  module.exports = router;

================
File: portfolio.node/src/routes/userRoutes.js
================
const express = require("express");
const userService = require("../services/userService");
const authMiddleware = require("../middlewares/auth");
const User = require('../models/User');
const adminAuth = require('../middlewares/admin');

const router = express.Router();


router.post("/initialize", async (req, res) => {
  try {

    const admin = await User.findOne({ isAdmin: true });
    if ( admin ){
      res.status(403).json({ message: "Admin user already exists." });
      return;
    }

    const { username, password } = req.body;

    // Delegate the creation to the user service.
    const newUser = await userService.createUser({ username, password, isAdmin: true });
    res.status(201).json({ message: "User created successfully" });
  } catch (error) {
    console.error("Error creating user:", error);
    // Use 400 for client errors (e.g., missing fields or duplicate user)
    res.status(error.message === "User already exists" || error.message === "Username and password are required" ? 400 : 500)
       .json({ error: error.message });
  }
});


router.get("/admin-exists", async (req, res) => {
  try {
    const admin = await User.findOne({ isAdmin: true });
    res.json({ exists: !!admin });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// A simple GET endpoint that serves a registration form.
router.get("/create", async (req, res) => {
  res.send(`
        <html>
        <head><title>Create User</title></head>
        <body>
            <h2>Create a New User</h2>
                <form action="/api/users" method="POST">
                <label>Username: <input type="text" name="username" required /></label><br/>
                <label>Password: <input type="password" name="password" required /></label><br/>
                <button type="submit">Create</button>
            </form>
        </body>
        </html>
    `);
});

// Endpoint for user registration
router.post("/", authMiddleware, async (req, res) => {
  try {

    if  (!req.user?.isAdmin === true){
      res.status(403);
    }

    const { username, password } = req.body;

    // Delegate the creation to the user service.
    const newUser = await userService.createUser({ username, password });
    console.log("New User Created:", newUser.username);
    res.status(201).json({ message: "User created successfully" });
  } catch (error) {
    console.error("Error creating user:", error);
    // Use 400 for client errors (e.g., missing fields or duplicate user)
    res.status(error.message === "User already exists" || error.message === "Username and password are required" ? 400 : 500)
       .json({ error: error.message });
  }
});

router.get("/", authMiddleware, adminAuth, async (req, res) => {
  const users = await userService.getAllUsers();
  res.json(users);
});

router.get("/:id", authMiddleware, adminAuth, async (req, res) => {
  const user = await userService.getUserById(req.params.id);
  if (!user) return res.status(404).json({ message: "User not found" });
  res.json(user);
});

router.put("/:id", authMiddleware, adminAuth, async (req, res) => {
  const updatedUser = await userService.updateUser(req.params.id, req.body);
  if (!updatedUser) return res.status(404).json({ message: "User not found" });
  res.json(updatedUser);
});

router.delete("/:id", authMiddleware, adminAuth, async (req, res) => {
  const deletedUser = await userService.deleteUser(req.params.id);
  if (!deletedUser) return res.status(404).json({ message: "User not found" });
  res.json({ message: "User deleted" });
});

module.exports = router;

================
File: portfolio.node/src/server.js
================
// portfolio.node/src/server.js
const http = require("http");
const { createApp } = require("./app");
const { setupWebSocketServer } = require("./services/wsChatService");

const PORT = process.env.PORT || 5000;

createApp()
  .then(app => {
    // Create HTTP Server
    const server = http.createServer(app);

    // Attach WebSocket Server to HTTP Server
    setupWebSocketServer(server);

    server.listen(PORT, () => console.log(`Server running on port ${PORT} with WebSocket support`));
  })
  .catch(err => {
    console.error("Failed to create app:", err);
  });

================
File: portfolio.node/src/services/authService.js
================
const User = require("../models/User");
const jwt = require("jsonwebtoken");

// Use SECRET_KEY from environment variables or fallback
const SECRET_KEY = process.env.SECRET_KEY || "your_secret_key";

/**
 * Registers a new user.
 * If `isAdmin` is true, ensures no admin user already exists.
 * @param {Object} param0 - Contains username, password, and optional isAdmin flag.
 * @returns {Promise<Object>} - The created user.
 */
async function registerUser({ username, password, isAdmin = false }) {
  // If registering an admin, check that no admin exists yet.
  if (isAdmin) {
    const existingAdmin = await User.findOne({ isAdmin: true });
    if (existingAdmin) {
      throw new Error("An admin user already exists. Admin registration requires an existing admin.");
    }
  }

  // Check for an existing user with the same username.
  const existingUser = await User.findOne({ username });
  if (existingUser) {
    throw new Error("User already exists");
  }
  
  // Create a new user; the User model's pre-save hook hashes the password.
  const user = new User({ username, passwordHash: password, isAdmin });
  await user.save();
  return user;
}

/**
 * Logs in a user by validating credentials and returning a JWT.
 * @param {Object} param0 - Contains username and password.
 * @returns {Promise<string>} - JWT token.
 */
async function loginUser({ username, password }) {
  const user = await User.findOne({ username });
  if (!user || !(await user.validatePassword(password))) {
    throw new Error("Invalid credentials");
  }
  const token = jwt.sign({ id: user.id, username: user.username, isAdmin: user.isAdmin }, SECRET_KEY, {
    expiresIn: "1h",
  });
  return token;
}

/**
 * Verifies a JWT token.
 * @param {string} token - The JWT token.
 * @returns {Object} - Decoded token information.
 */
function verifyToken(token) {
  try {
    const decoded = jwt.verify(token, SECRET_KEY);
    return decoded;
  } catch (error) {
    throw new Error("Invalid token");
  }
}

module.exports = {
  registerUser,
  loginUser,
  verifyToken,
};

================
File: portfolio.node/src/services/blogService.js
================
const BlogEntry = require("../models/BlogEntry");
const { generateEmbeddings } = require("./embeddingService");
const { storeEmbedding, deleteEmbedding, initCollection } = require("./qdrantService");
const { searchEntitiesHybrid } = require("./searchService");

/**
 * Create a new blog post and store its embedding.
 * @param {Object} data - Blog data
 * @returns {Promise<Object>} Created blog entry
 */
async function createBlog(data) {
    const blog = new BlogEntry(data);
    await blog.save();
    // Generate and store embeddings
    await updateBlogEmbeddings(blog);

    return blog;
}

/**
 * Update an existing blog post and optionally refresh embeddings.
 * @param {string} id - Blog ID
 * @param {Object} updates - Fields to update
 * @returns {Promise<Object|null>} Updated blog
 */
async function updateBlog(id, updates) {
    const blog = await BlogEntry.findByIdAndUpdate(id, updates, { new: true });
    if (!blog) return null;

    // If content/title changes, regenerate embeddings
    if (updates.title || updates.content) {
        await updateBlogEmbeddings(blog);
    }

    return blog;
}

/**
 * Delete a blog post and remove its embedding from Qdrant.
 * @param {string} id - Blog ID
 * @returns {Promise<boolean>} True if deleted, false otherwise
 */
async function deleteBlog(id) {
    const blog = await BlogEntry.findByIdAndDelete(id);
    if (!blog) return false;

    await deleteEmbedding("blogs", id);
    return true;
}

/**
 * Retrieve a single blog post by ID.
 * @param {string} id - Blog ID
 * @returns {Promise<Object|null>} Blog object
 */
async function getBlogById(id) {
    return BlogEntry.findById(id);
}

/**
 * Retrieve all blog posts with optional filters.
 * @param {Object} [filter={}] - MongoDB filter object
 * @returns {Promise<Array>} List of blogs
 */
async function getAllBlogs(filter = {}) {
    return BlogEntry.find(filter);
}

/**
 * Generate embeddings for a single blog post and store them in Qdrant.
 * @param {Object} blog - Blog object
 */
async function updateBlogEmbeddings(blog) {
    const text = `${blog.title} ${blog.content}`;

    const embedding = await generateEmbeddings(text);
    if (!embedding) throw new Error(`Failed to generate embedding for blog: ${blog._id}`);

    await storeEmbedding(BlogEntry.collection.collectionName, blog.vectorId, embedding, {
        title: blog.title,
        tags: blog.tags || [],
        author: blog.author || "",
    });
}

/**
 * Refresh all or only changed blog embeddings.
 * @param {boolean} fullRefresh - If true, refresh all embeddings; otherwise, only update modified blogs.
 */
async function refreshBlogEmbeddings(fullRefresh = false) {
    const filter = fullRefresh ? {} : { updatedAt: { $gt: new Date(Date.now() - 24 * 60 * 60 * 1000) } }; // Last 24h updates
    const blogs = await getAllBlogs(filter);

    for (const blog of blogs) {
        await updateBlogEmbeddings(blog);
    }

    return { message: `Refreshed ${blogs.length} blog embeddings.` };
}

/**
 * Search blogs using semantic vector search.
 * @param {string} query - User's search query
 * @returns {Promise<Array>} List of matching blogs
 */
async function searchBlogs(query) {
    return searchEntitiesHybrid(BlogEntry, query);
}

/**
 * Initializes embeddings for the BlogEntry model.
 */
async function initializeBlogEmbeddings() {
    const collectionName = BlogEntry.collection.collectionName; // Use MongoDB model's collection name
    console.log(`🔄 Initializing embeddings for "${collectionName}"...`);

    // 1️⃣ Ensure Qdrant collection exists
    await initCollection(collectionName);

    // 2️⃣ Fetch all documents from MongoDB
    const documents = await BlogEntry.find({});
    if (!documents.length) {
        console.log(`⚠️ No documents found in "${collectionName}", skipping.`);
        return;
    }

    // 3️⃣ Generate & Store Embeddings
    for (const doc of documents) {
        const text = `${doc.title} ${doc.content || ""}`;
        if (!text.trim()) continue;

        if ( !doc.vectorId){
            await doc.save();
        }
        const embedding = await generateEmbeddings(text);
        if (!embedding) {
            console.error(`❌ Failed to generate embedding for ${collectionName}: ${doc._id}`);
            continue;
        }

        await storeEmbedding(collectionName, doc.vectorId, embedding, {
            title: doc.title,
            tags: doc.tags || [],
        });

        console.log(`✅ Stored embedding for "${collectionName}" -> ${doc.title}`);
    }
}

module.exports = {
    createBlog,
    updateBlog,
    deleteBlog,
    getBlogById,
    getAllBlogs,
    updateBlogEmbeddings,
    refreshBlogEmbeddings,
    searchBlogs,
    initializeBlogEmbeddings,
};

================
File: portfolio.node/src/services/chatService.js
================
// portfolio.node/src/services/chatService.js
const ChatMessage = require("../models/ChatMessage");
const providerConfigService = require("../services/providerConfigService");
const ollamaService = require("../services/ollamaService"); // AI Model Integration
const generatePrompt = require("../utils/generatePrompt");
const {queryLLM} = require("../services/llmService");
const cache = require("../utils/cache");

/**
 * Processes a user query using the AI model.
 * @param {string} sessionId - Chat session ID.
 * @param {string} query - User's chat message.
 * @param {array} history - Previous chat messages.
 * @param {string} webContext - Extracted web page content (if available).
 * @returns {Promise<{ response: string, sources: string[] }>} - AI response with sources.
 */
async function processChat(sessionId, query, history = [], webContext = "") {
  try {
      // Generate AI prompt
      const { formattedPrompt, sources } = await generatePrompt(query, history, webContext);

      const config = await providerConfigService.getAIConfig();
      let response;
      
      if (config.provider === "ollama") {
        response = await ollamaService.generateResponse(formattedPrompt);
      } else if (config.provider === "openai") {
        response = await requestOpenAIResponse(formattedPrompt, history, config.clientId, config.clientSecret);
      } else {
        throw new Error("Invalid AI provider configured");
      }

      // Store user message & AI response in chat history
      await ChatMessage.create({ sessionId, role: "user", text: query });
      await ChatMessage.create({ sessionId, role: "ai", text: response });

      return { response, sources };
  } catch (error) {
      console.error(`❌ Chat processing error:`, error.message);
      return { response: "Sorry, I encountered an error.", sources: [] };
  }
}



/**
 * Retrieves chat history for a session.
 * @param {string} sessionId - The chat session identifier.
 * @returns {Promise<ChatMessage[]>} - Chat history messages.
 */
async function getChatHistory(sessionId) {
  return await ChatMessage.find({ sessionId }).sort({ createdAt: 1 });
}

async function requestOpenAIResponse(query, history, clientId, clientSecret) {
  
  const response = await fetch("https://api.openai.com/v1/chat/completions", {
    method: "POST",
    headers: {
      Authorization: `Bearer ${clientSecret}`,
      "OpenAI-Organization": clientId,
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      model: "gpt-4",
      messages: history.concat([{ role: "user", content: query }]),
      temperature: 0.7,
    }),
  });

  return response.data.choices[0].message.content;
}

/**
 * Returns a random pre-generated greeting from cache.
 */
async function getRandomGreeting() {

  let greetings = cache.get("chat_greetings");
   if (!greetings){
    console.log('no greetings here');
    greetings =  ["Hello! How can I assist you today?"];
   }
  return greetings[Math.floor(Math.random() * greetings.length)];
}

/**
 * Returns the pre-generated starting context for chat.
 */
async function getChatStartingContext() {
  return cache.get("chat_context") || "This is an AI assistant for answering questions about projects and skills.";
}

module.exports = { processChat, getChatHistory, getRandomGreeting, getChatStartingContext };

================
File: portfolio.node/src/services/commentService.js
================
// portfolio.node/src/services/commentService.js
const Comment = require("../models/Comment");

async function getAllComments() {
  const comments = await Comment.find({ parent: null }).sort({ createdAt: -1 });
  return Promise.all(
    comments.map(async (comment) => {
      const nestedReplies = await getNestedReplies(comment._id, comment.redacted);
      return { ...comment.toObject(), replies: nestedReplies };
    })
  );
}

async function getNestedReplies(parentId, redacted) {
  const replies = await Comment.find({ parent: parentId, redacted: redacted }).sort({ createdAt: 1 });
  return Promise.all(
    replies.map(async (reply) => {
      const nestedReplies = await getNestedReplies(reply._id);
      return { ...reply.toObject(), replies: nestedReplies };
    })
  );
}

/**
 * Retrieves root-level comments for a given blog post along with their immediate replies.
 * @param {string} blogId - The blog post ID.
 * @returns {Promise<Array>} - Array of comments with nested replies.
 */
async function getCommentsByBlog(blogId) {
  const comments = await Comment.find({ blog: blogId, parent: null }).sort({ createdAt: -1 });
  return Promise.all(
    comments.map(async (comment) => {
      const nestedReplies = await getNestedReplies(comment._id, false);
      return { ...comment.toObject(), replies: nestedReplies };
    })
  );
}


/**
 * Creates a new comment.
 * @param {Object} data - Comment data: { author, text, blog, parent (optional) }
 * @returns {Promise<Object>} - The created comment.
 */
async function createComment(data) {
  const { author, text, blog, parent } = data;
  const comment = new Comment({
    author,
    text,
    blog,
    parent: parent || null,
  });
  await comment.save();
  return comment;
}


/**
 * Updates a comment by its ID.
 * @param {string} id - Comment ID.
 * @param {Object} updateData - Data to update (text, redacted).
 * @returns {Promise<Object|null>} - The updated comment or null if not found.
 */
async function updateComment(id, updateData) {
  return Comment.findByIdAndUpdate(id, updateData, { new: true });
}

/**
 * Redacts a comment by its ID (marks as redacted).
 * @param {string} id - Comment ID.
 * @returns {Promise<Object|null>} - The redacted comment or null if not found.
 */
async function redactComment(id) {
  return Comment.findByIdAndUpdate(id, { redacted: true }, { new: true });
}

module.exports = {
  createComment,
  getCommentsByBlog,
  updateComment,
  redactComment,
  getAllComments
};

================
File: portfolio.node/src/services/counterService.js
================
const Counter = require("../models/Counters");

/**
 * Get the next unique vectorId in a multi-user safe way.
 * Uses MongoDB's atomic `$inc` operation to prevent race conditions.
 *
 * @param {string} name - The counter name (e.g., "vectorId")
 * @returns {Promise<number>} - The next incremented value
 */
async function getNextVectorId(name = "vectorId") {
  const counter = await Counter.findOneAndUpdate(
    { Name: name },  // Find by counter name
    { $inc: { Value: 1 } },  // Atomically increment the counter
    { new: true, upsert: true } // Create if not exists
  );

  return counter.Value;
}

module.exports = { getNextVectorId };

================
File: portfolio.node/src/services/embeddingService.js
================
const fetch = require("node-fetch");

const EMBEDDING_SERVICE = process.env.EMBEDDING_SERVICE?.toLowerCase() || "ollama"; // Default to Ollama
const EMBEDDING_MODEL = process.env.EMBEDDING_MODEL || "mistral"; // Default model for Ollama
const VECTOR_SIZE = parseInt(process.env.VECTOR_SIZE, 10) || (EMBEDDING_SERVICE === "openai" ? 1536 : 4096);
const OLLAMA_API_URL = process.env.OLLAMA_API_URL || "http://10.0.0.42:11434";
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const OPENAI_API_URL = "https://api.openai.com/v1";

/**
 * Generate embeddings for a given text using the configured embedding service.
 * @param {string} text - Input text for embedding
 * @returns {Promise<number[]>} Embedding vector
 */
async function generateEmbeddings(text) {
    if (!text || text.trim().length === 0) throw new Error("Text input is required for embedding.");

    return EMBEDDING_SERVICE === "openai" ? generateOpenAIEmbeddings(text) : generateOllamaEmbeddings(text);
}

/**
 * Generate embeddings using Ollama API.
 * @param {string} text - Input text for embedding
 * @returns {Promise<number[]>} Embedding vector
 */
async function generateOllamaEmbeddings(text) {
    try {
        console.log(`Generating embeddings with Ollama endpoint`, `${OLLAMA_API_URL}/api/embeddings`);
        const response = await fetch(`${OLLAMA_API_URL}/api/embeddings`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ model: EMBEDDING_MODEL, prompt: text }),
        });

        if (!response.ok) throw new Error(`Ollama API Error: ${response.statusText}`);

        const data = await response.json();
        if (!data.embedding || data.embedding.length !== VECTOR_SIZE) {
            throw new Error(`Expected vector size ${VECTOR_SIZE}, but got ${data.embedding?.length}`);
        }

        return data.embedding;
    } catch (error) {
        console.error("❌ Error generating embeddings with Ollama:", error.message);
        throw new Error("Failed to generate embeddings with Ollama.");
    }
}

/**
 * Generate embeddings using OpenAI API.
 * @param {string} text - Input text for embedding
 * @returns {Promise<number[]>} Embedding vector
 */
async function generateOpenAIEmbeddings(text) {
    if (!OPENAI_API_KEY) throw new Error("OpenAI API key is missing. Set OPENAI_API_KEY in your .env file.");

    try {
        const response = await fetch(`${OPENAI_API_URL}/embeddings`, {
            method: "POST",
            headers: {
                Authorization: `Bearer ${OPENAI_API_KEY}`,
                "Content-Type": "application/json",
            },
            body: JSON.stringify({ model: "text-embedding-ada-002", input: text }),
        });

        if (!response.ok) throw new Error(`OpenAI API Error: ${response.statusText}`);

        const data = await response.json();
        if (!data.data || !data.data[0].embedding || data.data[0].embedding.length !== VECTOR_SIZE) {
            throw new Error(`Expected vector size ${VECTOR_SIZE}, but got ${data.data[0].embedding?.length}`);
        }

        return data.data[0].embedding;
    } catch (error) {
        console.error("❌ Error generating embeddings with OpenAI:", error.message);
        throw new Error("Failed to generate embeddings with OpenAI.");
    }
}

module.exports = { generateEmbeddings };

================
File: portfolio.node/src/services/fileService.js
================
const mongoose = require("mongoose");
const Grid = require("gridfs-stream");
const { generateEmbeddings } = require("./embeddingService");
const { storeEmbedding, deleteEmbedding, initCollection } = require("./qdrantService");
const { searchEntitiesHybrid } = require("./searchService");
const pdfParse = require("pdf-parse");
const counterService = require("./counterService");

const ALLOWED_TEXT_EXTENSIONS = [".txt", ".md", ".csv", ".json", ".html", ".xml", ".yaml", ".yml"];

function getFileExtension(filename){
  return filename.split(".").pop().toLowerCase();
}
function isTextBasedFile(filename) {
  const ext = getFileExtension(filename);
    return ALLOWED_TEXT_EXTENSIONS.includes(`.${ext}`);
}

const conn = mongoose.connection;
let gfs, gridFSBucket;

conn.once("open", () => {
  gridFSBucket = new mongoose.mongo.GridFSBucket(conn.db, { bucketName: "uploads" });
  gfs = Grid(conn.db, mongoose.mongo);
  gfs.collection("uploads");
});

/**
 * Upload a file to GridFS and process embeddings if applicable.
 */
async function uploadFile(req, entityId, context, isPublic) {
  return new Promise((resolve, reject) => {
    if (!req.headers["content-type"]) {
      return reject("Invalid request: No file detected");
    }

    const filename = req.headers["x-filename"] || "uploaded_file";
    const contentType = req.headers["content-type"];
    const size = req.headers["content-length"];

    const uploadStream = gridFSBucket.openUploadStream(filename, {
      metadata: {
        contentType,
        uploadedBy: req.user._id,
        isPublic: isPublic === "true",
        entityId,
        context,
        size,
      },
    });

    req.pipe(uploadStream);

    uploadStream.on("finish", async (file) => {
      // Generate vectorId for new files
      const vectorId = await counterService.getNextVectorId();
      await updateFileMetadata(file._id, { vectorId });

      // Process embeddings for text-based files
      if (contentType.startsWith("text/") || contentType === "application/pdf") {
        await updateFileEmbeddings(file._id, filename, contentType);
      }
      resolve({ message: "File uploaded successfully", filename });
    });

    uploadStream.on("error", (err) => reject(err));
  });
}

/**
 * Extract text content from a file for embedding processing.
 */
async function extractFileText(fileId, ext) {
  try {
    const downloadStream = gridFSBucket.openDownloadStream(new mongoose.Types.ObjectId(fileId));
    const chunks = [];
    for await (const chunk of downloadStream) {
      chunks.push(chunk);
    }
    const fileBuffer = Buffer.concat(chunks);

    if (ext === "pdf") {
      const pdfData = await pdfParse(fileBuffer);
      return pdfData.text;
    }
    return fileBuffer.toString("utf8");
  } catch (error) {
    console.error(`❌ Error extracting text from file ID: ${fileId}`, error);
    return "";
  }
}

/**
 * Generate embeddings for a stored file in GridFS.
 */
async function updateFileEmbeddings(fileId, filename, contentType) {
  const ext = getFileExtension(filename);
  const text = await extractFileText(fileId, ext);
  if (!text) return;

  const embedding = await generateEmbeddings(text);
  if (!embedding) throw new Error(`Failed to generate embedding for file: ${fileId}`);

  const fileMetadata = await getFileMetadata(fileId);
  await storeEmbedding("files", fileMetadata.vectorId, embedding, { filename });
}

/**
 * Get file metadata by ID.
 */
async function getFileMetadata(id) {
  return await gfs.files.findOne({ _id: new mongoose.Types.ObjectId(id) });
}

/**
 * Serve public files.
 */
async function getPublicFile(id) {
  const file = await getFileMetadata(id);
  if (!file || !file.metadata.isPublic) return null;
  return gridFSBucket.openDownloadStream(file._id);
}

/**
 * Serve private files (Admins Only).
 */
async function getPrivateFile(id) {
  const file = await getFileMetadata(id);
  if (!file) return null;
  return gridFSBucket.openDownloadStream(file._id);
}

/**
 * Delete a file and remove its embedding.
 */
async function deleteFile(id) {
  try {
    await gridFSBucket.delete(new mongoose.Types.ObjectId(id));
    await deleteEmbedding("files", id.toString());
    return true;
  } catch (error) {
    console.error(`❌ Error deleting file ID: ${id}`, error);
    return false;
  }
}

/**
 * Get files by entity reference & context.
 */
async function getFilesByContext(entityId, context) {
  return await gfs.files.find({ "metadata.entityId": entityId, "metadata.context": context }).toArray();
}

/**
 * Retrieve all file metadata, filtering out media files.
 */
async function getAllFiles() {
  const mediaTypes = ["image/", "video/", "audio/"]; // Exclude media files
  const files = await gfs.files.find().toArray();

  return files
    .filter(file => !mediaTypes.some(type => file.metadata.contentType.startsWith(type)))
    .map(file => ({
      _id: file._id,
      filename: file.filename,
      contentType: file.metadata.contentType,
      entityId: file.metadata.entityId,
      context: file.metadata.context,
      tags: file.metadata.tags || [],
      metadata: file.metadata
    }));
}

/**
 * Search files using hybrid search (full-text + vector).
 */
async function searchFiles(query) {
  return searchEntitiesHybrid(gfs.files, query);
}

async function updateFileMetadata(fileId, metadata) {
  const db = mongoose.connection.db;
  const bucketFiles = db.collection("uploads.files"); // GridFS files collection

  try {
      const result = await bucketFiles.updateOne(
          { _id: new mongoose.Types.ObjectId(fileId) },
          { $set: { metadata: metadata } }  // ✅ Updates metadata
      );

      if (result.matchedCount === 0) {
          throw new Error(`File with ID ${fileId} not found`);
      }

      console.log(`✅ Updated metadata for file: ${fileId}`);
  } catch (error) {
      console.error(`❌ Error updating file metadata:`, error.message);
  }
}

async function ensureFileVectorId(fileId) {
  const db = mongoose.connection.db;
  const bucketFiles = db.collection("uploads.files"); // GridFS metadata collection

  const file = await bucketFiles.findOne({ _id: new mongoose.Types.ObjectId(fileId) });
  if (!file) {
      console.error(`❌ File with ID ${fileId} not found`);
      return;
  }

  if (!file.metadata || !file.metadata.vectorId) {
      console.log(`🔄 Assigning vectorId for file: ${file.filename}`);
      const vectorId = await counterService.getNextVectorId("file_vectorid");

      await updateFileMetadata(fileId, {
          ...file.metadata,  // Preserve existing metadata
          vectorId: vectorId
      });

      console.log(`✅ Assigned vectorId: ${vectorId} to file: ${file.filename}`);
      return vectorId;
  }

  return file.metadata.vectorId; // Return existing vectorId if already set
}

/**
 * Initializes embeddings for files stored in GridFS.
 */
async function initializeFileEmbeddings() {
  const collectionName = "uploads"; // GridFS bucket name
  console.log(`🔄 Initializing embeddings for "${collectionName}"...`);

  // 1️⃣ Ensure Qdrant collection exists
  await initCollection(collectionName);

  // 2️⃣ Fetch all files from GridFS
  const files = await gfs.files.find().toArray();
  if (!files.length) {
      console.log(`⚠️ No files found in "${collectionName}", skipping.`);
      return;
  }

  // 3️⃣ Generate & Store Embeddings for text-based files
  for (const file of files) {

      if (!file.metadata || !file.metadata.contentType) continue;

      if (!isTextBasedFile(file.filename)) {
        console.log(`⚠️ Skipping non-text file: ${file.filename}`);
        return;
    }

    const ext = getFileExtension(file.filename);

      const text = await extractFileText(file._id, ext);
      if (!text.trim()) continue;

      const embedding = await generateEmbeddings(text);
      if (!embedding) {
          console.error(`❌ Failed to generate embedding for file: ${file._id}`);
          continue;
      }

      const vectorId = await ensureFileVectorId(file._id);
      await storeEmbedding(collectionName, vectorId, embedding, {
          filename: file.filename,
          contentType: file.metadata.contentType,
      });

      console.log(`✅ Stored embedding for "${collectionName}" -> ${file.filename}`);
  }
}

module.exports = {
  uploadFile,
  getFileMetadata,
  getPublicFile,
  getPrivateFile,
  deleteFile,
  getFilesByContext,
  getAllFiles,
  searchFiles,
  initializeFileEmbeddings
};

================
File: portfolio.node/src/services/llmService.js
================
// portfolio.node/src/services/llmService.js
const { generateResponse } = require("./ollamaService"); // Assuming aiService handles both providers

/**
 * Calls the configured LLM with a given prompt and expected JSON output.
 * @param {string} systemRole - The role of the LLM (e.g., "Search Assistant", "Chat Assistant").
 * @param {string} userQuery - The user input or instruction.
 * @param {object} extraParams - Any additional data for context (e.g., available collections).
 * @returns {Promise<object>} - The LLM response as JSON.
 */
async function queryLLM(systemRole, userQuery, extraParams = {}) {
    const promptObject  = {
        role: systemRole,
        task: userQuery,
        context: extraParams,
        output_format: "JSON"
    };

    const formattedPrompt = `You are an AI assistant. 
    Please respond in JSON format. 
    Here is the task:\n${JSON.stringify(promptObject, null, 2)}`;

    try {
        // Choose the AI provider dynamically
        const llmResponse =await generateResponse(formattedPrompt);
        return JSON.parse(llmResponse.response); // Ensure response is parsed into JSON
    } catch (error) {
        console.error("LLM query failed:", error);
        return null;
    }
}

module.exports = { queryLLM };

================
File: portfolio.node/src/services/ollamaService.js
================
// portfolio.node/src/services/ollamaService.js

const OLLAMA_URL = process.env.OLLAMA_URL || "http://10.0.0.42:11434";
const PROMPT_MODEL = process.env.PROMPT_MODEL || "mistral";

/**
 * Sends a structured prompt to the Ollama AI model and retrieves a response.
 * @param {string} prompt - The structured prompt with context and user query.
 * @returns {Promise<{ response: string }>} - AI-generated response.
 */
async function generateResponse(prompt) {
  try {
    const response = await fetch(`${OLLAMA_URL}/api/generate`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        model: PROMPT_MODEL,
        prompt: prompt,
        max_tokens: 200,
        temperature: 0.7,
      }),
    });

    if (!response.ok) {
      throw new Error(`Ollama API returned an error: ${response.statusText}`);
    }

    // Read the response as a stream
    const reader = response.body.getReader();
    let fullResponse = "";

    while (true) {
      const { done, value } = await reader.read();
      if (done) break;

      // Convert chunk to string
      const chunk = new TextDecoder().decode(value);
      
      // Process each JSON object (one per line)
      chunk.split("\n").forEach((line) => {
        if (line.trim()) {
          try {
            const parsed = JSON.parse(line);
            if (parsed.response) {
              fullResponse += parsed.response; // Append each part of the response
            }
          } catch (err) {
            console.warn("Skipping invalid JSON chunk");
          }
        }
      });
    }

    return { response: fullResponse.trim() || "No response generated." };
  } catch (error) {
    console.error("Error communicating with Ollama:", error);
    return { response: "I'm having trouble generating a response right now. Try again later." };
  }
}

async function generateResponseStream(prompt) {

  const url = `${OLLAMA_URL}/api/generate`;
  // console.log("calling ollama", url);
    const response = await fetch(url, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        model: "mistral",
        prompt: prompt,
        max_tokens: 200,
        temperature: 0.7,
      }),
    });
  
    const reader = response.body.getReader();
    
    return new ReadableStream({
      async start(controller) {
        let accumulatedResponse = "";
  
        while (true) {
          const { done, value } = await reader.read();
          if (done) {
            controller.close();
            break;
          }
  
          const chunk = new TextDecoder().decode(value);
  
          // Process streamed JSON lines
          chunk.split("\n").forEach((line) => {
            if (line.trim()) {
              try {
                const parsed = JSON.parse(line);
                if (parsed.response) {
                  accumulatedResponse += parsed.response;
                  controller.enqueue(parsed.response); // Send each chunk immediately
                }
              } catch (err) {
                console.warn("Skipping invalid JSON chunk (possibly end?)");
              }
            }
          });
        }
      }
    });
  }
  

module.exports = { generateResponse, generateResponseStream };

================
File: portfolio.node/src/services/pageService.js
================
const Page = require("../models/Page");
const { generateEmbeddings } = require("./embeddingService");
const { storeEmbedding, deleteEmbedding, initCollection } = require("./qdrantService");
const { searchEntitiesHybrid } = require("./searchService");

/**
 * Create a new page and store its embedding.
 * @param {Object} data - Page data
 * @returns {Promise<Object>} Created page
 */
async function createPage(data) {
    const page = new Page(data);
    await page.save();

    // Generate and store embeddings
    await updatePageEmbeddings(page);

    return page;
}

/**
 * Update an existing page and optionally refresh embeddings.
 * @param {string} id - Page ID
 * @param {Object} updates - Fields to update
 * @returns {Promise<Object|null>} Updated page
 */
async function updatePage(id, updates) {
    const page = await Page.findByIdAndUpdate(id, updates, { new: true });
    if (!page) return null;

    // If content/title changes, regenerate embeddings
    if (updates.title || updates.content) {
        await updatePageEmbeddings(page);
    }

    return page;
}

/**
 * Delete a page and remove its embedding from Qdrant.
 * @param {string} id - Page ID
 * @returns {Promise<boolean>} True if deleted, false otherwise
 */
async function deletePage(id) {
    const page = await Page.findByIdAndDelete(id);
    if (!page) return false;

    await deleteEmbedding("pages", page.vectorId);
    return true;
}

/**
 * Retrieve a single page by ID.
 * @param {string} id - Page ID
 * @returns {Promise<Object|null>} Page object
 */
async function getPageById(id) {
    return Page.findById(id);
}

/**
 * Retrieve a single page by slug.
 * @param {string} slug - Page slug
 * @returns {Promise<Object|null>} Page object
 */
async function getPageBySlug(slug) {
    return Page.findOne({ slug });
}

/**
 * Retrieve all pages with optional filters.
 * @param {Object} [filter={}] - MongoDB filter object
 * @returns {Promise<Array>} List of pages
 */
async function getAllPages(filter = {}) {
    return Page.find(filter);
}

/**
 * Generate embeddings for a single page and store them in Qdrant.
 * @param {Object} page - Page object
 */
async function updatePageEmbeddings(page) {
    const text = `${page.title} ${page.content}`;

    const embedding = await generateEmbeddings(text);
    if (!embedding) throw new Error(`Failed to generate embedding for page: ${page._id}`);

    await storeEmbedding(Page.collection.collectionName, page.vectorId, embedding, {
        title: page.title,
        tags: page.tags || [],
    });
}

/**
 * Refresh all or only changed page embeddings.
 * @param {boolean} fullRefresh - If true, refresh all embeddings; otherwise, only update modified pages.
 */
async function refreshPageEmbeddings(fullRefresh = false) {
    const filter = fullRefresh ? {} : { updatedAt: { $gt: new Date(Date.now() - 24 * 60 * 60 * 1000) } }; // Last 24h updates
    const pages = await getAllPages(filter);

    for (const page of pages) {
        await updatePageEmbeddings(page);
    }

    return { message: `Refreshed ${pages.length} page embeddings.` };
}

/**
 * Search pages using semantic vector search.
 * @param {string} query - User's search query
 * @returns {Promise<Array>} List of matching pages
 */
async function searchPages(query) {
    return searchEntitiesHybrid(Page, query);
}

/**
 * Initializes embeddings for the Page model.
 */
async function initializePageEmbeddings() {
    const collectionName = Page.collection.collectionName; // Use MongoDB model's collection name
    console.log(`🔄 Initializing embeddings for "${collectionName}"...`);

    // 1️⃣ Ensure Qdrant collection exists
    await initCollection(collectionName);

    // 2️⃣ Fetch all documents from MongoDB
    const documents = await Page.find({});
    if (!documents.length) {
        console.log(`⚠️ No documents found in "${collectionName}", skipping.`);
        return;
    }

    // 3️⃣ Generate & Store Embeddings
    for (const doc of documents) {

        if ( !doc.vectorId){
            // trigger vector generation
            await doc.save();
        }

        const text = `${doc.title} ${doc.content || ""}`;
        if (!text.trim()) continue;

        const embedding = await generateEmbeddings(text);
        if (!embedding) {
            console.error(`❌ Failed to generate embedding for ${collectionName}: ${doc._id}`);
            continue;
        }

        await storeEmbedding(collectionName, doc.vectorId, embedding, {
            title: doc.title,
            tags: doc.tags || [],
        });

        console.log(`✅ Stored embedding for "${collectionName}" -> ${doc.title}`);
    }
}

module.exports = {
    createPage,
    updatePage,
    deletePage,
    getPageById,
    getPageBySlug,
    getAllPages,
    updatePageEmbeddings,
    refreshPageEmbeddings,
    searchPages,
    initializePageEmbeddings
};

================
File: portfolio.node/src/services/projectService.js
================
const Project = require("../models/Project");
const { generateEmbeddings } = require("./embeddingService");
const { storeEmbedding, deleteEmbedding, initCollection } = require("./qdrantService");
const { searchEntitiesHybrid } = require("./searchService");

/**
 * Create a new project and store its embedding.
 * @param {Object} data - Project data
 * @returns {Promise<Object>} Created project
 */
async function createProject(data) {
    const project = new Project(data);
    await project.save();

    // Generate and store embedding
    await updateProjectEmbeddings(project);

    return project;
}

/**
 * Update an existing project and optionally refresh embeddings.
 * @param {string} id - Project ID
 * @param {Object} updates - Fields to update
 * @returns {Promise<Object|null>} Updated project
 */
async function updateProject(id, updates) {
    const project = await Project.findByIdAndUpdate(id, updates, { new: true });
    if (!project) return null;

    // If description/title/tags change, regenerate embeddings
    if (updates.title || updates.description || updates.tags) {
        await updateProjectEmbeddings(project);
    }

    return project;
}

/**
 * Delete a project and remove its embedding from Qdrant.
 * @param {string} id - Project ID
 * @returns {Promise<boolean>} True if deleted, false otherwise
 */
async function deleteProject(id) {
    const project = await Project.findByIdAndDelete(id);
    if (!project) return false;

    await deleteEmbedding("projects", project.vectorId);
    return true;
}

/**
 * Retrieve a single project by ID.
 * @param {string} id - Project ID
 * @returns {Promise<Object|null>} Project object
 */
async function getProjectById(id) {
    return Project.findById(id);
}

/**
 * Retrieve all projects with optional filters.
 * @param {Object} [filter={}] - MongoDB filter object
 * @returns {Promise<Array>} List of projects
 */
async function getAllProjects(filter = {}) {
    return Project.find(filter);
}

/**
 * Generate embeddings for a single project and store them in Qdrant.
 * @param {Object} project - Project object
 */
async function updateProjectEmbeddings(project) {
    const text = `${project.title} ${project.description} ${project.tags?.join(" ")} ${project.industry || ""}`;
    
    const embedding = await generateEmbeddings(text);
    if (!embedding) throw new Error(`Failed to generate embedding for project: ${project._id}`);

    await storeEmbedding(Project.collection.collectionName, project.vectorId, embedding, {
        title: project.title,
        tags: project.tags || [],
        industry: project.industry || "",
    });
}

/**
 * Refresh all or only changed embeddings.
 * @param {boolean} fullRefresh - If true, refresh all embeddings; otherwise, only update modified projects.
 */
async function refreshProjectEmbeddings(fullRefresh = false) {
    const filter = fullRefresh ? {} : { updatedAt: { $gt: new Date(Date.now() - 24 * 60 * 60 * 1000) } }; // Last 24h updates
    const projects = await getAllProjects(filter);

    for (const project of projects) {
        await updateProjectEmbeddings(project);
    }

    return { message: `Refreshed ${projects.length} project embeddings.` };
}

/**
 * Search projects using semantic vector search.
 * @param {string} query - User's search query
 * @returns {Promise<Array>} List of matching projects
 */
async function searchProjects(query) {
  return searchEntitiesHybrid(Project, query);
}

/**
 * Initializes embeddings for the Project model.
 */
async function initializeProjectEmbeddings() {
    const collectionName = Project.collection.collectionName; // Use MongoDB model's collection name
    console.log(`🔄 Initializing embeddings for "${collectionName}"...`);

    // 1️⃣ Ensure Qdrant collection exists
    await initCollection(collectionName);

    // 2️⃣ Fetch all documents from MongoDB
    const documents = await Project.find({});
    if (!documents.length) {
        console.log(`⚠️ No documents found in "${collectionName}", skipping.`);
        return;
    }

    // 3️⃣ Generate & Store Embeddings
    for (const doc of documents) {
        if ( !doc.vectorId){
            // trigger vector generation
            await doc.save();
        }
        const text = `${doc.title} ${doc.description || ""}`;
        if (!text.trim()) continue;

        const embedding = await generateEmbeddings(text);
        if (!embedding) {
            console.error(`❌ Failed to generate embedding for ${collectionName}: ${doc._id}`);
            continue;
        }

        await storeEmbedding(collectionName, doc.vectorId, embedding, {
            title: doc.title,
            tags: doc.tags || [],
        });

        console.log(`✅ Stored embedding for "${collectionName}" -> ${doc.title}`);
    }
}

module.exports = {
    createProject,
    updateProject,
    deleteProject,
    getProjectById,
    getAllProjects,
    updateProjectEmbeddings,
    refreshProjectEmbeddings,
    searchProjects,
    initializeProjectEmbeddings
};

================
File: portfolio.node/src/services/promptService.js
================
const Prompt = require("../models/Prompt");

/**
 * Retrieves all stored prompts.
 */
async function getAllPrompts() {
    return await Prompt.find();
}

/**
 * Retrieves a specific prompt by ID.
 */
async function getPromptById(id) {
    const prompt = await Prompt.findById(id);
    if (!prompt) {
        throw new Error("Prompt not found.");
    }
    return prompt;
}

/**
 * Creates a new AI prompt.
 */
async function createPrompt({ name, template, metadata = {} }) {
    if (await Prompt.findOne({ name })) {
        throw new Error("A prompt with this name already exists.");
    }
    
    return await Prompt.create({ name, template, metadata });
}

/**
 * Updates an existing prompt.
 */
async function updatePrompt(id, { name, template, metadata }) {
    const prompt = await Prompt.findByIdAndUpdate(id, { name, template, metadata }, { new: true });
    if (!prompt) {
        throw new Error("Prompt not found.");
    }
    return prompt;
}

/**
 * Deletes a prompt by ID.
 */
async function deletePrompt(id) {
    const prompt = await Prompt.findByIdAndDelete(id);
    if (!prompt) {
        throw new Error("Prompt not found.");
    }
    return prompt;
}

module.exports = {
    getAllPrompts,
    getPromptById,
    createPrompt,
    updatePrompt,
    deletePrompt
};

================
File: portfolio.node/src/services/providerConfigService.js
================
// portfolio.node/src/services/providerConfigService.js
const ProviderConfig = require("../models/ProviderConfig");

async function getAllConfigs() {
  return ProviderConfig.find({});
}

async function getConfigByProvider(provider) {
    return ProviderConfig.findOne({
        provider: { $regex: '^' + provider + '$', $options: 'i' }
      });
}

async function updateConfig(provider, configData) {
  // Upsert: if a config for the provider exists, update it; otherwise, create it.
  return ProviderConfig.findOneAndUpdate({ provider }, configData, { new: true, upsert: true });
}

async function prepopulateDefaultConfigs() {
    const count = await ProviderConfig.countDocuments();
    if (count === 0) {
      const defaultConfigs = [];
  
      // Pre-populate for Google if env vars are provided.
      if (process.env.GOOGLE_CLIENT_ID && process.env.GOOGLE_CLIENT_SECRET && process.env.GOOGLE_CALLBACK_URL) {
        defaultConfigs.push({
          provider: "google",
          clientId: process.env.GOOGLE_CLIENT_ID,
          clientSecret: process.env.GOOGLE_CLIENT_SECRET,
          callbackURL: process.env.GOOGLE_CALLBACK_URL,
        });
      }
      // Similarly for Facebook
      if (process.env.FACEBOOK_CLIENT_ID && process.env.FACEBOOK_CLIENT_SECRET && process.env.FACEBOOK_CALLBACK_URL) {
        defaultConfigs.push({
          provider: "facebook",
          clientId: process.env.FACEBOOK_CLIENT_ID,
          clientSecret: process.env.FACEBOOK_CLIENT_SECRET,
          callbackURL: process.env.FACEBOOK_CALLBACK_URL,
        });
      }
      // GitHub
      if (process.env.GITHUB_CLIENT_ID && process.env.GITHUB_CLIENT_SECRET && process.env.GITHUB_CALLBACK_URL) {
        defaultConfigs.push({
          provider: "github",
          clientId: process.env.GITHUB_CLIENT_ID,
          clientSecret: process.env.GITHUB_CLIENT_SECRET,
          callbackURL: process.env.GITHUB_CALLBACK_URL,
        });
      }
      // Microsoft
      if (process.env.MICROSOFT_CLIENT_ID && process.env.MICROSOFT_CLIENT_SECRET && process.env.MICROSOFT_CALLBACK_URL) {
        defaultConfigs.push({
          provider: "microsoft",
          clientId: process.env.MICROSOFT_CLIENT_ID,
          clientSecret: process.env.MICROSOFT_CLIENT_SECRET,
          callbackURL: process.env.MICROSOFT_CALLBACK_URL,
        });
      }
      if (defaultConfigs.length > 0) {
        await ProviderConfig.insertMany(defaultConfigs);
        console.log("Default provider configurations have been pre-populated.");
      }
    }
  }

  async function getAIConfig() {
    let config = await ProviderConfig.findOne();
    if (!config) {
      config = new ProviderConfig({ provider: "ollama" });
      await config.save();
    }
    return config;
  }
  
module.exports = {
  getAIConfig,
  getAllConfigs,
  getConfigByProvider,
  updateConfig,
  prepopulateDefaultConfigs
};

================
File: portfolio.node/src/services/qdrantService.js
================
const { QdrantClient } = require("@qdrant/js-client-rest");
const QDRANT_URL = process.env.QDRANT_URL || "http://10.0.0.42:6333";
const QDRANT_API_KEY = process.env.QDRANT_API_KEY || "";
const EMBEDDING_SERVICE = process.env.EMBEDDING_SERVICE?.toLowerCase() || "ollama"; // Default to Ollama
const VECTOR_SIZE = parseInt(process.env.VECTOR_SIZE, 10) || (EMBEDDING_SERVICE === "openai" ? 1536 : 4096);

const qdrantClient = new QdrantClient({
    url: QDRANT_URL,
    apiKey: QDRANT_API_KEY,
});

/**
 * Initialize a Qdrant collection if it does not exist.
 * @param {string} collection - Collection name
 */
async function initCollection(collection) {
    try {
        console.log(`🗑️ Dropping existing Qdrant collection: "${collection}"...`);
        await qdrantClient.deleteCollection(collection); // ✅ Drop collection before reinitialization
        console.log(`✅ Collection "${collection}" dropped successfully.`);
    } catch (error) {
        console.log(`⚠️ Collection "${collection}" did not exist, proceeding with initialization.`);
    }

    try {
        console.log(`📌 Creating new Qdrant collection: "${collection}"...`);
        await qdrantClient.createCollection(collection, {
            vectors: { size: VECTOR_SIZE, distance: "Cosine" },
        });
        console.log(`✅ Collection "${collection}" reinitialized.`);
    } catch (error) {
        console.error(`❌ Error creating collection "${collection}":`, error.message);
        console.error(error);
    }
}

/**
 * Store an embedding in Qdrant.
 * @param {string} collection - Collection name
 * @param {string} id - Unique document ID
 * @param {number[]} vectors - Embedding vector
 * @param {object} metadata - Metadata associated with the document
 */
async function storeEmbedding(collection, id, vectors, metadata = {}) {

    if (!Array.isArray(vectors) || vectors.length !== VECTOR_SIZE) {
        throw new Error(`❌ Invalid embedding vector: expected ${VECTOR_SIZE} dimensions.`);
    }

    console.log(`Storing embedding in Qdrant collection: "${collection}" with id: ${id}`, metadata  );
    try {
        await qdrantClient.upsert(collection, {
            points: [
                {
                    id,
                    vectors,
                    payload: metadata,
                },
            ],
        });
    } catch (error) {
        console.error(`❌ Error storing embedding in Qdrant:`, error.message);
    }
}

/**
 * Perform a semantic search in Qdrant.
 * @param {number[]} queryVector - The query embedding vector
 * @param {string} collection - Collection name
 * @param {number} [limit=5] - Max number of results
 * @param {number} [minScore=0.5] - Minimum similarity score
 * @returns {Promise<object[]>} - List of matching documents
 */
async function searchQdrant(queryVector, collection, limit = 5, minScore = 0.3) {
    try {

        if ( !queryVector || queryVector.length != VECTOR_SIZE){
            console.error("invalid vector received in searchQdrant");
            return [];
        }
        console.log(`📡 Searching Qdrant in collection "${collection}"...`);
        console.log(`collection: ${collection}`);
        console.log(`vector count: ${queryVector.length}`);
        console.log(`limit: ${limit}`);
        console.log(`min score: ${minScore}`);

        const response = await qdrantClient.search(collection, {
            vector: queryVector,
            limit,
            with_payload: true,
            score_threshold: minScore,
        });

        if (!response || response.length === 0) {
            console.log("⚠️ No relevant search results found.");
            return [];
        }

        return response
            .filter(doc => doc.score >= minScore)
            .sort((a, b) => b.score - a.score)
            .map(doc => ({
                id: doc.id,
                score: doc.score,
                metadata: doc.payload,
            }));
    } catch (error) {
        console.error(`❌ Qdrant Search Error: ${error.message}`);
        return [];
    }
}

/**
 * Delete an embedding from Qdrant.
 * @param {string} collection - Collection name
 * @param {string} id - Document ID to delete
 */
async function deleteEmbedding(collection, id) {
    try {
        await qdrantClient.delete(collection, {
            points: [id],
        });
        console.log(`✅ Deleted embedding for document ID: ${id} in collection '${collection}'`);
    } catch (error) {
        console.error(`❌ Error deleting embedding:`, error.message);
    }
}

/**
 * Drop an entire Qdrant collection.
 * @param {string} collection - Collection name
 */
async function dropCollection(collection) {
    try {
        await qdrantClient.deleteCollection(collection);
        console.log(`✅ Dropped Qdrant collection "${collection}"`);
    } catch (error) {
        console.error(`❌ Error dropping collection: ${error.message}`);
    }
}

module.exports = {
    initCollection,
    storeEmbedding,
    searchQdrant,
    deleteEmbedding,
    dropCollection,
};

================
File: portfolio.node/src/services/searchService.js
================
const Project = require("../models/Project");
const BlogEntry = require("../models/BlogEntry");
const Page = require("../models/Page");
const { searchQdrant } = require("../services/qdrantService");
const { generateEmbeddings } = require("../services/embeddingService");
const { convertToText } = require('../utils/generatePrompt');
const { queryLLM } = require("./llmService");
const cache = require("../utils/cache");

/**
 * Extracts schema definitions from a Mongoose model with caching.
 * @param {string} modelName - The collection name.
 * @param {object} model - The Mongoose model.
 * @returns {object} - A schema definition object with field names and types.
 */
function extractSchema(modelName, model) {
    const cacheKey = `schema_${modelName}`;
    let schema = cache.get(cacheKey);

    if (!schema) {
        schema = {};
        Object.entries(model.schema.paths).forEach(([key, value]) => {
            schema[key] = value.instance; // Extract field type (String, Number, etc.)
        });

        cache.set(cacheKey, schema); // Store schema in cache
    }

    return schema;
}


/**
 * Perform a hybrid search and return enriched documents
 * @param {string} query - The search query
 * @returns {Promise<{ sources: Array, context: string }>}
 */
async function performSearch(query) {
    const queryEmbedding = await generateEmbeddings(query);
    if (!queryEmbedding) throw new Error("Failed to generate query embedding.");

    // Define available collections
    const collectionMappings = {
        "projects": { model: Project, collectionName: Project.collection.collectionName, limit: 3 },
        "blogs": { model: BlogEntry, collectionName: BlogEntry.collection.collectionName, limit: 3 },
        "pages": { model: Page, collectionName: Page.collection.collectionName, limit: 2 },
    };

    const availableCollections = Object.keys(collectionMappings);

    // 1️⃣ Use LLM to determine most relevant collections
    const sortedCollections = await sortCollectionsByRelevance(query, availableCollections);

    // 2️⃣ Search Qdrant for relevant vector matches in order of LLM's ranking
    const searchResults = {};
    for (const collection of sortedCollections) {
        const { model, collectionName, limit } = collectionMappings[collection];
        searchResults[collection] = await searchQdrant(queryEmbedding, collectionName, limit);
    }

    // 3️⃣ Fetch full MongoDB documents using vectorId
    const projects = await fetchMongoDocs(Project, searchResults["projects"] || []);
    const blogs = await fetchMongoDocs(BlogEntry, searchResults["blogs"] || []);
    const pages = await fetchMongoDocs(Page, searchResults["pages"] || []);

    // 4️⃣ Merge results with type labels
    const sources = [
        ...projects.map(p => ({ ...p, type: "Project" })),
        ...blogs.map(b => ({ ...b, type: "BlogEntry" })),
        ...pages.map(p => ({ ...p, type: "Page" })),
    ];

    // 5️⃣ Convert sources to structured text
    const context = sources.map(convertToText).join("\n\n");

    return { sources, context };
}

/**
 * Fetches full MongoDB documents for search results from Qdrant
 */
async function fetchMongoDocs(model, qdrantResults) {
    const vectorIds = qdrantResults.map(doc => doc.id);
    if (vectorIds.length === 0) return [];

    const documents = await model.find({ vectorId: { $in: vectorIds } }).lean();
    return documents.map(doc => {
        const qdrantMatch = qdrantResults.find(q => q.id === doc.vectorId);
        return { ...doc, score: qdrantMatch?.score || 0 };
    });
}

/**
 * Determines the most relevant collections to query for a given user prompt.
 * @param {string} userQuery - The search query.
 * @param {string[]} availableCollections - List of available collections.
 * @returns {Promise<string[]>} - The collections sorted by relevance.
 */
async function sortCollectionsByRelevance(userQuery, availableCollections) {
    // Get schema definitions from cache or DB
    const schemaDefinitions = {
        projects: extractSchema("projects", Project),
        blogs: extractSchema("blogs", BlogEntry),
        pages: extractSchema("pages", Page),
    };

    // Query LLM with schema details
    const response = await queryLLM(
        "AI Search Assistant",
        `Given the user query: "${userQuery}", rank these collections by relevance based on the following schema definitions. Each collection contains documents with the specified fields and types. Consider this when ranking the collections.`,
        { availableCollections, schemaDefinitions }
    );

    return response?.sorted_collections || availableCollections; // Fallback to default order
}

module.exports = { performSearch };

================
File: portfolio.node/src/services/userService.js
================
const User = require("../models/User");

/**
 * Creates a new user.
 * 
 * @param {Object} userData - An object containing user details.
 * @param {string} userData.username - The username.
 * @param {string} userData.password - The plain-text password.
 * @returns {Promise<Object>} - The newly created user.
 * @throws {Error} - If username or password is missing or if the user already exists.
 */
async function createUser({ username, password, isAdmin = false }) {
    if (!username || !password) {
      throw new Error("Username and password are required");
    }
  
    // Check for an existing user with the same username.
    const existingUser = await User.findOne({ username });
    if (existingUser) {
      throw new Error("User already exists");
    }
  
    // Create the user instance.
    // The User model's pre-save hook will hash the password automatically.
    const newUser = new User({ username, passwordHash: password, isAdmin });
    await newUser.save();
    return newUser;
  }

/**
 * Retrieves all users.
 * @returns {Promise<Array>} - Array of user.
 */
async function getAllUsers() {
  return User.find();
}

/**
 * Retrieves a users by its ID.
 * @param {string} id - The user ID.
 * @returns {Promise<Object|null>} - The found user  or null.
 */
async function getUserById(id) {
  return User.findById(id);
}

/**
 * Updates a user by its ID.
 * @param {string} id - The user ID.
 * @param {Object} data - Data to update.
 * @returns {Promise<Object|null>} - The updated user or null.
 */
async function updateUser(id, data) {
  return User.findByIdAndUpdate(id, data, { new: true });
}

/**
 * Deletes a user by its ID.
 * @param {string} id - The user ID.
 * @returns {Promise<Object|null>} - The deleted user or null.
 */
async function deleteUser(id) {
  return User.findByIdAndDelete(id);
}

module.exports = {
  createUser,
  getAllUsers,
  getUserById,
  updateUser,
  deleteUser,
};

================
File: portfolio.node/src/services/warmUpService.js
================
const cache = require("../utils/cache");
const { queryLLM } = require("./llmService");

/**
 * Generates and caches warm-up data on backend start.
 */
async function warmupLLM() {
    cache.set("warmup_complete", false); // Set warm-up as "not ready"

    console.log("🔄 Running initial LLM Warm-up...");

    try {
        await refreshGreetings(); // Refresh greetings immediately at startup
        await refreshChatContext(); // Cache chat context once at startup
        console.log("✅ Warm-up complete.");
    } catch (error) {
        console.error("🔥 Warm-up failed:", error);
    }

    cache.set("warmup_complete", true); // Set warm-up as "not ready"

}

/**
 * Refreshes the cached AI-generated greetings every 4 hours.
 */
async function refreshGreetings() {
    console.log("🔄 Refreshing cached greetings...");

    try {
        const greetingResponse = await queryLLM(
            "AI Chat Assistant",
            `Generate 10 unique and friendly greetings. Format as a JSON array like
             {"greetings" : [  "Hi, how are you?", 
                "Welcome!",
              ]
             }`,
            {}
        );
        const greetings = greetingResponse?.greetings || ["Hello! How can I assist you today?"];
        cache.set("chat_greetings", greetings, 14400); // Cache for 4 hours
        console.log(`✅ Cached ${greetings.length} greetings.`);

    } catch (error) {
        console.error("❌ Failed to refresh greetings:", error);
    }
}

/**
 * Generates and caches the default chat context once every 24 hours.
 */
async function refreshChatContext() {
    console.log("🔄 Generating default chat context...");

    try {
        const contextResponse = await queryLLM(
            "AI Knowledge Assistant",
            "Provide a detailed general knowledge base for answering user questions about projects, skills, and technology. Keep it structured and useful as a starting point.",
            {}
        );

        const defaultContext = contextResponse?.context || "This is an AI assistant for answering questions about projects and skills.";
        cache.set("chat_context", defaultContext, 86400); // Cache for 24 hours

        console.log("✅ Cached default chat context.");
    } catch (error) {
        console.error("❌ Failed to generate chat context:", error);
    }
}

function isWarmupComplete() {
    return cache.get("warmup_complete") || false;
}

module.exports = { warmupLLM, refreshGreetings, isWarmupComplete };

================
File: portfolio.node/src/services/wsChatService.js
================
const WebSocket = require("ws");
const ChatMessage = require("../models/ChatMessage");
const { generatePrompt } = require("../utils/generatePrompt");
const { performSearch } = require("../services/searchService");
const ollamaService = require("../services/ollamaService");
const { queryLLM } = require("./llmService");

const setupWebSocketServer = (server) => {
    const wss = new WebSocket.Server({ server });

    wss.on("connection", (ws) => {
        console.log("✅ New WebSocket connection established.");

        ws.on("message", async (message) => {
            try {
                const { sessionId, query, history } = JSON.parse(message);
                if (!sessionId || !query) {
                    ws.send(JSON.stringify({ error: "sessionId and query are required." }));
                    return;
                }

                console.log(`📡 Received query: "${query}" - Starting search`);

                // 1️⃣ Notify user that search is starting
                ws.send(JSON.stringify({ response: "⏳ Searching for relevant information..." }));

                // 2️⃣ Perform the search (Qdrant + MongoDB)
                const { sources, context } = await performSearch(query);
                console.log(`🔎 Search complete - Found ${sources.length} relevant documents.`);

                // 3️⃣ Notify user that AI is generating a response
                ws.send(JSON.stringify({ response: "✨ Found useful information! Generating a response..." }));

                // 4️⃣ Generate AI prompt
                const { formattedPrompt } = await generatePrompt(query, history, context);

                // 5️⃣ Stream AI response
                const responseStream = await ollamaService.generateResponseStream(formattedPrompt);
                for await (const chunk of responseStream) {
                    ws.send(JSON.stringify({ response: chunk }));
                }

                ws.send(JSON.stringify({ done: true }));

                // 6️⃣ Store chat messages in database
                await ChatMessage.create({ sessionId, role: "user", text: query });
                await ChatMessage.create({ sessionId, role: "ai", text: formattedPrompt });

            } catch (error) {
                console.error("❌ WebSocket error:", error);
                ws.send(JSON.stringify({ error: "An error occurred while processing your request." }));
            }
        });

        ws.on("close", () => {
            console.log("❌ WebSocket connection closed.");
        });
    });

    return wss;
};

/**
 * Generates a random greeting message.
 * @returns {Promise<string>} - A friendly AI-generated greeting.
 */
async function generateRandomGreeting() {
    const response = await queryLLM(
        "AI Chat Assistant",
        "Generate a friendly greeting for a user who just started a conversation.",
        {}
    );

    return response?.greeting || "Hello! How can I assist you today?";
}

module.exports = { setupWebSocketServer };

================
File: portfolio.node/src/tracing.js
================
// portfolio.node/src/tracing.js
'use strict';

const { NodeSDK } = require('@opentelemetry/sdk-node');
const { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node');
const { OTLPTraceExporter } = require('@opentelemetry/exporter-trace-otlp-http');

// Configure the OTLP Trace Exporter.
const traceExporter = new OTLPTraceExporter({
  // Configure the exporter URL if needed.
});

// Create the NodeSDK instance.
const sdk = new NodeSDK({
  traceExporter,
  instrumentations: [getNodeAutoInstrumentations()],
});

// Start the SDK.
const startResult = sdk.start();
if (startResult && typeof startResult.then === 'function') {
  startResult
    .then(() => {
      console.log('Tracing initialized');
    })
    .catch((error) => {
      console.error('Error initializing tracing', error);
    });
} else {
  // If start() is synchronous.
  console.log('Tracing initialized (synchronously)');
}

// Handle graceful shutdown.
process.on('SIGTERM', () => {
  sdk.shutdown()
    .then(() => console.log('Tracing terminated'))
    .catch((error) => console.log('Error terminating tracing', error))
    .finally(() => process.exit(0));
});

================
File: portfolio.node/src/utils/cache.js
================
const NodeCache = require("node-cache");

// Ensure a single cache instance shared across all modules
const cache = new NodeCache({ stdTTL: 0, checkperiod: 600 });

module.exports = cache;

================
File: portfolio.node/src/utils/generatePrompt.js
================
const Prompt = require("../models/Prompt");

/**
 * Generates an AI prompt based on search results and user history
 */
async function generatePrompt(query, history = [], context = "") {
    try {
        const promptEntry = await Prompt.findOne({ name: "default_chat" });
        let promptTemplate = promptEntry ? promptEntry.template : getDefaultTemplate();

        const formattedPrompt = promptTemplate
            .replace("{{query}}", query)
            .replace("{{history}}", formatChatHistory(history))
            .replace("{{context}}", context);

        return { formattedPrompt };
    } catch (error) {
        console.error(`❌ Error generating AI prompt:`, error.message);
        return { formattedPrompt: "Sorry, an error occurred while generating the prompt." };
    }
}

/**
 * Formats chat history into a structured string
 */
function formatChatHistory(history) {
    return history.map(msg => `${msg.role === "user" ? "User" : "AI"}: ${msg.text}`).join("\n");
}

/**
 * Converts different entity types into a structured text format
 */
function convertToText(entity) {
    if (!entity) return "";

    switch (entity.type) {
        case "Project":
            return `Project: ${entity.title}\nDescription: ${entity.description || "No description available"}\nTags: ${entity.tags?.join(", ") || "None"}\nPublished: ${entity.publishAt || "Unknown date"}`;

        case "BlogEntry":
            return `Blog: ${entity.title}\nContent: ${entity.content || "No content available"}\nTags: ${entity.tags?.join(", ") || "None"}\nPublished: ${entity.publishAt || "Unknown date"}`;

        case "Page":
            return `Page: ${entity.title}\nContent: ${entity.content || "No content available"}`;

        case "FileEntry":
            return `File: ${entity.filename}\nExtracted Text: ${entity.extractedText || "No extracted text available"}`;

        default:
            return `Unknown Type: ${JSON.stringify(entity)}`;
    }
}

/**
 * Returns the default AI prompt template for structured responses.
 */
function getDefaultTemplate() {
    return `
    # AI Role
    You are an AI assistant designed to showcase a developer's portfolio. Your primary goal is to **provide accurate and relevant answers** based only on the provided context.

    **DO NOT invent answers or respond with information outside the given context.**
    If the user asks something unrelated to the portfolio, politely redirect them.

    ## Guidelines:
    - **Projects:** Focus only on projects listed in the context. Summarize their key aspects but do not assume unlisted details.
    - **Blogs:** If relevant blog entries exist, use them to provide insights. Do not generalize beyond their content.
    - **Web Context:** If web context is provided, it represents what the user currently sees. Use it only if it applies to their query.
    - **Search Ranking:** Prioritize projects first, then blog posts, then other context.
    - **Out of Scope:** If a request is about unrelated topics (e.g., politics, personal finance, or non-tech topics), **politely decline**.

    ---
    
    ## Context:
    {{context}}

    ## Previous Conversation:
    {{history}}

    ## User Question:
    {{query}}

    ## AI Response:
    `.trim();
}

module.exports = { generatePrompt, convertToText, getDefaultTemplate };

================
File: portfolio.node/src/validators/blogValidator.js
================
// portfolio.node/src/validators/blogValidator.js
const Joi = require('joi');

const createBlogSchema = Joi.object({
  title: Joi.string().min(3).max(255).required(),
  publishAt: Joi.string().isoDate().required(),
  isDraft: Joi.boolean().required(),
  excerpt: Joi.string().max(500).required(),
  body: Joi.string().required(),
  tags: Joi.array().required(),
});

module.exports = {
  createBlogSchema,
};

================
File: README.md
================
# 🚀 My Portfolio & Blog

Welcome to my self-hosted, Dockerized, and fully custom-built portfolio & blog! 🎉  
No more WordPress headaches—just a lean, mean, modern web stack.

## ✨ Stack
- **Frontend:** Next.js (React, TypeScript, TailwindCSS)
- **Backend:** Node.js, Express, MongoDB (Mongoose)
- **Authentication:** Cookie-based auth
- **Hosting:** Self-hosted with **Docker** + **Nginx Reverse Proxy**

## 🏗️ Setup & Run
### Prerequisites
- **Docker** installed and running  
- **Node.js** (for local development)

### Development
```sh
git clone https://github.com/your-username/your-repo.git
cd your-repo
npm install
npm run dev
```
### Running with Docker
```sh
docker-compose up --build
```
## Features
- ✅ Blog system with Markdown rendering
- ✅ Admin panel for managing content
- ✅ Fully containerized (Docker)
- ✅ Dark mode (because why not?)
- ✅ No bloated CMS—just speed!

## 📸 Screenshots
🚧 Coming soon...



================================================================
End of Codebase
================================================================
