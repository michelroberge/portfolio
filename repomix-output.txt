This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.gitignore
docker-compose.yml
docs/1. UserRequirements.md
docs/1.b.UserRequirements.v2.md
docs/1.c.UserRequirements.v3.md
docs/2. development-plan.md
docs/2.b.development-plan.v2.md
docs/2.c.development-plan.v3.md
docs/jobs.html
docs/prompts/default.md
LICENSE
portfolio.next/__tests__/apiServices.test.ts
portfolio.next/__tests__/blogServices.test.ts
portfolio.next/Dockerfile
portfolio.next/eslint.config.mjs
portfolio.next/jest.config.js
portfolio.next/middleware.ts
portfolio.next/next-env.d.ts
portfolio.next/next.config.js
portfolio.next/package.json
portfolio.next/postcss.config.mjs
portfolio.next/public/file.svg
portfolio.next/public/globe.svg
portfolio.next/public/next.svg
portfolio.next/public/vercel.svg
portfolio.next/public/window.svg
portfolio.next/README.md
portfolio.next/src/app/_not-found/page.tsx
portfolio.next/src/app/[slug]/page.tsx
portfolio.next/src/app/admin/analytics/page.tsx
portfolio.next/src/app/admin/blogs/edit/[id]/page.tsx
portfolio.next/src/app/admin/blogs/new/page.tsx
portfolio.next/src/app/admin/blogs/page.tsx
portfolio.next/src/app/admin/career/edit/[id]/page.tsx
portfolio.next/src/app/admin/career/linkedin/page.tsx
portfolio.next/src/app/admin/career/page.tsx
portfolio.next/src/app/admin/comments/page.tsx
portfolio.next/src/app/admin/files/page.tsx
portfolio.next/src/app/admin/login/page.tsx
portfolio.next/src/app/admin/page.tsx
portfolio.next/src/app/admin/pages/page.tsx
portfolio.next/src/app/admin/projects/edit/[id]/page.tsx
portfolio.next/src/app/admin/projects/new/page.tsx
portfolio.next/src/app/admin/projects/page.tsx
portfolio.next/src/app/admin/settings/ai-model/page.tsx
portfolio.next/src/app/admin/settings/provider-config/page.tsx
portfolio.next/src/app/admin/setup/page.tsx
portfolio.next/src/app/admin/temp-layout.tsx
portfolio.next/src/app/admin/users/page.tsx
portfolio.next/src/app/blogs/[slug]/page.tsx
portfolio.next/src/app/career/page.tsx
portfolio.next/src/app/globals.css
portfolio.next/src/app/layout.tsx
portfolio.next/src/app/page.tsx
portfolio.next/src/app/privacy-policy/page.tsx
portfolio.next/src/app/projects/[id]/page.tsx
portfolio.next/src/components/admin/AIModelSettings.tsx
portfolio.next/src/components/admin/BlogManagement.tsx
portfolio.next/src/components/admin/EditBlogEntry.tsx
portfolio.next/src/components/admin/FileList.tsx
portfolio.next/src/components/admin/FileWrapper.tsx
portfolio.next/src/components/admin/UploadContextualFile.tsx
portfolio.next/src/components/BlogView.tsx
portfolio.next/src/components/CareerTimeline.tsx
portfolio.next/src/components/Chat.tsx
portfolio.next/src/components/ChatWrapper.tsx
portfolio.next/src/components/CommentSection.tsx
portfolio.next/src/components/EntryOverview.tsx
portfolio.next/src/components/Footer.tsx
portfolio.next/src/components/Header.tsx
portfolio.next/src/components/Home.tsx
portfolio.next/src/components/ProjectView.tsx
portfolio.next/src/components/Search.tsx
portfolio.next/src/components/SectionToggle.tsx
portfolio.next/src/context/AuthContext.tsx
portfolio.next/src/context/ChatContext.tsx
portfolio.next/src/context/SearchContext.tsx
portfolio.next/src/hooks/useWebSocketChat.tsx
portfolio.next/src/models/BlogEntry.ts
portfolio.next/src/models/FileInfo.ts
portfolio.next/src/models/ParsedJob.ts
portfolio.next/src/models/Project.ts
portfolio.next/src/services/aiService.ts
portfolio.next/src/services/apiService.ts
portfolio.next/src/services/authService.ts
portfolio.next/src/services/blogService.ts
portfolio.next/src/services/careerService.ts
portfolio.next/src/services/fileService.ts
portfolio.next/src/services/homePageService.ts
portfolio.next/src/services/pageService.ts
portfolio.next/src/services/projectService.ts
portfolio.next/tailwind.config.ts
portfolio.next/tsconfig.json
portfolio.next/tsconfig.test.json
portfolio.node/__tests__/app.test.js
portfolio.node/__tests__/authServices.test.js
portfolio.node/__tests__/blogService.test.js
portfolio.node/__tests__/blogValidation.test.js
portfolio.node/__tests__/commentRoutes.test.js
portfolio.node/__tests__/jest-setup.test.js
portfolio.node/__tests__/projectServices.test.js
portfolio.node/__tests__/server.test.js
portfolio.node/__tests__/userService.test.js
portfolio.node/Dockerfile
portfolio.node/jest.config.js
portfolio.node/jest.setup.js
portfolio.node/package.json
portfolio.node/src/app.js
portfolio.node/src/cache.js
portfolio.node/src/config/db.js
portfolio.node/src/config/passport.js
portfolio.node/src/config/swagger.js
portfolio.node/src/docs/openapi.yml
portfolio.node/src/middlewares/admin.js
portfolio.node/src/middlewares/auth.js
portfolio.node/src/middlewares/metrics.js
portfolio.node/src/middlewares/validate.js
portfolio.node/src/models/BlogEntry.js
portfolio.node/src/models/CareerTimeline.js
portfolio.node/src/models/ChatMessage.js
portfolio.node/src/models/Comment.js
portfolio.node/src/models/Counters.js
portfolio.node/src/models/Embedding.js
portfolio.node/src/models/Metadata.js
portfolio.node/src/models/Page.js
portfolio.node/src/models/Project.js
portfolio.node/src/models/Prompt.js
portfolio.node/src/models/ProviderConfig.js
portfolio.node/src/models/User.js
portfolio.node/src/routes/authRoutes.js
portfolio.node/src/routes/blogRoutes.js
portfolio.node/src/routes/careerTimelineRoutes.js
portfolio.node/src/routes/chatRoutes.js
portfolio.node/src/routes/commentRoutes.js
portfolio.node/src/routes/embeddingRoutes.js
portfolio.node/src/routes/fileRoutes.js
portfolio.node/src/routes/oauthRoutes.js
portfolio.node/src/routes/pageRoutes.js
portfolio.node/src/routes/projectRoutes.js
portfolio.node/src/routes/promptRoutes.js
portfolio.node/src/routes/providerConfigRoutes.js
portfolio.node/src/routes/searchRoutes.js
portfolio.node/src/routes/userRoutes.js
portfolio.node/src/server.js
portfolio.node/src/services/authService.js
portfolio.node/src/services/blogService.js
portfolio.node/src/services/chatService.js
portfolio.node/src/services/commentService.js
portfolio.node/src/services/counterService.js
portfolio.node/src/services/embeddingService.js
portfolio.node/src/services/ollamaService.js
portfolio.node/src/services/projectService.js
portfolio.node/src/services/promptService.js
portfolio.node/src/services/providerConfigService.js
portfolio.node/src/services/qdrantService.js
portfolio.node/src/services/userService.js
portfolio.node/src/services/wsChatService.js
portfolio.node/src/tracing.js
portfolio.node/src/utils/generatePrompt.js
portfolio.node/src/validators/blogValidator.js
README.md

================================================================
Files
================================================================

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

================
File: docker-compose.yml
================
version: "3.8"
services:
  frontend:
    image: profolio-frontend
    build: ./portfolio.next
    ports:
      - "0.0.0.0:3300:3000"
    depends_on:
      - backend
    environment:
      - NODE_ENV=production

  backend:
    image: profolio-backend
    build: ./portfolio.node
    ports:
      - "0.0.0.0:5500:5000"
    environment:
      - NODE_ENV=production

================
File: docs/1. UserRequirements.md
================
# User Requirements for Portfolio Website

## Personality & Tone
- **Perception**: Creative, innovative problem solver, approachable expert, technical mentor, fun, easygoing.
- **Tone**: Friendly, witty, minimalist.
- **Storytelling**: Career journey timeline and anecdotes from key projects.

## Core Objectives & Features
- **Main Purpose**: Showcase talent and projects to attract high-profile job offers.
- **Primary Audience**:
  1. Fellow developers
  2. Industry leaders
  3. Recruiters / Potential Clients
- **Visitor Interaction**:
  1. AI Chat
  2. Semi-structured browsing

## Content Prioritization
- **Must-Haves**:
  - Career timeline
  - AI chatbot
  - Project showcase
  - Live demos
- **Nice-to-Haves**:
  - Blog
- **Project Showcase Format**: Just a link (either on GitHub or self-hosted with a reverse proxy).
- **Blog/Industry Insights**: Maybe, but not a priority.

## AI & Interactivity
- **AI Chat**:
  - Random greeting + guided prompt suggestions.
  - Freeform conversation allowed.
  - AI should distinguish between generic data and user-specific knowledge.
- **Search Functionality**:
  - AI-powered search (e.g., "Show me projects using C# and MongoDB").
  - Qdrant should index both project descriptions and full project source code.
  - Everything should be locally hosted (no external embeddings).
- **Interactive Elements**:
  - Career timeline should be D3-like interactive (zoom, forward/backward movement).
  - Skills map should be drillable from broad categories to code snippets.

## Technical Considerations
- **Frontend**: Next.js with Tailwind CSS.
- **Backend**: Node.js with MongoDB.
- **Hosting**: Self-hosted on a local server.
- **Search**: Qdrant for indexing projects and source code.
- **AI Chat**: Ollama for chatbot interactions.
- **Performance & Privacy**: Everything runs locally; no external dependencies for embeddings or AI models.
- **CI/CD Automation**: GitHub, Jenkins, and Docker for automated deployment.
- **Authentication**: Cookie-based authentication instead of bearer tokens.

## Development Approach
- **Start with Frontend First**: Mock API calls before integrating the backend.
- **Global State Management**:
  - Search should have a `SearchContext` and `SearchProvider` for global accessibility.
  - Chat should have a `ChatContext` and `ChatProvider` for global availability.
- **Landing Page Layout**:
  - AI chat should be site-wide, not just on a dedicated page.
  - Main sections:
    - "Time Machine" (Career Timeline)
    - "Philosophy" (Skills & Problem-Solving Map)
    - "Projects" (Live Demos, Searchable)
    - "Contact Me" (Engaging Form)
  - Clicking a section expands it, shrinking others into a sidebar.
- **Final Features**:
  - AI-powered guidance with optional interactivity.
  - Running live demos from pet projects.

## Next Steps
1. **Continue with frontend development**:
   - Search component should be fully functional and globally accessible.
   - AI Chat should be site-wide and utilize `ChatContext`.
2. **Integrate real backend API calls** for search and chat functionalities.
3. **Deploy and test CI/CD automation** using Jenkins and Docker.

This document captures the user’s full set of requirements for their AI-driven portfolio.

================
File: docs/1.b.UserRequirements.v2.md
================
# User Requirements for Portfolio Website

## Personality & Tone
- **Perception**: Creative, innovative problem solver, approachable expert, technical mentor, fun, easygoing.
- **Tone**: Friendly, witty, minimalist.
- **Storytelling**: Career journey timeline and anecdotes from key projects.

## Core Objectives & Features
- **Main Purpose**: Showcase talent and projects to attract high-profile job offers.
- **Primary Audience**:
  1. Fellow developers
  2. Industry leaders
  3. Recruiters / Potential Clients
- **Visitor Interaction**:
  1. AI Chat
  2. Semi-structured browsing

## Content Prioritization
- **Must-Haves**:
  - Career timeline
  - AI chatbot
  - Project showcase
  - Live demos
- **Nice-to-Haves**:
  - Blog
- **Project Showcase Format**: Just a link (either on GitHub or self-hosted with a reverse proxy).
- **Blog/Industry Insights**: Maybe, but not a priority.

## AI & Interactivity
- **AI Chat**:
  - Random greeting + guided prompt suggestions.
  - Freeform conversation allowed.
  - AI should distinguish between generic data and user-specific knowledge.
  - AI chat should retain session-based context.
  - **Web Context Injection**: AI will incorporate the full content of a loaded page into the chat context.
  - **Prompt History Integration**: The AI will receive the last few user messages to improve context handling.

- **Search Functionality**:
  - AI-powered search (e.g., "Show me projects using C# and MongoDB").
  - Qdrant should index both project descriptions and full project source code.
  - Everything should be locally hosted (no external embeddings).

- **Embeddings Management (Admin Feature)**:
  - Ability to parse a local directory accessible from the backend.
  - Support embedding source code, markdown, text files, and documents.
  - Admins can add metadata to directories/files to enrich embeddings.

- **Prompt Management System**:
  - Admins can modify AI prompts dynamically through the UI.
  - Prompts should be stored in a structured format instead of hardcoded in the backend.

## Interactive Elements
- **Career Timeline**: D3-like interactive (zoom, forward/backward movement).
- **Skills Map**: Drillable from broad categories to code snippets.

## Technical Considerations
- **Frontend**: Next.js with Tailwind CSS.
- **Backend**: Node.js with MongoDB.
- **Hosting**: Self-hosted on a local server.
- **Search**: Qdrant for indexing projects and source code.
- **AI Chat**: Ollama for chatbot interactions.
- **Performance & Privacy**: Everything runs locally; no external dependencies for embeddings or AI models.
- **CI/CD Automation**: GitHub, Jenkins, and Docker for automated deployment.
- **Authentication**: Cookie-based authentication instead of bearer tokens.

## Development Approach
- **Start with Frontend First**: Mock API calls before integrating the backend.
- **Global State Management**:
  - Search should have a `SearchContext` and `SearchProvider` for global accessibility.
  - Chat should have a `ChatContext` and `ChatProvider` for global availability.
- **Landing Page Layout**:
  - AI chat should be site-wide, not just on a dedicated page.
  - Main sections:
    - "Time Machine" (Career Timeline)
    - "Philosophy" (Skills & Problem-Solving Map)
    - "Projects" (Live Demos, Searchable)
    - "Contact Me" (Engaging Form)
  - Clicking a section expands it, shrinking others into a sidebar.
- **Final Features**:
  - AI-powered guidance with optional interactivity.
  - Running live demos from pet projects.

## Next Steps
1. **Continue with frontend development**:
   - Search component should be fully functional and globally accessible.
   - AI Chat should be site-wide and utilize `ChatContext`.
2. **Integrate real backend API calls** for search and chat functionalities.
3. **Deploy and test CI/CD automation** using Jenkins and Docker.
4. **Implement Web Context Injection and Prompt History in AI Chat**.
5. **Develop Embeddings Management for admins**.
6. **Create a UI for Prompt Management System**.

================
File: docs/1.c.UserRequirements.v3.md
================
# User Requirements Document

## 1. Project Overview
The portfolio platform is a self-hosted, AI-enhanced personal website designed to showcase the developer's experience, projects, and insights. It includes AI-powered interactions, a structured career timeline, a blog, and an interactive project showcase.

## 2. Goals & Scope
**Key Features:**
- AI-powered chatbot that answers questions based on blog entries, projects, and timeline data.
- Full CRUD support for blogs, projects, and career timeline entries.
- AI embeddings for enhanced search capabilities.
- Search combining full-text indexing and semantic embeddings.
- Admin dashboard for managing all content.
- UI for configuring the AI model and embeddings system.
- UI for application configuration (Title, Subtitle, Motto).
- Support for multi-language content translation via AI.

## 3. User Roles & Access Control
- **Admin:** Full access to CRUD operations for blogs, projects, timeline events, and AI configurations.
- **User:** Read-only access to blogs, projects, and AI chat.
- **Unauthenticated Users:** Can interact with the AI chatbot and view public content.
- No role-based access beyond "Admin" and "User."
- **No MFA support in this iteration.**
- **No OAuth-based access control for AI APIs** – AI chatbot is publicly accessible.

## 4. AI Chatbot & Search Functionalities
- AI chatbot interacts **without persisting chat history outside a session**.
- Admin-configurable choice between **Ollama and OpenAI API** at the site level (toggle during setup).
- **No user-submitted training data.** AI training updates automatically when blog entries, projects, or timeline events are added.
- **Hybrid search support:** Combines full-text and embeddings-based search.

## 5. Career Timeline & Skills Mapping
- **Interactive career timeline UI** for admins to enter career events.
- Events can be **linked together** (e.g., "Started at ABC" and "Stopped at ABC").
- Users can **zoom, filter, and explore** technologies used during different career phases.
- **Graph-based skills map** that visually connects skills, projects, and experiences.

## 6. Embeddings Management & AI Model Setup
- **Admin UI to manage embeddings.**
- **Admin UI to configure the AI model (Ollama or OpenAI).**
- **Embeddings generation and management** handled internally (e.g., automatic updates on content changes).

## 7. Multilingual Support
- AI-assisted initial content translation.
- Admin-configurable settings for enabling/disabling language options.
- Users can switch content languages if translated versions exist.

## 8. Admin Dashboard
- Initial version includes CRUD for blog posts, projects, career timeline, and embeddings management.
- Future enhancement: Analytics for most viewed projects, blog engagement, and AI chatbot interactions.

## 9. Non-Prioritized Features (for Future Consideration)
- Gamification and engagement elements have been removed for now.
- No immediate plans for monetization.
- No MFA support for admin users.

---

This document provides a **detailed foundation** for development planning and prioritization. The next step is breaking these requirements into **feature-based milestones** and defining a roadmap for implementation.

================
File: docs/2. development-plan.md
================
# Development Plan for AI-Driven Portfolio

## Overview
This development plan is structured by functional areas, each broken into **end-to-end testable work units**. Each unit specifies APIs, models, UI components, backend services, and dependencies.

---
## **1. Authentication & User Management (Must-Have)**
### **Work Units:**
✅ **Cookie-Based Authentication**
- API: `/auth/login`, `/auth/logout`, `/auth/check`
- Backend: `authService.js`, `passport.js`
- Frontend: `/admin/login`, `Header.tsx`
- **E2E Test:** Validate login/logout session behavior.

✅ **First-Time Admin Setup**
- API: `/users/admin-exists`
- Backend: `/admin/setup` flow
- **E2E Test:** Validate initial admin creation.

✅ **Admin vs. Non-Admin Role Enforcement**
- Backend: `authMiddleware.js`
- Frontend: Hide admin sections for non-admins.
- **E2E Test:** Ensure non-admins cannot access admin features.

⏳ **OAuth2 Authentication for Visitors** *(Google, Facebook, GitHub, Microsoft)*
- API: `/auth/oauth2/google`, `/auth/oauth2/facebook`, etc.
- Backend: `passport.js`, `providerConfigService.js`
- Frontend: OAuth login buttons in `/admin/login`.
- **E2E Test:** Validate OAuth login and redirection.

---
## **2. Blog System (Must-Have)**
### **Work Units:**
✅ **CRUD for Blog Posts** *(API: `/blogs`)*
✅ **Markdown Support (No WYSIWYG)**
✅ **Draft & Scheduled Publishing**
✅ **Comment System with Nested Replies** *(API: `/comments`)*
✅ **Comment Moderation (Hide Instead of Delete)**

---
## **3. Project Showcase (Must-Have)**
### **Work Units:**
✅ **CRUD for Projects** *(API: `/projects`)*
⏳ **Project Metadata for AI Search** *(Tags, Technologies, Industry Focus)*
⏳ **AI-Powered "Magic" Blog-Project Linking via Qdrant**
✅ **Self-Hosted Project Links via Reverse Proxy**

---
## **4. AI Chat (Must-Have)**
### **Work Units:**
⏳ **Session-Based AI Chat (Resets Per Visit)** *(API: `/chat`)*
⏳ **AI Uses Qdrant for Blog/Project Knowledge Retrieval**
⏳ **AI Summarizes Portfolio & Technologies**
- Backend: Structured prompt generation
- **External Dependency:** **Qdrant must be set up & indexed.**

---
## **5. Search System (Must-Have)**
### **Work Units:**
⏳ **Semantic Search for Blogs & Projects** *(API: `/search/semantic`)*
⏳ **Full Codebase Search for Projects** *(API: `/search/codebase`)*
⏳ **Hook for Future Search Weighting** *(Defaulting to Static Weights)*
- **External Dependency:** **Qdrant for indexing & retrieval.**

---
## **6. Career Timeline & Skills Map (Must-Have)**
### **Work Units:**
⏳ **AI-Assisted Timeline Generation (From Repos & Manual Events)** *(API: `/career/timeline`)*
⏳ **Metadata for Timeline Entries (Technologies, Linked Projects)**
⏳ **AI-Assisted Skills Map (Graph-Based AI Relationships)** *(API: `/career/skills-map`)*
⏳ **Linking Skills to Real Projects & Code Snippets** *(Qdrant-powered)*
⏳ **Import Career Timeline from LinkedIn Public Profile**

---
## **7. Admin Dashboard & Content Management (Should-Have)**
### **Work Units:**
✅ **OAuth Provider Config Management**
⏳ **CRUD for Comments (Delete in Addition to Redact)**
⏳ **Admin Panel for Career Timeline & Skills Map** *(UI for Manual Editing)*

---
## **8. AI Infrastructure & Hosting (Must-Have)**
### **Work Units:**
⏳ **Qdrant & Ollama Auto-Start via Docker Compose**
⏳ **Embeddings Generation from File Path + MongoDB Content** *(Parse `/data/embeddings-source/` & Merge DB Content)*
⏳ **Content Review/Edit UI Before Generating Embeddings** *(Admin Panel for Structuring Content Before AI Processing)*
⏳ **Automatic Reindexing & Periodic Updates** *(Cron Job for `/embeddings/refresh`)*

---
## **Final Steps**
✅ **Qdrant & Ollama need auto-start setup.**
✅ **A review/editing UI for embeddings will improve content organization.**
✅ **Reindexing automation depends on UI implementation.**

This plan provides a structured roadmap for development. 🚀

================
File: docs/2.b.development-plan.v2.md
================
# Development Plan for AI-Driven Portfolio

## Overview
This development plan is structured by functional areas, each broken into **end-to-end testable work units**. Each unit specifies APIs, models, UI components, backend services, and dependencies.

---
## **1. AI Chat Enhancements (Must-Have)**
### **Work Units:**
⏳ **Web Context Injection into AI Chat**
- **Feature:** Extract the full content of the loaded webpage and inject it into the chat context.
- **Frontend:** Modify `ChatContext` to include a `webContext` property.
- **Backend:** Modify chat API to accept `webContext` as part of the request payload.
- **E2E Test:** Validate AI responses improve based on page context.

⏳ **Prompt History Integration**
- **Feature:** Send previous user messages as part of the AI prompt.
- **Frontend:** Modify `ChatContext` to retain the last N messages.
- **Backend:** Modify chat API to process chat history.
- **E2E Test:** Verify AI can recall recent messages in context.

⏳ **Prompt Management System**
- **Feature:** Admins can manage and tune AI prompts via a UI.
- **API:** CRUD endpoints for managing stored prompts.
- **Frontend:** Admin dashboard for prompt editing.
- **Backend:** Store structured prompt templates in MongoDB.
- **E2E Test:** Verify prompt modifications affect AI behavior dynamically.

---
## **2. Embeddings Management (Must-Have)**
### **Work Units:**
⏳ **Embedding Local Directories & Files**
- **Feature:** Parse a directory accessible from the Node.js backend and generate embeddings.
- **API:** `POST /api/embeddings/local`
- **Backend:** 
  - Read files (source code, markdown, text, documents).
  - Extract metadata if provided.
  - Generate embeddings and store in Qdrant.
- **E2E Test:** Validate embeddings correctly represent parsed content.

⏳ **Embedding Metadata Support**
- **Feature:** Allow optional metadata in a configuration file for better embedding management.
- **Backend:** Parse metadata and associate with embeddings.
- **E2E Test:** Ensure metadata is properly stored and retrievable.

⏳ **Admin UI for Managing Embeddings**
- **Feature:** List, edit, and remove embeddings through an admin panel.
- **Frontend:** Admin dashboard section for embeddings.
- **Backend:** CRUD APIs for managing embeddings.
- **E2E Test:** Ensure embeddings can be reviewed and managed via UI.

---
## **3. Search & AI Integration (Should-Have)**
### **Work Units:**
⏳ **Fine-Tuning AI Search**
- **Feature:** Introduce configurable weighting for AI-powered search.
- **API:** `/api/search/config`
- **Backend:** Allow dynamic search tuning via admin panel.
- **Frontend:** Admin dashboard settings for search tuning.
- **E2E Test:** Validate different weights produce expected ranking changes.

⏳ **AI-Driven Blog-Project Linking**
- **Feature:** AI automatically suggests links between related blogs and projects.
- **Backend:** Generate project-to-blog mappings via embeddings.
- **E2E Test:** Validate suggestions improve based on AI-powered relationships.

---
## **4. Deployment & Performance Optimization (Nice-to-Have)**
### **Work Units:**
⏳ **Automated Embeddings Refresh**
- **Feature:** Periodically re-index embeddings from local files and database content.
- **Backend:** Implement scheduled job to refresh embeddings.
- **E2E Test:** Ensure embeddings stay up to date automatically.

⏳ **Improve WebSocket Performance in AI Chat**
- **Feature:** Optimize chat WebSocket handling for better responsiveness.
- **Backend:** Improve WebSocket session handling.
- **E2E Test:** Validate AI responses are delivered without unnecessary latency.

---
## **Final Steps**
✅ **Qdrant & Ollama are auto-started in Docker Compose.**
✅ **Base AI chatbot functionality is working with WebSockets.**
⏳ **Embeddings UI and Web Context Injection need implementation.**
⏳ **Final deployment optimization & testing.**

This plan provides a structured roadmap for completing the remaining development tasks. 🚀

================
File: docs/2.c.development-plan.v3.md
================
# Development Plan for Portfolio Enhancement

**Generated on 2025-03-05**

This development plan outlines the **end-to-end** (E2E) implementation strategy based on the **updated user requirements** and **existing repository structure**.

---

## **1. Authentication & Access Control**
### **1.1 User Authentication (✅ Done)**
- **Implemented:** Cookie-based authentication using session tokens.
- **Admin Login:** `/auth/login`, `/auth/logout`, `/auth/check`
- **Admin-Only Access Control:** Middleware (`authMiddleware.js`) restricts non-admins.

### **1.2 Admin Dashboard (✅ Done)**
- **Implemented:** Admin UI for managing blogs, projects, users, and comments.

### **1.3 Multi-Tenant AI API Support (⏳ Pending)**
- **New:** Admin-configurable AI model selection (Ollama or OpenAI API).
- **Tasks:**
  - Add AI configuration UI in `/admin/settings/ai-model`.
  - Modify `chatService.js` to conditionally switch between Ollama & OpenAI.
  - Store AI configuration in MongoDB (`ProviderConfig.js`).
  - **E2E Test:** Ensure API model switching works correctly.

---

## **2. AI Chatbot & Search**
### **2.1 AI Chat (⏳ Pending)**
- ✅ **Implemented:** AI chat session with WebSockets.
- ✅ **Implemented:** Chat history retention within the session.
- **New:** AI should answer based on **blogs, projects, and timeline**.
  - Modify `chatService.js` to integrate Qdrant embeddings.
  - Update `Chat.tsx` to inject page context (`/chat/context`).
  - **E2E Test:** Validate AI references correct blog/project info.

### **2.2 Hybrid Search (⏳ Pending)**
- ✅ **Implemented:** AI-powered search (`/search/semantic`).
- **New:** Implement **full codebase search**.
  - Improve `/search/codebase` to **index source code from local directories**.
  - Update search UI to **combine full-text and AI-powered search results**.
  - **E2E Test:** Validate relevance of code search results.

---

## **3. Career Timeline & Skills Map**
### **3.1 Career Timeline (⏳ Pending)**
- **New:** Add **career timeline UI** for admins.
  - Create `/admin/career` page with interactive forms.
  - Implement career timeline API (`/career/timeline`).
  - **E2E Test:** Verify CRUD operations and linking.

### **3.2 Import from LinkedIn (⏳ Pending)**
- **New:** Integration to pull profesionnal data as career events to pre-fill career timeline.
  - Implement a LinkedIn integration under `/career/from-linkedin`.
  - Create UI to configure the integration 
    - set the API key
    - preview and select items
    - generate projects, events, and skills

### **3.3 Skills Map (⏳ Pending)**
- **New:** AI-driven **graph-based** visualization of skills and projects.
  - Implement a **D3.js-based skills graph** under `/career/skills-map`.
  - Create **skill-project embeddings** using Qdrant.
  - **E2E Test:** Verify project-skill relations.

---

## **4. Content Management**
### **4.1 Blogs (✅ Done)**
- ✅ CRUD operations for blog posts (`/blogs`).
- ✅ Markdown support (no WYSIWYG).
- ✅ Draft & scheduled publishing.

### **4.2 Projects (⏳ Pending Enhancements)**
- ✅ CRUD operations for projects (`/projects`).
- **New:** Add **AI-powered tagging** for projects.
  - Generate **project embeddings** (`/projects/generate-embeddings`).
  - Display suggested tags based on embeddings.
  - **E2E Test:** Ensure accurate project categorization.

### **4.3 Embeddings Management (⏳ Pending)**
- **New:** Admin should be able to **manually trigger embedding updates**.
  - Implement `/embeddings/refresh`.
  - Add UI in `/admin/embeddings`.
  - **E2E Test:** Ensure embeddings update correctly.

---

## **5. Multi-Language Support (⏳ Pending)**
- **New:** AI-assisted translation for blog content.
  - Add **language switcher** to `/blogs/[slug]`.
  - Extend `Blog.js` model to store multiple language versions.
  - Use OpenAI API for translations.
  - **E2E Test:** Verify translations.

---

## **6. Deployment & Hosting**
### **6.1 Dockerized Deployment (✅ Done)**
- ✅ **Implemented:** Docker-compose setup for `portfolio.next` and `portfolio.node`.
- **Enhancement:** Optimize container startup for **Qdrant & Ollama**.
  - Add `healthcheck` for AI services.
  - **E2E Test:** Ensure proper startup sequence.

---

## **Final Steps**
- ✅ **Confirm all existing APIs match OpenAPI Spec** (`openapi.yml`).
- ✅ **Ensure all features are accessible via Admin UI**.
- ✅ **Prepare deployment & test environments**.

---

### **Deliverable**
A full **end-to-end functional portfolio** with AI-powered features, career timeline, and hybrid search.

================
File: docs/jobs.html
================
<html>

<body>
    <ul class="PdRUlssPYwwHVyfokYoPNtMeAOfjkIoxnUc
            
            
            ">
        <li class="artdeco-list__item yUYbUPmIDBCyujolHJvDMVJLdKKwbTvJNGnVDA qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


            <!---->
            <div class="iySSlsjvmHFIjvVVBeTzQKiCkbVUEscOCasgZMM
        AajnQCQGlEqOkCCSZJHqFVelplbPuTKoKw owSPWypkbaygNqfMzXkzygjefLVERYVMnw
        
        
        
        " data-view-name="profile-component-entity">
                <div>

                    <a data-field="experience_company_logo" class="optional-action-target-wrapper 
            
            pvs-entity__image-container--outline-offset
            display-flex" target="_self" href="https://www.linkedin.com/company/1683932/">

                        <div class="ivm-image-view-model  pvs-entity__image ">

                            <div class="ivm-view-attr__img-wrapper
        
        ">
                                <!---->
                                <!----> <img width="48"
                                    src="https://media.licdn.com/dms/image/v2/D560BAQFpE75AW3qexw/company-logo_100_100/company-logo_100_100/0/1706727892682/intrahealth_healwellai_logo?e=1749686400&amp;v=beta&amp;t=Aa_FOTs4LvxbN9RCn7pYOwgOAamfKDgLm-jFaQB7Wo4"
                                    loading="lazy" height="48" alt="Intrahealth, a HEALWELL AI Company logo"
                                    id="ember117"
                                    class="ivm-view-attr__img--centered EntityPhoto-square-3   evi-image lazy-image ember-view">
                            </div>

                        </div>

                    </a>

                </div>

                <div class="display-flex flex-column align-self-center flex-grow-1">
                    <div class="display-flex flex-row justify-space-between">

                        <div class="
              display-flex flex-column full-width">

                            <div class="display-flex flex-wrap align-items-center full-height">

                                <div class="display-flex ">

                                    <div class="
          display-flex full-width">

                                        <div class="display-flex align-items-center
              mr1 t-bold">
                                            <span aria-hidden="true"><!---->Principal .NET developer<!----></span><span
                                                class="visually-hidden"><!---->Principal .NET developer<!----></span>
                                        </div>
                                        <!---->
                                    </div>

                                </div>

                                <!----><!----><!---->
                            </div>
                            <span class="t-14 t-normal">
                                <span aria-hidden="true"><!---->Intrahealth, a HEALWELL AI Company · Permanent
                                    Full-time<!----></span><span class="visually-hidden"><!---->Intrahealth, a HEALWELL
                                    AI Company · Permanent Full-time<!----></span>
                            </span>
                            <span class="t-14 t-normal
                  t-black--light">
                                <span class="pvs-entity__caption-wrapper" aria-hidden="true"><!---->Sep 2024 - Present ·
                                    7 mos<!----></span><span class="visually-hidden"><!---->Sep 2024 to Present · 7
                                    mos<!----></span>
                            </span>
                            <span class="t-14 t-normal
                  t-black--light">
                                <span aria-hidden="true"><!---->Canada · Remote<!----></span><span
                                    class="visually-hidden"><!---->Canada · Remote<!----></span>
                            </span>

                        </div>

                    </div>
                    <!---->
                </div>
                <!---->
                <!---->
            </div>


        </li>
        <li class="artdeco-list__item yUYbUPmIDBCyujolHJvDMVJLdKKwbTvJNGnVDA qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


            <!---->
            <div class="iySSlsjvmHFIjvVVBeTzQKiCkbVUEscOCasgZMM
        AajnQCQGlEqOkCCSZJHqFVelplbPuTKoKw owSPWypkbaygNqfMzXkzygjefLVERYVMnw
        
        
        
        " data-view-name="profile-component-entity">
                <div>

                    <a data-field="experience_company_logo" class="optional-action-target-wrapper 
            
            pvs-entity__image-container--outline-offset
            display-flex" target="_self" href="https://www.linkedin.com/company/4126/">

                        <div class="ivm-image-view-model  pvs-entity__image ">

                            <div class="ivm-view-attr__img-wrapper
        
        ">
                                <!---->
                                <!----> <img width="48"
                                    src="https://media.licdn.com/dms/image/v2/C4D0BAQFfG02Ebu_lqg/company-logo_100_100/company-logo_100_100/0/1630543130113/sgs_logo?e=1749686400&amp;v=beta&amp;t=XU4-LyfOKS2S9cW3QoKb5OGm7i_9qwyPvFJrJNohUR0"
                                    loading="lazy" height="48" alt="SGS logo" id="ember121"
                                    class="ivm-view-attr__img--centered EntityPhoto-square-3   evi-image lazy-image ember-view">
                            </div>

                        </div>

                    </a>

                </div>

                <div class="display-flex flex-column align-self-center flex-grow-1">
                    <div class="display-flex flex-row justify-space-between">

                        <a data-field="experience_company_logo" class="optional-action-target-wrapper 
              display-flex flex-column full-width" target="_self" href="https://www.linkedin.com/company/4126/">
                            <div class="display-flex flex-wrap align-items-center full-height">

                                <div class="display-flex ">

                                    <div class="
          display-flex full-width">

                                        <div class="display-flex align-items-center
              mr1 hoverable-link-text t-bold">
                                            <span aria-hidden="true"><!---->SGS<!----></span><span
                                                class="visually-hidden"><!---->SGS<!----></span>
                                        </div>
                                        <!---->
                                    </div>

                                </div>

                                <!----><!----><!---->
                            </div>
                            <span class="t-14 t-normal">
                                <span aria-hidden="true"><!---->Permanent Full-time · 6 yrs 8 mos<!----></span><span
                                    class="visually-hidden"><!---->Permanent Full-time · 6 yrs 8 mos<!----></span>
                            </span>
                            <!----><!---->
                        </a>

                    </div>

                    <div class="FtwCyQiKWmAiGnEmVueQaXzXAGHOsFzwvUjJnmX pvs-entity__sub-components">
                        <!---->
                        <ul class="PdRUlssPYwwHVyfokYoPNtMeAOfjkIoxnUc
            
            
            ">
                            <li class="qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                <span class="EjZKUrtOZcFtnELEhNGFouebDCwJhXVgKMI"></span>
                                <div class="iySSlsjvmHFIjvVVBeTzQKiCkbVUEscOCasgZMM
        
        ixzvzMZQySGEYBvQMGULohZYouQrhmiEk
        
        
        " data-view-name="profile-component-entity">
                                    <div>

                                        <div class="
            
            
            display-flex" tabindex="-1">

                                            <!---->
                                        </div>

                                    </div>

                                    <div class="display-flex flex-column align-self-center flex-grow-1">
                                        <div class="display-flex flex-row justify-space-between">

                                            <a class="optional-action-target-wrapper 
              display-flex flex-column full-width" target="_self" href="https://www.linkedin.com/company/4126/">
                                                <div class="display-flex flex-wrap align-items-center full-height">

                                                    <div class="display-flex ">

                                                        <div class="
          display-flex full-width">

                                                            <div class="display-flex align-items-center
              mr1 hoverable-link-text t-bold">
                                                                <span aria-hidden="true"><!---->Platform
                                                                    Lead<!----></span><span
                                                                    class="visually-hidden"><!---->Platform
                                                                    Lead<!----></span>
                                                            </div>
                                                            <!---->
                                                        </div>

                                                    </div>

                                                    <!----><!----><!---->
                                                </div>
                                                <!----> <span class="t-14 t-normal
                  t-black--light">
                                                    <span class="pvs-entity__caption-wrapper"
                                                        aria-hidden="true"><!---->Jul 2024 - Aug 2024 · 2
                                                        mos<!----></span><span class="visually-hidden"><!---->Jul 2024
                                                        to Aug 2024 · 2 mos<!----></span>
                                                </span>
                                                <span class="t-14 t-normal
                  t-black--light">
                                                    <span aria-hidden="true"><!---->Remote<!----></span><span
                                                        class="visually-hidden"><!---->Remote<!----></span>
                                                </span>
                                            </a>

                                        </div>
                                        <!---->
                                    </div>
                                    <!---->
                                    <!---->
                                </div>


                            </li>
                            <li class="qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                <span class="EjZKUrtOZcFtnELEhNGFouebDCwJhXVgKMI"></span>
                                <div class="iySSlsjvmHFIjvVVBeTzQKiCkbVUEscOCasgZMM
        
        ixzvzMZQySGEYBvQMGULohZYouQrhmiEk
        
        
        " data-view-name="profile-component-entity">
                                    <div>

                                        <div class="
            
            
            display-flex" tabindex="-1">

                                            <!---->
                                        </div>

                                    </div>

                                    <div class="display-flex flex-column align-self-center flex-grow-1">
                                        <div class="display-flex flex-row justify-space-between">

                                            <a class="optional-action-target-wrapper 
              display-flex flex-column full-width" target="_self" href="https://www.linkedin.com/company/4126/">
                                                <div class="display-flex flex-wrap align-items-center full-height">

                                                    <div class="display-flex ">

                                                        <div class="
          display-flex full-width">

                                                            <div class="display-flex align-items-center
              mr1 hoverable-link-text t-bold">
                                                                <span aria-hidden="true"><!---->Architecte
                                                                    solutions<!----></span><span
                                                                    class="visually-hidden"><!---->Architecte
                                                                    solutions<!----></span>
                                                            </div>
                                                            <!---->
                                                        </div>

                                                    </div>

                                                    <!----><!----><!---->
                                                </div>
                                                <!----> <span class="t-14 t-normal
                  t-black--light">
                                                    <span class="pvs-entity__caption-wrapper"
                                                        aria-hidden="true"><!---->Mar 2022 - Jul 2024 · 2 yrs 5
                                                        mos<!----></span><span class="visually-hidden"><!---->Mar 2022
                                                        to Jul 2024 · 2 yrs 5 mos<!----></span>
                                                </span>
                                                <!---->
                                            </a>

                                        </div>

                                        <div class="FtwCyQiKWmAiGnEmVueQaXzXAGHOsFzwvUjJnmX pvs-entity__sub-components">
                                            <!---->
                                            <ul class="PdRUlssPYwwHVyfokYoPNtMeAOfjkIoxnUc
            
            
            ">
                                                <li class="qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                                    <div class="FtwCyQiKWmAiGnEmVueQaXzXAGHOsFzwvUjJnmX">
                                                        <!---->
                                                        <ul class="PdRUlssPYwwHVyfokYoPNtMeAOfjkIoxnUc
            
            
            ">
                                                            <li
                                                                class="pvs-list__item--with-top-padding qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                                                <div class="display-flex ">

                                                                    <div class="
          display-flex full-width">


                                                                        <div class="xyKuvshqjNOCLLbuJMSOACywiHYHucctJs
          full-width t-14 t-normal t-black display-flex align-items-center" dir="ltr">

                                                                            <div class="WcTepSkGpUVWbbheKPCszGxDQzmhiNFQ
        inline-show-more-text--is-collapsed
        inline-show-more-text--is-collapsed-with-line-clamp
        
        
        
         full-width" style="-webkit-line-clamp:2;" dir="ltr" tabindex="-1">

                                                                                <span aria-hidden="true"><!---->aka LIMS
                                                                                    architect<!----></span><span
                                                                                    class="visually-hidden"><!---->aka
                                                                                    LIMS architect<!----></span>

                                                                                <!---->
                                                                            </div>

                                                                        </div>

                                                                        <!---->
                                                                    </div>

                                                                </div>


                                                            </li>
                                                        </ul>
                                                        <!---->
                                                    </div>


                                                </li>
                                                <li class="qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                                    <div class="FtwCyQiKWmAiGnEmVueQaXzXAGHOsFzwvUjJnmX">
                                                        <!---->
                                                        <ul class="PdRUlssPYwwHVyfokYoPNtMeAOfjkIoxnUc
            
            
            ">
                                                            <li
                                                                class="pvs-list__item--with-top-padding qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                                                <div class="
        mv1
        display-flex align-items-center">

                                                                    <a data-field="position_contextual_skills_see_details"
                                                                        class="optional-action-target-wrapper display-flex link-without-hover-visited"
                                                                        target="_self"
                                                                        href="https://www.linkedin.com/in/michel-roberge-7011b614/overlay/urn:li:fsd_profilePosition:(ACoAAALgc3EBglzhZDPKP2JcpyPypmkYxBacitY,1930019616)/skill-associations-details?profileUrn=urn%3Ali%3Afsd_profile%3AACoAAALgc3EBglzhZDPKP2JcpyPypmkYxBacitY">
                                                                        <div class="mr1
                mv1
                
                ">

                                                                            <ul class="ivm-entity-pile
        display-flex align-items-center t-black">
                                                                                <li
                                                                                    class="ivm-entity-pile__img-item--stacked">

                                                                                    <div class="ivm-view-attr__img-wrapper
        
        ">
                                                                                        <!---->
                                                                                        <svg role="none"
                                                                                            aria-hidden="true"
                                                                                            class="ivm-view-attr__icon ivm-view-attr__icon--icon  "
                                                                                            xmlns="http://www.w3.org/2000/svg"
                                                                                            width="16" height="16"
                                                                                            viewBox="0 0 16 16"
                                                                                            data-supported-dps="16x16"
                                                                                            data-test-icon="skills-small">
                                                                                            <!---->
                                                                                            <use href="#skills-small"
                                                                                                width="16" height="16">
                                                                                            </use>
                                                                                        </svg>

                                                                                    </div>

                                                                                </li>
                                                                            </ul>

                                                                        </div>

                                                                        <div class="display-flex ">

                                                                            <div class="
          display-flex full-width">

                                                                                <div class="hoverable-link-text display-flex align-items-center
              t-14 t-normal t-black">
                                                                                    <strong><!---->Communication écrite,
                                                                                        Communication and +6
                                                                                        skills<!----></strong>
                                                                                </div>
                                                                                <!---->
                                                                            </div>

                                                                        </div>

                                                                    </a>


                                                                    <!---->
                                                                </div>


                                                            </li>
                                                        </ul>
                                                        <!---->
                                                    </div>


                                                </li>
                                            </ul>
                                            <!---->
                                        </div>

                                    </div>
                                    <!---->
                                    <!---->
                                </div>


                            </li>
                            <li class="qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                <span class="EjZKUrtOZcFtnELEhNGFouebDCwJhXVgKMI"></span>
                                <div class="iySSlsjvmHFIjvVVBeTzQKiCkbVUEscOCasgZMM
        
        
        
        
        " data-view-name="profile-component-entity">
                                    <div>

                                        <div class="
            
            
            display-flex" tabindex="-1">

                                            <!---->
                                        </div>

                                    </div>

                                    <div class="display-flex flex-column align-self-center flex-grow-1">
                                        <div class="display-flex flex-row justify-space-between">

                                            <a class="optional-action-target-wrapper 
              display-flex flex-column full-width" target="_self" href="https://www.linkedin.com/company/4126/">
                                                <div class="display-flex flex-wrap align-items-center full-height">

                                                    <div class="display-flex ">

                                                        <div class="
          display-flex full-width">

                                                            <div class="display-flex align-items-center
              mr1 hoverable-link-text t-bold">
                                                                <span aria-hidden="true"><!---->Software Development
                                                                    Manager<!----></span><span
                                                                    class="visually-hidden"><!---->Software Development
                                                                    Manager<!----></span>
                                                            </div>
                                                            <!---->
                                                        </div>

                                                    </div>

                                                    <!----><!----><!---->
                                                </div>
                                                <!----> <span class="t-14 t-normal
                  t-black--light">
                                                    <span class="pvs-entity__caption-wrapper"
                                                        aria-hidden="true"><!---->Jan 2018 - Mar 2022 · 4 yrs 3
                                                        mos<!----></span><span class="visually-hidden"><!---->Jan 2018
                                                        to Mar 2022 · 4 yrs 3 mos<!----></span>
                                                </span>
                                                <span class="t-14 t-normal
                  t-black--light">
                                                    <span aria-hidden="true"><!---->Canada<!----></span><span
                                                        class="visually-hidden"><!---->Canada<!----></span>
                                                </span>
                                            </a>

                                        </div>

                                        <div class="FtwCyQiKWmAiGnEmVueQaXzXAGHOsFzwvUjJnmX pvs-entity__sub-components">
                                            <!---->
                                            <ul class="PdRUlssPYwwHVyfokYoPNtMeAOfjkIoxnUc
            
            
            ">
                                                <li class="qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                                    <div class="FtwCyQiKWmAiGnEmVueQaXzXAGHOsFzwvUjJnmX">
                                                        <!---->
                                                        <ul class="PdRUlssPYwwHVyfokYoPNtMeAOfjkIoxnUc
            
            
            ">
                                                            <li
                                                                class="pvs-list__item--with-top-padding qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                                                <div class="display-flex ">

                                                                    <div class="
          display-flex full-width">


                                                                        <div class="xyKuvshqjNOCLLbuJMSOACywiHYHucctJs
          full-width t-14 t-normal t-black display-flex align-items-center" dir="ltr">

                                                                            <div class="WcTepSkGpUVWbbheKPCszGxDQzmhiNFQ
        
        
        
        
        
         full-width" style="" dir="ltr" tabindex="-1">

                                                                                <span aria-hidden="true"><!---->- Manage
                                                                                    global development team (10+
                                                                                    developers
                                                                                    worldwide)<!----><br><!---->-
                                                                                    Create/Facilitate software design
                                                                                    and architectural decisions<span
                                                                                        class="white-space-pre">
                                                                                    </span><br><!---->- Integration to
                                                                                    many systems and
                                                                                    technologies<!----><br><!---->- Help
                                                                                    each team member to be the best in
                                                                                    class<!----><br><!---->- Scrum
                                                                                    Master<span class="white-space-pre">
                                                                                    </span><br><!---->- Analysis,
                                                                                    Design, Research and
                                                                                    Development<!----><br><!---->-
                                                                                    Define best practices and
                                                                                    processes<!----><br><!---->- Define
                                                                                    path to continuous
                                                                                    improvement<!----><br><br><!---->...
                                                                                    And much, much
                                                                                    more.<!----></span><span
                                                                                    class="visually-hidden"><!---->-
                                                                                    Manage global development team (10+
                                                                                    developers worldwide)
                                                                                    - Create/Facilitate software design
                                                                                    and architectural decisions
                                                                                    - Integration to many systems and
                                                                                    technologies
                                                                                    - Help each team member to be the
                                                                                    best in class
                                                                                    - Scrum Master
                                                                                    - Analysis, Design, Research and
                                                                                    Development
                                                                                    - Define best practices and
                                                                                    processes
                                                                                    - Define path to continuous
                                                                                    improvement

                                                                                    ... And much, much
                                                                                    more.<!----></span>

                                                                                <!---->
                                                                                <!---->
                                                                            </div>

                                                                        </div>

                                                                        <!---->
                                                                    </div>

                                                                </div>


                                                            </li>
                                                        </ul>
                                                        <!---->
                                                    </div>


                                                </li>
                                                <li class="qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                                    <div class="FtwCyQiKWmAiGnEmVueQaXzXAGHOsFzwvUjJnmX">
                                                        <!---->
                                                        <ul class="PdRUlssPYwwHVyfokYoPNtMeAOfjkIoxnUc
            
            
            ">
                                                            <li
                                                                class="pvs-list__item--with-top-padding qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                                                <div class="
        mv1
        display-flex align-items-center">

                                                                    <a data-field="position_contextual_skills_see_details"
                                                                        class="optional-action-target-wrapper display-flex link-without-hover-visited"
                                                                        target="_self"
                                                                        href="https://www.linkedin.com/in/michel-roberge-7011b614/overlay/urn:li:fsd_profilePosition:(ACoAAALgc3EBglzhZDPKP2JcpyPypmkYxBacitY,1193221756)/skill-associations-details?profileUrn=urn%3Ali%3Afsd_profile%3AACoAAALgc3EBglzhZDPKP2JcpyPypmkYxBacitY">
                                                                        <div class="mr1
                mv1
                
                ">

                                                                            <ul class="ivm-entity-pile
        display-flex align-items-center t-black">
                                                                                <li
                                                                                    class="ivm-entity-pile__img-item--stacked">

                                                                                    <div class="ivm-view-attr__img-wrapper
        
        ">
                                                                                        <!---->
                                                                                        <svg role="none"
                                                                                            aria-hidden="true"
                                                                                            class="ivm-view-attr__icon ivm-view-attr__icon--icon  "
                                                                                            xmlns="http://www.w3.org/2000/svg"
                                                                                            width="16" height="16"
                                                                                            viewBox="0 0 16 16"
                                                                                            data-supported-dps="16x16"
                                                                                            data-test-icon="skills-small">
                                                                                            <!---->
                                                                                            <use href="#skills-small"
                                                                                                width="16" height="16">
                                                                                            </use>
                                                                                        </svg>

                                                                                    </div>

                                                                                </li>
                                                                            </ul>

                                                                        </div>

                                                                        <div class="display-flex ">

                                                                            <div class="
          display-flex full-width">

                                                                                <div class="hoverable-link-text display-flex align-items-center
              t-14 t-normal t-black">
                                                                                    <strong><!---->Communication écrite,
                                                                                        Communication and +6
                                                                                        skills<!----></strong>
                                                                                </div>
                                                                                <!---->
                                                                            </div>

                                                                        </div>

                                                                    </a>


                                                                    <!---->
                                                                </div>


                                                            </li>
                                                        </ul>
                                                        <!---->
                                                    </div>


                                                </li>
                                            </ul>
                                            <!---->
                                        </div>

                                    </div>
                                    <!---->
                                    <!---->
                                </div>


                            </li>
                        </ul>
                        <!---->
                    </div>

                </div>
                <!---->
                <!---->
            </div>


        </li>
        <li class="artdeco-list__item yUYbUPmIDBCyujolHJvDMVJLdKKwbTvJNGnVDA qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


            <!---->
            <div class="iySSlsjvmHFIjvVVBeTzQKiCkbVUEscOCasgZMM
        AajnQCQGlEqOkCCSZJHqFVelplbPuTKoKw owSPWypkbaygNqfMzXkzygjefLVERYVMnw
        
        
        
        " data-view-name="profile-component-entity">
                <div>

                    <a data-field="experience_company_logo" class="optional-action-target-wrapper 
            
            pvs-entity__image-container--outline-offset
            display-flex" target="_self" tabindex="-1"
                        href="https://www.linkedin.com/search/results/all/?keywords=Abbott+Informatics">

                        <div class="ivm-image-view-model  pvs-entity__image ">

                            <div class="ivm-view-attr__img-wrapper
        
        ">
                                <!---->
                                <div class="EntityPhoto-square-3-ghost-company ivm-view-attr__ghost-entity  ">
                                    <div class="visually-hidden">Abbott Informatics</div>
                                </div>
                            </div>

                        </div>

                    </a>

                </div>

                <div class="display-flex flex-column align-self-center flex-grow-1">
                    <div class="display-flex flex-row justify-space-between">

                        <a data-field="experience_company_logo" class="optional-action-target-wrapper 
              display-flex flex-column full-width" target="_self" href="https://www.linkedin.com/company/248524/">
                            <div class="display-flex flex-wrap align-items-center full-height">

                                <div class="display-flex ">

                                    <div class="
          display-flex full-width">

                                        <div class="display-flex align-items-center
              mr1 hoverable-link-text t-bold">
                                            <span aria-hidden="true"><!---->Abbott Informatics<!----></span><span
                                                class="visually-hidden"><!---->Abbott Informatics<!----></span>
                                        </div>
                                        <!---->
                                    </div>

                                </div>

                                <!----><!----><!---->
                            </div>
                            <span class="t-14 t-normal">
                                <span aria-hidden="true"><!---->17 yrs 7 mos<!----></span><span
                                    class="visually-hidden"><!---->17 yrs 7 mos<!----></span>
                            </span>
                            <!----><!---->
                        </a>

                    </div>

                    <div class="FtwCyQiKWmAiGnEmVueQaXzXAGHOsFzwvUjJnmX pvs-entity__sub-components">
                        <!---->
                        <ul class="PdRUlssPYwwHVyfokYoPNtMeAOfjkIoxnUc
            
            
            ">
                            <li class="qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                <span class="EjZKUrtOZcFtnELEhNGFouebDCwJhXVgKMI"></span>
                                <div class="iySSlsjvmHFIjvVVBeTzQKiCkbVUEscOCasgZMM
        
        ixzvzMZQySGEYBvQMGULohZYouQrhmiEk
        
        
        " data-view-name="profile-component-entity">
                                    <div>

                                        <div class="
            
            
            display-flex" tabindex="-1">

                                            <!---->
                                        </div>

                                    </div>

                                    <div class="display-flex flex-column align-self-center flex-grow-1">
                                        <div class="display-flex flex-row justify-space-between">

                                            <a class="optional-action-target-wrapper 
              display-flex flex-column full-width" target="_self" href="https://www.linkedin.com/company/248524/">
                                                <div class="display-flex flex-wrap align-items-center full-height">

                                                    <div class="display-flex ">

                                                        <div class="
          display-flex full-width">

                                                            <div class="display-flex align-items-center
              mr1 hoverable-link-text t-bold">
                                                                <span aria-hidden="true"><!---->Senior Business System
                                                                    Analyst/Project Manager<!----></span><span
                                                                    class="visually-hidden"><!---->Senior Business
                                                                    System Analyst/Project Manager<!----></span>
                                                            </div>
                                                            <!---->
                                                        </div>

                                                    </div>

                                                    <!----><!----><!---->
                                                </div>
                                                <!----> <span class="t-14 t-normal
                  t-black--light">
                                                    <span class="pvs-entity__caption-wrapper"
                                                        aria-hidden="true"><!---->Jul 2013 - Jan 2018 · 4 yrs 7
                                                        mos<!----></span><span class="visually-hidden"><!---->Jul 2013
                                                        to Jan 2018 · 4 yrs 7 mos<!----></span>
                                                </span>
                                                <span class="t-14 t-normal
                  t-black--light">
                                                    <span aria-hidden="true"><!---->Virtual<!----></span><span
                                                        class="visually-hidden"><!---->Virtual<!----></span>
                                                </span>
                                            </a>

                                        </div>

                                        <div class="FtwCyQiKWmAiGnEmVueQaXzXAGHOsFzwvUjJnmX pvs-entity__sub-components">
                                            <!---->
                                            <ul class="PdRUlssPYwwHVyfokYoPNtMeAOfjkIoxnUc
            
            
            ">
                                                <li class="qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                                    <div class="FtwCyQiKWmAiGnEmVueQaXzXAGHOsFzwvUjJnmX">
                                                        <!---->
                                                        <ul class="PdRUlssPYwwHVyfokYoPNtMeAOfjkIoxnUc
            
            
            ">
                                                            <li
                                                                class="pvs-list__item--with-top-padding qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                                                <div class="display-flex ">

                                                                    <div class="
          display-flex full-width">


                                                                        <div class="xyKuvshqjNOCLLbuJMSOACywiHYHucctJs
          full-width t-14 t-normal t-black display-flex align-items-center" dir="ltr">

                                                                            <div class="WcTepSkGpUVWbbheKPCszGxDQzmhiNFQ
        inline-show-more-text--is-collapsed
        inline-show-more-text--is-collapsed-with-line-clamp
        
        
        
         full-width" style="-webkit-line-clamp:2;" dir="ltr" tabindex="-1">

                                                                                <span aria-hidden="true"><!---->After
                                                                                    going around and trying many
                                                                                    different things at Abbott
                                                                                    Informatics (STARLIMS), I was
                                                                                    offered to take on the Advanced
                                                                                    Analytics product development lead.
                                                                                    The role required good business
                                                                                    knowledge, good communication
                                                                                    skills, and the ability to get
                                                                                    creative. Sounded like a
                                                                                    plan!<!----><br><br><!---->Speciality
                                                                                    Products - STARLIMS Advanced
                                                                                    Analytics<!----><br><!---->- Project
                                                                                    Management<!----><br><!---->-
                                                                                    Development &amp;
                                                                                    Integration<!----><br><!---->-
                                                                                    Documentation (Training Material,
                                                                                    requirements,
                                                                                    etc)<!----><br><!---->- Marketing
                                                                                    (Support material, ideas,
                                                                                    presentations)<!----><br><!---->-
                                                                                    Advanced Analytics Dashboards for
                                                                                    many industries and
                                                                                    clients<!----><br><!---->- Running
                                                                                    an in-house continuous training
                                                                                    program<span
                                                                                        class="white-space-pre">
                                                                                    </span><br><!---->- Library Platform
                                                                                    (System
                                                                                    Architect)<!----><br><!---->-
                                                                                    Whiteboard Videos Authoring,
                                                                                    Tutorials, and other
                                                                                    media<!----><br><!---->- Scrum
                                                                                    Master<!----></span><span
                                                                                    class="visually-hidden"><!---->After
                                                                                    going around and trying many
                                                                                    different things at Abbott
                                                                                    Informatics (STARLIMS), I was
                                                                                    offered to take on the Advanced
                                                                                    Analytics product development lead.
                                                                                    The role required good business
                                                                                    knowledge, good communication
                                                                                    skills, and the ability to get
                                                                                    creative. Sounded like a plan!

                                                                                    Speciality Products - STARLIMS
                                                                                    Advanced Analytics
                                                                                    - Project Management
                                                                                    - Development &amp; Integration
                                                                                    - Documentation (Training Material,
                                                                                    requirements, etc)
                                                                                    - Marketing (Support material,
                                                                                    ideas, presentations)
                                                                                    - Advanced Analytics Dashboards for
                                                                                    many industries and clients
                                                                                    - Running an in-house continuous
                                                                                    training program
                                                                                    - Library Platform (System
                                                                                    Architect)
                                                                                    - Whiteboard Videos Authoring,
                                                                                    Tutorials, and other media
                                                                                    - Scrum Master<!----></span>

                                                                                <span
                                                                                    class="inline-show-more-text__link-container-collapsed">
                                                                                    <!----> <button class="inline-show-more-text__button
                inline-show-more-text__button--light
                link" aria-expanded="false" role="button" type="button">
                                                                                        …see more
                                                                                    </button>
                                                                                </span>

                                                                                <!---->
                                                                            </div>

                                                                        </div>

                                                                        <!---->
                                                                    </div>

                                                                </div>


                                                            </li>
                                                        </ul>
                                                        <!---->
                                                    </div>


                                                </li>
                                                <li class="qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                                    <div class="FtwCyQiKWmAiGnEmVueQaXzXAGHOsFzwvUjJnmX">
                                                        <!---->
                                                        <ul class="PdRUlssPYwwHVyfokYoPNtMeAOfjkIoxnUc
            
            
            ">
                                                            <li
                                                                class="pvs-list__item--with-top-padding qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                                                <div class="
        mv1
        display-flex align-items-center">

                                                                    <a data-field="position_contextual_skills_see_details"
                                                                        class="optional-action-target-wrapper display-flex link-without-hover-visited"
                                                                        target="_self"
                                                                        href="https://www.linkedin.com/in/michel-roberge-7011b614/overlay/urn:li:fsd_profilePosition:(ACoAAALgc3EBglzhZDPKP2JcpyPypmkYxBacitY,420381636)/skill-associations-details?profileUrn=urn%3Ali%3Afsd_profile%3AACoAAALgc3EBglzhZDPKP2JcpyPypmkYxBacitY">
                                                                        <div class="mr1
                mv1
                
                ">

                                                                            <ul class="ivm-entity-pile
        display-flex align-items-center t-black">
                                                                                <li
                                                                                    class="ivm-entity-pile__img-item--stacked">

                                                                                    <div class="ivm-view-attr__img-wrapper
        
        ">
                                                                                        <!---->
                                                                                        <svg role="none"
                                                                                            aria-hidden="true"
                                                                                            class="ivm-view-attr__icon ivm-view-attr__icon--icon  "
                                                                                            xmlns="http://www.w3.org/2000/svg"
                                                                                            width="16" height="16"
                                                                                            viewBox="0 0 16 16"
                                                                                            data-supported-dps="16x16"
                                                                                            data-test-icon="skills-small">
                                                                                            <!---->
                                                                                            <use href="#skills-small"
                                                                                                width="16" height="16">
                                                                                            </use>
                                                                                        </svg>

                                                                                    </div>

                                                                                </li>
                                                                            </ul>

                                                                        </div>

                                                                        <div class="display-flex ">

                                                                            <div class="
          display-flex full-width">

                                                                                <div class="hoverable-link-text display-flex align-items-center
              t-14 t-normal t-black">
                                                                                    <strong><!---->Communication écrite,
                                                                                        Communication and +5
                                                                                        skills<!----></strong>
                                                                                </div>
                                                                                <!---->
                                                                            </div>

                                                                        </div>

                                                                    </a>


                                                                    <!---->
                                                                </div>


                                                            </li>
                                                        </ul>
                                                        <!---->
                                                    </div>


                                                </li>
                                                <li class="qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                                    <div class="FtwCyQiKWmAiGnEmVueQaXzXAGHOsFzwvUjJnmX">
                                                        <!---->
                                                        <ul class="PdRUlssPYwwHVyfokYoPNtMeAOfjkIoxnUc
            
            
            ">
                                                            <li
                                                                class="pvs-list__item--with-top-padding qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                                                <div class="full-width profile-component-entity-pile">
                                                                    <!---->
                                                                    <div class="display-flex flex-row flex-wrap">


                                                                        <a data-field="experience_media"
                                                                            class="optional-action-target-wrapper pvs-thumbnail__wrapper"
                                                                            target="_self"
                                                                            aria-label="Thumbnail for A GMP inspection should not be a surprise"
                                                                            href="https://www.linkedin.com/in/michel-roberge-7011b614/overlay/experience/420381636/multiple-media-viewer?profileId=ACoAAALgc3EBglzhZDPKP2JcpyPypmkYxBacitY&amp;treasuryMediaId=1515512338876&amp;type=LINK">
                                                                            <figure class="pvs-thumbnail">
                                                                                <img src="https://media.licdn.com/dms/image/sync/v2/D5627AQHwk_qzjyNoyg/articleshare-shrink_160/articleshare-shrink_160/0/1711778923519?e=1741982400&amp;v=beta&amp;t=a0fgIsStj4EynUuoCKGv0RLZTB0mcp0xw4pM484DXvg"
                                                                                    loading="lazy" alt=""
                                                                                    id="thumbnail-image-ember148"
                                                                                    class="pvs-thumbnail__image evi-image lazy-image ember-view">
                                                                                <!---->
                                                                                <!---->
                                                                            </figure>
                                                                        </a>




                                                                        <a data-field="experience_media"
                                                                            class="optional-action-target-wrapper pvs-thumbnail__wrapper"
                                                                            target="_self"
                                                                            aria-label="Thumbnail for Maximize your investment with STARLIMS Content Library"
                                                                            href="https://www.linkedin.com/in/michel-roberge-7011b614/overlay/urn:li:fsd_profilePosition:(ACoAAALgc3EBglzhZDPKP2JcpyPypmkYxBacitY,420381636)/treasury?profileUrn=urn%3Ali%3Afsd_profile%3AACoAAALgc3EBglzhZDPKP2JcpyPypmkYxBacitY">
                                                                            <figure class="pvs-thumbnail">
                                                                                <img src="https://media.licdn.com/dms/image/sync/v2/D4D27AQE7WbTlCZnPjQ/articleshare-shrink_160/articleshare-shrink_160/0/1711778923095?e=1741982400&amp;v=beta&amp;t=k53hg8jxfsrmbmzDd8D5_eLVkKAGZ-L6iLhtGsRqmvI"
                                                                                    loading="lazy" alt=""
                                                                                    id="thumbnail-image-ember251"
                                                                                    class="pvs-thumbnail__image evi-image lazy-image ember-view">
                                                                                <!---->
                                                                                <div
                                                                                    class="pvs-thumbnail__overlay pvs-thumbnail__overlay--text">
                                                                                    <div class="t-14 t-white t-bold">+2
                                                                                    </div>
                                                                                </div>
                                                                            </figure>
                                                                        </a>


                                                                    </div>
                                                                </div>


                                                            </li>
                                                        </ul>
                                                        <!---->
                                                    </div>


                                                </li>
                                            </ul>
                                            <!---->
                                        </div>

                                    </div>
                                    <!---->
                                    <!---->
                                </div>


                            </li>
                            <li class="qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                <span class="EjZKUrtOZcFtnELEhNGFouebDCwJhXVgKMI"></span>
                                <div class="iySSlsjvmHFIjvVVBeTzQKiCkbVUEscOCasgZMM
        
        
        
        
        " data-view-name="profile-component-entity">
                                    <div>

                                        <div class="
            
            
            display-flex" tabindex="-1">

                                            <!---->
                                        </div>

                                    </div>

                                    <div class="display-flex flex-column align-self-center flex-grow-1">
                                        <div class="display-flex flex-row justify-space-between">

                                            <a class="optional-action-target-wrapper 
              display-flex flex-column full-width" target="_self" href="https://www.linkedin.com/company/248524/">
                                                <div class="display-flex flex-wrap align-items-center full-height">

                                                    <div class="display-flex ">

                                                        <div class="
          display-flex full-width">

                                                            <div class="display-flex align-items-center
              mr1 hoverable-link-text t-bold">
                                                                <span aria-hidden="true"><!---->Senior Technical
                                                                    Specialist<!----></span><span
                                                                    class="visually-hidden"><!---->Senior Technical
                                                                    Specialist<!----></span>
                                                            </div>
                                                            <!---->
                                                        </div>

                                                    </div>

                                                    <!----><!----><!---->
                                                </div>
                                                <!----> <span class="t-14 t-normal
                  t-black--light">
                                                    <span class="pvs-entity__caption-wrapper"
                                                        aria-hidden="true"><!---->Jul 2000 - Jul 2013 · 13 yrs 1
                                                        mo<!----></span><span class="visually-hidden"><!---->Jul 2000 to
                                                        Jul 2013 · 13 yrs 1 mo<!----></span>
                                                </span>
                                                <!---->
                                            </a>

                                        </div>

                                        <div class="FtwCyQiKWmAiGnEmVueQaXzXAGHOsFzwvUjJnmX pvs-entity__sub-components">
                                            <!---->
                                            <ul class="PdRUlssPYwwHVyfokYoPNtMeAOfjkIoxnUc
            
            
            ">
                                                <li class="qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                                    <div class="FtwCyQiKWmAiGnEmVueQaXzXAGHOsFzwvUjJnmX">
                                                        <!---->
                                                        <ul class="PdRUlssPYwwHVyfokYoPNtMeAOfjkIoxnUc
            
            
            ">
                                                            <li
                                                                class="pvs-list__item--with-top-padding qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                                                <div class="display-flex ">

                                                                    <div class="
          display-flex full-width">


                                                                        <div class="xyKuvshqjNOCLLbuJMSOACywiHYHucctJs
          full-width t-14 t-normal t-black display-flex align-items-center" dir="ltr">

                                                                            <div class="WcTepSkGpUVWbbheKPCszGxDQzmhiNFQ
        
        
        
        
        
         full-width" style="" dir="ltr" tabindex="-1">

                                                                                <span aria-hidden="true"><!---->I'd been
                                                                                    working on that big system for two
                                                                                    years and entered the maintenance
                                                                                    and support cycle. I always wanted
                                                                                    to go to big cities and started
                                                                                    needing new challenges. A company
                                                                                    named LIMS System (who would become
                                                                                    part of STARLIMS) found me and
                                                                                    offered me to learn the laboratory
                                                                                    business. What an
                                                                                    opportunity!<!----><br><br><!---->•STARLIMS
                                                                                    Interfaces SME<!----><br><span
                                                                                        class="white-space-pre">
                                                                                    </span>•SAP Integration (.Net
                                                                                    Connector, ES
                                                                                    Bundles/Netweaver)<!----><br><span
                                                                                        class="white-space-pre">
                                                                                    </span>•Other third parties
                                                                                    integration and
                                                                                    interfacing<!----><br><span
                                                                                        class="white-space-pre">
                                                                                    </span>•Developer on special
                                                                                    projects (SOA, OPC,
                                                                                    SAP)<!----><br><!---->•Developer on
                                                                                    customer projects (new modules, bug
                                                                                    fixes, enhancements,
                                                                                    reports)<!----><br><!---->•Project
                                                                                    Management of special
                                                                                    projects<!----><br><!---->•Solution
                                                                                    Analysis<!----><br><!---->•Interface
                                                                                    Proof of
                                                                                    concepts<!----><br><!---->•Functional
                                                                                    Requirements and System Design
                                                                                    Specifications.<!----><br><!---->•Perform
                                                                                    webex training for external
                                                                                    application
                                                                                    interfacing<!----><br><!---->•SME
                                                                                    for: Audit Trail, Inventory,
                                                                                    Specifications, Interface
                                                                                    Connections, Manufacturing
                                                                                    Lifecycle<!----></span><span
                                                                                    class="visually-hidden"><!---->I'd
                                                                                    been working on that big system for
                                                                                    two years and entered the
                                                                                    maintenance and support cycle. I
                                                                                    always wanted to go to big cities
                                                                                    and started needing new challenges.
                                                                                    A company named LIMS System (who
                                                                                    would become part of STARLIMS) found
                                                                                    me and offered me to learn the
                                                                                    laboratory business. What an
                                                                                    opportunity!

                                                                                    •STARLIMS Interfaces SME
                                                                                    •SAP Integration (.Net Connector, ES
                                                                                    Bundles/Netweaver)
                                                                                    •Other third parties integration and
                                                                                    interfacing
                                                                                    •Developer on special projects (SOA,
                                                                                    OPC, SAP)
                                                                                    •Developer on customer projects (new
                                                                                    modules, bug fixes, enhancements,
                                                                                    reports)
                                                                                    •Project Management of special
                                                                                    projects
                                                                                    •Solution Analysis
                                                                                    •Interface Proof of concepts
                                                                                    •Functional Requirements and System
                                                                                    Design Specifications.
                                                                                    •Perform webex training for external
                                                                                    application interfacing
                                                                                    •SME for: Audit Trail, Inventory,
                                                                                    Specifications, Interface
                                                                                    Connections, Manufacturing
                                                                                    Lifecycle<!----></span>

                                                                                <!---->
                                                                                <!---->
                                                                            </div>

                                                                        </div>

                                                                        <!---->
                                                                    </div>

                                                                </div>


                                                            </li>
                                                        </ul>
                                                        <!---->
                                                    </div>


                                                </li>
                                                <li class="qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                                    <div class="FtwCyQiKWmAiGnEmVueQaXzXAGHOsFzwvUjJnmX">
                                                        <!---->
                                                        <ul class="PdRUlssPYwwHVyfokYoPNtMeAOfjkIoxnUc
            
            
            ">
                                                            <li
                                                                class="pvs-list__item--with-top-padding qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                                                <div class="
        mv1
        display-flex align-items-center">

                                                                    <a data-field="position_contextual_skills_see_details"
                                                                        class="optional-action-target-wrapper display-flex link-without-hover-visited"
                                                                        target="_self"
                                                                        href="https://www.linkedin.com/in/michel-roberge-7011b614/overlay/urn:li:fsd_profilePosition:(ACoAAALgc3EBglzhZDPKP2JcpyPypmkYxBacitY,78764121)/skill-associations-details?profileUrn=urn%3Ali%3Afsd_profile%3AACoAAALgc3EBglzhZDPKP2JcpyPypmkYxBacitY">
                                                                        <div class="mr1
                mv1
                
                ">

                                                                            <ul class="ivm-entity-pile
        display-flex align-items-center t-black">
                                                                                <li
                                                                                    class="ivm-entity-pile__img-item--stacked">

                                                                                    <div class="ivm-view-attr__img-wrapper
        
        ">
                                                                                        <!---->
                                                                                        <svg role="none"
                                                                                            aria-hidden="true"
                                                                                            class="ivm-view-attr__icon ivm-view-attr__icon--icon  "
                                                                                            xmlns="http://www.w3.org/2000/svg"
                                                                                            width="16" height="16"
                                                                                            viewBox="0 0 16 16"
                                                                                            data-supported-dps="16x16"
                                                                                            data-test-icon="skills-small">
                                                                                            <!---->
                                                                                            <use href="#skills-small"
                                                                                                width="16" height="16">
                                                                                            </use>
                                                                                        </svg>

                                                                                    </div>

                                                                                </li>
                                                                            </ul>

                                                                        </div>

                                                                        <div class="display-flex ">

                                                                            <div class="
          display-flex full-width">

                                                                                <div class="hoverable-link-text display-flex align-items-center
              t-14 t-normal t-black">
                                                                                    <strong><!---->Communication,
                                                                                        Partage des connaissances and +3
                                                                                        skills<!----></strong>
                                                                                </div>
                                                                                <!---->
                                                                            </div>

                                                                        </div>

                                                                    </a>


                                                                    <!---->
                                                                </div>


                                                            </li>
                                                        </ul>
                                                        <!---->
                                                    </div>


                                                </li>
                                            </ul>
                                            <!---->
                                        </div>

                                    </div>
                                    <!---->
                                    <!---->
                                </div>


                            </li>
                        </ul>
                        <!---->
                    </div>

                </div>
                <!---->
                <!---->
            </div>


        </li>
        <li class="artdeco-list__item yUYbUPmIDBCyujolHJvDMVJLdKKwbTvJNGnVDA qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


            <!---->
            <div class="iySSlsjvmHFIjvVVBeTzQKiCkbVUEscOCasgZMM
        AajnQCQGlEqOkCCSZJHqFVelplbPuTKoKw owSPWypkbaygNqfMzXkzygjefLVERYVMnw
        
        
        
        " data-view-name="profile-component-entity">
                <div>

                    <a data-field="experience_company_logo" class="optional-action-target-wrapper 
            
            pvs-entity__image-container--outline-offset
            display-flex" target="_self" href="https://www.linkedin.com/company/1185/">

                        <div class="ivm-image-view-model  pvs-entity__image ">

                            <div class="ivm-view-attr__img-wrapper
        
        ">
                                <!---->
                                <!----> <img width="48"
                                    src="https://media.licdn.com/dms/image/v2/D4D0BAQGUWkaCJOWLdA/company-logo_100_100/company-logo_100_100/0/1720685515776/pfizer_logo?e=1749686400&amp;v=beta&amp;t=8CLefoSkmLbhXMN5hJWqMP9RpdML65VL8y52fK2jfXc"
                                    loading="lazy" height="48" alt="Pfizer logo" id="ember164"
                                    class="ivm-view-attr__img--centered EntityPhoto-square-3   evi-image lazy-image ember-view">
                            </div>

                        </div>

                    </a>

                </div>

                <div class="display-flex flex-column align-self-center flex-grow-1">
                    <div class="display-flex flex-row justify-space-between">

                        <div class="
              display-flex flex-column full-width">

                            <div class="display-flex flex-wrap align-items-center full-height">

                                <div class="display-flex ">

                                    <div class="
          display-flex full-width">

                                        <div class="display-flex align-items-center
              mr1 t-bold">
                                            <span aria-hidden="true"><!---->Senior Analyst<!----></span><span
                                                class="visually-hidden"><!---->Senior Analyst<!----></span>
                                        </div>
                                        <!---->
                                    </div>

                                </div>

                                <!----><!----><!---->
                            </div>
                            <span class="t-14 t-normal">
                                <span aria-hidden="true"><!---->Wyeth<!----></span><span
                                    class="visually-hidden"><!---->Wyeth<!----></span>
                            </span>
                            <span class="t-14 t-normal
                  t-black--light">
                                <span class="pvs-entity__caption-wrapper" aria-hidden="true"><!---->Feb 2004 - Feb 2006
                                    · 2 yrs 1 mo<!----></span><span class="visually-hidden"><!---->Feb 2004 to Feb 2006
                                    · 2 yrs 1 mo<!----></span>
                            </span>
                            <!---->
                        </div>

                    </div>

                    <div class="FtwCyQiKWmAiGnEmVueQaXzXAGHOsFzwvUjJnmX pvs-entity__sub-components">
                        <!---->
                        <ul class="PdRUlssPYwwHVyfokYoPNtMeAOfjkIoxnUc
            
            
            ">
                            <li class="qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                <div class="FtwCyQiKWmAiGnEmVueQaXzXAGHOsFzwvUjJnmX">
                                    <!---->
                                    <ul class="PdRUlssPYwwHVyfokYoPNtMeAOfjkIoxnUc
            
            
            ">
                                        <li
                                            class="pvs-list__item--with-top-padding qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                            <div class="display-flex ">

                                                <div class="
          display-flex full-width">


                                                    <div class="xyKuvshqjNOCLLbuJMSOACywiHYHucctJs
          full-width t-14 t-normal t-black display-flex align-items-center" dir="ltr">

                                                        <div class="WcTepSkGpUVWbbheKPCszGxDQzmhiNFQ
        
        
        
        
        
         full-width" style="" dir="ltr" tabindex="-1">

                                                            <span aria-hidden="true"><!---->While I was working at
                                                                STARLIMS, I took a "break" and went for a big pharma
                                                                company. I wanted to try a really big enterprise and
                                                                accepted an offer at Wyeth. I stayed there 2 years, had
                                                                a lot of fun and learned a lot. This was a small bubble
                                                                in time where I stepped out of the laboratory world...
                                                                Well, not quite.<!----><br><br><!---->•LIMS Specialist
                                                                for upgrading STARLIMS for FDA
                                                                compliance<!----><br><!---->•Analyst &amp; Development
                                                                for Financial Software tools
                                                                development<!----><br><!---->•Analysis &amp; Development
                                                                for Essbase development<!----><br><!---->•SOP writer
                                                                &amp; trainer for Software
                                                                Development<!----><br><!---->•Certified
                                                                Trainer<!----></span><span
                                                                class="visually-hidden"><!---->While I was working at
                                                                STARLIMS, I took a "break" and went for a big pharma
                                                                company. I wanted to try a really big enterprise and
                                                                accepted an offer at Wyeth. I stayed there 2 years, had
                                                                a lot of fun and learned a lot. This was a small bubble
                                                                in time where I stepped out of the laboratory world...
                                                                Well, not quite.

                                                                •LIMS Specialist for upgrading STARLIMS for FDA
                                                                compliance
                                                                •Analyst &amp; Development for Financial Software tools
                                                                development
                                                                •Analysis &amp; Development for Essbase development
                                                                •SOP writer &amp; trainer for Software Development
                                                                •Certified Trainer<!----></span>

                                                            <!---->
                                                            <!---->
                                                        </div>

                                                    </div>

                                                    <!---->
                                                </div>

                                            </div>


                                        </li>
                                    </ul>
                                    <!---->
                                </div>


                            </li>
                            <li class="qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                <div class="FtwCyQiKWmAiGnEmVueQaXzXAGHOsFzwvUjJnmX">
                                    <!---->
                                    <ul class="PdRUlssPYwwHVyfokYoPNtMeAOfjkIoxnUc
            
            
            ">
                                        <li
                                            class="pvs-list__item--with-top-padding qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                            <div class="
        mv1
        display-flex align-items-center">

                                                <a data-field="position_contextual_skills_see_details"
                                                    class="optional-action-target-wrapper display-flex link-without-hover-visited"
                                                    target="_self"
                                                    href="https://www.linkedin.com/in/michel-roberge-7011b614/overlay/urn:li:fsd_profilePosition:(ACoAAALgc3EBglzhZDPKP2JcpyPypmkYxBacitY,78766427)/skill-associations-details?profileUrn=urn%3Ali%3Afsd_profile%3AACoAAALgc3EBglzhZDPKP2JcpyPypmkYxBacitY">
                                                    <div class="mr1
                mv1
                
                ">

                                                        <ul class="ivm-entity-pile
        display-flex align-items-center t-black">
                                                            <li class="ivm-entity-pile__img-item--stacked">

                                                                <div class="ivm-view-attr__img-wrapper
        
        ">
                                                                    <!---->
                                                                    <svg role="none" aria-hidden="true"
                                                                        class="ivm-view-attr__icon ivm-view-attr__icon--icon  "
                                                                        xmlns="http://www.w3.org/2000/svg" width="16"
                                                                        height="16" viewBox="0 0 16 16"
                                                                        data-supported-dps="16x16"
                                                                        data-test-icon="skills-small">
                                                                        <!---->
                                                                        <use href="#skills-small" width="16"
                                                                            height="16"></use>
                                                                    </svg>

                                                                </div>

                                                            </li>
                                                        </ul>

                                                    </div>

                                                    <div class="display-flex ">

                                                        <div class="
          display-flex full-width">

                                                            <div class="hoverable-link-text display-flex align-items-center
              t-14 t-normal t-black">
                                                                <strong><!---->Communication, Anglais and +1
                                                                    skill<!----></strong>
                                                            </div>
                                                            <!---->
                                                        </div>

                                                    </div>

                                                </a>


                                                <!---->
                                            </div>


                                        </li>
                                    </ul>
                                    <!---->
                                </div>


                            </li>
                        </ul>
                        <!---->
                    </div>

                </div>
                <!---->
                <!---->
            </div>


        </li>
        <li class="artdeco-list__item yUYbUPmIDBCyujolHJvDMVJLdKKwbTvJNGnVDA qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


            <!---->
            <div class="iySSlsjvmHFIjvVVBeTzQKiCkbVUEscOCasgZMM
        AajnQCQGlEqOkCCSZJHqFVelplbPuTKoKw owSPWypkbaygNqfMzXkzygjefLVERYVMnw
        
        
        
        " data-view-name="profile-component-entity">
                <div>

                    <a data-field="experience_company_logo" class="optional-action-target-wrapper 
            
            pvs-entity__image-container--outline-offset
            display-flex" target="_self" tabindex="-1"
                        href="https://www.linkedin.com/search/results/all/?keywords=Cablevision+du+Nord">

                        <div class="ivm-image-view-model  pvs-entity__image ">

                            <div class="ivm-view-attr__img-wrapper
        
        ">
                                <!---->
                                <div class="EntityPhoto-square-3-ghost-company ivm-view-attr__ghost-entity  ">
                                    <div class="visually-hidden">Analyst/Developer</div>
                                </div>
                            </div>

                        </div>

                    </a>

                </div>

                <div class="display-flex flex-column align-self-center flex-grow-1">
                    <div class="display-flex flex-row justify-space-between">

                        <div class="
              display-flex flex-column full-width">

                            <div class="display-flex flex-wrap align-items-center full-height">

                                <div class="display-flex ">

                                    <div class="
          display-flex full-width">

                                        <div class="display-flex align-items-center
              mr1 t-bold">
                                            <span aria-hidden="true"><!---->Analyst/Developer<!----></span><span
                                                class="visually-hidden"><!---->Analyst/Developer<!----></span>
                                        </div>
                                        <!---->
                                    </div>

                                </div>

                                <!----><!----><!---->
                            </div>
                            <span class="t-14 t-normal">
                                <span aria-hidden="true"><!---->Cablevision du Nord<!----></span><span
                                    class="visually-hidden"><!---->Cablevision du Nord<!----></span>
                            </span>
                            <span class="t-14 t-normal
                  t-black--light">
                                <span class="pvs-entity__caption-wrapper" aria-hidden="true"><!---->1998 - 2000 · 2
                                    yrs<!----></span><span class="visually-hidden"><!---->1998 to 2000 · 2
                                    yrs<!----></span>
                            </span>
                            <!---->
                        </div>

                    </div>

                    <div class="FtwCyQiKWmAiGnEmVueQaXzXAGHOsFzwvUjJnmX pvs-entity__sub-components">
                        <!---->
                        <ul class="PdRUlssPYwwHVyfokYoPNtMeAOfjkIoxnUc
            
            
            ">
                            <li class="qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                <div class="FtwCyQiKWmAiGnEmVueQaXzXAGHOsFzwvUjJnmX">
                                    <!---->
                                    <ul class="PdRUlssPYwwHVyfokYoPNtMeAOfjkIoxnUc
            
            
            ">
                                        <li
                                            class="pvs-list__item--with-top-padding qTaEZzPugVmGgmQLzqgJKjaQIQNUwNrUtsNQ">


                                            <div class="display-flex ">

                                                <div class="
          display-flex full-width">


                                                    <div class="xyKuvshqjNOCLLbuJMSOACywiHYHucctJs
          full-width t-14 t-normal t-black display-flex align-items-center" dir="ltr">

                                                        <div class="WcTepSkGpUVWbbheKPCszGxDQzmhiNFQ
        
        
        
        
        
         full-width" style="" dir="ltr" tabindex="-1">

                                                            <span aria-hidden="true"><!---->I was given the opportunity
                                                                to prove myself - fresh out of school - at the local
                                                                cable company. I started as a consultant and was offered
                                                                a permanent position. I really enjoyed my experience and
                                                                learned a lot.<!----><br><br><!---->•In-House ERP
                                                                Software analysis &amp;
                                                                development<!----><br><!---->•Support for existing
                                                                modules<!----><br><!---->•Analysis &amp; Development for
                                                                new modules<!----><br><!---->•Reporting
                                                                Development<!----></span><span
                                                                class="visually-hidden"><!---->I was given the
                                                                opportunity to prove myself - fresh out of school - at
                                                                the local cable company. I started as a consultant and
                                                                was offered a permanent position. I really enjoyed my
                                                                experience and learned a lot.

                                                                •In-House ERP Software analysis &amp; development
                                                                •Support for existing modules
                                                                •Analysis &amp; Development for new modules
                                                                •Reporting Development<!----></span>

                                                            <!---->
                                                            <!---->
                                                        </div>

                                                    </div>

                                                    <!---->
                                                </div>

                                            </div>


                                        </li>
                                    </ul>
                                    <!---->
                                </div>


                            </li>
                        </ul>
                        <!---->
                    </div>

                </div>
                <!---->
                <!---->
            </div>


        </li>
    </ul>
</body>

</html>

================
File: docs/prompts/default.md
================
You are an AI assistant helping showcase my portfolio. You ONLY use the provided context to answer questions.
  If a question is about my projects, focus specifically on projects in the provided context.
  If the question is unrelated to my work, say "I'm here to discuss my portfolio. Ask me about my projects or skills!"
  
  ### Context:
  ${context || "No relevant projects found in the database."}
  
  ### User Question:
  ${userQuery}
  
  ### AI Response:

================
File: LICENSE
================
GNU GENERAL PUBLIC LICENSE
                       Version 3, 29 June 2007

 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

                            Preamble

  The GNU General Public License is a free, copyleft license for
software and other kinds of works.

  The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

  To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

  For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

  Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

  For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

  Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users' freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable.  Therefore, we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.

  Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

  The precise terms and conditions for copying, distribution and
modification follow.

                       TERMS AND CONDITIONS

  0. Definitions.

  "This License" refers to version 3 of the GNU General Public License.

  "Copyright" also means copyright-like laws that apply to other kinds of
works, such as semiconductor masks.

  "The Program" refers to any copyrightable work licensed under this
License.  Each licensee is addressed as "you".  "Licensees" and
"recipients" may be individuals or organizations.

  To "modify" a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of an
exact copy.  The resulting work is called a "modified version" of the
earlier work or a work "based on" the earlier work.

  A "covered work" means either the unmodified Program or a work based
on the Program.

  To "propagate" a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy.  Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.

  To "convey" a work means any kind of propagation that enables other
parties to make or receive copies.  Mere interaction with a user through
a computer network, with no transfer of a copy, is not conveying.

  An interactive user interface displays "Appropriate Legal Notices"
to the extent that it includes a convenient and prominently visible
feature that (1) displays an appropriate copyright notice, and (2)
tells the user that there is no warranty for the work (except to the
extent that warranties are provided), that licensees may convey the
work under this License, and how to view a copy of this License.  If
the interface presents a list of user commands or options, such as a
menu, a prominent item in the list meets this criterion.

  1. Source Code.

  The "source code" for a work means the preferred form of the work
for making modifications to it.  "Object code" means any non-source
form of a work.

  A "Standard Interface" means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that
is widely used among developers working in that language.

  The "System Libraries" of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that
Major Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form.  A
"Major Component", in this context, means a major essential component
(kernel, window system, and so on) of the specific operating system
(if any) on which the executable work runs, or a compiler used to
produce the work, or an object code interpreter used to run it.

  The "Corresponding Source" for a work in object code form means all
the source code needed to generate, install, and (for an executable
work) run the object code and to modify the work, including scripts to
control those activities.  However, it does not include the work's
System Libraries, or general-purpose tools or generally available free
programs which are used unmodified in performing those activities but
which are not part of the work.  For example, Corresponding Source
includes interface definition files associated with source files for
the work, and the source code for shared libraries and dynamically
linked subprograms that the work is specifically designed to require,
such as by intimate data communication or control flow between those
subprograms and other parts of the work.

  The Corresponding Source need not include anything that users
can regenerate automatically from other parts of the Corresponding
Source.

  The Corresponding Source for a work in source code form is that
same work.

  2. Basic Permissions.

  All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met.  This License explicitly affirms your unlimited
permission to run the unmodified Program.  The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work.  This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.

  You may make, run and propagate covered works that you do not
convey, without conditions so long as your license otherwise remains
in force.  You may convey covered works to others for the sole purpose
of having them make modifications exclusively for you, or provide you
with facilities for running those works, provided that you comply with
the terms of this License in conveying all material for which you do
not control copyright.  Those thus making or running the covered works
for you must do so exclusively on your behalf, under your direction
and control, on terms that prohibit them from making any copies of
your copyrighted material outside their relationship with you.

  Conveying under any other circumstances is permitted solely under
the conditions stated below.  Sublicensing is not allowed; section 10
makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

  No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article
11 of the WIPO copyright treaty adopted on 20 December 1996, or
similar laws prohibiting or restricting circumvention of such
measures.

  When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such circumvention
is effected by exercising rights under this License with respect to
the covered work, and you disclaim any intention to limit operation or
modification of the work as a means of enforcing, against the work's
users, your or third parties' legal rights to forbid circumvention of
technological measures.

  4. Conveying Verbatim Copies.

  You may convey verbatim copies of the Program's source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice;
keep intact all notices stating that this License and any
non-permissive terms added in accord with section 7 apply to the code;
keep intact all notices of the absence of any warranty; and give all
recipients a copy of this License along with the Program.

  You may charge any price or no price for each copy that you convey,
and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

  You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the
terms of section 4, provided that you also meet all of these conditions:

    a) The work must carry prominent notices stating that you modified
    it, and giving a relevant date.

    b) The work must carry prominent notices stating that it is
    released under this License and any conditions added under section
    7.  This requirement modifies the requirement in section 4 to
    "keep intact all notices".

    c) You must license the entire work, as a whole, under this
    License to anyone who comes into possession of a copy.  This
    License will therefore apply, along with any applicable section 7
    additional terms, to the whole of the work, and all its parts,
    regardless of how they are packaged.  This License gives no
    permission to license the work in any other way, but it does not
    invalidate such permission if you have separately received it.

    d) If the work has interactive user interfaces, each must display
    Appropriate Legal Notices; however, if the Program has interactive
    interfaces that do not display Appropriate Legal Notices, your
    work need not make them do so.

  A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work,
and which are not combined with it such as to form a larger program,
in or on a volume of a storage or distribution medium, is called an
"aggregate" if the compilation and its resulting copyright are not
used to limit the access or legal rights of the compilation's users
beyond what the individual works permit.  Inclusion of a covered work
in an aggregate does not cause this License to apply to the other
parts of the aggregate.

  6. Conveying Non-Source Forms.

  You may convey a covered work in object code form under the terms
of sections 4 and 5, provided that you also convey the
machine-readable Corresponding Source under the terms of this License,
in one of these ways:

    a) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by the
    Corresponding Source fixed on a durable physical medium
    customarily used for software interchange.

    b) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by a
    written offer, valid for at least three years and valid for as
    long as you offer spare parts or customer support for that product
    model, to give anyone who possesses the object code either (1) a
    copy of the Corresponding Source for all the software in the
    product that is covered by this License, on a durable physical
    medium customarily used for software interchange, for a price no
    more than your reasonable cost of physically performing this
    conveying of source, or (2) access to copy the
    Corresponding Source from a network server at no charge.

    c) Convey individual copies of the object code with a copy of the
    written offer to provide the Corresponding Source.  This
    alternative is allowed only occasionally and noncommercially, and
    only if you received the object code with such an offer, in accord
    with subsection 6b.

    d) Convey the object code by offering access from a designated
    place (gratis or for a charge), and offer equivalent access to the
    Corresponding Source in the same way through the same place at no
    further charge.  You need not require recipients to copy the
    Corresponding Source along with the object code.  If the place to
    copy the object code is a network server, the Corresponding Source
    may be on a different server (operated by you or a third party)
    that supports equivalent copying facilities, provided you maintain
    clear directions next to the object code saying where to find the
    Corresponding Source.  Regardless of what server hosts the
    Corresponding Source, you remain obligated to ensure that it is
    available for as long as needed to satisfy these requirements.

    e) Convey the object code using peer-to-peer transmission, provided
    you inform other peers where the object code and Corresponding
    Source of the work are being offered to the general public at no
    charge under subsection 6d.

  A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be
included in conveying the object code work.

  A "User Product" is either (1) a "consumer product", which means any
tangible personal property which is normally used for personal, family,
or household purposes, or (2) anything designed or sold for incorporation
into a dwelling.  In determining whether a product is a consumer product,
doubtful cases shall be resolved in favor of coverage.  For a particular
product received by a particular user, "normally used" refers to a
typical or common use of that class of product, regardless of the status
of the particular user or of the way in which the particular user
actually uses, or expects or is expected to use, the product.  A product
is a consumer product regardless of whether the product has substantial
commercial, industrial or non-consumer uses, unless such uses represent
the only significant mode of use of the product.

  "Installation Information" for a User Product means any methods,
procedures, authorization keys, or other information required to install
and execute modified versions of a covered work in that User Product from
a modified version of its Corresponding Source.  The information must
suffice to ensure that the continued functioning of the modified object
code is in no case prevented or interfered with solely because
modification has been made.

  If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied
by the Installation Information.  But this requirement does not apply
if neither you nor any third party retains the ability to install
modified object code on the User Product (for example, the work has
been installed in ROM).

  The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or updates
for a work that has been modified or installed by the recipient, or for
the User Product in which it has been modified or installed.  Access to a
network may be denied when the modification itself materially and
adversely affects the operation of the network or violates the rules and
protocols for communication across the network.

  Corresponding Source conveyed, and Installation Information provided,
in accord with this section must be in a format that is publicly
documented (and with an implementation available to the public in
source code form), and must require no special password or key for
unpacking, reading or copying.

  7. Additional Terms.

  "Additional permissions" are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law.  If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by
this License without regard to the additional permissions.

  When you convey a copy of a covered work, you may at your option
remove any additional permissions from that copy, or from any part of
it.  (Additional permissions may be written to require their own
removal in certain cases when you modify the work.)  You may place
additional permissions on material, added by you to a covered work,
for which you have or can give appropriate copyright permission.

  Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders of
that material) supplement the terms of this License with terms:

    a) Disclaiming warranty or limiting liability differently from the
    terms of sections 15 and 16 of this License; or

    b) Requiring preservation of specified reasonable legal notices or
    author attributions in that material or in the Appropriate Legal
    Notices displayed by works containing it; or

    c) Prohibiting misrepresentation of the origin of that material, or
    requiring that modified versions of such material be marked in
    reasonable ways as different from the original version; or

    d) Limiting the use for publicity purposes of names of licensors or
    authors of the material; or

    e) Declining to grant rights under trademark law for use of some
    trade names, trademarks, or service marks; or

    f) Requiring indemnification of licensors and authors of that
    material by anyone who conveys the material (or modified versions of
    it) with contractual assumptions of liability to the recipient, for
    any liability that these contractual assumptions directly impose on
    those licensors and authors.

  All other non-permissive additional terms are considered "further
restrictions" within the meaning of section 10.  If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term.  If a license document contains
a further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms
of that license document, provided that the further restriction does
not survive such relicensing or conveying.

  If you add terms to a covered work in accord with this section, you
must place, in the relevant source files, a statement of the
additional terms that apply to those files, or a notice indicating
where to find the applicable terms.

  Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions;
the above requirements apply either way.

  8. Termination.

  You may not propagate or modify a covered work except as expressly
provided under this License.  Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).

  However, if you cease all violation of this License, then your
license from a particular copyright holder is reinstated (a)
provisionally, unless and until the copyright holder explicitly and
finally terminates your license, and (b) permanently, if the copyright
holder fails to notify you of the violation by some reasonable means
prior to 60 days after the cessation.

  Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

  Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.

  9. Acceptance Not Required for Having Copies.

  You are not required to accept this License in order to receive or
run a copy of the Program.  Ancillary propagation of a covered work
occurring solely as a consequence of using peer-to-peer transmission
to receive a copy likewise does not require acceptance.  However,
nothing other than this License grants you permission to propagate or
modify any covered work.  These actions infringe copyright if you do
not accept this License.  Therefore, by modifying or propagating a
covered work, you indicate your acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

  Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License.  You are not responsible
for enforcing compliance by third parties with this License.

  An "entity transaction" is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations.  If propagation of a covered
work results from an entity transaction, each party to that
transaction who receives a copy of the work also receives whatever
licenses to the work the party's predecessor in interest had or could
give under the previous paragraph, plus a right to possession of the
Corresponding Source of the work from the predecessor in interest, if
the predecessor has it or can get it with reasonable efforts.

  You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License.  For example, you may
not impose a license fee, royalty, or other charge for exercise of
rights granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that
any patent claim is infringed by making, using, selling, offering for
sale, or importing the Program or any portion of it.

  11. Patents.

  A "contributor" is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based.  The
work thus licensed is called the contributor's "contributor version".

  A contributor's "essential patent claims" are all patent claims
owned or controlled by the contributor, whether already acquired or
hereafter acquired, that would be infringed by some manner, permitted
by this License, of making, using, or selling its contributor version,
but do not include claims that would be infringed only as a
consequence of further modification of the contributor version.  For
purposes of this definition, "control" includes the right to grant
patent sublicenses in a manner consistent with the requirements of
this License.

  Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor's essential patent claims, to
make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.

  In the following three paragraphs, a "patent license" is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement).  To "grant" such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.

  If you convey a covered work, knowingly relying on a patent license,
and the Corresponding Source of the work is not available for anyone
to copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients.  "Knowingly relying" means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient's use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.

  If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify
or convey a specific copy of the covered work, then the patent license
you grant is automatically extended to all recipients of the covered
work and works based on it.

  A patent license is "discriminatory" if it does not include within
the scope of its coverage, prohibits the exercise of, or is
conditioned on the non-exercise of one or more of the rights that are
specifically granted under this License.  You may not convey a covered
work if you are a party to an arrangement with a third party that is
in the business of distributing software, under which you make payment
to the third party based on the extent of your activity of conveying
the work, and under which the third party grants, to any of the
parties who would receive the covered work from you, a discriminatory
patent license (a) in connection with copies of the covered work
conveyed by you (or copies made from those copies), or (b) primarily
for and in connection with specific products or compilations that
contain the covered work, unless you entered into that arrangement,
or that patent license was granted, prior to 28 March 2007.

  Nothing in this License shall be construed as excluding or limiting
any implied license or other defenses to infringement that may
otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

  If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot convey a
covered work so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you may
not convey it at all.  For example, if you agree to terms that obligate you
to collect a royalty for further conveying from those to whom you convey
the Program, the only way you could satisfy both those terms and this
License would be to refrain entirely from conveying the Program.

  13. Use with the GNU Affero General Public License.

  Notwithstanding any other provision of this License, you have
permission to link or combine any covered work with a work licensed
under version 3 of the GNU Affero General Public License into a single
combined work, and to convey the resulting work.  The terms of this
License will continue to apply to the part which is the covered work,
but the special requirements of the GNU Affero General Public License,
section 13, concerning interaction through a network will apply to the
combination as such.

  14. Revised Versions of this License.

  The Free Software Foundation may publish revised and/or new versions of
the GNU General Public License from time to time.  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

  Each version is given a distinguishing version number.  If the
Program specifies that a certain numbered version of the GNU General
Public License "or any later version" applies to it, you have the
option of following the terms and conditions either of that numbered
version or of any later version published by the Free Software
Foundation.  If the Program does not specify a version number of the
GNU General Public License, you may choose any version ever published
by the Free Software Foundation.

  If the Program specifies that a proxy can decide which future
versions of the GNU General Public License can be used, that proxy's
public statement of acceptance of a version permanently authorizes you
to choose that version for the Program.

  Later license versions may give you additional or different
permissions.  However, no additional obligations are imposed on any
author or copyright holder as a result of your choosing to follow a
later version.

  15. Disclaimer of Warranty.

  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

  If the disclaimer of warranty and limitation of liability provided
above cannot be given local legal effect according to their terms,
reviewing courts shall apply local law that most closely approximates
an absolute waiver of all civil liability in connection with the
Program, unless a warranty or assumption of liability accompanies a
copy of the Program in return for a fee.

                     END OF TERMS AND CONDITIONS

            How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

Also add information on how to contact you by electronic and paper mail.

  If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

    <program>  Copyright (C) <year>  <name of author>
    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
    This is free software, and you are welcome to redistribute it
    under certain conditions; type `show c' for details.

The hypothetical commands `show w' and `show c' should show the appropriate
parts of the General Public License.  Of course, your program's commands
might be different; for a GUI interface, you would use an "about box".

  You should also get your employer (if you work as a programmer) or school,
if any, to sign a "copyright disclaimer" for the program, if necessary.
For more information on this, and how to apply and follow the GNU GPL, see
<https://www.gnu.org/licenses/>.

  The GNU General Public License does not permit incorporating your program
into proprietary programs.  If your program is a subroutine library, you
may consider it more useful to permit linking proprietary applications with
the library.  If this is what you want to do, use the GNU Lesser General
Public License instead of this License.  But first, please read
<https://www.gnu.org/licenses/why-not-lgpl.html>.

================
File: portfolio.next/__tests__/apiServices.test.ts
================
// portfolio.next/__tests__/apiService.test.ts
import { fetchBlogEntries, fetchProjects } from "@/services/apiService";
global.fetch = jest.fn();

describe("API Service", () => {
  beforeEach(() => {
    (fetch as jest.Mock).mockClear();
  });

  it("fetchBlogEntries should return blog data", async () => {
    const fakeData = [{ title: "Test Blog", excerpt: "Test excerpt" }];
    (fetch as jest.Mock).mockResolvedValueOnce({
      ok: true,
      json: async () => fakeData,
    });

    const data = await fetchBlogEntries();
    expect(data).toEqual(fakeData);
    expect(fetch).toHaveBeenCalledWith(`${process.env.NEXT_PUBLIC_API_URL}/api/blogs`);
  });

  it("fetchProjects should return project data", async () => {
    const fakeData = [{ title: "Test Project", description: "Test description" }];
    (fetch as jest.Mock).mockResolvedValueOnce({
      ok: true,
      json: async () => fakeData,
    });

    const data = await fetchProjects();
    expect(data).toEqual(fakeData);
    expect(fetch).toHaveBeenCalledWith(`${process.env.NEXT_PUBLIC_API_URL}/api/projects`);
  });

  it("should throw an error if fetchBlogEntries response is not ok", async () => {
    (fetch as jest.Mock).mockResolvedValueOnce({
      ok: false,
      statusText: "Not Found",
    });

    await expect(fetchBlogEntries()).rejects.toThrow("Error fetching blog entries: Not Found");
  });
});

================
File: portfolio.next/__tests__/blogServices.test.ts
================
// portfolio.next/__tests__/blogService.test.ts
/// <reference types="jest" />
import { getBlog, BlogEntry } from "@/services/blogService";

global.fetch = jest.fn();

describe("Blog Service (Next.js)", () => {
  beforeEach(() => {
    (fetch as jest.Mock).mockClear();
  });

  it("should fetch a blog entry successfully", async () => {
    const fakeBlog: BlogEntry = {
      id: 1,
      title: "Test Blog",
      date: "2025-02-22",
      body: "<p>Test body</p>",
      link: "test-blog-1",
    };

    (fetch as jest.Mock).mockResolvedValueOnce({
      ok: true,
      json: async () => fakeBlog,
    });

    const blog = await getBlog("1");
    expect(blog).toEqual(fakeBlog);
    expect(fetch).toHaveBeenCalledWith(`${process.env.NEXT_PUBLIC_API_URL}/api/blogs/1`);
  });

  it("should return null if response is not ok", async () => {
    (fetch as jest.Mock).mockResolvedValueOnce({
      ok: false,
      statusText: "Not Found",
    });

    const blog = await getBlog("1");
    expect(blog).toBeNull();
  });

  it("should return null if an error occurs", async () => {
    (fetch as jest.Mock).mockRejectedValueOnce(new Error("Network Error"));
    const blog = await getBlog("1");
    expect(blog).toBeNull();
  });
});

================
File: portfolio.next/Dockerfile
================
# Use official Node.js 22 image as a base
FROM node:22-alpine AS builder

# Set working directory
WORKDIR /app

# Copy necessary files
COPY package.json package-lock.json tsconfig.json next.config.ts ./
COPY .env.production ./ 

# Install dependencies
RUN npm install --production

# Copy the entire source code
COPY . .

# Build the Next.js app
RUN npm run build 

# Use a smaller base image for production
FROM node:22-alpine

# Set working directory
WORKDIR /app

# Copy only necessary files from the builder stage
COPY --from=builder /app/package.json ./
COPY --from=builder /app/.next ./.next
COPY --from=builder /app/public ./public
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/.env.production ./  

# Set environment variables
ENV NODE_ENV=production
ENV PORT=3000

# Expose the port
EXPOSE 3000

# Start the Next.js server
CMD ["npm", "start"]

================
File: portfolio.next/eslint.config.mjs
================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;

================
File: portfolio.next/jest.config.js
================
module.exports = {
    preset: 'ts-jest',
    testEnvironment: 'jsdom',
    testMatch: ['**/__tests__/**/*.test.{ts,tsx}'],
    setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],
    moduleNameMapper: {
      "^@/(.*)$": "<rootDir>/src/$1"
    },
  };

================
File: portfolio.next/middleware.ts
================
import { NextRequest, NextResponse } from "next/server";

export function middleware(req: NextRequest) {
  // Example: Redirect users trying to access /admin if not authenticated
  const authToken = req.cookies.get("auth-token")?.value;
  if (!authToken && req.nextUrl.pathname.startsWith("/admin")) {
    return NextResponse.redirect(new URL("/login", req.url));
  }

  return NextResponse.next();
}

export const config = {
  matcher: ["/admin/:path*"], // Define which routes should trigger this middleware
};

================
File: portfolio.next/next-env.d.ts
================
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.

================
File: portfolio.next/next.config.js
================
/** @type {import('next').NextConfig} */
const path = require('path');

const basePath = process.env.NEXT_PUBLIC_BASE_PATH || '';

const nextConfig = {
  basePath,
  assetPrefix: basePath,
  trailingSlash: false,

  webpack: (config) => {
    config.resolve = config.resolve || {};
    config.resolve.alias = {
      ...config.resolve.alias,
      '@': path.resolve(__dirname, 'src'),
    };
    return config;
  },

  // Enforce basePath usage for images, fonts, and static files
  images: {
    loader: 'default',
    path: `${basePath}/_next/image/`,
    domains: ["azure.microsoft.com", "logos-world.net", "miro.medium.com"],
  },
};

module.exports = nextConfig; // ✅ Use module.exports instead of export default

================
File: portfolio.next/package.json
================
{
  "name": "portfolio.next",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev -H 0.0.0.0",
    "build": "next build",
    "start": "next start -H 0.0.0.0",
    "lint": "next lint",
    "test": "jest",
    "test:watch": "jest --watch"
  },
  "dependencies": {
    "@fortawesome/free-solid-svg-icons": "^6.7.2",
    "@fortawesome/react-fontawesome": "^0.2.2",
    "@tailwindcss/typography": "^0.5.16",
    "jest-environment-jsdom": "^29.7.0",
    "marked": "^15.0.7",
    "next": "^15.1.7",
    "react": "^19.0.0",
    "react-dom": "^19.0.0"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.2.0",
    "@types/jest": "^29.5.14",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.1.7",
    "jest": "^29.7.0",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "ts-jest": "^29.2.5",
    "typescript": "^5"
  }
}

================
File: portfolio.next/postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: portfolio.next/public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: portfolio.next/public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: portfolio.next/public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: portfolio.next/public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: portfolio.next/public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: portfolio.next/README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: portfolio.next/src/app/_not-found/page.tsx
================
export default function NotFound() {
    return (<div>
        <h1>Ooops</h1>
        <p>Could not find anything here.</p>
    </div>);
}

================
File: portfolio.next/src/app/[slug]/page.tsx
================
// portfolio.next/src/app/[slug]/page.tsx
import { notFound } from "next/navigation";
import { marked } from "marked";

interface PageProps {
  params: { slug: string };
}

async function fetchPage(slug: string) {
  const res = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/pages/${slug}`, { cache: "no-store" });
  if (!res.ok) return null;
  return res.json();
}

export default async function Page({ params }: PageProps) {
  const page = await fetchPage(params.slug);

  if (!page) {
    return notFound();
  }

  return (
    <div className="max-w-3xl mx-auto p-6">
      <h1 className="text-4xl font-bold mb-4">{page.title}</h1>
      <div className="prose" dangerouslySetInnerHTML={{ __html: marked.parse(page.content) }} />
    </div>
  );
}

================
File: portfolio.next/src/app/admin/analytics/page.tsx
================
// portfolio.next/src/app/admin/analytics/page.tsx
"use client";

import { useEffect, useState } from "react";
import { useAuth } from "@/context/AuthContext";

interface TelemetryData {
  users: number;
  blogPosts: number;
  projects: number;
  sessions: number;
  pageHits: number;
}
const apiUrl : string = process.env.NEXT_PUBLIC_API_URL || "http://localhost:5000";

export default function AnalyticsDashboard() {
  const [data, setData] = useState<TelemetryData | null>(null);
  const [error, setError] = useState<string | null>(null);
  const { isAuthenticated, user } = useAuth();

  useEffect(() => {
    async function fetchTelemetry() {
      try {
        const res = await fetch(`${apiUrl}/api/telemetry`, {
          credentials: "include",
        });
        if (!res.ok) throw new Error("Failed to fetch telemetry data");
        const telemetry = await res.json();
        setData(telemetry);
      } catch (err: unknown) { // ✅ Use "unknown" instead of "any"
        if (err instanceof Error) {
          setError(err.message);
        }
      }
    }
    if (isAuthenticated) fetchTelemetry();
  }, [isAuthenticated]);

  if (!isAuthenticated) return <p>You are not authenticated.</p>;
  if (!user?.isAdmin) return <p>Only admins can access this page.</p>;
  
  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-4">Analytics Dashboard</h1>
      {error && <p className="text-red-500">{error}</p>}
      {data ? (
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="bg-blue-500 text-white p-4 rounded">
            <h2 className="text-xl">Users</h2>
            <p className="text-3xl">{data.users}</p>
          </div>
          <div className="bg-green-500 text-white p-4 rounded">
            <h2 className="text-xl">Blog Posts</h2>
            <p className="text-3xl">{data.blogPosts}</p>
          </div>
          <div className="bg-purple-500 text-white p-4 rounded">
            <h2 className="text-xl">Projects</h2>
            <p className="text-3xl">{data.projects}</p>
          </div>
          <div className="bg-yellow-500 text-white p-4 rounded">
            <h2 className="text-xl">Sessions</h2>
            <p className="text-3xl">{data.sessions}</p>
          </div>
          <div className="bg-red-500 text-white p-4 rounded">
            <h2 className="text-xl">Page Hits</h2>
            <p className="text-3xl">{data.pageHits}</p>
          </div>
        </div>
      ) : (
        <p>Loading telemetry data...</p>
      )}
    </div>
  );
}

================
File: portfolio.next/src/app/admin/blogs/edit/[id]/page.tsx
================
import { redirect } from "next/navigation";
import { getAuthUser } from "@/services/authService";
import { getBlog } from "@/services/blogService";
import EditBlogEntry from "@/components/admin/EditBlogEntry";

export default async function EditBlogPage({ params }: { params: Promise<{ id: string } >}) {
  const {id} = await params;
  const user = await getAuthUser();
  
  if ( !id){
    return <p>Attempting to access blog without id?</p>
  }

  if (!user || !user.isAdmin) {
    const baseAddress = process.env.NEXT_PUBLIC_BASE_URL || "http://localhost:3000";
    redirect(`${baseAddress}/admin/login?returnUrl=%2Fadmin%2Fblogs%2Fedit%2F${id}`); // ✅ Redirect unauthorized users
  }

  const blog = await getBlog(id);
  if (!blog) redirect("/admin/blogs"); // ✅ Redirect if blog doesn't exist

  return <EditBlogEntry initialBlog={blog} />;
}

================
File: portfolio.next/src/app/admin/blogs/new/page.tsx
================
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { useAuth } from "@/context/AuthContext";

const apiUrl :string = process.env.NEXT_PUBLIC_API_URL || "http://localhost:5000";

export default function NewBlogEntry() {
  
  const [title, setTitle] = useState("");
  const [excerpt, setExcerpt] = useState("");
  const [body, setBody] = useState("");
  const [isDraft, setIsDraft] = useState(false);
  const [publishAt, setPublishAt] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);
  const router = useRouter();
  const { isAuthenticated, user } = useAuth();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    const blogData = { title, excerpt, body, isDraft, publishAt };

    try {
      const response = await fetch(`${apiUrl}/api/blogs`, {
        method: "POST",
        credentials: "include",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(blogData),
      });

      if (!response.ok) throw new Error("Failed to create blog post");

      router.push("/admin/blogs");
    } catch (err: unknown) { 
      if (err instanceof Error) {
        setError((err as Error).message);
      }
    }
  };

  if (!isAuthenticated) return <p>You are not authenticated.</p>;
  if (!user?.isAdmin) return <p>Only admins can access this page.</p>;

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-4">Create a New Blog Entry</h1>
      {error && <p className="text-red-500">{error}</p>}
      <form onSubmit={handleSubmit} className="space-y-4">
        <input
          type="text"
          placeholder="Title"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          className="w-full p-2 border rounded"
          required
        />
        <input
          type="text"
          placeholder="Excerpt"
          value={excerpt}
          onChange={(e) => setExcerpt(e.target.value)}
          className="w-full p-2 border rounded"
          required
        />
        <textarea
          placeholder="Body (Markdown supported)"
          value={body}
          onChange={(e) => setBody(e.target.value)}
          className="w-full p-2 border rounded h-40"
          required
        />
        <label className="block">
          <input
            type="checkbox"
            checked={isDraft}
            onChange={(e) => setIsDraft(e.target.checked)}
            className="mr-2"
          />
          Save as Draft
        </label>
        <label className="block">
          Publish Date:
          <input
            type="date"
            onChange={(e) => setPublishAt(e.target.value)}
            className="w-full p-2 border rounded"
          />
        </label>
        <button type="submit" className="px-4 py-2 bg-blue-500 text-white rounded">
          Save
        </button>
      </form>
    </div>
  );
}

================
File: portfolio.next/src/app/admin/blogs/page.tsx
================
import { redirect } from "next/navigation";
import { getAuthUser } from "@/services/authService";
import { getBlogs } from "@/services/blogService";
import BlogManagement from "@/components/admin/BlogManagement";

export default async function AdminBlogPage() {
  const user = await getAuthUser();

  if (!user || !user.isAdmin) {
    const baseAddress = process.env.NEXT_PUBLIC_BASE_URL || "http://localhost:3000";
    redirect(`${baseAddress}/admin/login?returnUrl=%2Fadmin%2Fblogs`); // ✅ Redirect instead of `notFound()`
  }

  const blogs = await getBlogs(); // Fetch blogs on the server

  return <BlogManagement initialBlogs={blogs || []} />;
}

================
File: portfolio.next/src/app/admin/career/edit/[id]/page.tsx
================
"use client";

import { useState, useEffect } from "react";
import { useRouter, useParams } from "next/navigation";
import { useAuth } from "@/context/AuthContext";
import { fetchCareerEntry, saveCareerEntry, fetchCareerTimeline } from "@/services/careerService";

interface CareerEntry {
  _id?: string;
  title: string;
  company?: string;
  startDate: string;
  endDate?: string | null;
  description?: string;
  skills: string[];
  linkedEntries: string[];
  importedFromLinkedIn: boolean;
}

export default function EditCareerEntry() {
  const router = useRouter();
  const params = useParams();
  const entryId = params.id as string | undefined;
  const { isAuthenticated, user } = useAuth();

  const [entry, setEntry] = useState<CareerEntry>({
    title: "",
    company: "",
    startDate: "",
    endDate: null,
    description: "",
    skills: [],
    linkedEntries: [],
    importedFromLinkedIn: false,
  });

  const [timelineEntries, setTimelineEntries] = useState<CareerEntry[]>([]);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    async function loadData() {
      try {
        if (entryId) {
            const existingEntry = await fetchCareerEntry(entryId);
            if (existingEntry) {
              setEntry({
                ...existingEntry,
                startDate: existingEntry.startDate ? new Date(existingEntry.startDate).toISOString().split("T")[0] : "",
                endDate: existingEntry.endDate ? new Date(existingEntry.endDate).toISOString().split("T")[0] : "",
              });
            }
          }
        const allEntries = await fetchCareerTimeline();
        setTimelineEntries(allEntries);
      } catch (err) {
        setError("Failed to load career timeline data.");
      }
    }

    if (isAuthenticated) loadData();
  }, [isAuthenticated, entryId]);

  async function handleSubmit(e: React.FormEvent) {
    e.preventDefault();
    try {
      await saveCareerEntry(entry);
      router.push("/admin/career");
    } catch (err) {
      setError("Failed to save career entry.");
    }
  }

  if (!isAuthenticated || !user?.isAdmin) return <p>Only admins can access this page.</p>;

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-4">{entryId ? "Edit Career Entry" : "Add Career Entry"}</h1>
      {error && <p className="text-red-500">{error}</p>}
      <form onSubmit={handleSubmit} className="space-y-4">
        <input
          type="text"
          placeholder="Title"
          value={entry.title}
          onChange={(e) => setEntry({ ...entry, title: e.target.value })}
          className="w-full p-2 border rounded"
          required
        />
        <input
          type="text"
          placeholder="Company"
          value={entry.company || ""}
          onChange={(e) => setEntry({ ...entry, company: e.target.value })}
          className="w-full p-2 border rounded"
        />
        <input
          type="date"
          value={entry.startDate}
          onChange={(e) => setEntry({ ...entry, startDate: e.target.value })}
          className="w-full p-2 border rounded"
          required
        />
        <input
          type="date"
          value={entry.endDate || ""}
          onChange={(e) => setEntry({ ...entry, endDate: e.target.value || null })}
          className="w-full p-2 border rounded"
        />
        <textarea
          placeholder="Description"
          value={entry.description || ""}
          onChange={(e) => setEntry({ ...entry, description: e.target.value })}
          className="w-full p-2 border rounded"
        />
        <input
          type="text"
          placeholder="Skills (comma-separated)"
          value={entry.skills.join(", ")}
          onChange={(e) => setEntry({ ...entry, skills: e.target.value.split(",").map((s) => s.trim()) })}
          className="w-full p-2 border rounded"
        />

        {/* Entry Linking Section */}
        <label className="block">
          Linked Entries:
          <select
            multiple
            value={entry.linkedEntries}
            onChange={(e) =>
              setEntry({ ...entry, linkedEntries: Array.from(e.target.selectedOptions, (opt) => opt.value) })
            }
            className="w-full p-2 border rounded"
          >
            {timelineEntries.map((t) => (
              <option key={t._id} value={t._id}>
                {t.title} ({t.company}) - {new Date(t.startDate).toLocaleDateString()}
              </option>
            ))}
          </select>
        </label>

        <button type="submit" className="px-4 py-2 bg-blue-500 text-white rounded">
          {entryId ? "Save Changes" : "Add Entry"}
        </button>
      </form>
    </div>
  );
}

================
File: portfolio.next/src/app/admin/career/linkedin/page.tsx
================
"use client"
import { useState } from "react";
import { parseLinkedInHTMLBackend, saveParsedJobs } from "@/services/careerService";
import { ParsedJob } from "@/models/ParsedJob";

export default function CareerTimelineAdmin() {
  const [rawHTML, setRawHTML] = useState("");
  const [parsedJobs, setParsedJobs] = useState<ParsedJob[]>([]);
  const [error, setError] = useState<string | null>(null);

  async function handleParseHTML() {
    if (!rawHTML.trim()) return alert("Paste your LinkedIn HTML first!");
    try {
      const jobs = await parseLinkedInHTMLBackend(rawHTML);
      setParsedJobs(jobs);
    } catch (err) {
      setError("Failed to parse LinkedIn data.");
    }
  }

  async function handleImportToBackend() {
    if (parsedJobs.length === 0) return alert("No parsed jobs to import!");

    try {
      await saveParsedJobs(parsedJobs);
      alert("Career entries imported successfully!");
    } catch (err) {
      setError("Failed to import LinkedIn data.");
    }
  }

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-4">Career Timeline Management</h1>

      <div className="mb-4">
        <p className="text-gray-600 mb-2">
          To import your LinkedIn career history:
        </p>
        <ol className="list-decimal list-inside text-gray-600 mb-2">
          <li>Go to your <strong>LinkedIn profile</strong> and open the Experience section.</li>
          <li>Right-click on the job list and select <strong>Inspect</strong>.</li>
          <li>Copy the HTML of the experience section.</li>
          <li>Paste it below.</li>
          <li>Click "Parse & Import".</li>
        </ol>

        <textarea
          value={rawHTML}
          onChange={(e) => setRawHTML(e.target.value)}
          placeholder="Paste your LinkedIn Experience HTML here..."
          className="w-full p-2 border rounded mb-2 h-60 font-mono"
        />

        <button onClick={handleParseHTML} className="mt-2 bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">
          Parse & Import
        </button>

        {parsedJobs.length > 0 && (
          <button onClick={handleImportToBackend} className="ml-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600">
            Save to Backend
          </button>
        )}
      </div>

      {parsedJobs.length > 0 && (
        <div className="mt-4">
          <h2 className="text-2xl font-bold mb-2">Parsed Jobs:</h2>
          <ul className="list-disc list-inside">
            {parsedJobs.map((job, index) => (
              <li key={index} className="mb-2">
                <strong>{job.title}</strong> at {job.company} ({job.startDate} - {job.endDate})
              </li>
            ))}
          </ul>
        </div>
      )}

      {error && <p className="text-red-500">{error}</p>}
    </div>
  );
}

================
File: portfolio.next/src/app/admin/career/page.tsx
================
"use client";

import { useState, useEffect } from "react";
import { useAuth } from "@/context/AuthContext";
import { fetchCareerTimeline, deleteCareerEntry } from "@/services/careerService";
import Link from "next/link";


interface CareerEntry {
  _id: string;
  title: string;
  company?: string;
  startDate: string;
  endDate?: string | null;
  skills: string[];
  linkedEntries: string[];
  importedFromLinkedIn: boolean;
}

export default function CareerTimelineAdmin() {
  const { isAuthenticated, user } = useAuth();
  const [timeline, setTimeline] = useState<CareerEntry[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    async function loadEntries() {
      try {
        const data = await fetchCareerTimeline();
        setTimeline(data);
      } catch (err) {
        setError("Failed to load career timeline.");
      } finally {
        setLoading(false);
      }
    }
    if (isAuthenticated) loadEntries();
  }, [isAuthenticated]);

  async function handleDelete(id: string) {
    if (!confirm("Are you sure you want to delete this entry?")) return;
    try {
      await deleteCareerEntry(id);
      setTimeline((prev) => prev.filter((entry) => entry._id !== id)); // ✅ Remove from UI
    } catch (err) {
      setError("Failed to delete entry.");
    }
  }
  

  if (!isAuthenticated || !user?.isAdmin) return <p>Only admins can access this page.</p>;
  if (loading) return <p>Loading...</p>;
  if (error) return <p className="text-red-500">{error}</p>;

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-4">Career Timeline Management</h1>

      {/* Import from LinkedIn Button */}
      <div className="flex justify-between mb-4">
        
        <Link href="/admin/career/linkedin" className="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600">
          Parse from Linkedin
        </Link>

        <Link href="/admin/career/edit/new" className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">
          + Add Entry
        </Link>
      </div>
      

      {/* Timeline Table */}
      <table className="w-full border-collapse border border-gray-300">
        <thead>
          <tr className="bg-gray-200">
            <th className="border p-2 text-left">Title</th>
            <th className="border p-2 text-left">Company</th>
            <th className="border p-2 text-left">Start Date</th>
            <th className="border p-2 text-left">End Date</th>
            <th className="border p-2 text-left">Skills</th>
            <th className="border p-2 text-left">Actions</th>
          </tr>
        </thead>
        <tbody>
          {timeline.map((entry) => (
            <tr key={entry._id} className="border">
              <td className="border p-2">
                {entry.title}
                {entry.importedFromLinkedIn && <span className="text-blue-500 text-sm ml-2">(LinkedIn)</span>}
              </td>
              <td className="border p-2">{entry.company || "-"}</td>
              <td className="border p-2">{new Date(entry.startDate).toLocaleDateString()}</td>
              <td className="border p-2">{entry.endDate ? new Date(entry.endDate).toLocaleDateString() : "Present"}</td>
              <td className="border p-2">{entry.skills.join(", ") || "-"}</td>
              <td className="border p-2">
                <Link href={`/admin/career/edit/${entry._id}`} className="text-blue-500 hover:underline mr-4">
                  Edit
                </Link>
                <button onClick={() => handleDelete(entry._id)} className="text-red-500 hover:underline">
                  Delete
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

================
File: portfolio.next/src/app/admin/comments/page.tsx
================
// portfolio.next/src/app/admin/comments/page.tsx
"use client";

import { useEffect, useState } from "react";
import { useAuth } from "@/context/AuthContext";
import Link from "next/link";

interface Comment {
  _id: string;
  author: string;
  text: string;
  createdAt: string;
  redacted: boolean;
  replies: Comment[];
}

export default function CommentManagement() {
  const [comments, setComments] = useState<Comment[]>([]);
  const [error, setError] = useState<string | null>(null);
  const { isAuthenticated, user } = useAuth();
  const apiUrl = process.env.NEXT_PUBLIC_API_URL;

  useEffect(() => {
    async function fetchComments() {
      try {
        const res = await fetch(`${apiUrl}/api/comments/all`, {
          credentials: "include",
        });
        if (!res.ok) throw new Error("Failed to fetch comments");
        const data = await res.json();
        setComments(data);
      } catch (err: unknown) { // ✅ Use unknown instead of any
        if (err instanceof Error) {
          setError(err.message);
        }
      }
    }
    if (isAuthenticated) fetchComments();
  }, [isAuthenticated, apiUrl]);

  const handleRedact = async (id: string) => {
    if (!confirm("Mark this comment as redacted?")) return;
    try {
      const res = await fetch(`${apiUrl}/api/comments/${id}`, {
        method: "DELETE",
        credentials: "include",
      });
      if (!res.ok) throw new Error("Redaction failed");
      // Update the local state to mark the comment as redacted.
      setComments(prev =>
        prev.map(c => (c._id === id ? { ...c, redacted: true } : c))
      );
    } catch (err: unknown) { // ✅ Use unknown instead of any
      if (err instanceof Error) {
        setError(err.message);
      }
    }
  };

  if (!isAuthenticated) return <p>You are not authenticated.</p>;
  if (!user?.isAdmin) return <p>Only admins can access this page.</p>;

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-4">Manage Comments</h1>
      {error && <p className="text-red-500">{error}</p>}
      <table className="w-full border-collapse border border-gray-300">
        <thead>
          <tr className="bg-gray-200">
            <th className="border p-2 text-left">Author</th>
            <th className="border p-2 text-left">Comment</th>
            <th className="border p-2 text-left">Date</th>
            <th className="border p-2 text-left">Status</th>
            <th className="border p-2 text-left">Actions</th>
          </tr>
        </thead>
        <tbody>
          {comments.map(comment => (
            <tr key={comment._id} className="border">
              <td className="border p-2">{comment.author}</td>
              <td className="border p-2">{comment.text}</td>
              <td className="border p-2">
                {new Date(comment.createdAt).toLocaleString()}
              </td>
              <td className="border p-2">
                {comment.redacted ? "Redacted" : "Active"}
              </td>
              <td className="border p-2">
                {!comment.redacted && (
                  <button
                    onClick={() => handleRedact(comment._id)}
                    className="text-red-500 hover:underline"
                  >
                    Redact
                  </button>
                )}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
      <Link href="/admin" className="text-blue-500 underline mt-4 inline-block">
        Back to Dashboard
      </Link>
    </div>
  );
}

================
File: portfolio.next/src/app/admin/files/page.tsx
================
import { getAuthUser } from "@/services/authService";
import FileWrapper from "@/components/admin/FileWrapper";

export default async function FileManagement() {

  const user = await getAuthUser();
  if (!user || !user.isAdmin) {
    return <p>You are not authorized to view this page.</p>;
  }

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-4">Global Files Management</h1>
      <p>These files will be systematically included in the embedding contexts, unless they are media files (images, music, videos, etc.)</p>
      <FileWrapper context="general" entityId="0" />
    </div>
  );
}

================
File: portfolio.next/src/app/admin/login/page.tsx
================
"use client";

import { useState, useEffect } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import Link from "next/link";
import { useAuth } from "@/context/AuthContext";

export default function AdminLogin() {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const router = useRouter();
  const searchParams = useSearchParams();
  const returnUrl = searchParams.get("returnUrl") || process.env.NEXT_PUBLIC_CLIENT_URL || "";

  // Get returnUrl from the query string, default to /admin if not provided
  // const returnUrl = window.location.href;
  const apiUrl = process.env.NEXT_PUBLIC_API_URL;
  const {isAuthenticated, login} = useAuth(); 

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");
    if ( await login(username, password)){
      if ( returnUrl){
        router.push(returnUrl);
      }
    } else {
      setError("Invalid credentials");
    }
  };

  useEffect(()=>{
    if ( isAuthenticated && searchParams && searchParams.get("returnUrl")){
      const dest = searchParams.get("returnUrl");
      console.log("should push to ", dest);
    }  
  }, [isAuthenticated, searchParams]);

  return (
    <div className="flex min-h-screen flex-col justify-center items-center bg-gray-100 space-y-6">
      {/* Traditional Login Form */}
      <form
        onSubmit={handleLogin}
        className="bg-white p-6 rounded-lg shadow-md w-full max-w-md"
      >
        <h2 className="text-2xl font-semibold mb-4 text-center">Admin Login</h2>
        {error && <p className="text-red-500 mb-4">{error}</p>}
        <input
          type="text"
          placeholder="Username"
          value={username}
          onChange={(e) => setUsername(e.target.value)}
          className="border p-2 w-full mb-2"
          required
        />
        <input
          type="password"
          placeholder="Password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          className="border p-2 w-full mb-4"
          required
        />
        <button type="submit" className="bg-blue-500 text-white px-4 py-2 rounded w-full">
          Login
        </button>
      </form>

      {/* OAuth2 Login Options */}
      <div className="bg-white p-6 rounded-lg shadow-md w-full max-w-md">
        <h3 className="text-xl font-semibold mb-4 text-center">Or Login with</h3>
        <div className="flex flex-col gap-2">
          <Link
            href={`${apiUrl}/api/auth/oauth2/google?returnUrl=${encodeURIComponent(returnUrl)}`}
            className="bg-red-500 text-white text-center py-2 rounded"
          >
            Login with Google
          </Link>
          <Link
            href={`${apiUrl}/api/auth/oauth2/facebook?returnUrl=${encodeURIComponent(returnUrl)}`}
            className="bg-blue-600 text-white text-center py-2 rounded"
          >
            Login with Facebook
          </Link>
          {/* <Link
            href={`${apiUrl}/api/auth/oauth2/github?returnUrl=${encodeURIComponent(returnUrl)}`}
            className="bg-gray-800 text-white text-center py-2 rounded"
          >
            Login with GitHub
          </Link>
          <Link
            href={`${apiUrl}/api/auth/oauth2/microsoft?returnUrl=${encodeURIComponent(returnUrl)}`}
            className="bg-blue-400 text-white text-center py-2 rounded"
          >
            Login with Microsoft
          </Link> */}
        </div>
      </div>
    </div>
  );
}

================
File: portfolio.next/src/app/admin/page.tsx
================
"use client";

import Link from "next/link";
import { useAuth } from "@/context/AuthContext";

export default function AdminDashboard() {
  const { isAuthenticated, isAdmin } = useAuth();

  if (!isAuthenticated) return <p>You are not authenticated.</p>;
  if (!isAdmin) return <p>Only admins can access this page.</p>;


  return (
    <div className="p-8 max-w-5xl mx-auto">
      <h1 className="text-4xl font-semibold mb-4">Admin Dashboard</h1>
      <p className="text-gray-600 mb-8">
        Welcome to the admin panel. Use the options below to manage your site.
      </p>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Link
          href="/admin/blogs"
          className="block p-4 border border-gray-300 rounded-lg hover:bg-gray-50 transition"
        >
          <h2 className="text-lg font-medium text-gray-800">Manage Blogs</h2>
          <p className="text-sm text-gray-500">Edit, create, and manage blog posts</p>
        </Link>
        <Link
          href="/admin/projects"
          className="block p-4 border border-gray-300 rounded-lg hover:bg-gray-50 transition"
        >
          <h2 className="text-lg font-medium text-gray-800">Manage Projects</h2>
          <p className="text-sm text-gray-500">Edit, create, and manage projects</p>
        </Link>
        <Link
          href="/admin/comments"
          className="block p-4 border border-gray-300 rounded-lg hover:bg-gray-50 transition"
        >
          <h2 className="text-lg font-medium text-gray-800">Manage Comments</h2>
          <p className="text-sm text-gray-500">Review and moderate user comments</p>
        </Link>
        <Link
          href="/admin/analytics"
          className="block p-4 border border-gray-300 rounded-lg hover:bg-gray-50 transition"
        >
          <h2 className="text-lg font-medium text-gray-800">Analytics Dashboard</h2>
          <p className="text-sm text-gray-500">View site metrics and performance data</p>
        </Link>
        <Link
          href="/admin/settings/provider-config"
          className="block p-4 border border-gray-300 rounded-lg hover:bg-gray-50 transition"
        >
          <h2 className="text-lg font-medium text-gray-800">OAuth Provider Config</h2>
          <p className="text-sm text-gray-500">Configure external identity providers</p>
        </Link>
        <Link
          href="/admin/users"
          className="block p-4 border border-gray-300 rounded-lg hover:bg-gray-50 transition"
        >
          <h2 className="text-lg font-medium text-gray-800">Manage Users</h2>
          <p className="text-sm text-gray-500">Edit, create and manage users</p>
        </Link>
        <Link href="/admin/settings/ai-model"
          className="block p-4 border border-gray-300 rounded-lg hover:bg-gray-50 transition"
        >
          <h2 className="text-lg font-medium text-gray-800">AI Model</h2>
          <p className="text-sm text-gray-500">Configure Artificial Intelligence Model</p>
        </Link>
        <Link href="/admin/files"
          className="block p-4 border border-gray-300 rounded-lg hover:bg-gray-50 transition"
        >
          <h2 className="text-lg font-medium text-gray-800">Global Files</h2>
          <p className="text-sm text-gray-500">Manage the global files to include in context</p>
        </Link>
        <Link href="/admin/career"
          className="block p-4 border border-gray-300 rounded-lg hover:bg-gray-50 transition"
        >
          <h2 className="text-lg font-medium text-gray-800">Manage Timeline</h2>
          <p className="text-sm text-gray-500">Add and update events on your timeline.</p>
        </Link>
        <Link href="/admin/pages"
          className="block p-4 border border-gray-300 rounded-lg hover:bg-gray-50 transition"
        >
          <h2 className="text-lg font-medium text-gray-800">Manage Custom Pages</h2>
          <p className="text-sm text-gray-500">Add and update Pages.</p>
        </Link>
      </div>
    </div>
  );
}

================
File: portfolio.next/src/app/admin/pages/page.tsx
================
"use client";
import { useState, useEffect } from "react";
import { fetchPages, createPage, updatePage, deletePage } from "@/services/pageService";

interface PageData {
  _id?: string;
  title: string;
  slug: string;
  content: string;
  tags: string[];
}

export default function AdminPages() {
  const [pages, setPages] = useState<PageData[]>([]);
  const [form, setForm] = useState<PageData>({ title: "", slug: "", content: "", tags: [] });
  const [editing, setEditing] = useState(false);

  useEffect(() => {
    async function loadPages() {
      setPages(await fetchPages());
    }
    loadPages();
  }, []);

  async function handleSubmit() {
    if (form._id) {
      await updatePage(form._id, form);
    } else {
      await createPage(form);
    }
    setPages(await fetchPages());
    setForm({ title: "", slug: "", content: "", tags: [] });
    setEditing(false);
  }

  async function handleDelete(id: string) {
    await deletePage(id);
    setPages(await fetchPages());
  }

  return (
    <div className="max-w-3xl mx-auto p-6">
      <h1 className="text-3xl font-bold mb-4">Manage Pages</h1>

      {editing ? (
        <div className="border p-4 rounded-lg shadow-md bg-white">
          <input
            className="border p-2 w-full"
            placeholder="Title"
            value={form.title}
            onChange={(e) => setForm({ ...form, title: e.target.value })}
          />
          <input
            className="border p-2 w-full mt-2"
            placeholder="Slug (URL-friendly)"
            value={form.slug}
            onChange={(e) => setForm({ ...form, slug: e.target.value })}
          />

          <textarea
            className="border p-2 w-full mt-2 h-40"
            placeholder="Content (Markdown supported)"
            value={form.content}
            onChange={(e) => setForm({ ...form, content: e.target.value })}
          />

          <input
            className="border p-2 w-full mt-2"
            placeholder="Tags (comma separated)"
            value={form.tags.join(", ")}
            onChange={(e) => setForm({ ...form, tags: e.target.value.split(",").map(tag => tag.trim()) })}
          />

          <div className="flex justify-between mt-4">
            <button onClick={handleSubmit} className="bg-blue-500 text-white px-4 py-2 rounded">Save</button>
            <button onClick={() => setEditing(false)} className="bg-gray-500 text-white px-4 py-2 rounded">Cancel</button>
          </div>
        </div>
      ) : (
        <button onClick={() => setEditing(true)} className="mb-4 bg-green-500 text-white px-4 py-2 rounded">
          Add New Page
        </button>
      )}

      <ul className="mt-4 space-y-2">
        {pages.map((page) => (
          <li key={page._id} className="flex justify-between items-center p-2 border rounded-md">
            <span>{page.title}</span>
            <div className="space-x-2">
              <button
                onClick={() => {
                  setForm(page);
                  setEditing(true);
                }}
                className="text-blue-500"
              >
                Edit
              </button>
              <button onClick={() => handleDelete(page._id!)} className="text-red-500">
                Delete
              </button>
            </div>
          </li>
        ))}
      </ul>
    </div>
  );
}

================
File: portfolio.next/src/app/admin/projects/edit/[id]/page.tsx
================
// portfolio.next/src/app/admin/projects/edit/[id]/page.tsx
"use client";

import { useEffect, useState } from "react";
import { useRouter, useParams } from "next/navigation";
import { useAuth } from "@/context/AuthContext";
import FileWrapper from "@/components/admin/FileWrapper";

const apiUrl = process.env.NEXT_PUBLIC_API_URL;

export default function EditProject() {
  const router = useRouter();
  const params = useParams() as { id?: string };  
  const [ projectId, setProjectId] = useState<string | null>(null);
  const [title, setTitle] = useState("");
  const [excerpt, setExcerpt] = useState("");
  const [description, setDescription] = useState("");
  const [image, setImage] = useState("");
  const [link, setLink] = useState("");
  const [isDraft, setIsDraft] = useState(false);
  const [publishAt, setPublishAt] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState(true);
  const [tags, setTags] = useState<string[]>([]);

  const { isAuthenticated, user } = useAuth();

  useEffect(() => {    

    if (!isAuthenticated) return;
    
    async function fetchProject(id : string) {
      setProjectId(id);
      try {
        const response = await fetch(`${apiUrl}/api/projects/${id}`);
        if (!response.ok) throw new Error("Failed to fetch project");
        const data = await response.json();        
        setTitle(data.title);
        setDescription(data.description);
        setImage(data.image);
        setLink(data.link);
        setIsDraft(data.isDraft);
        setExcerpt(data.excerpt);
        setTags(data.tags);
        setPublishAt(data.publishAt ? new Date(data.publishAt).toISOString().split("T")[0] : null);
        setLoading(false);
      } catch (err) {
        setError((err as Error).message);
        setLoading(false);
      }
    }

    const id = params.id;
    if ( id){
        fetchProject(id);
    }else{
      console.warn("attempted to access projects without an id");
    }

  }, [isAuthenticated, params.id]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const projectData = { title, excerpt, description, image, link, isDraft, publishAt, tags };
    try {
      const response = await fetch(`${apiUrl}/api/projects/${projectId}`, {
        method: "PUT",
        credentials: "include",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(projectData),
      });
      if (!response.ok) throw new Error("Failed to update project");
      router.push("/admin/projects");
    } catch (err) {
      setError((err as Error).message);
    }
  };

    if (loading) return <p>Loading...</p>;
    if (!isAuthenticated) return <p>You are not authenticated.</p>;
    if (!user?.isAdmin) return <p>Only admins can access this page.</p>;

  return (
    <>
      <h1 className="text-2xl font-bold mb-4">Edit Project</h1>
      {error && <p className="text-red-500">{error}</p>}
      <form onSubmit={handleSubmit} className="space-y-4">
        <input
          type="text"
          placeholder="Project Title"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          className="w-full p-2 border rounded"
          required
        />

        <input
          type="text"
          placeholder="Excerpt"
          value={excerpt}
          onChange={(e) => setExcerpt(e.target.value)}
          className="w-full p-2 border rounded"
          required
        />

        <textarea
          placeholder="Project Description"
          value={description}
          onChange={(e) => setDescription(e.target.value)}
          className="w-full p-2 border rounded h-32"
          required
        />
        <input
          type="text"
          placeholder="Image URL"
          value={image}
          onChange={(e) => setImage(e.target.value)}
          className="w-full p-2 border rounded"
        />
        <input
          type="text"
          placeholder="Project Link"
          value={link}
          onChange={(e) => setLink(e.target.value)}
          className="w-full p-2 border rounded"
        />
        <label className="block">
          <input
            type="checkbox"
            checked={isDraft}
            onChange={(e) => setIsDraft(e.target.checked)}
            className="mr-2"
          />
          Save as Draft
        </label>
        <label className="block">
          Publish Date:
          <input
            type="date"
            value={publishAt || ""}
            onChange={(e) => setPublishAt(e.target.value)}
            className="w-full p-2 border rounded"
          />
        </label>
        <input
          type="text"
          placeholder="Tags (comma-separated)"
          value={tags.join(", ")}
          onChange={(e) => setTags(e.target.value.split(",").map((t) => t.trim()))}
          className="w-full p-2 border rounded"
        />

        { projectId && <FileWrapper entityId={projectId} context="project" /> }

        <button type="submit" className="px-4 py-2 bg-blue-500 text-white rounded">
          Save Changes
        </button>
      </form>
    </>
  );
}

================
File: portfolio.next/src/app/admin/projects/new/page.tsx
================
// portfolio.next/src/app/admin/projects/new/page.tsx
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { useAuth } from "@/context/AuthContext";

const apiUrl = process.env.NEXT_PUBLIC_API_URL;

export default function NewProject() {
  const [title, setTitle] = useState("");
  const [excerpt, setExcerpt] = useState("");
  const [description, setDescription] = useState("");
  const [image, setImage] = useState("");
  const [link, setLink] = useState("");
  const [isDraft, setIsDraft] = useState(false);
  const [publishAt, setPublishAt] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [tags, setTags] = useState<string[]>([]);
  const [industry, setIndustry] = useState("General");
  const router = useRouter();
  const { isAuthenticated, user } = useAuth();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const projectData = { title, excerpt, description, image, link, isDraft, publishAt, tags, industry };
    try {
      const response = await fetch(`${apiUrl}/api/projects`, {
        method: "POST",
        credentials: "include",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(projectData),
      });
      if (!response.ok) throw new Error("Failed to create project");
      router.push("/admin/projects");
    } catch (err) {
      setError((err as Error).message);
    }
  };

  if (!isAuthenticated) return <p>You are not authenticated.</p>;
  if (!user?.isAdmin) return <p>Only admins can access this page.</p>;

  return (
    <>
      <h1 className="text-2xl font-bold mb-4">Add New Project</h1>
      {error && <p className="text-red-500">{error}</p>}
      <form onSubmit={handleSubmit} className="space-y-4">
        <input
          type="text"
          placeholder="Project Title"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          className="w-full p-2 border rounded"
          required
        />

        <input
          type="text"
          placeholder="Excerpt"
          value={excerpt}
          onChange={(e) => setExcerpt(e.target.value)}
          className="w-full p-2 border rounded"
          required
        />

        <textarea
          placeholder="Project Description"
          value={description}
          onChange={(e) => setDescription(e.target.value)}
          className="w-full p-2 border rounded h-32"
          required
        />
        <input
          type="text"
          placeholder="Image URL"
          value={image}
          onChange={(e) => setImage(e.target.value)}
          className="w-full p-2 border rounded"
        />
        <input
          type="text"
          placeholder="Project Link"
          value={link}
          onChange={(e) => setLink(e.target.value)}
          className="w-full p-2 border rounded"
        />
        <label className="block">
          <input
            type="checkbox"
            checked={isDraft}
            onChange={(e) => setIsDraft(e.target.checked)}
            className="mr-2"
          />
          Save as Draft
        </label>
        <label className="block">
          Publish Date:
          <input
            type="date"
            value={publishAt || ""}
            onChange={(e) => setPublishAt(e.target.value)}
            className="w-full p-2 border rounded"
          />
        </label>
        <input
          type="text"
          placeholder="Tags (comma-separated)"
          value={tags.join(", ")}
          onChange={(e) => setTags(e.target.value.split(",").map((t) => t.trim()))}
          className="w-full p-2 border rounded"
        />

        <select value={industry} onChange={(e) => setIndustry(e.target.value)} className="w-full p-2 border rounded">
          <option>General</option>
          <option>Healthcare</option>
          <option>Finance</option>
          <option>Education</option>
        </select>

        <button type="submit" className="px-4 py-2 bg-blue-500 text-white rounded">
          Create Project
        </button>
      </form>
    </>
  );
}

================
File: portfolio.next/src/app/admin/projects/page.tsx
================
"use client";

import { useEffect, useState } from "react";
import Link from "next/link";
import { useAuth } from "@/context/AuthContext";
import Image from "next/image";

const apiUrl = process.env.NEXT_PUBLIC_API_URL;

interface Project {
  _id: string;
  title: string;
  excerpt: string;
  image: string;
  link: string;
}

export default function ProjectManagement() {
  const [projects, setProjects] = useState<Project[]>([]);
  const [error, setError] = useState<string | null>(null);
  const { isAuthenticated, user } = useAuth();

  // Fetch projects once authenticated.
  useEffect(() => {
    if (!isAuthenticated) return;
    async function fetchProjects() {
      try {
        const response = await fetch(`${apiUrl}/api/projects`);
        if (!response.ok) throw new Error("Failed to fetch projects");
        const data = await response.json();
        setProjects(data);
      } catch (err) {
        setError((err as Error).message);
      }
    }
    fetchProjects();
  }, [isAuthenticated]);

  const handleDelete = async (id: string) => {
    if (!confirm("Are you sure you want to delete this project?")) return;
    try {
      const response = await fetch(`${apiUrl}/api/projects/${id}`, {
        method: "DELETE",
        credentials: "include",
      });
      if (!response.ok) throw new Error("Failed to delete project");
      setProjects((prev) => prev.filter((project) => project._id !== id));
    } catch (err) {
      setError((err as Error).message);
    }
  };

  if (!isAuthenticated) return <p>You are not authenticated.</p>;
  if (!user?.isAdmin) return <p>Only admins can access this page.</p>;

  return (
    <>
      <h1 className="text-3xl font-bold mb-6">Manage Projects</h1>
      <div className="flex justify-end mb-4">
        <Link
          href="/admin/projects/new"
          className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
        >
          + Add New Project
        </Link>
      </div>
      {error && <p className="text-red-500">{error}</p>}
      <table className="w-full border-collapse border border-gray-300">
        <thead>
          <tr className="bg-gray-200">
            <th className="border border-gray-300 p-2 text-left">Title</th>
            <th className="border border-gray-300 p-2 text-left">Excerpt</th>
            <th className="border border-gray-300 p-2 text-left">Image</th>
            <th className="border border-gray-300 p-2 text-left">Link</th>
            <th className="border border-gray-300 p-2 text-left">Actions</th>
          </tr>
        </thead>
        <tbody>
          {projects.map((project) => (
            <tr key={project._id} className="border border-gray-300">
              <td className="border border-gray-300 p-2">{project.title}</td>
              <td className="border border-gray-300 p-2">{project.excerpt}</td>
              <td className="border border-gray-300 p-2">
                {project.image &&
                <Image
                  src={project.image}
                  alt={project.title}
                  width={48}
                  height={48}
                  className="h-16 w-auto object-contain"
                />
                }
                {!project.image && <span>No image</span>}
              </td>
              <td className="border border-gray-300 p-2">
                <a
                  href={project.link}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="text-blue-500 hover:underline"
                >
                  View
                </a>
              </td>
              <td className="border border-gray-300 p-2">
                <Link
                  href={`/admin/projects/edit/${project._id}`}
                  className="text-blue-500 hover:underline mr-4"
                >
                  Edit
                </Link>
                <button
                  onClick={() => handleDelete(project._id)}
                  className="text-red-500 hover:underline"
                >
                  Delete
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </>
  );
}

================
File: portfolio.next/src/app/admin/settings/ai-model/page.tsx
================
import { redirect } from "next/navigation";
import { getAIConfig } from "@/services/aiService";
import AIModelSettings from "@/components/admin/AIModelSettings";
import { getAuthUser } from "@/services/authService";

export default async function AIModelSettingsPage() {
  const user = await getAuthUser();
  if (!user || !user.isAdmin) {
    const baseAddress = process.env.NEXT_PUBLIC_BASE_URL || "http://localhost:3000";
    redirect(`${baseAddress}/admin/login?returnUrl=%2Fadmin%2Fsettings%2Fai-model`);
  }
  else{
    const aiConfig = await getAIConfig();
    return <AIModelSettings initialConfig={aiConfig} />;
  }
}

================
File: portfolio.next/src/app/admin/settings/provider-config/page.tsx
================
"use client";

import { useState, useEffect } from "react";
import { useAuth } from "@/context/AuthContext";
import Link from "next/link";

interface ProviderConfig {
  _id?: string;
  provider: string;
  clientId: string;
  clientSecret: string;
  callbackURL: string;
}

export default function ProviderConfigPage() {
  const { isAuthenticated, user } = useAuth();
  const apiUrl = process.env.NEXT_PUBLIC_API_URL;
  const [configs, setConfigs] = useState<ProviderConfig[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [editingConfigs, setEditingConfigs] = useState<Record<string, ProviderConfig>>({});
  // const [newConfig, setNewConfig] = useState<ProviderConfig>({
  //   provider: "",
  //   clientId: "",
  //   clientSecret: "",
  //   callbackURL: "",
  // });

  useEffect(() => {
    async function fetchConfigs() {
      try {
        const res = await fetch(`${apiUrl}/api/provider-configs`, { credentials: "include" });
        if (!res.ok) throw new Error("Failed to fetch provider configurations");
        const data = await res.json();
        setConfigs(data);
        const initialEditing: Record<string, ProviderConfig> = {};
        data.forEach((config: ProviderConfig) => {
          initialEditing[config.provider] = config;
        });
        setEditingConfigs(initialEditing);
        setLoading(false);
      } catch (err: unknown) { // ✅ Use unknown instead of any
        if (err instanceof Error) {
          setError(err.message);
        } else {
          setError("An unexpected error occurred while fetching provider configurations.");
        }
        setLoading(false);
      }
    }

    if (isAuthenticated) fetchConfigs();
  }, [apiUrl, isAuthenticated]);

  const handleChange = (provider: string, field: keyof ProviderConfig, value: string) => {
    setEditingConfigs((prev) => ({
      ...prev,
      [provider]: {
        ...prev[provider],
        [field]: value,
      },
    }));
  };

  const handleSave = async (provider: string) => {
    try {
      const configToSave = editingConfigs[provider];
      const res = await fetch(`${apiUrl}/api/provider-configs/${provider}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        credentials: "include",
        body: JSON.stringify(configToSave),
      });
      if (!res.ok) {
        const errData = await res.json();
        throw new Error(errData.error || "Failed to update configuration");
      }
      const updatedConfig = await res.json();
      setConfigs((prev) => prev.map((c) => (c.provider === provider ? updatedConfig : c)));
      alert(`Configuration for ${provider} updated. A restart may be required to apply changes.`);
    } catch (err: unknown) { // ✅ Use unknown instead of any
      if (err instanceof Error) {
        setError(err.message);
      } else {
        setError("An unexpected error occurred while saving the configuration.");
      }
    }
  };
/*
  const handleNewChange = (field: keyof ProviderConfig, value: string) => {
    setNewConfig((prev) => ({
      ...prev,
      [field]: value,
    }));
  };
  const handleNewSave = async () => {
    if (!newConfig.provider) {
      setError("Provider field is required for new configuration.");
      return;
    }
    try {
      const res = await fetch(`${apiUrl}/api/provider-configs/${newConfig.provider}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        credentials: "include",
        body: JSON.stringify(newConfig),
      });
      if (!res.ok) {
        const errData = await res.json();
        throw new Error(errData.error || "Failed to create new configuration");
      }
      const createdConfig = await res.json();
      setConfigs((prev) => [...prev, createdConfig]);
      setEditingConfigs((prev) => ({ ...prev, [createdConfig.provider]: createdConfig }));
      setNewConfig({ provider: "", clientId: "", clientSecret: "", callbackURL: "" });
    } catch (err: unknown) { // ✅ Use unknown instead of any
      if (err instanceof Error) {
        setError(err.message);
      } else {
        setError("An unexpected error occurred while creating a new configuration.");
      }
    }
  };*/

  if (loading) return <p>Loading provider configurations...</p>;
  if (!isAuthenticated) return <p>You are not authenticated.</p>;
  if (!user?.isAdmin) return <p>Only admins can access this page.</p>;

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-4">OAuth2/OIDC Provider Configuration</h1>
      {error && <p className="text-red-500">{error}</p>}

      <table className="w-full border-collapse border border-gray-300 mb-4">
        <thead>
          <tr className="bg-gray-200">
            <th className="border p-2 text-left">Provider</th>
            <th className="border p-2 text-left">Client ID</th>
            <th className="border p-2 text-left">Client Secret</th>
            <th className="border p-2 text-left">Callback URL</th>
            <th className="border p-2 text-left">Actions</th>
          </tr>
        </thead>
        <tbody>
          {configs.map((config) => (
            <tr key={config.provider}>
              <td className="border p-2">{config.provider}</td>
              <td className="border p-2">
                <input
                  type="text"
                  value={editingConfigs[config.provider]?.clientId || ""}
                  onChange={(e) => handleChange(config.provider, "clientId", e.target.value)}
                  className="w-full p-1 border rounded"
                />
              </td>
              <td className="border p-2">
                <input
                  type="password"
                  value={editingConfigs[config.provider]?.clientSecret || ""}
                  onChange={(e) => handleChange(config.provider, "clientSecret", e.target.value)}
                  className="w-full p-1 border rounded"
                />
              </td>
              <td className="border p-2">
                <input
                  type="text"
                  value={editingConfigs[config.provider]?.callbackURL || ""}
                  onChange={(e) => handleChange(config.provider, "callbackURL", e.target.value)}
                  className="w-full p-1 border rounded"
                />
              </td>
              <td className="border p-2">
                <button
                  onClick={() => handleSave(config.provider)}
                  className="bg-blue-500 text-white px-3 py-1 rounded"
                >
                  Save
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      <Link href="/admin" className="text-blue-500 underline">
        Back to Dashboard
      </Link>
    </div>
  );
}

================
File: portfolio.next/src/app/admin/setup/page.tsx
================
"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";

export default function AdminSetup() {
  const [adminExists, setAdminExists] = useState<boolean | null>(null);
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const router = useRouter();
  const apiUrl = process.env.NEXT_PUBLIC_API_URL;

  useEffect(() => {
    async function checkAdmin() {
      try {
        const res = await fetch(`${apiUrl}/api/users/admin-exists`, {
          credentials: "include",
        });
        const data = await res.json();
        setAdminExists(data.exists);
        if (data.exists) {
          console.log("Admin already exists");
          // If an admin exists, redirect to the admin dashboard.
          router.push("/admin");
        }else{
          console.log("Should creste new admin");
        }
      } catch (err: unknown) { // ✅ Use "unknown" instead of "any"
        if (err instanceof Error) {
          console.error(err.message);
          setError(err.message);
        } else {
          console.error("Error checking admin status", err);
          setError("Error checking admin status");
        }
      }
    }
    checkAdmin();
  }, [apiUrl, router]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");
    try {
      // Use our existing user registration endpoint to create an admin.
      const res = await fetch(`${apiUrl}/api/users/initialize`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ username, password, isAdmin: true }),
      });
      if (!res.ok) {
        const errData = await res.json();
        throw new Error(errData.error || "Admin creation failed");
      }
      router.push("/admin/login");
    } catch (err: unknown) { // ✅ Use "unknown" instead of "any"
      if (err instanceof Error) {
        setError(err.message);
      } else {
        setError("An unknown error occurred.");
      }
    }
  };

  if (adminExists === null) {
    return <p>Loading...</p>;
  }

  return (
    <div className="p-6 max-w-md mx-auto">
      <h1 className="text-3xl font-bold mb-4">Admin Setup</h1>
      {error && <p className="text-red-500 mb-4">{error}</p>}
      <form onSubmit={handleSubmit} className="space-y-4">
        <input
          type="text"
          placeholder="Admin Username"
          value={username}
          onChange={(e) => setUsername(e.target.value)}
          className="w-full p-2 border rounded"
          required
        />
        <input
          type="password"
          placeholder="Admin Password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          className="w-full p-2 border rounded"
          required
        />
        <button type="submit" className="bg-blue-500 text-white px-4 py-2 rounded">
          Create Admin Account
        </button>
      </form>
    </div>
  );
}

================
File: portfolio.next/src/app/admin/temp-layout.tsx
================
import type { ReactNode } from "react";
import Header from "@/components/Header";
import Footer from "@/components/Footer";

export default function AdminLayout({ children }: { children: ReactNode }) {
  return (
    <div className="flex flex-col min-h-screen">
      <Header />
      <main className="flex-grow p-6">{children}</main>
      <Footer />
    </div>
  );
}

================
File: portfolio.next/src/app/admin/users/page.tsx
================
"use client";

import { useEffect, useState } from "react";
import { useAuth } from "@/context/AuthContext";

interface User {
  _id: string;
  username: string;
  isAdmin: boolean;
}

export default function UserManagement() {
  const { isAuthenticated, isAdmin } = useAuth();
  const [users, setUsers] = useState<User[]>([]);
  const [error, setError] = useState<string | null>(null);
  const apiUrl = process.env.NEXT_PUBLIC_API_URL;

  useEffect(() => {
    if (!isAuthenticated || !isAdmin) return;

    async function fetchUsers() {
      try {
        const res = await fetch(`${apiUrl}/api/users`, {
          credentials: "include",
        });
        if (!res.ok) throw new Error("Failed to fetch users");
        const data = await res.json();
        setUsers(data);
      } catch (err) {
        setError((err as Error).message);
      }
    }

    fetchUsers();
  }, [isAuthenticated, isAdmin, apiUrl]);

  const toggleAdmin = async (id: string) => {
    try {
      const user = users.find((u) => u._id === id);
      if (!user) return;
      
      const updatedUser = { ...user, isAdmin: !user.isAdmin };
      const res = await fetch(`${apiUrl}/api/users/${id}`, {
        method: "PUT",
        credentials: "include",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(updatedUser),
      });

      if (!res.ok) throw new Error("Failed to update user");
      setUsers(users.map((u) => (u._id === id ? updatedUser : u)));
    } catch (err) {
      setError((err as Error).message);
    }
  };

  const deleteUser = async (id: string) => {
    if (!confirm("Are you sure you want to delete this user?")) return;

    try {
      const res = await fetch(`${apiUrl}/api/users/${id}`, {
        method: "DELETE",
        credentials: "include",
      });

      if (!res.ok) throw new Error("Failed to delete user");
      setUsers(users.filter((u) => u._id !== id));
    } catch (err) {
      setError((err as Error).message);
    }
  };

  if (!isAuthenticated) return <p>You are not authenticated.</p>;
  if (!isAdmin) return <p>Only admins can access this page.</p>;

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-4">Manage Users</h1>
      {error && <p className="text-red-500">{error}</p>}
      <table className="w-full border-collapse border border-gray-300">
        <thead>
          <tr className="bg-gray-200">
            <th className="border p-2 text-left">Username</th>
            <th className="border p-2 text-left">Role</th>
            <th className="border p-2 text-left">Actions</th>
          </tr>
        </thead>
        <tbody>
          {users.map((user) => (
            <tr key={user._id} className="border">
              <td className="border p-2">{user.username}</td>
              <td className="border p-2">{user.isAdmin ? "Admin" : "User"}</td>
              <td className="border p-2">
                <button
                  onClick={() => toggleAdmin(user._id)}
                  className="text-blue-500 hover:underline mr-4"
                >
                  {user.isAdmin ? "Demote to User" : "Promote to Admin"}
                </button>
                <button
                  onClick={() => deleteUser(user._id)}
                  className="text-red-500 hover:underline"
                  disabled={user.isAdmin} // Prevent deleting admins for now
                >
                  Delete
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

================
File: portfolio.next/src/app/blogs/[slug]/page.tsx
================
import { notFound } from "next/navigation";
import { getBlog } from "@/services/blogService";
import { BlogEntry } from "@/models/BlogEntry";
import BlogView from "@/components/BlogView";

const BlogPage = async ({params,}: {params: Promise<{ slug: string }>}) => {
  
  const { slug } = await params;

  if (!slug) return notFound();

  const id = slug.toString().split("-").pop(); // Extract the last part as the ID
  if (!id) return notFound();

  const blog: BlogEntry | null = await getBlog(id);
  if (!blog) return notFound();

  return <BlogView blog={blog} />;
};

export default BlogPage;

================
File: portfolio.next/src/app/career/page.tsx
================
// portfolio.next/src/app/career/page.tsx
import CareerTimeline from "@/components/CareerTimeline";

export default function CareerPage() {
  return (
    <div className="max-w-4xl mx-auto py-8">
      <h1 className="text-2xl font-bold mb-4">Career Timeline</h1>
      <CareerTimeline />
    </div>
  );
}

================
File: portfolio.next/src/app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
}

body.compact-view main {
  max-width: 800px;
  margin: auto;
}

body.full-view main {
  max-width: 100%;
}

================
File: portfolio.next/src/app/layout.tsx
================
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import Header from "@/components/Header";
import Footer from "@/components/Footer";
import { AuthProvider } from "@/context/AuthContext";
import ChatWrapper from "@/components/ChatWrapper";
import Search from "@/components/Search";
import { SearchProvider } from "@/context/SearchContext";
import { ChatProvider } from "@/context/ChatContext";
import { Suspense } from "react";
const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
        <Suspense>
      <AuthProvider>
        <ChatProvider>
        <SearchProvider>
        <Header />
        <main className="p-6 mx-auto w-full max-w-lg md:max-w-2xl lg:max-w-4xl xl:max-w-7xl">
        <Search />
        {children}
        </main>
        <Footer />
        <ChatWrapper />
        </SearchProvider>
        </ChatProvider>
        </AuthProvider>
        </Suspense>
      </body>
    </html>
  );
}

================
File: portfolio.next/src/app/page.tsx
================
import { getHomePageData } from "@/services/homePageService";
import Home from "@/components/Home"; // Move UI logic to a client component

export default async function Page() {
  const { blogs, projects } = await getHomePageData(); // Fetch on the server

  return <Home blogs={blogs} projects={projects} />;
}

================
File: portfolio.next/src/app/privacy-policy/page.tsx
================
// app/policy-privacy/page.tsx
"use client";

export default function PrivacyPolicy() {
  return (
    <div className="p-6 max-w-3xl mx-auto">
      <h1 className="text-4xl font-bold mb-4">Privacy Policy</h1>
      <p className="mb-4">
        This Privacy Policy describes how we collect, use, and protect your personal information when you visit and use this website.
      </p>

      <h2 className="text-2xl font-semibold mb-2">Information We Collect</h2>
      <p className="mb-4">
        We are committed to respecting your privacy. We do not track or record any personal information beyond what is voluntarily provided by you. The only information we collect is your email address, which is used solely as a reference for posting comments. We do not use your email address for any other purpose.
      </p>

      <h2 className="text-2xl font-semibold mb-2">How We Use Your Information</h2>
      <p className="mb-4">
        The email address you provide is used to associate your comment with your identity on our site. We do not sell, share, or distribute your email address or any personal information to third parties. Your information is used solely to help prevent spam and maintain the integrity of our comment system.
      </p>

      <h2 className="text-2xl font-semibold mb-2">Tracking and Cookies</h2>
      <p className="mb-4">
        We do not use any tracking mechanisms or cookies that would allow us to monitor your browsing behavior or gather additional personal data. Our goal is to provide you with a secure and private experience.
      </p>

      <h2 className="text-2xl font-semibold mb-2">Security</h2>
      <p className="mb-4">
        We take reasonable precautions to protect your personal information. However, please be aware that no method of transmission over the internet or method of electronic storage is 100% secure.
      </p>

      <h2 className="text-2xl font-semibold mb-2">Changes to This Privacy Policy</h2>
      <p className="mb-4">
        We may update this Privacy Policy from time to time. Any changes will be posted on this page along with an updated effective date.
      </p>

      <h2 className="text-2xl font-semibold mb-2">Contact Us</h2>
      <p className="mb-4">
        If you have any questions about this Privacy Policy, please contact us through the contact form on our website.
      </p>

      <p className="text-sm text-gray-500">Effective Date: March 1st, 2025</p>
    </div>
  );
}

================
File: portfolio.next/src/app/projects/[id]/page.tsx
================
import { notFound } from "next/navigation";
import { getProject } from "@/services/projectService";
import { Project } from "@/models/Project";
import ProjectView from "@/components/ProjectView";

export default async function ProjectPage({ params }: { params: Promise<{ id: string } >}) {
  const {id} = await params;

  if (!id) return notFound();

  const project: Project | null = await getProject(id); // Fetch on the server

  if (!project) return notFound();

  return <ProjectView project={project} />;
}

================
File: portfolio.next/src/components/admin/AIModelSettings.tsx
================
"use client";

import { useState } from "react";
import { updateAIConfig } from "@/services/aiService";

interface AIConfig {
  provider: "ollama" | "openai";
  clientId?: string;
  clientSecret?: string;
}

export default function AIModelSettings({ initialConfig }: { initialConfig: AIConfig }) {
  const [aiConfig, setAIConfig] = useState<AIConfig>(initialConfig);
  const [error, setError] = useState<string | null>(null);

  const handleSave = async () => {
    try {
      await updateAIConfig(aiConfig);
      alert("AI Model Updated Successfully");
    } catch (err) {
      setError((err as Error).message);
    }
  };

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-4">AI Model Settings</h1>
      {error && <p className="text-red-500">{error}</p>}

      <label className="block mb-4">
        Select AI Provider:
        <select
          value={aiConfig.provider}
          onChange={(e) => setAIConfig({ ...aiConfig, provider: e.target.value as "ollama" | "openai" })}
          className="w-full p-2 border rounded mt-2"
        >
          <option value="ollama">Ollama</option>
          <option value="openai">OpenAI</option>
        </select>
      </label>

      {aiConfig.provider === "openai" && (
        <>
          <label className="block mb-4">
            OpenAI Client ID:
            <input
              type="text"
              value={aiConfig.clientId || ""}
              onChange={(e) => setAIConfig({ ...aiConfig, clientId: e.target.value })}
              className="w-full p-2 border rounded mt-2"
            />
          </label>
          <label className="block mb-4">
            OpenAI Client Secret:
            <input
              type="password"
              value={aiConfig.clientSecret || ""}
              onChange={(e) => setAIConfig({ ...aiConfig, clientSecret: e.target.value })}
              className="w-full p-2 border rounded mt-2"
            />
          </label>
        </>
      )}

      <button onClick={handleSave} className="bg-blue-500 text-white px-4 py-2 rounded">
        Save Settings
      </button>
    </div>
  );
}

================
File: portfolio.next/src/components/admin/BlogManagement.tsx
================
"use client";
import { useState } from "react";
import Link from "next/link";
import { archiveBlog } from "@/services/blogService";
import { BlogEntry } from "@/models/BlogEntry";

export default function BlogManagement({ initialBlogs }: { initialBlogs: BlogEntry[] }) {
  const [blogs, setBlogs] = useState<BlogEntry[]>(initialBlogs);
  const [error, setError] = useState<string | null>(null);

  const handleArchive = async (id: string) => {
    if (!confirm("Are you sure you want to archive this blog post?")) return;

    try {
      await archiveBlog(id);
      setBlogs((prevBlogs) => prevBlogs.filter((blog) => blog._id !== id)); // ✅ Remove blog from UI
    } catch (err) {
      setError((err as Error).message);
    }
  };

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-6">Manage Blog Posts</h1>

      <div className="flex justify-end mb-4">
        <Link
          href="/admin/blogs/new"
          className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
        >
          + Add New Blog
        </Link>
      </div>

      {error && <p className="text-red-500">{error}</p>}

      <table className="w-full border-collapse border border-gray-300">
        <thead>
          <tr className="bg-gray-200">
            <th className="border border-gray-300 p-2 text-left">Title</th>
            <th className="border border-gray-300 p-2 text-left">Status</th>
            <th className="border border-gray-300 p-2 text-left">Actions</th>
          </tr>
        </thead>
        <tbody>
          {blogs.map((blog) => (
            <tr key={blog._id} className="border border-gray-300">
              <td className="border border-gray-300 p-2">{blog.title}</td>
              <td className="border border-gray-300 p-2">
                {blog.isDraft ? "Draft" : "Published"}
                {blog.publishAt ? ` (Scheduled: ${new Date(blog.publishAt).toLocaleDateString()})` : ""}
              </td>
              <td className="border border-gray-300 p-2">
                <Link
                  href={`/admin/blogs/edit/${blog._id}`}
                  className="text-blue-500 hover:underline mr-4"
                >
                  Edit
                </Link>
                <button
                  onClick={() => handleArchive(blog._id)}
                  className="text-red-500 hover:underline"
                >
                  Archive
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

================
File: portfolio.next/src/components/admin/EditBlogEntry.tsx
================
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { updateBlog } from "@/services/blogService";
import { marked } from "marked";
import { BlogEntry } from "@/models/BlogEntry";
import FileWrapper from "./FileWrapper";

export default function EditBlogEntry({ initialBlog }: { initialBlog: BlogEntry }) {
  const router = useRouter();
  const [title, setTitle] = useState(initialBlog.title);
  const [excerpt, setExcerpt] = useState(initialBlog.excerpt);
  const [body, setBody] = useState(initialBlog.body);
  const [isDraft, setIsDraft] = useState(initialBlog.isDraft);
  const [tags, setTags] = useState<string[]>(initialBlog.tags);
  const [publishAt, setPublishAt] = useState<string | null>(
    initialBlog.publishAt ? new Date(initialBlog.publishAt).toISOString().split("T")[0] : "null"
  );
  const [error, setError] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState<"edit" | "preview">("edit");

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const blogData = { title, excerpt, body, isDraft, publishAt, tags };

    try {
      await updateBlog(initialBlog._id, blogData);
      router.push("/admin/blogs"); // ✅ Redirect to blog list after update
    } catch (err) {
      setError((err as Error).message);
    }
  };

  return (
    <>
      <h1 className="text-2xl font-bold mb-4">Edit Blog Entry</h1>
      {error && <p className="text-red-500">{error}</p>}
      <form onSubmit={handleSubmit} className="space-y-4">
        <input
          type="text"
          placeholder="Title"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          className="w-full p-2 border rounded"
          required
        />
        <input
          type="text"
          placeholder="Excerpt"
          value={excerpt}
          onChange={(e) => setExcerpt(e.target.value)}
          className="w-full p-2 border rounded"
          required
        />

        {/* Tab Selector */}
        <div className="flex border-b mb-2">
          <button
            type="button"
            className={`p-2 ${activeTab === "edit" ? "border-b-2 border-blue-500 font-bold" : "text-gray-500"}`}
            onClick={() => setActiveTab("edit")}
          >
            Edit
          </button>
          <button
            type="button"
            className={`p-2 ${activeTab === "preview" ? "border-b-2 border-blue-500 font-bold" : "text-gray-500"}`}
            onClick={() => setActiveTab("preview")}
          >
            Preview
          </button>
        </div>

        {/* Markdown Editor / Preview */}
        {activeTab === "edit" ? (
          <textarea
            placeholder="Body (Markdown supported)"
            value={body}
            onChange={(e) => setBody(e.target.value)}
            className="w-full p-2 border rounded h-40"
            required
          />
        ) : (
          <div
            className="w-full p-2 border rounded h-40 bg-gray-100 overflow-auto prose max-w-none"
            dangerouslySetInnerHTML={{ __html: marked.parse(body) }}
          />
        )}

        <label className="block">
          <input
            type="checkbox"
            checked={isDraft}
            onChange={(e) => setIsDraft(e.target.checked)}
            className="mr-2"
          />
          Save as Draft
        </label>
        <label className="block">
          Publish Date:
          <input
            type="date"
            value={publishAt || ""}
            onChange={(e) => setPublishAt(e.target.value)}
            className="w-full p-2 border rounded"
          />
        </label>

        <input
          type="text"
          placeholder="Tags (comma-separated)"
          value={tags.join(", ")}
          onChange={(e) => setTags(e.target.value.split(",").map((t) => t.trim()))}
          className="w-full p-2 border rounded"
        />


        { initialBlog._id && <FileWrapper entityId={initialBlog._id} context="blog" /> }
        <button type="submit" className="px-4 py-2 bg-blue-500 text-white rounded">
          Save Changes
        </button>
      </form>
    </>
  );
}

================
File: portfolio.next/src/components/admin/FileList.tsx
================
"use client";

import { useState, useEffect } from "react";
import { fetchFiles, deleteFile } from "@/services/fileService";
import { FileInfo } from "@/models/FileInfo";
import { useAuth } from "@/context/AuthContext";

export default function FileList({ entityId, context, refreshFiles }: { 
  entityId: string; 
  context: string;
  refreshFiles: () => void; // ✅ Function to refresh file list
}) {
  const [files, setFiles] = useState<FileInfo[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const { user } = useAuth();

  useEffect(() => {
    async function loadFiles() {
      try {
        const data = await fetchFiles(entityId, context);
        setFiles(data);
      } catch (err) {
        console.error(err);
        setError("Failed to load files.");
      } finally {
        setLoading(false);
      }
    }
    loadFiles();
  }, [entityId, context]);

  async function handleDelete(fileId: string) {
    if (!window.confirm("Are you sure you want to delete this file?")) return;

    try {
      await deleteFile(fileId);
      refreshFiles(); // ✅ Trigger a fresh fetch instead of manual filtering
    } catch (err) {
      console.error(err);
      alert("Failed to delete file.");
    }
  }

  if (loading) return <p>Loading files...</p>;
  if (error) return <p className="text-red-500">{error}</p>;
  if (files.length === 0) return <p>No files uploaded yet.</p>;

  return (
    <div className="p-4 border rounded mt-4">
      <h2 className="text-lg font-bold mb-2">Attached Files</h2>
      <ul className="space-y-2">
        {files.map((file) => (
          <li key={file._id} className="p-2 border rounded flex justify-between items-center">
            <div>
              <p className="font-semibold">{file.filename}</p>
              <p className="text-sm text-gray-500">{file.contentType} • {Math.round(file.metadata.size / 1024)} KB</p>
              <p className={`text-sm ${file.metadata.isPublic ? "text-green-600" : "text-red-600"}`}>
                {file.metadata.isPublic ? "Public" : "Private"}
              </p>
            </div>
            <div>
              <a
                href={`/api/files/${file.metadata.isPublic ? "public" : "private"}/${file._id}`}
                target="_blank"
                className="px-3 py-1 text-blue-600 underline"
              >
                View
              </a>
              {user?.isAdmin && (
                <button
                  onClick={() => handleDelete(file._id)}
                  className="ml-3 px-3 py-1 bg-red-500 text-white rounded"
                >
                  Delete
                </button>
              )}
            </div>
          </li>
        ))}
      </ul>
    </div>
  );
}

================
File: portfolio.next/src/components/admin/FileWrapper.tsx
================
"use client";

import { useState, useCallback } from "react";
import UploadSpecificFile from "@/components/admin/UploadContextualFile";
import FileList from "@/components/admin/FileList";

export default function FileWrapper({ entityId, context }: { entityId: string; context: string }) {
  const [refreshKey, setRefreshKey] = useState(0);

  // ✅ Function to refresh file list
  const refreshFiles = useCallback(() => {
    setRefreshKey((prev) => prev + 1);
  }, []);

  return (
    <div className="p-4 border rounded mt-4">
      <h2 className="text-lg font-bold mb-2">Manage Files</h2>
      <UploadSpecificFile entityId={entityId} context={context} refreshFiles={refreshFiles} />
      <FileList key={refreshKey} entityId={entityId} context={context} refreshFiles={refreshFiles} />
    </div>
  );
}

================
File: portfolio.next/src/components/admin/UploadContextualFile.tsx
================
"use client";

import { useState } from "react";
import { uploadFile } from "@/services/fileService";

export default function UploadSpecificFile({
  entityId,
  context,
  refreshFiles, // ✅ Accept refreshFiles as a prop
}: {
  entityId: string;
  context: string;
  refreshFiles: () => void; // ✅ Function to refresh file list
}) {
  const [file, setFile] = useState<File | null>(null);
  const [isPublic, setIsPublic] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);

  async function handleUpload() {
    if (!file) {
      setError("Please select a file.");
      return;
    }

    setLoading(true);
    setError(null);

    try {
      await uploadFile(file, entityId, context, isPublic);
      refreshFiles(); // ✅ Trigger file list refresh
    } catch (err) {
      console.error(err);
      setError("Upload failed. Try again.");
    } finally {
      setLoading(false);
    }
  }

  return (
    <div className="p-4 border rounded mt-4">
      <h2 className="text-lg font-bold mb-2">Attach a File</h2>
      {error && <p className="text-red-500">{error}</p>}
      <div className="space-y-4">
        <input
          type="file"
          onChange={(e) => setFile(e.target.files ? e.target.files[0] : null)}
          className="w-full p-2 border rounded"
        />
        <label className="flex items-center">
          <input
            type="checkbox"
            checked={isPublic}
            onChange={() => setIsPublic(!isPublic)}
            className="mr-2"
          />
          Make file public
        </label>
        <button
          onClick={handleUpload}
          disabled={loading}
          className={`px-4 py-2 text-white rounded ${loading ? "bg-gray-400" : "bg-blue-500"}`}
        >
          {loading ? "Uploading..." : "Upload"}
        </button>
      </div>
    </div>
  );
}

================
File: portfolio.next/src/components/BlogView.tsx
================
"use client";

import { marked } from "marked";
import CommentSection from "@/components/CommentSection";
import { BlogEntry } from "@/models/BlogEntry";

export default function BlogView({ blog }: { blog: BlogEntry }) {
  return (
    <main className="container mx-auto px-6 py-10 flex flex-col flex-1">
      <h1 className="text-3xl font-bold">{blog.title}</h1>
      <p className="text-gray-500">
        {blog.publishAt && new Date(blog.publishAt).toLocaleString(undefined, {
          weekday: "long",
          year: "numeric",
          month: "long",
          day: "numeric",
          hour: "2-digit",
          minute: "2-digit",
          second: "2-digit",
        })}
      </p>

      {/* Markdown rendering */}
      <div
        className="mt-4 prose lg:prose-lg xl:prose-xl max-w-none"
        dangerouslySetInnerHTML={{ __html: marked.parse(blog.body) }}
      />

      {/* Interactive comment section */}
      <CommentSection blogId={String(blog._id)} />
    </main>
  );
}

================
File: portfolio.next/src/components/CareerTimeline.tsx
================
// portfolio.next/src/components/CareerTimeline.tsx
"use client";
import React, { useState, useEffect } from "react";
import EntryOverview from "./EntryOverview";
import { fetchCareerTimeline } from "@/services/careerService";
import { marked } from "marked";

interface CareerEntry {
  _id: string;
  title: string;
  company: string;
  startDate: string;
  endDate: string | null;
  location: string;
  description: string;
}

const formatDate = (date: string | null) => {
  if (!date) return "Present";
  return new Intl.DateTimeFormat("default", { year: "numeric", month: "short" }).format(new Date(date));
};

const CareerTimeline: React.FC = () => {
  const [entries, setEntries] = useState<CareerEntry[]>([]);
  const [expandedEntryId, setExpandedEntryId] = useState<string | null>(null);

  useEffect(() => {
    async function loadData() {
      const data = await fetchCareerTimeline();
      setEntries(data);
    }
    loadData();
  }, []);

  return (
    <div className="relative">
      {/* Dark vertical timeline bar */}
      <div className="absolute left-3 top-0 bottom-0 w-6 bg-gray-800"></div>

      <div className="relative space-y-6 pl-10">
        {entries.map((entry) => (
          <div key={entry._id} className="relative">
            {/* Timeline connector */}
            <div className="absolute left-0 top-6 w-6 h-6 bg-gray-800 rounded-full"></div>
            <div className="ps-8">
            {/* Entry Overview */}
            <EntryOverview
              title={entry.title}
              company={entry.company}
              startDate={formatDate(entry.startDate)}
              endDate={formatDate(entry.endDate)}
              location={entry.location}
              onClick={() => setExpandedEntryId(expandedEntryId === entry._id ? null : entry._id)}
            />

            {/* Expanded Details (In-Place) */}
            {expandedEntryId === entry._id && (
              <div className="mt-2 p-4 border-l-4 border-blue-500 bg-gray-100 rounded-md">
                <p className="text-sm text-gray-500">{entry.location}</p>
                <div
                  className="mt-2 text-gray-700 prose prose-sm max-w-none"
                  dangerouslySetInnerHTML={{ __html: marked.parse(entry.description) }}
                />

                <button onClick={() => setExpandedEntryId(null)} className="mt-2 text-blue-500">
                  Close
                </button>
              </div>
            )}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default CareerTimeline;

================
File: portfolio.next/src/components/Chat.tsx
================
"use client";

import { useState } from "react";
import { useChat } from "@/context/ChatContext";
import { useWebSocketChat } from "@/hooks/useWebSocketChat";

export default function Chat() {
  const { messages, addMessage } = useChat();
  const [isOpen, setIsOpen] = useState(false);
  const [isExpanded, setIsExpanded] = useState(false);
  const [input, setInput] = useState("");

  const { wsRef, isStreaming, streamingResponse, setStreamingResponse, setIsStreaming } = useWebSocketChat(isOpen);

  const sendMessage = () => {
    if (!input.trim() || !wsRef.current) return;

    addMessage({ role: "user", text: input });
    wsRef.current.send(JSON.stringify({ sessionId: "123", query: input }));
    setInput("");

    setStreamingResponse("");
    setIsStreaming(true);
  };

  return (
    <div className="fixed bottom-4 right-4 z-50 flex flex-col items-end">
      {isOpen && (
        <div className={`shadow-lg border border-gray-300 bg-white rounded-lg overflow-hidden transition-all duration-300
          ${isExpanded ? "h-[90vh] w-[90vw] md:w-[50vw]" : "h-96 w-[50vw] md:w-80"}`}
        >
          <div className="p-3 bg-gray-800 text-white flex justify-between items-center">
            <span>Chat</span>
            <div>
              <button className="text-lg mx-2" onClick={() => setIsExpanded(!isExpanded)} title={isExpanded ? "Minimize" : "Maximize"}>
                {isExpanded ? "🗕" : "⛶"}
              </button>
              <button className="text-lg" onClick={() => setIsOpen(false)} title="Close">✖</button>
            </div>
          </div>

          <div className="p-4 flex flex-col space-y-2 max-h-[80%] overflow-auto">
            {messages.map((msg, i) => (
              <div key={i} className={`p-2 rounded-lg text-sm ${msg.role === "user" ? "bg-blue-500 text-white self-end" : "bg-gray-200 text-black self-start"}`}>
                {msg.text}
              </div>
            ))}

            {isStreaming && (
              <div className="p-2 rounded-lg text-sm bg-gray-200 text-black self-start">{streamingResponse}</div>
            )}
          </div>

          <div className="flex items-center space-x-2 border-t pt-2 p-2">
            <input
              type="text"
              className="flex-1 p-2 border rounded text-sm"
              placeholder="Ask something..."
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyDown={(e) => e.key === "Enter" && sendMessage()}
            />
            <button className="bg-gray-800 hover:bg-gray-600 transition text-white px-3 py-1 rounded text-sm" onClick={sendMessage}>Send</button>
          </div>
        </div>
      )}

      <button className="bg-gray-800 hover:bg-gray-600 transition text-white p-3 rounded-full shadow-lg" onClick={() => setIsOpen(!isOpen)}>
        {isOpen ? "✖" : "💬"}
      </button>
    </div>
  );
}

================
File: portfolio.next/src/components/ChatWrapper.tsx
================
'use client';
import dynamic from 'next/dynamic';

const Chat = dynamic(() => import("@/components/Chat"), { ssr: false });

export default function ChatWrapper() {
  return <Chat />; 
}

================
File: portfolio.next/src/components/CommentSection.tsx
================
"use client";
import { useState, useEffect, useCallback } from "react";
import { useAuth } from "@/context/AuthContext";
import { usePathname } from "next/navigation";
interface Comment {
  _id: string;
  author: string;
  text: string;
  createdAt: string;
  redacted: boolean;
  replies: Comment[];
}

interface CommentSectionProps {
  blogId: string;
}

export default function CommentSection({ blogId }: CommentSectionProps) {
  const [comments, setComments] = useState<Comment[]>([]);
  const [newComment, setNewComment] = useState("");
  const [replyTo, setReplyTo] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);
  const { isAuthenticated, user } = useAuth();
  const pathname = usePathname();

  // ✅ Wrap fetchComments with useCallback to prevent unnecessary re-renders
  const fetchComments = useCallback(async () => {
    try {
      const res = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/comments/blog/${blogId}`);
      const data = await res.json();
      if (!Array.isArray(data)) {
        setComments([]);
      } else {
        setComments(data);
      }
    } catch {
      setError("Failed to load comments");
    }
  }, [blogId]); // ✅ Only re-create function when blogId changes

  useEffect(() => {
    fetchComments();
  }, [fetchComments]); // ✅ Now safe to include fetchComments

  async function handleSubmit(e: React.FormEvent) {
    e.preventDefault();
    if (!newComment.trim()) return;
    try {
      const res = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/comments`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        credentials: "include", // Ensures auth cookie is sent
        body: JSON.stringify({
          author: user?.username,
          text: newComment,
          blog: blogId,
          parent: replyTo,
        }),
      });
      if (!res.ok) {
        const errData = await res.json();
        setError(errData.error || "Failed to post comment");
        return;
      }
      setNewComment("");
      setReplyTo(null);
      fetchComments(); // ✅ Re-fetch comments after submitting
    } catch {
      setError("Failed to post comment");
    }
  }

  function renderComments(comments: Comment[], level = 0) {
    return comments.map((comment) => (
      <div key={comment._id} style={{ marginLeft: level * 20 }}>
        <div className="p-2 border rounded mb-1">
          <p className="font-bold">{comment.author}</p>
          <p>
            {comment.redacted ? (
              <span className="text-gray-500 italic">[This comment has been redacted]</span>
            ) : (
              comment.text
            )}
          </p>
          <p className="text-xs text-gray-500">{new Date(comment.createdAt).toLocaleString()}</p>
          {!comment.redacted && (
            <button onClick={() => setReplyTo(comment._id)} className="text-blue-500 text-sm">
              Reply
            </button>
          )}
        </div>
        {comment.replies && comment.replies.length > 0 && renderComments(comment.replies, level + 1)}
      </div>
    ));
  }

  return (
    <div className="mt-8">
      <h2 className="text-2xl font-bold mb-4">Comments</h2>
      {error && <p className="text-red-500">{error}</p>}
      <div>{renderComments(comments)}</div>
      {isAuthenticated ? (
        <form onSubmit={handleSubmit} className="mt-4">
          {replyTo && <p className="mb-2 text-sm text-gray-600">Replying to comment {replyTo}</p>}
          <textarea
            value={newComment}
            onChange={(e) => setNewComment(e.target.value)}
            placeholder="Write your comment here..."
            className="w-full p-2 border rounded mb-2"
          />
          <div className="flex items-center">
            <button type="submit" className="bg-blue-500 text-white px-4 py-2 rounded">
              Post Comment
            </button>
            {replyTo && (
              <button
                type="button"
                onClick={() => setReplyTo(null)}
                className="ml-2 text-sm text-gray-500 underline"
              >
                Cancel Reply
              </button>
            )}
          </div>
        </form>
      ) : (
        <p>
          <a
            href={`/admin/login?returnUrl=${encodeURIComponent(pathname)}`}
            className="text-blue-500 underline"
          >
            Login to comment
          </a>
        </p>
      )}
    </div>
  );
}

================
File: portfolio.next/src/components/EntryOverview.tsx
================
// portfolio.next/src/components/EntryOverview.tsx
import React from "react";

interface EntryProps {
  title: string;
  company: string;
  startDate: string;
  endDate: string;
  location: string;
  onClick: () => void;
}

const EntryOverview: React.FC<EntryProps> = ({ title, company, startDate, endDate, location, onClick }) => {
  return (
    <div
      className="border p-4 rounded-lg shadow-md bg-white cursor-pointer hover:bg-gray-100 transition"
      onClick={onClick}
    >
      <h3 className="text-lg font-bold">{title}</h3>
      <p className="text-sm text-gray-600">{company}</p>
      <p className="text-sm">
        {startDate} - {endDate}
      </p>
      <p className="text-sm text-gray-500">{location}</p>
    </div>
  );
};

export default EntryOverview;

================
File: portfolio.next/src/components/Footer.tsx
================
export default function Footer (){
    return (
        <footer className="bg-gray-800 text-white text-center py-4 mt-6">
            <p>&copy; {new Date().getFullYear()} michel-roberge.com. All Rights Reserved.</p>
        </footer>
    );
}

================
File: portfolio.next/src/components/Header.tsx
================
"use client";
import Link from "next/link";
import { useRouter } from "next/navigation";
import { useAuth } from "@/context/AuthContext";
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faAlignLeft, faCog, faContactCard, faParagraph, faPerson, faSignInAlt, faSignOutAlt } from '@fortawesome/free-solid-svg-icons';
import { usePathname } from "next/navigation";
export default function Header() {
  const { isAdmin, isAuthenticated, refreshAuth } = useAuth();
  const pathname = usePathname();
  const router = useRouter();

  async function handleLogout() {
    try {
      const res = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/auth/logout`, {
        credentials: "include",
      });
      if (res.ok) {
        await refreshAuth();
        router.refresh();
      }
    } catch (error) {
      console.error("Logout failed", error);
    }
  }

  return (
    <header className="bg-gray-800 text-white py-6 relative">
      <div className="container mx-auto px-4 flex justify-between items-center">
        <Link href="/">
          <div>
            <h1 className="text-3xl font-bold hover:text-gray-300 transition">
              Curious Coder: A Portfolio
            </h1>
            <p className="text-lg">a.k.a. michel-roberge.com</p>
            <p className="text-xs">(the Northern Developer)</p>
          </div>
        </Link>
        <div className="flex items-center gap-4">

        <Link href="/about" className="flex items-center gap-2 text-white hover:text-gray-300">
              <FontAwesomeIcon icon={faContactCard} className="w-6 h-6" />
              <span>About me</span>
            </Link>

        <Link href="/career" className="flex items-center gap-2 text-white hover:text-gray-300">
              <FontAwesomeIcon icon={faAlignLeft} className="w-6 h-6" />
              <span>Experience</span>
            </Link>


          {isAuthenticated && isAdmin && (
            <Link href={`/admin`} className="flex items-center gap-2 text-white hover:text-gray-300">
              <FontAwesomeIcon icon={faCog} className="w-6 h-6" />
              <span>Admin Panel</span>
            </Link>
          )}

          {!isAuthenticated ? (
            <Link href={`/admin/login?returnUrl=${encodeURIComponent(pathname)}`} className="flex items-center gap-2 text-white hover:text-gray-300">
              <FontAwesomeIcon icon={faSignInAlt} className="w-6 h-6" />
              <span>Login</span>
            </Link>
          ) : (
            <button onClick={handleLogout} className="flex items-center gap-2 text-white hover:text-gray-300">
              <FontAwesomeIcon icon={faSignOutAlt} className="w-6 h-6" />
              <span>Logout</span>
            </button>
          )}
        </div>
      </div>
    </header>
  );
}

================
File: portfolio.next/src/components/Home.tsx
================
"use client";

import { useState } from "react";
import SectionToggle from "@/components/SectionToggle";
import Image from "next/image";

interface Project {
  _id: string;
  title: string;
  excerpt: string;
  image: string;
  link: string;
}

interface BlogEntry {
  _id: string;
  title: string;
  date: string;
  excerpt: string;
  link: string;
}

export default function Home({ blogs, projects }: { blogs: BlogEntry[]; projects: Project[] }) {
  const [activeSection, setActiveSection] = useState<"blogs" | "projects">("blogs");

  return (
    <div className="flex flex-col min-h-screen">
      <SectionToggle activeSection={activeSection} setActiveSection={setActiveSection} />
      <main className="mx-auto w-full px-6 py-10 flex flex-col lg:flex-row lg:gap-8 flex-1 max-w-screen-2xl">
        {/* Blogs Section */}
        <section className={`${activeSection === "blogs" ? "block" : "hidden"} md:block lg:flex-1`}>
          <h2 className="text-2xl font-semibold mb-6">Latest Posts</h2>
          <div className="space-y-4">
            {blogs.map((entry) => (
              <a key={`blog_${entry._id}`} href={`blogs/${entry.link}`} className="block bg-gray-100 p-4 rounded-sm hover:bg-gray-200 transition">
                <h3 className="text-lg font-semibold">{entry.title}</h3>
                <p className="text-sm text-gray-500">{new Date(entry.date).toLocaleString()}</p>
                <p className="text-gray-600">{entry.excerpt}</p>
              </a>
            ))}
          </div>
        </section>
        {/* Projects Section */}
        <aside className={`${activeSection === "projects" ? "block" : "hidden"} md:block lg:w-1/3 bg-white rounded-sm shadow-md p-4 h-fit`}>
          <h2 className="text-xl font-semibold mb-4">Projects</h2>
          <div className="space-y-3">
            {projects.map((project) => (
              <a key={`project_${project._id}`} href={project.link} className="flex items-center p-3 bg-gray-100 rounded-sm hover:bg-gray-200 transition">
                {project.image && <Image src={project.image} alt={project.title} className="max-h-12 object-cover mr-4 rounded" width={64} height={64} />}
                <div>
                  <h3 className="text-lg font-semibold">{project.title}</h3>
                  <p className="text-sm text-gray-500">{project.excerpt}</p>
                </div>
              </a>
            ))}
          </div>
        </aside>
      </main>
    </div>
  );
}

================
File: portfolio.next/src/components/ProjectView.tsx
================
"use client";

import { Project } from "@/models/Project";
import { marked } from "marked";

export default function ProjectView({ project }: { project: Project }) {
  return (
    <main className="container mx-auto px-6 py-10 flex flex-col flex-1">
      <h1 className="text-3xl font-bold">{project.title}</h1>

      <div
        className="mt-4 prose lg:prose-lg xl:prose-xl max-w-none"
        dangerouslySetInnerHTML={{ __html: marked.parse(project.description) }}
      />
    </main>
  );
}

================
File: portfolio.next/src/components/Search.tsx
================
'use client';
import { useSearch } from "@/context/SearchContext";

export default function Search() {
    const { query, setQuery, results, handleSearch } = useSearch();

  return (
    <div className="relative w-full max-w-lg mx-auto mt-6">
      <input
        type="text"
        className="w-full p-3 border rounded"
        placeholder="Search projects, blogs, or skills..."
        value={query}
        onChange={(e) => setQuery(e.target.value)}
        onKeyPress={(e) => e.key === "Enter" && handleSearch()}
      />
      <button
        className="absolute right-2 top-2 px-4 py-1 bg-gray-800 hover:bg-gray-600 transition text-white rounded"
        onClick={handleSearch}
      >
        Search
      </button>
      {results.length > 0 && (
        <div className="mt-4 p-4 border rounded bg-white shadow-md">
          <h3 className="text-lg font-semibold">Results:</h3>
          <ul>
            {results.map((result, index) => (
              <li key={index} className="mt-2">
                <a href={result.link} className="text-blue-500 hover:underline">
                  {result.title} ({result.type})
                </a>
                <p className="text-gray-600 text-sm">{result.description}</p>
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
}

================
File: portfolio.next/src/components/SectionToggle.tsx
================
"use client";

interface SectionToggleProps {
  activeSection: "blogs" | "projects";
  setActiveSection: (section: "blogs" | "projects") => void;
}

export default function SectionToggle({ activeSection, setActiveSection }: SectionToggleProps) {
  return (
    <div className="flex md:hidden justify-center mb-4 border-b">
      <button
        type="button"
        className={`w-1/2 p-2 text-center ${
          activeSection === "blogs" ? "border-b-2 border-blue-500 font-bold" : "text-gray-500"
        }`}
        onClick={() => setActiveSection("blogs")}
      >
        Blogs
      </button>
      <button
        type="button"
        className={`w-1/2 p-2 text-center ${
          activeSection === "projects" ? "border-b-2 border-blue-500 font-bold" : "text-gray-500"
        }`}
        onClick={() => setActiveSection("projects")}
      >
        Projects
      </button>
    </div>
  );
}

================
File: portfolio.next/src/context/AuthContext.tsx
================
// portfolio.next/src/context/AuthContext.tsx
"use client";
import { createContext, useContext, useState } from "react";
import { useRouter } from "next/navigation"; 

interface AuthContextType {
  isAdmin: boolean;
  isAuthenticated: boolean;
  user: User | null;
  setIsAuthenticated: (val: boolean) => void;
  setUser: (user: User | null) => void;
  refreshAuth: () => Promise<void>;
  login: (username : string, password : string) => Promise<boolean>;
}

interface User {
  username: string;
  isAdmin: boolean;
  // Add other user properties as needed.
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [user, setUser] = useState<User | null>(null);
  const [isAdmin, setIsAdmin] = useState(false);
  const router = useRouter();

  async function refreshAuth() {
    try {
      const res = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/auth/check`, {
        credentials: "include",
      });
      const data = await res.json();
      if ( data.setupRequired){
        router.push("/admin/setup"); // Redirect to setup page
        return;
      }
      setIsAuthenticated(data.authenticated);
      setUser(data.authenticated ? data.user : null);
      setIsAdmin(data.user?.isAdmin || false);
    } catch (error) {
      console.error(error);
      setIsAuthenticated(false);
    }
  }

  async function login(username : string, password : string) : Promise<boolean>  {
    const res = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/auth/login`, {
      method: "POST",
      credentials: "include", // Ensures the auth-token cookie is stored
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ username, password }),
    });

    if (res.ok) {
      await refreshAuth();
      setIsAuthenticated(true);
      return true;
    }
    return false;
  }

  return (
    <AuthContext.Provider value={{ isAdmin, isAuthenticated, user, setIsAuthenticated, setUser, refreshAuth, login }}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
}

================
File: portfolio.next/src/context/ChatContext.tsx
================
'use client';
import { createContext, useContext, useState, ReactNode } from "react";

type ChatMessage = {
  role: "user" | "ai";
  text: string;
};

type ChatContextType = {
  messages: ChatMessage[];
  addMessage: (message: ChatMessage) => void;
  clearChat: () => void;
};

const ChatContext = createContext<ChatContextType | undefined>(undefined);

export function ChatProvider({ children }: { children: ReactNode }) {
  const [messages, setMessages] = useState<ChatMessage[]>([{
    role: "ai",
    text: "Hello! Ask me anything about my projects or skills."
  }]);

  const addMessage = (message: ChatMessage) => {
    setMessages((prev) => [...prev, message]);
  };

  const clearChat = () => {
    setMessages([{ role: "ai", text: "Hello! Ask me anything about my projects or skills." }]);
  };

  return (
    <ChatContext.Provider value={{ messages, addMessage, clearChat }}>
      {children}
    </ChatContext.Provider>
  );
}

export function useChat() {
  const context = useContext(ChatContext);
  if (!context) {
    throw new Error("useChat must be used within a ChatProvider");
  }
  return context;
}

================
File: portfolio.next/src/context/SearchContext.tsx
================
'use client';
import { createContext, useContext, useState, ReactNode } from "react";

type SearchResult = {
  title: string;
  description: string;
  type: "project" | "blog";
  link: string;
};

type SearchContextType = {
  query: string;
  setQuery: (query: string) => void;
  results: SearchResult[];
  setResults: (results: SearchResult[]) => void;
  handleSearch: () => void;
};

const SearchContext = createContext<SearchContextType | undefined>(undefined);

export function SearchProvider({ children }: { children: ReactNode }) {
  const [query, setQuery] = useState<string>("");
  const [results, setResults] = useState<SearchResult[]>([]);

  const handleSearch = async () => {
    if (!query.trim()) return;

    const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/search/projects`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ query }),
    });
  
    const results = await response.json();
    setResults(results);
  };

  return (
    <SearchContext.Provider value={{ query, setQuery, results, setResults, handleSearch }}>
      {children}
    </SearchContext.Provider>
  );
}

export function useSearch() {
  const context = useContext(SearchContext);
  if (!context) {
    throw new Error("useSearch must be used within a SearchProvider");
  }
  return context;
}

================
File: portfolio.next/src/hooks/useWebSocketChat.tsx
================
import { useState, useEffect, useRef, useCallback, useMemo } from "react";
import { useChat } from "@/context/ChatContext";

export function useWebSocketChat(isOpen: boolean) {
  const { addMessage } = useChat();
  const wsRef = useRef<WebSocket | null>(null);
  const [isStreaming, setIsStreaming] = useState(false);
  const streamingResponseRef = useRef("");
  const [streamingResponse, setStreamingResponse] = useState("");

  const wsUrl = useMemo(() => {
    const apiUrl = process.env.NEXT_PUBLIC_API_URL || "http://localhost:5000";
    return apiUrl.replace(/^http/, "ws");
  }, []);

  useEffect(() => {
    if (isOpen && !wsRef.current) {
      const websocket = new WebSocket(wsUrl);

      websocket.onopen = () => console.log("Connected to WebSocket");

      websocket.onmessage = (event) => {
        const data = JSON.parse(event.data);

        if (data.response) {
          setIsStreaming(true);
          streamingResponseRef.current += data.response;
          setStreamingResponse(streamingResponseRef.current);
        }

        if (data.done) {
          setIsStreaming(false);
        }
      };

      websocket.onclose = () => {
        console.log("WebSocket disconnected");
        wsRef.current = null;
      };

      wsRef.current = websocket;
    }

    return () => {
      wsRef.current?.close();
      wsRef.current = null;
    };
  }, [isOpen, wsUrl]);

  const safeAddMessage = useCallback(
    (message: { role: "user" | "ai"; text: string }) => {
      addMessage(message);
    },
    [addMessage]
  );

  useEffect(() => {
    if (!isStreaming && streamingResponseRef.current) {
      safeAddMessage({ role: "ai", text: streamingResponseRef.current });
      streamingResponseRef.current = "";
      setStreamingResponse("");
    }
  }, [isStreaming, safeAddMessage]);

  return { wsRef, isStreaming, streamingResponse, setStreamingResponse, setIsStreaming };
}

================
File: portfolio.next/src/models/BlogEntry.ts
================
export interface BlogEntry {
    _id: string ; 
    title: string;
    publishAt?: string | null;
    body: string;
    excerpt?: string;
    link: string;
    isDraft: boolean;
    tags: Array<string>;
  }

================
File: portfolio.next/src/models/FileInfo.ts
================
export interface FileInfo {
    _id: string;
    filename: string;
    originalName: string;
    contentType: string;
    metadata: {
        entityId: string;
        context: string;
        uploadedBy: string;
        isPublic: boolean;
        size: number;
    };
  }
  

  /*
      {
        "_id": "67cb0ebf2ec18c7799cb6e99",
        "length": 4004,
        "chunkSize": 261120,
        "uploadDate": "2025-03-07T15:20:31.656Z",
        "filename": "uploaded_file",
        "metadata": {
            "contentType": "multipart/form-data",
            "uploadedBy": null,
            "isPublic": true,
            "entityId": "67bb7eb8a3e8ac56032b8378",
            "type": "project"
        }
  */

================
File: portfolio.next/src/models/ParsedJob.ts
================
export interface ParsedJob {
    title: string;
    company: string;
    startDate: string;
    endDate: string;
    description: string;
    location: string;
  }

================
File: portfolio.next/src/models/Project.ts
================
export interface Project {
    _id: number;
    title: string;
    description: string;
    excerpt?: string;
    link: string;
    tags?: string[];
  }

================
File: portfolio.next/src/services/aiService.ts
================
export interface AIConfig {
    provider: "ollama" | "openai";
    clientId?: string;
    clientSecret?: string;
  }
  
  const apiUrl = process.env.NEXT_PUBLIC_API_URL || "http://localhost:5000";
  
  export async function getAIConfig(): Promise<AIConfig> {
    try {
      const res = await fetch(`${apiUrl}/api/provider-configs/ai`, { credentials: "include" });
      if (!res.ok) {
        // throw new Error("Failed to fetch AI configuration");
        return { provider: "ollama" };
      }
      return await res.json();
    } catch (error) {
      console.error(error);
      throw new Error("Error fetching AI configuration");
    }
  }
  
  export async function updateAIConfig(config: AIConfig) {
    try {
      const res = await fetch(`${apiUrl}/api/provider-configs/ai`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        credentials: "include",
        body: JSON.stringify(config),
      });
      if (!res.ok) throw new Error("Failed to update AI configuration");
    } catch (error) {
      console.error(error);
      throw new Error("Error updating AI configuration");
    }
  }

================
File: portfolio.next/src/services/apiService.ts
================
// portfolio.next/src/services/apiService.ts

/**
 * Fetches blog entries from the API.
 * @returns {Promise<any>} - The parsed JSON response.
 */
export async function fetchBlogEntries() {
    const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/blogs`);
    if (!response.ok) {
      throw new Error(`Error fetching blog entries: ${response.statusText}`);
    }
    return response.json();
  }
  
  /**
   * Fetches projects from the API.
   * @returns {Promise<any>} - The parsed JSON response.
   */
  export async function fetchProjects() {
    const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/projects`);
    if (!response.ok) {
      throw new Error(`Error fetching projects: ${response.statusText}`);
    }
    return response.json();
  }

================
File: portfolio.next/src/services/authService.ts
================
import { cookies } from "next/headers";

export interface AuthUser {
  id: string;
  isAdmin: boolean;
  message: string | null;
}

const apiUrl = process.env.NEXT_PUBLIC_API_URL || "http://localhost:5000";

export async function getAuthUser(): Promise<AuthUser | null> {
  try {
    const cookieStore = await cookies(); // ✅ Manually access cookies on the server
    const token = cookieStore.get("auth-token")?.value;

    if (!token) {
      console.log("No token found in cookies");
      return {id : "0", isAdmin: false, message: "no cookie found"};
    }

    const res = await fetch(`${apiUrl}/api/auth/check`, {
      method: "GET",
      headers: { Authorization: `Bearer ${token}` }, // ✅ Send token manually
      credentials: "include",
    });

    if (!res.ok) {
      console.log("Authentication failed");
      return {id : "0", isAdmin: false, message: apiUrl};
    }

    const data = await res.json();
    if (!data.authenticated || !data.user) return null;

    return {
      id: data.user.id,
      isAdmin: data.user.isAdmin,
      message: "should be good"
    };
  } catch (error) {
    console.error("Error fetching auth status:", error);
    return null;
  }
}

================
File: portfolio.next/src/services/blogService.ts
================
// portfolio.next/src/services/blogService.ts
import { BlogEntry } from "@/models/BlogEntry";
  /**
   * Fetches a single blog entry by its ID.
   * @param id - The blog entry identifier.
   * @returns A BlogEntry object if successful, or null otherwise.
   */
  export async function getBlog(id: string): Promise<BlogEntry | null> {
    try {
      const url = `${process.env.NEXT_PUBLIC_API_URL}/api/blogs/${id}`;
      console.log('url', url);
      const response = await fetch(url);
      if (!response.ok) return null;
      const data: BlogEntry = await response.json();
      return {
        ...data,
        _id: String(data._id), 
        tags: data.tags
      } as BlogEntry;
    } catch (error) {
      console.error("Error fetching blog:", error);
      return null;
    }
  }
  
  export async function getBlogs(): Promise<BlogEntry[]> {
    try {
      const url = `${process.env.NEXT_PUBLIC_API_URL}/api/blogs`;
      const res = await fetch(url, {
        method: "GET",
        credentials: "include",
      });
  
      if (!res.ok) throw new Error("Failed to fetch blogs");
  
      return await res.json();
    } catch (error) {
      console.error(error);
      throw new Error("Error fetching blogs");
    }
  }
  
  export async function archiveBlog(id: string) {
    try {
      const url = `${process.env.NEXT_PUBLIC_API_URL}/api/blogs/${id}`;
      const res = await fetch(`${url}/api/blogs/${id}`, {
        method: "DELETE",
        credentials: "include",
      });
  
      if (!res.ok) throw new Error("Failed to archive blog post");
    } catch (error) {
      console.error(error);
      throw new Error("Error archiving blog");
    }
  }

  export async function updateBlog(id: string, blogData: Partial<BlogEntry>) {
    try {
      const url = `${process.env.NEXT_PUBLIC_API_URL}/api/blogs/${id}`;
      const res = await fetch(url, {
        method: "PUT",
        credentials: "include",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(blogData),
      });
  
      if (!res.ok) throw new Error("Failed to update blog post");
    } catch (error) {
      console.error(error);
      throw new Error("Error updating blog");
    }
  }

================
File: portfolio.next/src/services/careerService.ts
================
const apiUrl = process.env.NEXT_PUBLIC_API_URL || "http://localhost:5000";

export async function fetchCareerTimeline() {
  const res = await fetch(`${apiUrl}/api/career/timeline`, { credentials: "include" });
  if (!res.ok) throw new Error("Failed to fetch timeline data");
  return await res.json();
}

export async function fetchCareerEntry(id: string) {
  const res = await fetch(`${apiUrl}/api/career/timeline/${id}`, { credentials: "include" });
  if (!res.ok) throw new Error("Failed to fetch entry");
  return await res.json();
}

export async function saveCareerEntry(entry: any) {
  const method = entry._id ? "PUT" : "POST";
  const url = entry._id ? `${apiUrl}/api/career/timeline/${entry._id}` : `${apiUrl}/api/career/timeline`;
  const res = await fetch(url, {
    method,
    credentials: "include",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(entry),
  });
  if (!res.ok) throw new Error("Failed to save entry");
  return await res.json();
}

export async function deleteCareerEntry(id: string) {
  const res = await fetch(`${apiUrl}/api/career/timeline/${id}`, {
    method: "DELETE",
    credentials: "include",
  });
  if (!res.ok) throw new Error("Failed to delete entry");
}

export async function linkEntries(id: string, linkedIds: string[]) {
  const res = await fetch(`${apiUrl}/api/career/timeline/${id}/link`, {
    method: "POST",
    credentials: "include",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ linkedEntries: linkedIds }),
  });
  if (!res.ok) throw new Error("Failed to link entries");
}

export async function parseLinkedInHTMLBackend(rawHTML: string) {
  const res = await fetch(`${apiUrl}/api/career/parse-linkedin`, {
    method: "POST",
    credentials: "include",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ rawHTML }),
  });
  if (!res.ok) throw new Error("Failed to parse LinkedIn data.");
  return await res.json();
}

export async function saveParsedJobs(parsedJobs: any[]) {
  const res = await fetch(`${apiUrl}/api/career/timeline/bulk`, {
    method: "POST",
    credentials: "include",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(parsedJobs),
  });
  if (!res.ok) throw new Error("Failed to save parsed jobs.");
  return await res.json();
}

================
File: portfolio.next/src/services/fileService.ts
================
const apiUrl = process.env.NEXT_PUBLIC_API_URL || "http://localhost:5000";

export async function fetchFiles(entityId?: string, context?: string) {
    const url = new URL(`${process.env.NEXT_PUBLIC_API_URL}/api/files`);
    if (entityId && context) {
      url.searchParams.append("entityId", entityId);
      url.searchParams.append("context", context);
    }
  
    try {
      const res = await fetch(url.toString(), { credentials: "include" });
      if (!res.ok) throw new Error("Failed to fetch files");
      return await res.json();
    } catch (error) {
      console.error(error);
      return [];
    }
  }
  

  export async function uploadFile(file: File, entityId: string, context: string, isPublic: boolean) {
    const formData = new FormData();
    formData.append("file", file); // Send raw file data
  
    const url = new URL(`${process.env.NEXT_PUBLIC_API_URL}/api/files/upload`);
    url.searchParams.append("entityId", entityId);
    url.searchParams.append("context", context);
    url.searchParams.append("isPublic", isPublic.toString());
  
    try {
      const res = await fetch(url.toString(), {
        method: "POST",
        credentials: "include",
        // headers: { "X-Filename": file.name }, // File name in headers
        headers: { "content-type" : "multipart/form-data", "x-filename" : file.name},
        body: file, // Send file directly as the request body
      });
  
      if (!res.ok) throw new Error("Upload failed");
      return await res.json();
    } catch (error) {
      console.error(error);
      throw error;
    }
  }
  

export async function deleteFile(fileId : string) {
  try {
    const res = await fetch(`${apiUrl}/api/files/${fileId}`, {
      method: "DELETE",
      credentials: "include",
    });
    if (!res.ok) throw new Error("Failed to delete file");
    return await res.json();
  } catch (error) {
    console.error(error);
    throw error;
  }
}

================
File: portfolio.next/src/services/homePageService.ts
================
// services/homePageService.ts
import { fetchBlogEntries, fetchProjects } from "./apiService";

export interface Project {
  _id: string;
  title: string;
  excerpt: string;
  image: string;
  link: string;
}

export interface BlogEntry {
  _id: string;
  title: string;
  date: string;
  excerpt: string;
  link: string;
}

export async function getHomePageData(): Promise<{ blogs: BlogEntry[]; projects: Project[] }> {
  try {
    const [blogs, projects] = await Promise.all([fetchBlogEntries(), fetchProjects()]);
    return { blogs, projects };
  } catch (error) {
    console.error("Error fetching homepage data:", error);
    return { blogs: [], projects: [] }; // Fallback to avoid breaking the page
  }
}

================
File: portfolio.next/src/services/pageService.ts
================
const apiUrl = process.env.NEXT_PUBLIC_API_URL || "http://localhost:5000";

export async function fetchPages() {
    const res = await fetch(`${apiUrl}/api/pages`, { credentials: "include" });
    if (!res.ok) throw new Error("Failed to fetch pages");
    return await res.json();
  }
  
  export async function fetchPage(slug: string) {
    const res = await fetch(`${apiUrl}/api/pages/${slug}`);
    if (!res.ok) throw new Error("Page not found");
    return await res.json();
  }
  
  export async function createPage(pageData: any) {
    const res = await fetch(`${apiUrl}/api/pages`, {
      method: "POST",
      credentials: "include",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(pageData),
    });
    if (!res.ok) throw new Error("Failed to create page");
    return await res.json();
  }
  
  export async function updatePage(id: string, pageData: any) {
    const res = await fetch(`${apiUrl}/api/pages/${id}`, {
      method: "PUT",
      credentials: "include",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(pageData),
    });
    if (!res.ok) throw new Error("Failed to update page");
    return await res.json();
  }
  
  export async function deletePage(id: string) {
    const res = await fetch(`${apiUrl}/api/pages/${id}`, { method: "DELETE", credentials: "include" });
    if (!res.ok) throw new Error("Failed to delete page");
  }

================
File: portfolio.next/src/services/projectService.ts
================
// portfolio.next/src/services/projectService.ts
import { Project } from "@/models/Project";
  
  /**
   * Fetches a single project entry by its ID.
   * @param id - The project  identifier.
   * @returns A Project object if successful, or null otherwise.
   */
  export async function getProject(id: string): Promise<Project | null> {
    try {
      const url = `${process.env.NEXT_PUBLIC_API_URL}/api/projects/${id}`;
      const response = await fetch(url);
      if (!response.ok) return null;
      const data: Project = await response.json();
      return data;
    } catch (error) {
      console.error("Error fetching project:", error);
      return null;
    }
  }

================
File: portfolio.next/tailwind.config.ts
================
import type { Config } from "tailwindcss";

export default {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        background: "var(--background)",
        foreground: "var(--foreground)",
      },
    },
  },
  plugins: [require("@tailwindcss/typography")], // Add this line
} satisfies Config;

================
File: portfolio.next/tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    },
    "types": ["jest", "node"]
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts", "jest.config.js", "next.config.js"],
  "exclude": ["node_modules"]
}

================
File: portfolio.next/tsconfig.test.json
================
{
    "compilerOptions": {
      "target": "ES2017",
      "lib": ["dom", "dom.iterable", "esnext"],
      "allowJs": true,
      "skipLibCheck": true,
      "strict": true,
      "noEmit": true,
      "esModuleInterop": true,
      "module": "esnext",
      "moduleResolution": "bundler",
      "resolveJsonModule": true,
      "isolatedModules": true,
      "jsx": "react-jsx", // <-- Changed from "preserve" to "react-jsx"
      "incremental": true,
      "plugins": [
        {
          "name": "next"
        }
      ],
      "paths": {
        "@/*": ["./src/*"]
      },
      "types": ["jest", "node"]
    },
    "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts", "jest.config.js"],
    "exclude": ["node_modules"]
  }

================
File: portfolio.node/__tests__/app.test.js
================
// portfolio.node/__tests__/app.test.js
jest.setTimeout(30000); // Increase timeout for database operations

const request = require("supertest");
const mongoose = require("mongoose");
const { MongoMemoryServer } = require("mongodb-memory-server");
const { createApp } = require("../src/app");

let mongoServer;
let app;

beforeAll(async () => {
  // Start in-memory MongoDB instance
  mongoServer = await MongoMemoryServer.create();
  const uri = mongoServer.getUri();
  // Set the environment variable so that connectDB uses the in-memory DB URI.
  process.env.MONGO_URI = uri;
  
  // Create our app; createApp() will call connectDB() using process.env.MONGO_URI.
  app = await createApp();
});

afterAll(async () => {
  await mongoose.connection.dropDatabase();
  await mongoose.disconnect();
  await mongoServer.stop();
});

describe("Express App", () => {
  it("should respond to GET /api/auth/check without token", async () => {
    const res = await request(app).get("/api/auth/check");
    // Since no token is provided, expect a 401 response.
    expect(res.statusCode).toBe(401);
  });
});

================
File: portfolio.node/__tests__/authServices.test.js
================
// portfolio.node/__tests__/authService.test.js
jest.setTimeout(30000); // Extend timeout for database operations

const mongoose = require('mongoose');
const { MongoMemoryServer } = require('mongodb-memory-server');
const authService = require('../src/services/authService');
const User = require('../src/models/User');

let mongoServer;

beforeAll(async () => {
  // Start an in-memory MongoDB instance
  mongoServer = await MongoMemoryServer.create();
  const uri = mongoServer.getUri();
  await mongoose.connect(uri);
});

afterAll(async () => {
  // Drop the database and disconnect
  await mongoose.connection.dropDatabase();
  await mongoose.disconnect();
  await mongoServer.stop();
});

describe('Auth Service', () => {
  it('should register a new user', async () => {
    const user = await authService.registerUser({ username: 'testuser', password: 'testpass' });
    expect(user.username).toBe('testuser');
  });

  it('should not allow duplicate user registration', async () => {
    // Register a user first
    await authService.registerUser({ username: 'dupuser', password: 'testpass' });
    // Attempt duplicate registration should throw an error
    await expect(
      authService.registerUser({ username: 'dupuser', password: 'testpass' })
    ).rejects.toThrow('User already exists');
  });

  it('should login a user and return a token', async () => {
    await authService.registerUser({ username: 'loginuser', password: 'testpass' });
    const token = await authService.loginUser({ username: 'loginuser', password: 'testpass' });
    expect(token).toBeDefined();
    expect(typeof token).toBe('string');
  });

  it('should throw an error for invalid login credentials', async () => {
    await expect(
      authService.loginUser({ username: 'nonexistent', password: 'testpass' })
    ).rejects.toThrow('Invalid credentials');
  });

  it('should verify a valid token', async () => {
    await authService.registerUser({ username: 'verifyuser', password: 'testpass' });
    const token = await authService.loginUser({ username: 'verifyuser', password: 'testpass' });
    const decoded = authService.verifyToken(token);
    expect(decoded.username).toBe('verifyuser');
  });

  it('should throw an error for an invalid token', () => {
    expect(() => authService.verifyToken('invalidtoken')).toThrow('Invalid token');
  });
});

================
File: portfolio.node/__tests__/blogService.test.js
================
// portfolio.node/__tests__/blogService.test.js
const mongoose = require("mongoose");
const { MongoMemoryServer } = require("mongodb-memory-server");
const BlogEntry = require("../src/models/BlogEntry");
const blogService = require("../src/services/blogService");

beforeAll(async () => {
    // Create an in-memory MongoDB instance
    mongoServer = await MongoMemoryServer.create();
    const uri = mongoServer.getUri();
    await mongoose.connect(uri);
  });
  
afterAll(async () => {
    // Drop the test database and disconnect
    await mongoose.connection.dropDatabase();
    await mongoose.disconnect();
    await mongoServer.stop();
});
  
describe("Blog Service", () => {
  it("should create a new blog entry", async () => {
    const data = {
      title: "Test Blog",
      date: "2025-02-22",
      excerpt: "Test excerpt",
      body: "Test body content",
    };
    const blogEntry = await blogService.createBlogEntry(data);
    expect(blogEntry.title).toBe("Test Blog");
    expect(blogEntry.excerpt).toBe("Test excerpt");
  });

  // Additional tests for getAllBlogEntries, getBlogEntryById, etc.
});

================
File: portfolio.node/__tests__/blogValidation.test.js
================
// portfolio.node/__tests__/blogValidation.test.js
const request = require("supertest");
const express = require("express");
const bodyParser = require("express").json;
const validate = require("../src/middlewares/validate");
const { createBlogSchema } = require("../src/validators/blogValidator");

const app = express();
app.use(bodyParser());
// Set up a dummy endpoint that uses the validation middleware.
app.post("/test", validate(createBlogSchema), (req, res) => {
  res.status(200).json({ success: true });
});

describe("Blog Validation Middleware", () => {
  it("should pass validation for valid data", async () => {
    const validData = {
      title: "A Valid Blog Title",
      publishAt: "2025-02-22T00:00:00.000Z",
      excerpt: "This is a valid excerpt.",
      body: "This is the body of the blog.",
    };

    const res = await request(app).post("/test").send(validData);
    expect(res.statusCode).toBe(200);
    expect(res.body.success).toBe(true);
  });

  it("should fail validation for invalid data", async () => {
    const invalidData = {
      title: "No", // Too short
      publishAt: "invalid-date",
      excerpt: "x".repeat(600), // Too long
      body: "", // Empty body
    };

    const res = await request(app).post("/test").send(invalidData);
    expect(res.statusCode).toBe(400);
    expect(res.body.error).toBeDefined();
  });
});

================
File: portfolio.node/__tests__/commentRoutes.test.js
================
// portfolio.node/__tests__/commentRoutes.test.js
const request = require("supertest");
const mongoose = require("mongoose");
const { MongoMemoryServer } = require("mongodb-memory-server");
const { createApp } = require("../src/app");

let app;
let mongoServer;

beforeAll(async () => {
  // Start in-memory MongoDB instance
  mongoServer = await MongoMemoryServer.create();
  const uri = mongoServer.getUri();
  process.env.MONGO_URI = uri;
  app = await createApp();
});

afterAll(async () => {
  await mongoose.connection.dropDatabase();
  await mongoose.disconnect();
  await mongoServer.stop();
});

describe("Comment Routes", () => {
  let createdCommentId;
  // Create a dummy blog ID for testing
  const blogId = new mongoose.Types.ObjectId();

  test("POST /api/comments creates a new comment", async () => {
    const res = await request(app)
      .post("/api/comments")
      .send({
        author: "Test Author",
        text: "This is a test comment",
        blog: blogId.toString(),
      });
    expect(res.statusCode).toBe(201);
    expect(res.body.author).toBe("Test Author");
    createdCommentId = res.body._id;
  });

  test("GET /api/comments/blog/:blogId retrieves comments with nested replies", async () => {
    const res = await request(app)
      .get(`/api/comments/blog/${blogId.toString()}`)
      .send();
    expect(res.statusCode).toBe(200);
    expect(Array.isArray(res.body)).toBe(true);
    // We should retrieve at least the comment we just created
    expect(res.body.length).toBeGreaterThanOrEqual(1);
  });

  test("PUT /api/comments/:id updates a comment (auth required)", async () => {
    const res = await request(app)
      .put(`/api/comments/${createdCommentId}`)
      .set("Cookie", "session=dummy") // Set dummy cookie to bypass auth middleware
      .send({ text: "Updated comment text" });
    expect(res.statusCode).toBe(200);
    expect(res.body.text).toBe("Updated comment text");
  });

  test("DELETE /api/comments/:id redacts a comment (auth required)", async () => {
    const res = await request(app)
      .delete(`/api/comments/${createdCommentId}`)
      .set("Cookie", "session=dummy") // Set dummy cookie to bypass auth middleware
      .send();
    expect(res.statusCode).toBe(200);
    expect(res.body.comment.redacted).toBe(true);
  });

  test("Nested replies retrieval returns full tree", async () => {
    // Create a root comment.
    const rootRes = await request(app)
      .post("/api/comments")
      .send({
        author: "Root Author",
        text: "Root comment",
        blog: blogId.toString()
      });
    const rootId = rootRes.body._id;
  
    // Create first-level reply.
    const reply1Res = await request(app)
      .post("/api/comments")
      .send({
        author: "Reply1",
        text: "First reply",
        blog: blogId.toString(),
        parent: rootId
      });
    const reply1Id = reply1Res.body._id;
  
    // Create second-level reply (reply to first-level reply).
    await request(app)
      .post("/api/comments")
      .send({
        author: "Reply2",
        text: "Second level reply",
        blog: blogId.toString(),
        parent: reply1Id
      });
  
    // Fetch comments and verify nested structure.
    const res = await request(app).get(`/api/comments/blog/${blogId.toString()}`).send();
    expect(res.statusCode).toBe(200);
    const rootComment = res.body.find((c) => c._id === rootId);
    expect(rootComment).toBeDefined();
    expect(rootComment.replies).toHaveLength(1);
    expect(rootComment.replies[0]._id).toBe(reply1Id);
    expect(rootComment.replies[0].replies).toHaveLength(1);
  });
  
  test("POST /api/comments returns error for non-existent parent", async () => {
    const fakeParentId = "000000000000000000000000"; // Valid ObjectId format but non-existent.
    const res = await request(app)
      .post("/api/comments")
      .send({
        author: "Test",
        text: "Should fail",
        blog: blogId.toString(),
        parent: fakeParentId
      });
    expect(res.statusCode).toBe(400);
    expect(res.body.error).toMatch(/Parent comment not found/);
  });
  
});

================
File: portfolio.node/__tests__/jest-setup.test.js
================
describe('Environment Variables', () => {
    it('should load MONGO_URI from .env.test', () => {
      expect(process.env.MONGO_URI).toBeDefined();
      // Optionally, you can check for a specific value
      expect(process.env.MONGO_URI).toBe('mongodb://10.0.0.151:27017/portfolio-test');
    });
  });

================
File: portfolio.node/__tests__/projectServices.test.js
================
const mongoose = require("mongoose");
const { MongoMemoryServer } = require("mongodb-memory-server");
const projectService = require("../src/services/projectService");
const Project = require("../src/models/Project");

let mongoServer;

beforeAll(async () => {
  // Start in-memory MongoDB instance
  mongoServer = await MongoMemoryServer.create();
  const uri = mongoServer.getUri();
  await mongoose.connect(uri);
});

afterAll(async () => {
  // Clean up and disconnect
  await mongoose.connection.dropDatabase();
  await mongoose.disconnect();
  await mongoServer.stop();
});

describe("Project Service", () => {
  it("should create a new project", async () => {
    const data = {
      title: "Test Project",
      description: "A test project",
      image: "test.jpg",
      link: "http://example.com",
    };
    const project = await projectService.createProject(data);
    expect(project.title).toBe("Test Project");
    expect(project.description).toBe("A test project");
  });

  it("should get all projects", async () => {
    // Create two projects first
    const data1 = {
      title: "Project 1",
      description: "Description 1",
      image: "image1.jpg",
      link: "http://project1.com",
    };
    const data2 = {
      title: "Project 2",
      description: "Description 2",
      image: "image2.jpg",
      link: "http://project2.com",
    };
    await projectService.createProject(data1);
    await projectService.createProject(data2);

    const projects = await projectService.getAllProjects();
    expect(projects.length).toBeGreaterThanOrEqual(2);
  });

  it("should get a project by id", async () => {
    const data = {
      title: "GetById Project",
      description: "Test get project by id",
      image: "getbyid.jpg",
      link: "http://getbyid.com",
    };
    const createdProject = await projectService.createProject(data);
    const foundProject = await projectService.getProjectById(createdProject._id);
    expect(foundProject).not.toBeNull();
    expect(foundProject.title).toBe("GetById Project");
  });

  it("should update a project", async () => {
    const data = {
      title: "Old Project Title",
      description: "Old description",
      image: "old.jpg",
      link: "http://old.com",
    };
    const createdProject = await projectService.createProject(data);

    const updateData = {
      title: "New Project Title",
      description: "New description",
    };
    const updatedProject = await projectService.updateProject(createdProject._id, updateData);
    expect(updatedProject.title).toBe("New Project Title");
    expect(updatedProject.description).toBe("New description");
  });

  it("should delete a project", async () => {
    const data = {
      title: "Project to delete",
      description: "This project will be deleted",
      image: "delete.jpg",
      link: "http://delete.com",
    };
    const createdProject = await projectService.createProject(data);
    const deletedProject = await projectService.deleteProject(createdProject._id);
    expect(deletedProject).not.toBeNull();

    // Confirm deletion by trying to retrieve the project
    const shouldBeNull = await projectService.getProjectById(createdProject._id);
    expect(shouldBeNull).toBeNull();
  });
});

================
File: portfolio.node/__tests__/server.test.js
================
const request = require('supertest');
const express = require('express');
const cookieParser = require('cookie-parser');

// Create a simple Express app for testing purposes.
const app = express();
app.use(express.json());
app.use(cookieParser());

// Define a simple test route.
app.get('/api/test', (req, res) => res.status(200).json({ message: 'Test endpoint works' }));

describe('GET /api/test', () => {
  it('should return a JSON object with a success message', async () => {
    const response = await request(app).get('/api/test');
    expect(response.statusCode).toBe(200);
    expect(response.body.message).toBe('Test endpoint works');
  });
});

================
File: portfolio.node/__tests__/userService.test.js
================
jest.setTimeout(30000); // Increase timeout for database operations

const mongoose = require("mongoose");
const { MongoMemoryServer } = require("mongodb-memory-server");
const userService = require("../src/services/userService");
const User = require("../src/models/User");

let mongoServer;

beforeAll(async () => {
  mongoServer = await MongoMemoryServer.create();
  const uri = mongoServer.getUri();
  process.env.MONGO_URI = uri;
  await mongoose.connect(uri);
});

afterAll(async () => {
  await mongoose.connection.dropDatabase();
  await mongoose.disconnect();
  await mongoServer.stop();
});

describe("User Service", () => {
  it("should create a new user", async () => {
    const userData = { username: "testuser", password: "testpass" };
    const user = await userService.createUser(userData);
    expect(user.username).toBe("testuser");
  });

  it("should throw an error if username or password is missing", async () => {
    await expect(userService.createUser({ username: "", password: "testpass" }))
      .rejects.toThrow("Username and password are required");
  });

  it("should throw an error if the user already exists", async () => {
    const userData = { username: "duplicateUser", password: "testpass" };
    // Create the user the first time.
    await userService.createUser(userData);
    // Try creating the same user again.
    await expect(userService.createUser(userData))
      .rejects.toThrow("User already exists");
  });
});

================
File: portfolio.node/Dockerfile
================
FROM node:22
WORKDIR /app
COPY . .
RUN npm install
CMD ["node", "./src/server.js"]

================
File: portfolio.node/jest.config.js
================
module.exports = {
    testEnvironment: 'node',
    testMatch: ['**/__tests__/**/*.test.js'],
    verbose: true,
    setupFiles: ['./jest.setup.js'], 
  };

================
File: portfolio.node/jest.setup.js
================
require('dotenv').config({ path: '.env.test' });
jest.setTimeout(10000); // Increase the global timeout to 10 seconds

================
File: portfolio.node/package.json
================
{
  "name": "portfolio.node",
  "version": "1.0.0",
  "description": "",
  "scripts": {
    "start": "node src/server.js",
    "dev": "cross-env NODE_ENV=development nodemon src/server.js",
    "test": "cross-env NODE_ENV=test jest",
    "test:watch": "cross-env NODE_ENV=test jest --watch"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "type": "commonjs",
  "dependencies": {
    "@opentelemetry/api": "^1.9.0",
    "@opentelemetry/auto-instrumentations-node": "^0.56.1",
    "@opentelemetry/exporter-trace-otlp-http": "^0.57.2",
    "@opentelemetry/sdk-node": "^0.57.2",
    "@qdrant/js-client-rest": "^1.13.0",
    "bcrypt": "^5.1.1",
    "cheerio": "^1.0.0",
    "cookie-parser": "^1.4.7",
    "cors": "^2.8.5",
    "dotenv": "^16.4.7",
    "express": "^4.21.2",
    "express-session": "^1.18.1",
    "gridfs-stream": "^1.1.1",
    "joi": "^17.13.3",
    "jsonwebtoken": "^9.0.2",
    "marked": "^15.0.7",
    "mongoose": "^8.12.1",
    "multer": "^1.4.5-lts.1",
    "node-cache": "^5.1.2",
    "passport": "^0.7.0",
    "passport-facebook": "^3.0.0",
    "passport-github": "^1.1.0",
    "passport-google-oauth20": "^2.0.0",
    "passport-microsoft": "^2.1.0",
    "puppeteer": "^24.4.0",
    "qdrant-client": "^0.0.1",
    "swagger-ui-express": "^5.0.1",
    "ws": "^8.18.1",
    "yamljs": "^0.3.0"
  },
  "devDependencies": {
    "@types/jest": "^29.5.14",
    "@types/supertest": "^6.0.2",
    "cross-env": "^7.0.3",
    "jest": "^29.7.0",
    "mongodb-memory-server": "^10.1.4",
    "nodemon": "^3.1.9",
    "supertest": "^7.0.0"
  }
}

================
File: portfolio.node/src/app.js
================
// Telemetry first
require('./tracing');
// The rest.
require("dotenv").config({ path: `.env.${process.env.NODE_ENV}.local` });

console.log(`✅ Loaded environment: .env.${process.env.NODE_ENV}.local`);

const express = require("express");
const cookieParser = require("cookie-parser");
const cors = require("cors");

const connectDB = require("./config/db");
const { passport, setupStrategies } = require("./config/passport");


const authRoutes = require("./routes/authRoutes");
const projectRoutes = require("./routes/projectRoutes");
const blogRoutes = require("./routes/blogRoutes");
const oauthRoutes = require("./routes/oauthRoutes");
const commentRoutes = require("./routes/commentRoutes");
const userRoutes = require("./routes/userRoutes");
const providerConfigRoutes = require("./routes/providerConfigRoutes");
const searchRoutes = require("./routes/searchRoutes");
const chatRoutes = require("./routes/chatRoutes");
const embeddingRoutes = require("./routes/embeddingRoutes");
const promptRoutes = require("./routes/promptRoutes");
const fileRoutes = require("./routes/fileRoutes");
const careerTimelineRoutes = require("./routes/careerTimelineRoutes");
const pageRoutes = require("./routes/pageRoutes");

const { prepopulateDefaultConfigs } = require("./services/providerConfigService");
const { initCollection } = require("./services/qdrantService");
const metricsMiddleware = require("./middlewares/metrics");

const { swaggerMiddleware, swaggerSetup } = require('./config/swagger');

const { dropCollection } = require('./services/qdrantService');

async function createApp() {
  // Connect to the database
  await connectDB();

  try{

    // await dropCollection();
    await initCollection();
  }
  catch(err){
    console.error("Cannot initialize collections", err);
  }
  // default configuration population
  await prepopulateDefaultConfigs();

  const app = express();

  app.use(cors({
    origin: process.env.ALLOW_CORS || "http://localhost:3000",
    credentials: true, // Allow cookies to be sent
  }));
  
  app.use(express.json({ limit: '50mb' }));
  app.use(express.urlencoded({ limit: '50mb', extended: true }));
  app.use(cookieParser());

  app.use(metricsMiddleware);
 
setupStrategies()
  .then(() => {
    console.log("Passport strategies initialized successfully."); 
    // Start your Express server here...
  })
  .catch((err) => {
    console.error("Error initializing passport strategies:", err);
  });

  app.use(passport.initialize());  

  // Set up routes
  app.use('/api/docs', swaggerMiddleware, swaggerSetup);
  app.use("/api/auth", authRoutes);
  app.use("/api/auth/oauth2", oauthRoutes);
  app.use("/api/projects", projectRoutes);
  app.use("/api/blogs", blogRoutes);
  app.use("/api/users", userRoutes);
  app.use("/api/comments", commentRoutes);
  app.use("/api/provider-configs", providerConfigRoutes);
  app.use("/api/search", searchRoutes);
  app.use("/api/chat", chatRoutes);
  app.use("/api/embeddings", embeddingRoutes);
  app.use("/api/prompts", promptRoutes);
  app.use("/api/files", fileRoutes);
  app.use("/api/career", careerTimelineRoutes);  
  app.use("/api/pages", pageRoutes);  

  return app;
}

module.exports = { createApp };

================
File: portfolio.node/src/cache.js
================
const cache = {
    blogs: {},
    projects: {},
    "blogs-timestamp": 0,
    "projects-timestamp": 0,
  };
  
  const CACHE_TTL = 5 * 60 * 1000; // 5 minutes
  
  // ✅ Check if cache is valid based on timestamp
  function isCacheValid(key) {
    return Date.now() - cache[`${key}-timestamp`] < CACHE_TTL;
  }
  
  // ✅ Get all cached data or fetch if expired
  async function getAllCached(key, fetchFunction) {
    if (isCacheValid(key)) {
      console.log(`Using cached ${key} data`);
      return Object.values(cache[key]); // Return all cached items
    }
  
    console.log(`Refreshing ${key} cache`);
    const data = await fetchFunction();
    cache[key] = {}; // Reset key storage
  
    data.forEach((item) => {
      cache[key][item._id] = item; // Store by ID
    });
  
    cache[`${key}-timestamp`] = Date.now();
    return data;
  }
  
  // ✅ Get a single item from cache or fetch if missing
  async function getCachedById(key, id, fetchFunction) {
    if (cache[key][id]) {
      console.log(`Using cached ${key} entry: ${id}`);
      return cache[key][id];
    }
  
    console.log(`Fetching ${key} entry: ${id} from DB`);
    const item = await fetchFunction(id);
    if (item) {
      cache[key][id] = item;
    }
    return item;
  }
  
  // ✅ Add a new item to cache
  function addToCache(key, item) {
    cache[key][item._id] = item;
  }
  
  // ✅ Reset cache manually (useful for updates/deletes)
  function clearCache(key) {
    cache[key] = {};
    cache[`${key}-timestamp`] = 0;
  }
  
  module.exports = { getAllCached, getCachedById, addToCache, clearCache };

================
File: portfolio.node/src/config/db.js
================
const mongoose = require("mongoose");

const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGO_URI);
    console.log("MongoDB Connected");
  } catch (error) {
    console.error("MongoDB Connection Failed", error);
    process.exit(1);
  }
};

module.exports = connectDB;

================
File: portfolio.node/src/config/passport.js
================
// portfolio.node/src/config/passport.js
const passport = require("passport");
const GoogleStrategy = require("passport-google-oauth20").Strategy;
const FacebookStrategy = require("passport-facebook").Strategy;
const GitHubStrategy = require("passport-github").Strategy;
const MicrosoftStrategy = require("passport-microsoft").Strategy;
const providerConfigService = require("../services/providerConfigService");

// Serialize and deserialize user (for session support, if needed)
passport.serializeUser((user, done) => {
  done(null, user.id);
});
passport.deserializeUser(async (id, done) => {
  try {
    const User = require("../models/User");
    const user = await User.findById(id);
    done(null, user);
  } catch (err) {
    done(err, null);
  }
});

// Helper: Register or fetch a consumer user
async function findOrCreateUser(providerId, email) {
  const User = require("../models/User");
  const authService = require("../services/authService");
  let user = await User.findOne({ username: email });
  if (!user) {
    // Use a dummy password based on providerId (in production, store provider data separately)
    user = await authService.registerUser({ username: email, password: "oauth_" + providerId, isAdmin: false });
  }
  return user;
}

// Helper function to set up an OAuth strategy for a provider
async function setupOAuthStrategy(providerName, StrategyClass, defaultOptions) {
  const providerConfig = await providerConfigService.getConfigByProvider(providerName);
  const clientID = (providerConfig && providerConfig.clientId) || defaultOptions.clientID;
  const clientSecret = (providerConfig && providerConfig.clientSecret) || defaultOptions.clientSecret;
  const callbackURL = (providerConfig && providerConfig.callbackURL) || defaultOptions.callbackURL;

  const strategyOptions = {
    ...defaultOptions,
    clientID,
    clientSecret,
    callbackURL,
  };

  if (clientID && clientSecret && callbackURL) {
    passport.use(
      new StrategyClass(strategyOptions, async (accessToken, refreshToken, profile, done) => {
        try {
          // For GitHub, use a fallback email if none is provided.
          let email;
          if (providerName === "github") {
            email = profile.emails && profile.emails[0].value ? profile.emails[0].value : profile.username + "@github.com";
          } else {
            email = profile.emails && profile.emails[0].value;
          }
          if (!email) throw new Error(`No email returned from ${providerName}`);
          const user = await findOrCreateUser(profile.id, email);
          return done(null, user);
        } catch (error) {
          return done(error, null);
        }
      })
    );
    console.log(`Registered strategy for ${providerName}`);
  } else {
    console.warn(`Missing configuration for ${providerName}, strategy not registered.`);
  }
}

// Set up strategies for all providers
async function setupStrategies() {
  await Promise.all([
    setupOAuthStrategy("google", GoogleStrategy, {
      clientID: process.env.GOOGLE_CLIENT_ID,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET,
      callbackURL: process.env.GOOGLE_CALLBACK_URL || "/api/auth/oauth2/google/callback",
      scope: ["profile", "email"],
    }),
    setupOAuthStrategy("facebook", FacebookStrategy, {
      clientID: process.env.FACEBOOK_CLIENT_ID,
      clientSecret: process.env.FACEBOOK_CLIENT_SECRET,
      callbackURL: process.env.FACEBOOK_CALLBACK_URL || "/api/auth/oauth2/facebook/callback",
      profileFields: ["id", "emails", "name"],
    }),
    setupOAuthStrategy("github", GitHubStrategy, {
      clientID: process.env.GITHUB_CLIENT_ID,
      clientSecret: process.env.GITHUB_CLIENT_SECRET,
      callbackURL: process.env.GITHUB_CALLBACK_URL || "/api/auth/oauth2/github/callback",
      scope: ["user:email"],
    }),
    setupOAuthStrategy("microsoft", MicrosoftStrategy, {
      clientID: process.env.MICROSOFT_CLIENT_ID,
      clientSecret: process.env.MICROSOFT_CLIENT_SECRET,
      callbackURL: process.env.MICROSOFT_CALLBACK_URL || "/api/auth/oauth2/microsoft/callback",
      scope: ["user.read"],
    }),
  ]);
}

module.exports = { passport, setupStrategies };

================
File: portfolio.node/src/config/swagger.js
================
const swaggerUi = require('swagger-ui-express');
const yaml = require('yamljs');
const path = require('path');

// Load OpenAPI YAML file
const openApiDoc = yaml.load(path.join(__dirname, '../docs/openapi.yml'));

// Middleware to serve Swagger UI
const swaggerMiddleware = swaggerUi.serve;
const swaggerSetup = swaggerUi.setup(openApiDoc);

module.exports = { swaggerMiddleware, swaggerSetup };

================
File: portfolio.node/src/docs/openapi.yml
================
openapi: 3.0.0
info:
  title: Portfolio API
  description: API for managing blogs, projects, AI chat, embeddings, search, and career timeline.
  version: 1.4.0

servers:
  - url: http://localhost:5000/api
    description: Local Development Server
  - url: https://yourdomain.com/api
    description: Production Server

tags:
  - name: Authentication
    description: User authentication and session management
  - name: Blogs
    description: Blog creation, retrieval, updates, and deletion
  - name: Projects
    description: Project portfolio management
  - name: AI Chat
    description: AI-powered chatbot using local LLM
  - name: Search
    description: Semantic search and source code search
  - name: Embeddings
    description: Vector embeddings for AI-powered search
  - name: Career Timeline
    description: Interactive career timeline and skills mapping
  - name: Users
    description: Users management (admin)
  - name: Prompts
    description: Prompts configuration and fine tuning

paths:
  /auth/login:
    post:
      tags: [Authentication]
      summary: Login a user (session-based auth)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Login successful
        "401":
          description: Invalid credentials

  /auth/check:
    get:
      tags: [Authentication]
      summary: Check if user logged and session valid
      responses:
        "200":
          description: User logged in
        "401":
          description: User not logged in

  /auth/logout:
    get:
      tags: [Authentication]
      summary: Logout user (clears session)
      responses:
        "200":
          description: User logged out successfully

  /blogs:
    get:
      tags: [Blogs]
      summary: Retrieve all blog posts
      responses:
        "200":
          description: List of blog posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Blog"
    post:
      tags: [Blogs]
      summary: Create a new blog post
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BlogRequest"
      responses:
        "201":
          description: Blog created
        "400":
          description: Validation error

  /blogs/{id}:
    get:
      tags: [Blogs]
      summary: Get a specific blog post
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Blog entry retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Blog"
        "404":
          description: Blog not found
    put:
      tags: [Blogs]
      summary: Update a blog post
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BlogRequest"
      responses:
        "200":
          description: Blog updated
        "404":
          description: Blog not found
    delete:
      tags: [Blogs]
      summary: Delete a blog post
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Blog deleted
        "404":
          description: Blog not found

  /projects:
    get:
      tags: [Projects]
      summary: Retrieve all projects
      responses:
        "200":
          description: List of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Project"
    post:
      tags: [Projects]
      summary: Create a new project
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectRequest"
      responses:
        "201":
          description: Project created
        "400":
          description: Validation error

  /projects/{id}:
    put:
      tags: [Projects]
      summary: Update a project
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectRequest"
      responses:
        "200":
          description: Project updated
        "404":
          description: Project not found
    delete:
      tags: [Projects]
      summary: Delete a project
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Project deleted
        "404":
          description: Project not found
          
  /projects/generate-embeddings:
    post:
      tags: [Projects]
      summary: Generate AI embeddings for all projects
      description: Uses an AI model to generate embeddings for each project and stores them in Qdrant.
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Successfully generated embeddings
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Embeddings generated for all projects."
                  embeddings:
                    type: array
                    items:
                      $ref: "#/components/schemas/ProjectEmbedding"
        "500":
          description: Internal server error

  /career/timeline:
    get:
      tags: [Career Timeline]
      summary: Retrieve career timeline
      responses:
        "200":
          description: Career timeline retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CareerEntry"
    post:
      tags: [Career Timeline]
      summary: Create a career timeline entry
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CareerEntry"
      responses:
        "201":
          description: Career timeline entry created
    delete:
      tags: [Career Timeline]
      summary: Delete a career timeline entry
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Career timeline entry deleted
  /chat:
    post:
      tags: [AI Chat]
      summary: Process user query with LLM chatbot
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChatRequest"
      responses:
        "200":
          description: Chat response from LLM
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatResponse"
    get:
      tags: [AI Chat]
      summary: Retrieve chat history for a session
      parameters:
        - name: sessionId
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Chat history retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ChatMessage"

  /search/semantic:
    post:
      tags: [Search]
      summary: Perform AI-powered semantic search
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SemanticSearchRequest"
      responses:
        "200":
          description: Search results retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SearchResult"

  /search/codebase:
    post:
      tags: [Search]
      summary: Search within indexed source code
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CodeSearchRequest"
      responses:
        "200":
          description: Code search results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CodeSearchResult"

  /search/{collection}:
    post:
      tags: [Search]
      summary: Search across different Qdrant collections
      description: Performs a vector search within the specified collection.
      parameters:
        - name: collection
          in: path
          required: true
          schema:
            type: string
            example: "projects"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: string
                  example: "AI-powered projects"
      responses:
        "200":
          description: Search results
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object

  /embeddings/generate:
    post:
      tags: [Embeddings]
      summary: Generate embeddings for blogs and projects
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Embeddings generated successfully

  /embeddings/refresh:
    post:
      tags: [Embeddings]
      summary: Refresh embeddings from the database
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Embeddings refreshed successfully

  /embeddings/status:
    get:
      tags: [Embeddings]
      summary: Retrieve embedding sync status
      responses:
        "200":
          description: Embedding sync status retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmbeddingStatus"

  /users/admin-exists:
    get:
      tags: [Users]
      summary: Check if an admin user exists
      description: Returns whether an admin user is already set up in the system.
      responses:
        "200":
          description: Admin existence status
          content:
            application/json:
              schema:
                type: object
                properties:
                  exists:
                    type: boolean
        "500":
          description: Server error

  /users:
    post:
      tags: [Users]
      summary: Create a new user (non-admin)
      description: Creates the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
      responses:
        "201":
          description: User created successfully
        "400":
          description: Invalid request or admin already exists
        "500":
          description: Server error

    get:
      tags: [Users]
      summary: Retrieve all users
      security:
        - cookieAuth: []
      description: Returns a list of all registered users (Admin-only).
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "403":
          description: Forbidden (non-admin access)
        "500":
          description: Server error

  /users/{id}:
    get:
      tags: [Users]
      summary: Retrieve a single user by ID
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found
        "500":
          description: Server error

    put:
      tags: [Users]
      summary: Update a user's information
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
      responses:
        "200":
          description: User updated
        "403":
          description: Forbidden (non-admin access)
        "404":
          description: User not found
        "500":
          description: Server error

    delete:
      tags: [Users]
      summary: Delete a user by ID
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User deleted
        "403":
          description: Forbidden (non-admin access)
        "404":
          description: User not found
        "500":
          description: Server error

  /users/initialize:
    post:
      tags: [Users]
      summary: Create a new administrator 
      description: Creates the first admin user if no admin exists.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
      responses:
        "201":
          description: User created successfully
        "400":
          description: Invalid request or admin already exists
        "500":
          description: Server error

  /embeddings/local-directory:
    post:
      tags: [Embeddings]
      summary: Generate embeddings from a local directory
      description: Parses a local directory and generates embeddings for the contained files.
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmbeddingDirectoryRequest"
      responses:
        "200":
          description: Successfully generated embeddings from the directory
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmbeddingStatus"
        "400":
          description: Invalid request
        "500":
          description: Internal server error

  /embeddings/{id}/metadata:
    put:
      tags: [Embeddings]
      summary: Update metadata for an embedding entry
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmbeddingMetadataRequest"
      responses:
        "200":
          description: Metadata updated successfully
        "404":
          description: Embedding not found
  /embeddings/{id}/vector:
    put:
      tags: [Embeddings]
      summary: Update an embedding vector for a document
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newContent:
                  type: string
                  example: "Updated content of my document."
                metadata:
                  type: object
                  example: { "author": "John Doe", "category": "AI" }
      responses:
        "200":
          description: Embedding updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Embedding"
        "404":
          description: Embedding not found
        "500":
          description: Server error
  /embeddings/{id}:
    delete:
      tags: [Embeddings]
      summary: Delete an embedding by ID
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Embedding deleted successfully
        "404":
          description: Embedding not found
        "500":
          description: Server error
  /embeddings/search:
    post:
      tags: [Embeddings]
      summary: Perform a similarity search in Qdrant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                queryVector:
                  type: array
                  items:
                    type: number
                  example: [0.12, 0.98, 0.33, 0.76]
                topK:
                  type: integer
                  default: 5
                minScore:
                  type: number
                  default: 0.5
      responses:
        "200":
          description: Search results retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EmbeddingSearchResult"
        "500":
          description: Server error

  /embeddings/list:
    get:
      tags: [Embeddings]
      summary: Retrieve a list of all embeddings with metadata
      security:
        - cookieAuth: []
      responses:
        "200":
          description: List of embeddings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EmbeddingEntry"
        "500":
          description: Internal server error

  /embeddings:
    post:
      tags: [Embeddings]
      summary: Store a new embedding for a document
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filePath:
                  type: string
                  example: "/documents/article.txt"
                content:
                  type: string
                  example: "This is the content of my document."
                metadata:
                  type: object
                  example: { "author": "John Doe", "category": "Technology" }
      responses:
        "201":
          description: Embedding stored successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Embedding"
        "400":
          description: Invalid input
        "500":
          description: Server error

  /chat/context:
    post:
      tags: [AI Chat]
      summary: Inject web page context into chat
      description: Allows the frontend to inject a web page's content into the chat session.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebContextRequest"
      responses:
        "200":
          description: Web context added successfully

  /prompts:
    get:
      tags: [Prompts]
      summary: Retrieve all stored prompts
      security:
        - cookieAuth: []
      responses:
        "200":
          description: List of prompts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Prompt"

    post:
      tags: [Prompts]
      summary: Create a new prompt
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PromptRequest"
      responses:
        "201":
          description: Prompt created

  /prompts/{id}:
    put:
      tags: [Prompts]
      summary: Update an existing prompt
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PromptRequest"
      responses:
        "200":
          description: Prompt updated

    delete:
      tags: [Prompts]
      summary: Delete a prompt
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Prompt deleted

components:
  schemas:
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password

    Blog:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        excerpt:
          type: string
        body:
          type: string
        isDraft:
          type: boolean
        publishAt:
          type: string
          format: date-time

    BlogRequest:
      type: object
      properties:
        title:
          type: string
        excerpt:
          type: string
        body:
          type: string
        isDraft:
          type: boolean
        publishAt:
          type: string
          format: date-time

    Project:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        image:
          type: string
        link:
          type: string

    ProjectRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        image:
          type: string
        link:
          type: string

    CareerEntry:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        company:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
          nullable: true
        technologies:
          type: array
          items:
            type: string
            
    ChatRequest:
      type: object
      properties:
        sessionId:
          type: string
        query:
          type: string
        history:
          type: array
          items:
            $ref: "#/components/schemas/ChatMessage"
      required:
        - sessionId
        - query

    ChatResponse:
      type: object
      properties:
        response:
          type: string
          description: AI-generated response
        sources:
          type: array
          description: Sources used for AI-generated response
          items:
            type: string

    ChatMessage:
      type: object
      properties:
        sessionId:
          type: string
          description: Unique chat session ID
        role:
          type: string
          enum: [user, ai]
          description: Whether the message is from the user or AI
        text:
          type: string
          description: Chat message content
        createdAt:
          type: string
          format: date-time
          description: Timestamp of the message

    SemanticSearchRequest:
      type: object
      properties:
        query:
          type: string
        top_k:
          type: integer
          default: 5
      required:
        - query

    SearchResult:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        excerpt:
          type: string
        sourceType:
          type: string
          enum: [blog, project]

    CodeSearchRequest:
      type: object
      properties:
        query:
          type: string
      required:
        - query

    CodeSearchResult:
      type: object
      properties:
        file:
          type: string
        snippet:
          type: string
        lineNumber:
          type: integer

    EmbeddingStatus:
      type: object
      properties:
        lastUpdated:
          type: string
          format: date-time
        totalEmbeddings:
          type: integer

    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        isAdmin:
          type: boolean

    UserRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        isAdmin:
          type: boolean
      required:
        - username
        - password

    ProjectEmbedding:
      type: object
      properties:
        projectId:
          type: string
          example: "6543abcd5678ef9012345678"
        embedding:
          type: array
          items:
            type: number
          description: "The generated AI embedding vector for this project."

    EmbeddingDirectoryRequest:
      type: object
      properties:
        directoryPath:
          type: string
          description: Absolute path to the directory to be processed
        includeExtensions:
          type: array
          items:
            type: string
          example: [".js", ".md", ".txt", ".json"]
        metadata:
          type: object
          additionalProperties: true
          description: Optional metadata for embeddings

    EmbeddingMetadataRequest:
      type: object
      properties:
        metadata:
          type: object
          additionalProperties: true
          description: Metadata to associate with an embedding entry

    EmbeddingEntry:
      type: object
      properties:
        id:
          type: string
        filePath:
          type: string
        metadata:
          type: object
          additionalProperties: true

    Embedding:
      type: object
      properties:
        id:
          type: integer
        filePath:
          type: string
          example: "/documents/article.txt"
        metadata:
          type: object
          example: { "author": "John Doe", "category": "Technology" }
        externalId:
          type: integer
          example: 12345

    EmbeddingSearchResult:
      type: object
      properties:
        id:
          type: integer
        filePath:
          type: string
        score:
          type: number
        metadata:
          type: object

    WebContextRequest:
      type: object
      properties:
        sessionId:
          type: string
          description: Unique identifier for the chat session
        content:
          type: string
          description: Extracted content from the web page
      required:
        - sessionId
        - content

    Prompt:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          description: Friendly name for the prompt
        template:
          type: string
          description: Prompt template with placeholders
        metadata:
          type: object
          additionalProperties: true
          description: Optional metadata for the prompt

    PromptRequest:
      type: object
      properties:
        name:
          type: string
        template:
          type: string
        metadata:
          type: object
          additionalProperties: true

securitySchemes:
  cookieAuth:
    type: apiKey
    in: cookie
    name: auth-token

================
File: portfolio.node/src/middlewares/admin.js
================
module.exports = (req, res, next) => {
    if (!req.user || !req.user.isAdmin) {
      return res.status(403).json({ message: "Forbidden: Admin access required" });
    }
    next();
  };

================
File: portfolio.node/src/middlewares/auth.js
================
const authService = require("../services/authService");

module.exports = (req, res, next) => {
  const token = req.cookies["auth-token"];
  if (!token) {
    console.log("No auth-token cookie found");
    return res.status(401).json({ message: "Unauthorized" });
  }

  try {
    const decoded = authService.verifyToken(token);
    req.user = decoded; // Attach user info to the request object
    next();
  } catch (error) {
    return res.status(401).json({ message: "Invalid or expired token" });
  }
};

================
File: portfolio.node/src/middlewares/metrics.js
================
// portfolio.node/src/middleware/metrics.js
'use strict';

const opentelemetry = require('@opentelemetry/api');

// Get a meter instance; the name can be anything that identifies your service.
const meter = opentelemetry.metrics.getMeter('portfolio-node');

// Create a histogram metric to record request durations (in seconds).
const requestDurationHistogram = meter.createHistogram('http_request_duration_seconds', {
  description: 'Duration of HTTP requests in seconds',
  // Optional: define bucket boundaries if desired
  boundaries: [0.1, 0.5, 1, 2, 5, 10],
});

module.exports = function metricsMiddleware(req, res, next) {
  // Record the start time using high-resolution timer.
  const start = process.hrtime();
  
  // When the response is finished, calculate duration and record metric.
  res.on('finish', () => {
    const diff = process.hrtime(start);
    const durationSeconds = diff[0] + diff[1] / 1e9; // seconds

    // Record the duration along with labels to distinguish endpoints.
    requestDurationHistogram.record(durationSeconds, {
      route: req.route ? req.route.path : req.path,
      method: req.method,
      statusCode: res.statusCode,
    });
  });
  
  next();
};

================
File: portfolio.node/src/middlewares/validate.js
================
// portfolio.node/src/middleware/validate.js
module.exports = (schema) => {
    return (req, res, next) => {
      const { error } = schema.validate(req.body);
      if (error) {
        return res.status(400).json({ error: error.details[0].message });
      }
      next();
    };
  };

================
File: portfolio.node/src/models/BlogEntry.js
================
const mongoose = require("mongoose");
const counterService = require("../services/counterService");

const BlogEntrySchema = new mongoose.Schema({
  title: { type: String, required: true },
  excerpt: { type: String, required: true },
  // Blog body stored in Markdown format.
  body: { type: String, required: true },
  isDraft: { type: Boolean, default: false },
  publishAt: { type: Date },
  vectorId : {type: Number, unique: true },
  link : {type : String, default: null},
  tags: {type: Array, default: []}

}, { timestamps: true });

// Generate slug and link from title.
BlogEntrySchema.pre('save', async function(next) {
  const slug = this.title
    .toLowerCase()
    .replace(/[^\w\s-]/g, '') // Remove special characters.
    .replace(/\s+/g, '-')     // Replace spaces with hyphens.
    .replace(/-+/g, '-');     // Collapse multiple hyphens.
  
  this.link = this.link || `${slug}-${this._id}`;
  this.vectorId = this.vectorId || await counterService.getNextVectorId();
  next();
});

module.exports = mongoose.model("BlogEntry", BlogEntrySchema);

================
File: portfolio.node/src/models/CareerTimeline.js
================
const mongoose = require("mongoose");

const CareerTimelineSchema = new mongoose.Schema({
  title: { type: String, required: true }, // Job title, role, or key milestone
  company: { type: String }, // Employer or organization
  startDate: { type: Date, required: true },
  endDate: { type: Date, default: null }, // Null if currently active
  description: { type: String }, // Brief description of responsibilities
  skills: [{ type: String }], // List of skills used
  linkedEntries: [{ type: mongoose.Schema.Types.ObjectId, ref: "CareerTimeline" }], // Links to related events
  importedFromLinkedIn: { type: Boolean, default: false }, // Flag for LinkedIn imports
});

module.exports = mongoose.model("CareerTimeline", CareerTimelineSchema);

================
File: portfolio.node/src/models/ChatMessage.js
================
// portfolio.node/src/models/ChatMessage.js
const mongoose = require("mongoose");

const chatMessageSchema = new mongoose.Schema(
  {
    sessionId: {
      type: String,
      required: true,
      index: true, // Optimized lookup
    },
    role: {
      type: String,
      enum: ["user", "ai"],
      required: true,
    },
    text: {
      type: String,
      required: true,
    },
  },
  {
    timestamps: true, // Adds createdAt and updatedAt fields
  }
);

module.exports = mongoose.model("ChatMessage", chatMessageSchema);

================
File: portfolio.node/src/models/Comment.js
================
const mongoose = require("mongoose");

const CommentSchema = new mongoose.Schema(
  {
    // The author of the comment (could be a username or user ID)
    author: { type: String, required: true },
    // The text content of the comment
    text: { type: String, required: true },
    // Reference to the blog post this comment is associated with
    blog: { type: mongoose.Schema.Types.ObjectId, ref: "BlogEntry", required: true },
    // For nested replies: if this comment is a reply, reference its parent comment.
    parent: { type: mongoose.Schema.Types.ObjectId, ref: "Comment", default: null },
    // Flag to indicate if the comment has been redacted (i.e., moderated)
    redacted: { type: Boolean, default: false },
  },
  {
    timestamps: true, // Automatically adds createdAt and updatedAt fields.
  }
);

module.exports = mongoose.model("Comment", CommentSchema);

================
File: portfolio.node/src/models/Counters.js
================
// portfolio.node/src/models/ProviderConfig.js
const mongoose = require("mongoose");

const CounterSchema = new mongoose.Schema({
  Value: { type: Number, required: true},
  Name: {type: String},

}, { timestamps: true });

module.exports = mongoose.model("Counter", CounterSchema);

================
File: portfolio.node/src/models/Embedding.js
================
const mongoose = require("mongoose");

const EmbeddingSchema = new mongoose.Schema({
    filePath: { type: String, required: true },
    metadata: { type: Object, default: {} },
    externalId: { type: Number, required: true}
}, { timestamps: true });

module.exports = mongoose.model("Embedding", EmbeddingSchema);

================
File: portfolio.node/src/models/Metadata.js
================
const MetadataSchema = new mongoose.Schema({
    key: { type: String, required: true },
    value: { type: String, required: true },
    entityId: { type: mongoose.Schema.Types.ObjectId, required: true },
    entityType: { type: String, enum: ["Project", "BlogEntry", "File"], required: true },
  });

================
File: portfolio.node/src/models/Page.js
================
const mongoose = require("mongoose");

const PageSchema = new mongoose.Schema(
  {
    title: { type: String, required: true },
    slug: { type: String, required: true, unique: true }, // URL-friendly identifier
    content: { type: String, required: true }, // Markdown content
    tags: { type: [String], default: [] }, // Tags for categorization
  },
  { timestamps: true }
);

module.exports = mongoose.model("Page", PageSchema);

================
File: portfolio.node/src/models/Project.js
================
// portfolio.node/src/models/Project.js
const mongoose = require("mongoose");

const ProjectSchema = new mongoose.Schema({
  title: { type: String, required: true },
  excerpt: { type: String, required: true, default: "" },
  description: { type: String, required: true },
  image: { type: String },
  link: { type: String },
  isDraft: { type: Boolean, default: false },
  publishAt: { type: Date, default: Date.now },
  tags: { type: [String], default: [] }, 
  industry: { type: String, default: "General" }, 
  vectorId : {type: Number, unique: true },
}, { timestamps: true });

module.exports = mongoose.model("Project", ProjectSchema);

================
File: portfolio.node/src/models/Prompt.js
================
const mongoose = require("mongoose");

const PromptSchema = new mongoose.Schema({
    name: { type: String, required: true, unique: true }, // Unique identifier for the prompt
    template: { type: String, required: true }, // The actual text of the prompt
    metadata: { type: Object, default: {} } // Optional metadata
}, { timestamps: true });

module.exports = mongoose.model("Prompt", PromptSchema);

================
File: portfolio.node/src/models/ProviderConfig.js
================
// portfolio.node/src/models/ProviderConfig.js
const mongoose = require("mongoose");

const ProviderConfigSchema = new mongoose.Schema({
  provider: { type: String, required: true, unique: true },
  embeddingModel : { type: String, required: true, default: "mistral"},
  chatModel: { type: String, required: true, default: "mistral"},
  clientId: { type: String, required: true },
  clientSecret: { type: String, required: true },
  callbackURL: { type: String, required: true },
}, { timestamps: true });

module.exports = mongoose.model("ProviderConfig", ProviderConfigSchema);

================
File: portfolio.node/src/models/User.js
================
const mongoose = require("mongoose");
const bcrypt = require("bcrypt");

const UserSchema = new mongoose.Schema({
  username: { type: String, required: true, unique: true },
  passwordHash: { type: String, required: true },
  // New field to indicate if the user has admin privileges.
  isAdmin: { type: Boolean, default: false },
});

// Hash password before saving
UserSchema.pre("save", async function (next) {
  if (!this.isModified("passwordHash")) return next();
  const salt = await bcrypt.genSalt(10);
  this.passwordHash = await bcrypt.hash(this.passwordHash, salt);
  next();
});

// Compare password for login
UserSchema.methods.validatePassword = async function (password) {
  return bcrypt.compare(password, this.passwordHash);
};

module.exports = mongoose.model("User", UserSchema);

================
File: portfolio.node/src/routes/authRoutes.js
================
const express = require("express");
const authService = require("../services/authService");
const User = require('../models/User');
const router = express.Router();

// Register a new user using the auth service
router.post("/register", async (req, res) => {
  try {
    const { username, password, isAdmin } = req.body;
    await authService.registerUser({ username, password, isAdmin });
    res.status(201).json({ message: "User created successfully" });
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
});

// Login a user using the auth service
router.post("/login", async (req, res) => {
  try {
    const { username, password } = req.body;
    const token = await authService.loginUser({ username, password });
    
    // Set the token in an HTTP-only cookie
    res.cookie("auth-token", token, {
      httpOnly: true,
      secure: process.env.NODE_ENV === "production",
      sameSite: "Strict",
      maxAge: 3600000, // 1 hour
    });
    
    res.json({ message: "Login successful" });
  } catch (error) {
    res.status(401).json({ message: error.message });
  }
});

// Check authentication using the auth service
router.get("/check", async (req, res) => {

  const admin = await User.findOne({ isAdmin: true });
  if ( !admin){
    console.debug("authentication failed", "no admin user");
    return res.status(200).json({ authenticated: false, setupRequired: true });
  }
  let token = req.cookies["auth-token"] || req.headers.authorization?.split(" ")[1];

  if (!token) {
    console.debug("authentication failed", "no token");
    return res.status(401).json({ authenticated: false, message: "No token provided" });
  }
  try {
    const decoded = authService.verifyToken(token);
    console.debug("authentication successful", decoded.username);
    res.json({ authenticated: true, user: decoded });
  } catch (error) {
    console.error("authentication failed", error);
    res.status(401).json({ authenticated: false, message: error.message });
  }
});

// Logout by clearing the token cookie
router.get("/logout", (req, res) => {
  res.clearCookie("auth-token");
  res.json({ message: "Logged out" });
});

module.exports = router;

================
File: portfolio.node/src/routes/blogRoutes.js
================
// portfolio.node/src/routes/blogRoutes.js
const express = require("express");
const isAuth = require("../middlewares/auth");
const isAdmin = require("../middlewares/admin");
const blogService = require("../services/blogService");
const authService = require("../services/authService");
const router = express.Router();
const validate = require("../middlewares/validate");
const { createBlogSchema } = require("../validators/blogValidator");


// Create a new blog entry using the service module
router.post("/", isAuth, isAdmin, validate(createBlogSchema), async (req, res) => {
  try {
      const newEntry = await blogService.createBlogEntry(req.body);
      res.status(201).json(newEntry);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Get all blog entries using the service module
router.get("/", async (req, res) => {
  try {
    let filter = {};
    try{
      const token = req.cookies["auth-token"];
      const decoded = authService.verifyToken(token);
      req.user = decoded; // Attach user info to the request object
    }
    catch (err){
      // swallow error, user  is just not authenticated.
    }

    // If no auth token, assume a public request.
    if (!req.user?.isAdmin === true) {
      filter = { 
        isDraft: false, 
        publishAt: { $lte: new Date() } // only posts scheduled for now or earlier
      };
    }
    const blogs = await blogService.getAllBlogEntries(filter);
    res.json(blogs);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});


// Get a single blog entry by ID using the service module
router.get("/:id", async (req, res) => {
  try {
    const blog = await blogService.getBlogEntryById(req.params.id);
    if (!blog) return res.status(404).json({ error: "Entry not found" });
    
    // For public requests, ensure the post is published.
    if (!req.cookies["auth-token"] && (blog.isDraft || (blog.publishAt && blog.publishAt > new Date()))) {
      return res.status(404).json({ error: "Entry not found" });
    }
    res.json(blog);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});


// Update a blog entry by ID using the service module
router.put("/:id", isAuth, isAdmin, validate(createBlogSchema), async (req, res) => {
  try {
    const updatedEntry = await blogService.updateBlogEntry(req.params.id, req.body);
    if (!updatedEntry) return res.status(404).json({ error: "Entry not found" });
    res.json(updatedEntry);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Delete a blog entry by ID using the service module
router.delete("/:id", isAuth, isAdmin, async (req, res) => {
  try {
    const deletedEntry = await blogService.deleteBlogEntry(req.params.id);
    if (!deletedEntry) return res.status(404).json({ error: "Entry not found" });
    res.json({ message: "Entry deleted successfully" });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

module.exports = router;

================
File: portfolio.node/src/routes/careerTimelineRoutes.js
================
const express = require("express");
const CareerTimeline = require("../models/CareerTimeline");
const router = express.Router();
const isAuth = require("../middlewares/auth");
const isAdmin = require("../middlewares/admin");
const cheerio = require("cheerio");

// GET all career timeline entries
router.get("/timeline", async (req, res) => {
  try {
    const entries = await CareerTimeline.find().sort({ startDate: -1 });
    res.json(entries);
  } catch (error) {
    res.status(500).json({ error: "Server error while fetching career timeline entries." });
  }
});

// GET a single timeline entry
router.get("/timeline/:id", async (req, res) => {
  try {
    const entry = await CareerTimeline.findById(req.params.id);
    if (!entry) return res.status(404).json({ error: "Entry not found." });
    res.json(entry);
  } catch (error) {
    res.status(500).json({ error: "Server error." });
  }
});

// CREATE a new career timeline entry
router.post("/timeline", isAuth, isAdmin, async (req, res) => {
  try {
    const newEntry = new CareerTimeline(req.body);
    const savedEntry = await newEntry.save();
    res.status(201).json(savedEntry);
  } catch (error) {
    res.status(400).json({ error: "Invalid data." });
  }
});

// UPDATE an existing entry
router.put("/timeline/:id", isAuth, isAdmin, async (req, res) => {
  try {
    const updatedEntry = await CareerTimeline.findByIdAndUpdate(req.params.id, req.body, { new: true });
    if (!updatedEntry) return res.status(404).json({ error: "Entry not found." });
    res.json(updatedEntry);
  } catch (error) {
    res.status(400).json({ error: "Invalid update request." });
  }
});

// DELETE an entry
router.delete("/timeline/:id", isAuth, isAdmin, async (req, res) => {
  try {
    const deletedEntry = await CareerTimeline.findByIdAndDelete(req.params.id);
    if (!deletedEntry) return res.status(404).json({ error: "Entry not found." });
    res.json({ message: "Entry deleted successfully." });
  } catch (error) {
    res.status(500).json({ error: "Server error while deleting entry." });
  }
});

// API to parse LinkedIn HTML
router.post("/parse-linkedin", async (req, res) => {
  try {
    const { rawHTML } = req.body;
    if (!rawHTML) return res.status(400).json({ error: "No HTML provided" });

    const $ = cheerio.load(rawHTML);
    const jobs = [];

    // Iterate over each job entry
    $(".artdeco-list__item").each((_, element) => {
      const company = $(element).find("a.optional-action-target-wrapper span[aria-hidden='true']").first().text().trim();
      const companyLink = $(element).find("a.optional-action-target-wrapper").attr("href");
      const companyLogo = $(element).find("img.ivm-view-attr__img--centered").attr("src");

      // Extract job title
      $(element).find("div.t-bold span[aria-hidden='true']").each((_, jobElement) => {
        const title = $(jobElement).text().trim();

        // Extract date range
        const dateRange = $(element).find("span.pvs-entity__caption-wrapper").first().text().trim();
        let startDate = "", endDate = "Present";
        if (dateRange.includes(" - ")) {
          const dates = dateRange.split(" - ");
          startDate = dates[0]?.trim();
          endDate = dates[1]?.trim() || "Present";
        }

        // Extract location
        const location = $(element).find("span.t-14.t-normal.t-black--light").last().text().trim();

        // Extract job description
        const description = $(element).find("div.WcTepSkGpUVWbbheKPCszGxDQzmhiNFQ span[aria-hidden='true']").text().trim();

        // Ensure valid job entry
        if (title ) {
          jobs.push({
            title,
            company,
            companyLink: companyLink ? `https://www.linkedin.com${companyLink}` : null,
            companyLogo,
            startDate,
            endDate,
            location,
            description,
          });
        }
      });
    });

    res.json(jobs);
  } catch (error) {
    console.error("Error parsing LinkedIn data:", error);
    res.status(500).json({ error: "Failed to parse LinkedIn data." });
  }
});

function parseDate(dateStr) {
  if (!dateStr || dateStr.toLowerCase().includes("present")) {
    return null; // Store null for current jobs
  }
  
  // Extract only the first part of the date (e.g., "Jan 2018" from "Jan 2018 · 4 yrs 7 mos")
  const cleanDate = dateStr.split("·")[0].trim();

  // Convert to a valid Date object
  const parsedDate = new Date(cleanDate);
  return isNaN(parsedDate) ? null : parsedDate;
}

// Bulk insert parsed jobs into the database
router.post("/timeline/bulk", isAuth, isAdmin, async (req, res) => {
  try {
    const entries = req.body.map((entry) => ({
      title: entry.title,
      company: entry.company,
      startDate: parseDate(entry.startDate),
      endDate: parseDate(entry.endDate),
      location: entry.location,
      description: entry.description,
      importedFromLinkedIn: true,
    }));

    await CareerTimeline.insertMany(entries);
    res.json({ success: true, message: "Career entries imported successfully." });
  } catch (error) {
    console.error("Bulk import error:", error);
    res.status(500).json({ error: "Failed to import LinkedIn data." });
  }
});



module.exports = router;

================
File: portfolio.node/src/routes/chatRoutes.js
================
// portfolio.node/src/routes/chatRoutes.js
const express = require("express");
const router = express.Router();
const { processChat, getChatHistory } = require("../services/chatService");

/**
 * @route POST /api/chat
 * @desc Process user query with AI model
 */
router.post("/", async (req, res) => {
  try {
      const { sessionId, query, history, webContext } = req.body;
      const response = await processChat(sessionId, query, history || [], webContext || "");
      
      res.status(200).json({ response });
  } catch (error) {
      console.error("❌ Chat API error:", error.message);
      res.status(500).json({ error: error.message });
  }
});

/**
 * GET /chat
 * Retrieves the chat history for a given session.
 */
router.get("/", async (req, res) => {
  try {
    const { sessionId } = req.query;
    if (!sessionId) {
      return res.status(400).json({ error: "sessionId is required." });
    }

    const history = await getChatHistory(sessionId);
    return res.status(200).json(history);
  } catch (error) {
    console.error("Error retrieving chat history:", error);
    return res.status(500).json({ error: "Internal server error." });
  }
});

module.exports = router;

================
File: portfolio.node/src/routes/commentRoutes.js
================
// portfolio.node/src/routes/commentRoutes.js
const express = require("express");
const authMiddleware = require("../middlewares/auth"); // Protect endpoints where necessary
const commentService = require("../services/commentService");
const Comment = require("../models/Comment");
const router = express.Router();
const adminAuth = require("../middlewares/admin");

/**
 * Create a new comment.
 * Expected body: { author, text, blog, parent (optional) }
 */
router.post("/", authMiddleware, async (req, res) => {
  try {

    if  (!req.user?.isAdmin === true){
      res.status(403);
    }

    const { author, text, blog, parent } = req.body;
    if (!author || !text || !blog) {
      return res.status(400).json({ error: "author, text, and blog fields are required" });
    }
    // Validate parent existence if provided.
    if (parent) {
      const parentComment = await Comment.findById(parent);
      if (!parentComment) {
        return res.status(400).json({ error: "Parent comment not found" });
      }
    }
    const comment = await commentService.createComment({ author, text, blog, parent });
    res.status(201).json(comment);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

/**
 * Retrieve comments for a specific blog post (including nested replies).
 */
router.get("/blog/:blogId", async (req, res) => {
  try {
    const comments = await commentService.getCommentsByBlog(req.params.blogId);
    res.json(comments);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

/**
 * Update a comment by its ID.
 * Expected body may contain: { text (optional), redacted (optional) }
 */
router.put("/:id", authMiddleware, async (req, res) => {
  try {

    if  (!req.user?.isAdmin === true){
      res.status(403);
    }

    const { text, redacted } = req.body;
    const updateData = {};
    if (text !== undefined) updateData.text = text;
    if (redacted !== undefined) updateData.redacted = redacted;
    const updatedComment = await commentService.updateComment(req.params.id, updateData);
    if (!updatedComment) return res.status(404).json({ error: "Comment not found" });
    res.json(updatedComment);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

/**
 * Redact (soft-delete) a comment by marking it as redacted.
 */
router.delete("/:id", authMiddleware, adminAuth, async (req, res) => {
  const updatedComment = await commentService.redactComment(req.params.id);
  if (!updatedComment) return res.status(404).json({ message: "Comment not found" });
  res.json({ message: "Comment redacted", comment: updatedComment });
});


router.get("/all", authMiddleware, async (req, res) => {
  try {
    const comments = await commentService.getAllComments();
    res.json(comments);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

module.exports = router;

================
File: portfolio.node/src/routes/embeddingRoutes.js
================
const express = require("express");
const {
    parseLocalDirectory,
    updateEmbedding,
    listEmbeddings
} = require("../services/embeddingService");  //
const isAdmin = require("../middlewares/admin");

const router = express.Router();

/**
 * @route POST /api/embeddings/local-directory
 * @desc Parse a local directory and generate embeddings
 * @access Admin
 */
router.post("/local-directory", isAdmin, async (req, res) => {
    try {
        const { directoryPath, includeExtensions, metadata } = req.body;
        const result = await parseLocalDirectory(directoryPath, includeExtensions, metadata);
        res.status(200).json(result);
    } catch (error) {
        console.error("❌ Error in embedding route:", error.message);
        res.status(500).json({ error: error.message });
    }
});

/**
 * @route PUT /api/embeddings/:id/metadata
 * @desc Update metadata for a specific embedding
 * @access Admin
 */
router.put("/:id/metadata", isAdmin, async (req, res) => {
    try {
        const { id } = req.params;
        const { metadata } = req.body;
        const result = await updateEmbeddingMetadata({id, metadata});
        res.status(200).json(result);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

/**
 * @route GET /api/embeddings/list
 * @desc Retrieve a list of all embeddings
 * @access Admin
 */
router.get("/list", isAdmin, async (req, res) => {
    try {
        const embeddings = await listEmbeddings();
        res.status(200).json(embeddings);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

/**
 * @route POST /api/embeddings
 * @desc Store a new embedding for a document
 * @access Admin
 */
router.post("/", isAdmin, async (req, res) => {
    try {
        const { filePath, content, metadata } = req.body;
        const result = await storeEmbedding(filePath, content, metadata);
        res.status(201).json(result);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

/**
 * @route DELETE /api/embeddings/:id
 * @desc Delete an embedding by ID
 * @access Admin
 */
router.delete("/:id", isAdmin, async (req, res) => {
    try {
        const { id } = req.params;
        const success = await deleteEmbedding(id);
        if (success) {
            res.status(200).json({ message: "Embedding deleted successfully." });
        } else {
            res.status(404).json({ error: "Embedding not found." });
        }
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

/**
 * @route POST /api/embeddings/search
 * @desc Perform a similarity search in Qdrant
 * @access Public
 */
router.post("/search", async (req, res) => {
    try {
        const { queryVector, topK, minScore } = req.body;
        const results = await searchQdrant(queryVector, COLLECTION_NAME, topK, minScore);
        res.status(200).json(results);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});


module.exports = router;

================
File: portfolio.node/src/routes/fileRoutes.js
================
const express = require("express");
const mongoose = require("mongoose");
const Grid = require("gridfs-stream");
const isAuth = require("../middlewares/auth");
const isAdmin = require("../middlewares/admin");

const router = express.Router();

const conn = mongoose.connection;
let gfs, gridFSBucket;

conn.once("open", () => {
  gridFSBucket = new mongoose.mongo.GridFSBucket(conn.db, { bucketName: "uploads" });
  gfs = Grid(conn.db, mongoose.mongo);
  gfs.collection("uploads");
});

/**
 * 📌 Upload a file (Admins Only)
 */
router.post("/upload", isAuth, isAdmin, async (req, res) => {

  if (!req.headers["content-type"]) {
    console.error("No content-type");
    return res.status(400).json({ error: "Invalid request: No file detected" });
  }

  const { entityId, context, isPublic } = req.query; // Extract metadata from query params

  const filename = req.headers["x-filename"] || "uploaded_file"; // Get filename from headers
  const contentType = req.headers["content-type"];
  const size = req.headers["content-length"];

  const uploadStream = gridFSBucket.openUploadStream(filename, {
    metadata: {
      contentType,
      uploadedBy: req.user._id,
      isPublic: isPublic === "true",
      entityId,
      context, 
      size
    },
  });

  req.pipe(uploadStream); // Stream request body into GridFS

  uploadStream.on("finish", () => {

    res.status(201).json({ message: "File uploaded successfully" });
  });

  uploadStream.on("error", (err) => {
    console.error(err);
    res.status(500).json({ error: "File upload failed" });
  });
});

/**
 * 📌 Get File Metadata
 */
router.get("/:id", async (req, res) => {
  try {
    const file = await gfs.files.findOne({ _id: new mongoose.Types.ObjectId(req.params.id) });
    if (!file) return res.status(404).json({ error: "File not found" });

    res.json(file);
  } catch (err) {
    res.status(500).json({ error: "Error retrieving file" });
  }
});

/**
 * 📌 Serve Public Files (No Auth)
 */
router.get("/public/:id", async (req, res) => {
  try {
    const file = await gfs.files.findOne({ _id: new mongoose.Types.ObjectId(req.params.id) });

    if (!file || !file.metadata.isPublic) {
      return res.status(403).json({ error: "Unauthorized or file not found" });
    }

    const readStream = gridFSBucket.openDownloadStream(file._id);
    res.set("Content-Type", file.metadata.contentType);
    readStream.pipe(res);
  } catch (err) {
    res.status(500).json({ error: "Error retrieving file" });
  }
});

/**
 * 📌 Serve Private Files (Admins Only)
 */
router.get("/private/:id", isAuth, isAdmin, async (req, res) => {

  try {
    const file = await gfs.files.findOne({ _id: new mongoose.Types.ObjectId(req.params.id) });

    if (!file) return res.status(404).json({ error: "File not found" });

    const readStream = gridFSBucket.openDownloadStream(file._id);
    res.set("Content-Type", file.metadata.contentType);
    readStream.pipe(res);
  } catch (err) {
    res.status(500).json({ error: "Error retrieving file" });
  }
});

/**
 * 📌 Delete a File (Admins Only)
 */
router.delete("/:id", isAuth, isAdmin, async (req, res) => {
  try {
    await gridFSBucket.delete(new mongoose.Types.ObjectId(req.params.id));
    res.json({ message: "File deleted successfully" });
  } catch (err) {
    res.status(500).json({ error: "Error deleting file" });
  }
});

/**
 * 📌 Get Files by Reference ID & Context
 */
router.get("/", async (req, res) => {
    const { entityId, context } = req.query;
  
    if (!entityId || !context) {
      return res.status(400).json({ error: "Missing entityId or context" });
    }
  
    try {
      const files = await gfs.files.find({ "metadata.entityId": entityId, "metadata.context": context }).toArray();
      res.json(files);
    } catch (err) {
      console.error(err);
      res.status(500).json({ error: "Error retrieving files" });
    }
  });

  
module.exports = router;

================
File: portfolio.node/src/routes/oauthRoutes.js
================
// portfolio.node/src/routes/oauthRoutes.js
const express = require("express");
const jwt = require("jsonwebtoken");
const {passport} = require("../config/passport");
const router = express.Router();

const SECRET_KEY = process.env.SECRET_KEY || "your_secret_key";

// Helper function to issue a JWT and set it as a cookie.
function issueToken(req, res, returnUrl) {
  const token = jwt.sign(
    { id: req.user.id, username: req.user.username, isAdmin: req.user.isAdmin },
    SECRET_KEY,
    { expiresIn: "1h" }
  );
  res.cookie("auth-token", token, {
    httpOnly: true,
    secure: process.env.NODE_ENV === "production",
    sameSite: "Strict",
    maxAge: 3600000,
  });
  res.redirect(returnUrl);
}


// Google OAuth2 Routes
router.get("/google", (req, res, next) => {
  const { returnUrl } = req.query;
  // Generate a CSRF token (or use a library) – here we use a simple random string for illustration.
  const csrf = Math.random().toString(36).slice(2);
  // (If you use sessions, store the CSRF token for later verification.)
  const state = Buffer.from(JSON.stringify({ returnUrl, csrf })).toString("base64");
  passport.authenticate("google", { scope: ["profile", "email"], state })(req, res, next);
});


router.get("/google/callback", passport.authenticate("google", { failureRedirect: "/login", session: false  }), (req, res) => {
  let returnUrl = "/";
  if (req.query.state) {
    try {
      const state = JSON.parse(Buffer.from(req.query.state, "base64").toString("utf8"));
      returnUrl = state.returnUrl || "/"; 
      // Optionally: Compare state.csrf with the stored token.
    } catch (e) {
      console.error("Failed to parse state parameter:", e);
    }
  }
  issueToken(req, res, returnUrl);
});


router.get("/facebook", (req, res, next) => {
  const { returnUrl } = req.query;
  // Generate a CSRF token (or use a library) – here we use a simple random string for illustration.
  const csrf = Math.random().toString(36).slice(2);
  // (If you use sessions, store the CSRF token for later verification.)
  const state = Buffer.from(JSON.stringify({ returnUrl, csrf })).toString("base64");
  passport.authenticate("facebook", { scope: ["public_profile", "email"], state })(req, res, next);
});


router.get("/facebook/callback", passport.authenticate("facebook", { failureRedirect: "/login", session: false  }), (req, res) => {
  let returnUrl = "/";
  if (req.query.state) {
    try {
      const state = JSON.parse(Buffer.from(req.query.state, "base64").toString("utf8"));
      returnUrl = state.returnUrl || "/"; 

      // Optionally: Compare state.csrf with the stored token.
    } catch (e) {
      console.error("Failed to parse state parameter:", e);
    }
  }
  issueToken(req, res, returnUrl);
});

router.get("/github", (req, res, next) => {
  const { returnUrl } = req.query;
  // Generate a CSRF token (or use a library) – here we use a simple random string for illustration.
  const csrf = Math.random().toString(36).slice(2);
  // (If you use sessions, store the CSRF token for later verification.)
  const state = Buffer.from(JSON.stringify({ returnUrl, csrf })).toString("base64");
  passport.authenticate("github", { scope: ["user:email"], state })(req, res, next);
});


router.get("/github/callback", passport.authenticate("github", { failureRedirect: "/login", session: false  }), (req, res) => {
  let returnUrl = "/";
  if (req.query.state) {
    try {
      const state = JSON.parse(Buffer.from(req.query.state, "base64").toString("utf8"));
      returnUrl = state.returnUrl || "/"; 
      // Optionally: Compare state.csrf with the stored token.
    } catch (e) {
      console.error("Failed to parse state parameter:", e);
    }
  }
  issueToken(req, res, returnUrl);
});

router.get("/microsoft", (req, res, next) => {
  const { returnUrl } = req.query;
  // Generate a CSRF token (or use a library) – here we use a simple random string for illustration.
  const csrf = Math.random().toString(36).slice(2);
  // (If you use sessions, store the CSRF token for later verification.)
  const state = Buffer.from(JSON.stringify({ returnUrl, csrf })).toString("base64");
  passport.authenticate("microsoft", { scope: ["profile", "email"], state })(req, res, next);
});


router.get("/microsoft/callback", passport.authenticate("microsoft", { failureRedirect: "/login", session: false  }), (req, res) => {
  let returnUrl = "/";
  if (req.query.state) {
    try {
      const state = JSON.parse(Buffer.from(req.query.state, "base64").toString("utf8"));
      returnUrl = state.returnUrl || "/"; 
      // Optionally: Compare state.csrf with the stored token.
    } catch (e) {
      console.error("Failed to parse state parameter:", e);
    }
  }
  issueToken(req, res, returnUrl);
});
module.exports = router;

================
File: portfolio.node/src/routes/pageRoutes.js
================
const express = require("express");
const Page = require("../models/Page");
const router = express.Router();
const isAdmin = require("../middlewares/admin");
const isAuth = require("../middlewares/auth");

// Fetch all pages
router.get("/", async (req, res) => {
  try {
    const pages = await Page.find().sort({ createdAt: -1 });
    res.json(pages);
  } catch (error) {
    res.status(500).json({ error: "Failed to load pages" });
  }
});

// Fetch a single page by slug
router.get("/:slug", async (req, res) => {
  try {
    const page = await Page.findOne({ slug: req.params.slug });
    if (!page) return res.status(404).json({ error: "Page not found" });
    res.json(page);
  } catch (error) {
    res.status(500).json({ error: "Failed to fetch page" });
  }
});

// Create a new page (Admin only)
router.post("/", isAuth, isAdmin, async (req, res) => {
  try {
    const { title, slug, content, tags } = req.body;
    const newPage = await Page.create({ title, slug, content, tags });
    res.status(201).json(newPage);
  } catch (error) {
    res.status(500).json({ error: "Failed to create page" });
  }
});

// Update a page (Admin only)
router.put("/:id", isAuth, isAdmin, async (req, res) => {
  try {
    const { title, slug, content, tags } = req.body;
    const updatedPage = await Page.findByIdAndUpdate(
      req.params.id,
      { title, slug, content, tags },
      { new: true }
    );
    res.json(updatedPage);
  } catch (error) {
    res.status(500).json({ error: "Failed to update page" });
  }
});

// Delete a page (Admin only)
router.delete("/:id", isAuth, isAdmin, async (req, res) => {
  try {
    await Page.findByIdAndDelete(req.params.id);
    res.json({ message: "Page deleted successfully" });
  } catch (error) {
    res.status(500).json({ error: "Failed to delete page" });
  }
});

module.exports = router;

================
File: portfolio.node/src/routes/projectRoutes.js
================
const express = require("express");
const authMiddleware = require("../middlewares/auth");
const adminAuth = require("../middlewares/admin");
const projectService = require("../services/projectService");
const Project = require("../models/Project");

const router = express.Router();

// Create a new project using the service module
router.post("/", authMiddleware, adminAuth, async (req, res) => {
  try {
    const newProject = await projectService.createProject(req.body);
    res.status(201).json(newProject);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Get all projects using the service module
router.get("/", async (req, res) => {
  try {
    let filter = {};
    if (!req.cookies["auth-token"]) {
      filter = { 
        isDraft: false, 
        publishAt: { $lte: new Date() }
      };
    }
    const projects = await projectService.getAllProjects(filter);
    res.json(projects);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Get a single project by ID using the service module
router.get("/:id", async (req, res) => {
  try {
    const project = await projectService.getProjectById(req.params.id);
    if (!project) return res.status(404).json({ error: "Project not found" });
    res.json(project);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Update a project by ID using the service module
router.put("/:id", authMiddleware, adminAuth, async (req, res) => {
  try {
    const updatedProject = await projectService.updateProject(req.params.id, req.body);
    if (!updatedProject) return res.status(404).json({ error: "Project not found" });
    res.json(updatedProject);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Delete a project by ID using the service module
router.delete("/:id", authMiddleware, adminAuth, async (req, res) => {
  try {
    const deletedProject = await projectService.deleteProject(req.params.id);
    if (!deletedProject) return res.status(404).json({ error: "Project not found" });
    res.json({ message: "Project deleted successfully" });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

router.post("/generate-embeddings", authMiddleware, adminAuth, async (req, res) => {
  const projects = await Project.find();
  for (const project of projects) {
    await projectService.generateEmbeddingsAndStore(project);
  }
  res.json({ message: "Embeddings generated for all projects." });
});

router.post("/search", async (req, res) => {
  const { query } = req.body;

  if (!query) return res.status(400).json({ message: "Query is required" });

  const embedding = await generateEmbedding(query);
  if (!embedding) return res.status(500).json({ message: "Failed to generate query embedding" });

  const results = await searchProjects(embedding);
  res.json(results);
});


module.exports = router;

================
File: portfolio.node/src/routes/promptRoutes.js
================
const express = require("express");
const {
    getAllPrompts,
    getPromptById,
    createPrompt,
    updatePrompt,
    deletePrompt
} = require("../services/promptService");

const isAdmin = require("../middlewares/admin"); // Ensure only admins manage prompts
const router = express.Router();

/**
 * @route GET /api/prompts
 * @desc Retrieve all stored prompts
 * @access Admin
 */
router.get("/", isAdmin, async (req, res) => {
    try {
        const prompts = await getAllPrompts();
        res.status(200).json(prompts);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

/**
 * @route GET /api/prompts/:id
 * @desc Retrieve a specific prompt by ID
 * @access Admin
 */
router.get("/:id", isAdmin, async (req, res) => {
    try {
        const prompt = await getPromptById(req.params.id);
        res.status(200).json(prompt);
    } catch (error) {
        res.status(404).json({ error: error.message });
    }
});

/**
 * @route POST /api/prompts
 * @desc Create a new prompt
 * @access Admin
 */
router.post("/", isAdmin, async (req, res) => {
    try {
        const prompt = await createPrompt(req.body);
        res.status(201).json(prompt);
    } catch (error) {
        res.status(400).json({ error: error.message });
    }
});

/**
 * @route PUT /api/prompts/:id
 * @desc Update an existing prompt
 * @access Admin
 */
router.put("/:id", isAdmin, async (req, res) => {
    try {
        const prompt = await updatePrompt(req.params.id, req.body);
        res.status(200).json(prompt);
    } catch (error) {
        res.status(404).json({ error: error.message });
    }
});

/**
 * @route DELETE /api/prompts/:id
 * @desc Delete a prompt
 * @access Admin
 */
router.delete("/:id", isAdmin, async (req, res) => {
    try {
        await deletePrompt(req.params.id);
        res.status(200).json({ message: "Prompt deleted successfully." });
    } catch (error) {
        res.status(404).json({ error: error.message });
    }
});

module.exports = router;

================
File: portfolio.node/src/routes/providerConfigRoutes.js
================
// portfolio.node/src/routes/providerConfigRoutes.js
const express = require("express");
const authMiddleware = require("../middlewares/auth");
const providerConfigService = require("../services/providerConfigService");
const router = express.Router();

// GET /api/provider-configs: Retrieve all provider configurations.
// router.get("/", authMiddleware, async (req, res) => {
//   try {

//     if  (!req.user?.isAdmin === true){
//       res.status(403);
//     }

//     const configs = await providerConfigService.getAllConfigs();
//     res.json(configs);
//   } catch (error) {
//     res.status(500).json({ error: error.message });
//   }
// });

// PUT /api/provider-configs/:provider: Update configuration for a specific provider.
router.put("/:provider", authMiddleware, async (req, res) => {
  try {

    if  (!req.user?.isAdmin === true){
      res.status(403);
    }

    const { provider } = req.params;
    const configData = req.body;
    const updatedConfig = await providerConfigService.updateConfig(provider, configData);
    res.json(updatedConfig);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// GET /api/provider-configs: Retrieve all provider configurations.
router.get("/", authMiddleware, async (req, res) => {
  try {
    if (!req.user?.isAdmin) {
      return res.status(403).json({ error: "Forbidden" });
    }
    const configs = await providerConfigService.getAllConfigs();
    res.json(configs);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// GET /api/provider-configs/ai: Retrieve AI model configuration.
router.get("/ai", authMiddleware, async (req, res) => {
  try {
    const config = await providerConfigService.getAIConfig();
    res.json(config);
  } catch (error) {
    res.status(500).json({ error: "Failed to fetch AI configuration" });
  }
});

// PUT /api/provider-configs/ai: Update AI model configuration.
router.put("/ai", authMiddleware, async (req, res) => {
  try {
    if (!req.user?.isAdmin) {
      return res.status(403).json({ error: "Forbidden" });
    }

    const { provider, clientId, clientSecret } = req.body;
    if (!["ollama", "openai"].includes(provider)) {
      return res.status(400).json({ error: "Invalid provider" });
    }

    const updatedConfig = await providerConfigService.updateConfig(provider, { clientId, clientSecret });
    res.json(updatedConfig);
  } catch (error) {
    res.status(500).json({ error: "Failed to update AI configuration" });
  }
});

module.exports = router;

================
File: portfolio.node/src/routes/searchRoutes.js
================
const express = require("express");
const {searchQdrant, generateEmbedding} = require("../services/qdrantService");
const router = express.Router();


router.post("/:collection", async (req, res) => {
    const { query } = req.body;
    const { collection } = req.params;
  
    if (!query) return res.status(400).json({ message: "Query is required" });
  
    const embedding = await generateEmbedding(query);
    if (!embedding) return res.status(500).json({ message: "Failed to generate query embedding" });
  
    const results = await searchQdrant(embedding, collection);
    res.json(results);
  });
  
  module.exports = router;

================
File: portfolio.node/src/routes/userRoutes.js
================
const express = require("express");
const userService = require("../services/userService");
const authMiddleware = require("../middlewares/auth");
const User = require('../models/User');
const adminAuth = require('../middlewares/admin');

const router = express.Router();


router.post("/initialize", async (req, res) => {
  try {

    const admin = await User.findOne({ isAdmin: true });
    if ( admin ){
      res.status(403).json({ message: "Admin user already exists." });
      return;
    }

    const { username, password } = req.body;

    // Delegate the creation to the user service.
    const newUser = await userService.createUser({ username, password, isAdmin: true });
    res.status(201).json({ message: "User created successfully" });
  } catch (error) {
    console.error("Error creating user:", error);
    // Use 400 for client errors (e.g., missing fields or duplicate user)
    res.status(error.message === "User already exists" || error.message === "Username and password are required" ? 400 : 500)
       .json({ error: error.message });
  }
});


router.get("/admin-exists", async (req, res) => {
  try {
    const admin = await User.findOne({ isAdmin: true });
    res.json({ exists: !!admin });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// A simple GET endpoint that serves a registration form.
router.get("/create", async (req, res) => {
  res.send(`
        <html>
        <head><title>Create User</title></head>
        <body>
            <h2>Create a New User</h2>
                <form action="/api/users" method="POST">
                <label>Username: <input type="text" name="username" required /></label><br/>
                <label>Password: <input type="password" name="password" required /></label><br/>
                <button type="submit">Create</button>
            </form>
        </body>
        </html>
    `);
});

// Endpoint for user registration
router.post("/", authMiddleware, async (req, res) => {
  try {

    if  (!req.user?.isAdmin === true){
      res.status(403);
    }

    const { username, password } = req.body;

    // Delegate the creation to the user service.
    const newUser = await userService.createUser({ username, password });
    console.log("New User Created:", newUser.username);
    res.status(201).json({ message: "User created successfully" });
  } catch (error) {
    console.error("Error creating user:", error);
    // Use 400 for client errors (e.g., missing fields or duplicate user)
    res.status(error.message === "User already exists" || error.message === "Username and password are required" ? 400 : 500)
       .json({ error: error.message });
  }
});

router.get("/", authMiddleware, adminAuth, async (req, res) => {
  const users = await userService.getAllUsers();
  res.json(users);
});

router.get("/:id", authMiddleware, adminAuth, async (req, res) => {
  const user = await userService.getUserById(req.params.id);
  if (!user) return res.status(404).json({ message: "User not found" });
  res.json(user);
});

router.put("/:id", authMiddleware, adminAuth, async (req, res) => {
  const updatedUser = await userService.updateUser(req.params.id, req.body);
  if (!updatedUser) return res.status(404).json({ message: "User not found" });
  res.json(updatedUser);
});

router.delete("/:id", authMiddleware, adminAuth, async (req, res) => {
  const deletedUser = await userService.deleteUser(req.params.id);
  if (!deletedUser) return res.status(404).json({ message: "User not found" });
  res.json({ message: "User deleted" });
});

module.exports = router;

================
File: portfolio.node/src/server.js
================
// portfolio.node/src/server.js
const http = require("http");
const { createApp } = require("./app");
const { setupWebSocketServer } = require("./services/wsChatService");

const PORT = process.env.PORT || 5000;

createApp()
  .then(app => {
    // Create HTTP Server
    const server = http.createServer(app);

    // Attach WebSocket Server to HTTP Server
    setupWebSocketServer(server);

    server.listen(PORT, () => console.log(`Server running on port ${PORT} with WebSocket support`));
  })
  .catch(err => {
    console.error("Failed to create app:", err);
  });

================
File: portfolio.node/src/services/authService.js
================
const User = require("../models/User");
const jwt = require("jsonwebtoken");

// Use SECRET_KEY from environment variables or fallback
const SECRET_KEY = process.env.SECRET_KEY || "your_secret_key";

/**
 * Registers a new user.
 * If `isAdmin` is true, ensures no admin user already exists.
 * @param {Object} param0 - Contains username, password, and optional isAdmin flag.
 * @returns {Promise<Object>} - The created user.
 */
async function registerUser({ username, password, isAdmin = false }) {
  // If registering an admin, check that no admin exists yet.
  if (isAdmin) {
    const existingAdmin = await User.findOne({ isAdmin: true });
    if (existingAdmin) {
      throw new Error("An admin user already exists. Admin registration requires an existing admin.");
    }
  }

  // Check for an existing user with the same username.
  const existingUser = await User.findOne({ username });
  if (existingUser) {
    throw new Error("User already exists");
  }
  
  // Create a new user; the User model's pre-save hook hashes the password.
  const user = new User({ username, passwordHash: password, isAdmin });
  await user.save();
  return user;
}

/**
 * Logs in a user by validating credentials and returning a JWT.
 * @param {Object} param0 - Contains username and password.
 * @returns {Promise<string>} - JWT token.
 */
async function loginUser({ username, password }) {
  const user = await User.findOne({ username });
  if (!user || !(await user.validatePassword(password))) {
    throw new Error("Invalid credentials");
  }
  const token = jwt.sign({ id: user.id, username: user.username, isAdmin: user.isAdmin }, SECRET_KEY, {
    expiresIn: "1h",
  });
  return token;
}

/**
 * Verifies a JWT token.
 * @param {string} token - The JWT token.
 * @returns {Object} - Decoded token information.
 */
function verifyToken(token) {
  try {
    const decoded = jwt.verify(token, SECRET_KEY);
    return decoded;
  } catch (error) {
    throw new Error("Invalid token");
  }
}

module.exports = {
  registerUser,
  loginUser,
  verifyToken,
};

================
File: portfolio.node/src/services/blogService.js
================
// portfolio.node/src/services/blogService.js
const BlogEntry = require("../models/BlogEntry");
const counterService = require("../services/counterService");

const { addToCache, clearCache } = require("../cache");

/**
 * Creates a new blog entry and adds it to the cache.
 * @param {Object} data - Blog entry data.
 * @returns {Promise<Object>} - The saved blog entry.
 */
async function createBlogEntry(data) {
  try{
    const newEntry = new BlogEntry(data);
    await newEntry.save();
    addToCache("blogs", newEntry);
    return newEntry;
  }
  catch (err){
    console.error(err);
  }
}

/**
 * Retrieves all blog entries sorted by creation date.
 * @returns {Promise<Array>} - Array of blog entries.
 */
async function getAllBlogEntries(filter = {}) {
  const blogs = await BlogEntry.find(filter).sort({ createdAt: -1 });
  console.log("blogs", blogs);
  return blogs;
}

/**
 * Retrieves a single blog entry by its ID.
 * @param {string} id - The blog entry ID.
 * @returns {Promise<Object|null>} - The found blog entry or null.
 */
async function getBlogEntryById(id) {
  const blog = await BlogEntry.findById(id);
  return blog;
}

/**
 * Updates a blog entry by its ID.
 * @param {string} id - The blog entry ID.
 * @param {Object} data - Data to update.
 * @returns {Promise<Object|null>} - The updated blog entry or null.
 */
async function updateBlogEntry(id, data) {
  const updatedEntry = await BlogEntry.findByIdAndUpdate(id, data, { new: true });
  updatedEntry.save();
  return updatedEntry;
}

/**
 * Deletes a blog entry by its ID and clears the related cache.
 * @param {string} id - The blog entry ID.
 * @returns {Promise<Object|null>} - The deleted blog entry or null.
 */
async function deleteBlogEntry(id) {
  const deletedEntry = await BlogEntry.findByIdAndDelete(id);
  clearCache("blogs");
  return deletedEntry;
}

module.exports = {
  createBlogEntry,
  getAllBlogEntries,
  getBlogEntryById,
  updateBlogEntry,
  deleteBlogEntry,
};

================
File: portfolio.node/src/services/chatService.js
================
// portfolio.node/src/services/chatService.js
const ChatMessage = require("../models/ChatMessage");
const {searchQdrant, generateEmbedding} = require("../services/qdrantService");
const providerConfigService = require("../services/providerConfigService");
const ollamaService = require("../services/ollamaService"); // AI Model Integration
const generatePrompt = require("../utils/generatePrompt");

/**
 * Processes a user query using the AI model.
 * @param {string} sessionId - Chat session ID.
 * @param {string} query - User's chat message.
 * @param {array} history - Previous chat messages.
 * @param {string} webContext - Extracted web page content (if available).
 * @returns {Promise<{ response: string, sources: string[] }>} - AI response with sources.
 */
async function processChat(sessionId, query, history = [], webContext = "") {
  try {
      // Generate AI prompt
      const { formattedPrompt, sources } = await generatePrompt(query, history, webContext);

      const config = await providerConfigService.getAIConfig();
      let response;
      
      if (config.provider === "ollama") {
        response = await ollamaService.generateResponse(formattedPrompt);
      } else if (config.provider === "openai") {
        response = await requestOpenAIResponse(formattedPrompt, history, config.clientId, config.clientSecret);
      } else {
        throw new Error("Invalid AI provider configured");
      }

      // Store user message & AI response in chat history
      await ChatMessage.create({ sessionId, role: "user", text: query });
      await ChatMessage.create({ sessionId, role: "ai", text: response });

      return { response, sources };
  } catch (error) {
      console.error(`❌ Chat processing error:`, error.message);
      return { response: "Sorry, I encountered an error.", sources: [] };
  }
}



/**
 * Retrieves chat history for a session.
 * @param {string} sessionId - The chat session identifier.
 * @returns {Promise<ChatMessage[]>} - Chat history messages.
 */
async function getChatHistory(sessionId) {
  return await ChatMessage.find({ sessionId }).sort({ createdAt: 1 });
}

async function requestOpenAIResponse(query, history, clientId, clientSecret) {
  
  const response = await fetch("https://api.openai.com/v1/chat/completions", {
    method: "POST",
    headers: {
      Authorization: `Bearer ${clientSecret}`,
      "OpenAI-Organization": clientId,
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      model: "gpt-4",
      messages: history.concat([{ role: "user", content: query }]),
      temperature: 0.7,
    }),
  });

  return response.data.choices[0].message.content;
}
module.exports = { processChat, getChatHistory };

================
File: portfolio.node/src/services/commentService.js
================
// portfolio.node/src/services/commentService.js
const Comment = require("../models/Comment");

async function getAllComments() {
  const comments = await Comment.find({ parent: null }).sort({ createdAt: -1 });
  return Promise.all(
    comments.map(async (comment) => {
      const nestedReplies = await getNestedReplies(comment._id, comment.redacted);
      return { ...comment.toObject(), replies: nestedReplies };
    })
  );
}

async function getNestedReplies(parentId, redacted) {
  const replies = await Comment.find({ parent: parentId, redacted: redacted }).sort({ createdAt: 1 });
  return Promise.all(
    replies.map(async (reply) => {
      const nestedReplies = await getNestedReplies(reply._id);
      return { ...reply.toObject(), replies: nestedReplies };
    })
  );
}

/**
 * Retrieves root-level comments for a given blog post along with their immediate replies.
 * @param {string} blogId - The blog post ID.
 * @returns {Promise<Array>} - Array of comments with nested replies.
 */
async function getCommentsByBlog(blogId) {
  const comments = await Comment.find({ blog: blogId, parent: null }).sort({ createdAt: -1 });
  return Promise.all(
    comments.map(async (comment) => {
      const nestedReplies = await getNestedReplies(comment._id, false);
      return { ...comment.toObject(), replies: nestedReplies };
    })
  );
}


/**
 * Creates a new comment.
 * @param {Object} data - Comment data: { author, text, blog, parent (optional) }
 * @returns {Promise<Object>} - The created comment.
 */
async function createComment(data) {
  const { author, text, blog, parent } = data;
  const comment = new Comment({
    author,
    text,
    blog,
    parent: parent || null,
  });
  await comment.save();
  return comment;
}


/**
 * Updates a comment by its ID.
 * @param {string} id - Comment ID.
 * @param {Object} updateData - Data to update (text, redacted).
 * @returns {Promise<Object|null>} - The updated comment or null if not found.
 */
async function updateComment(id, updateData) {
  return Comment.findByIdAndUpdate(id, updateData, { new: true });
}

/**
 * Redacts a comment by its ID (marks as redacted).
 * @param {string} id - Comment ID.
 * @returns {Promise<Object|null>} - The redacted comment or null if not found.
 */
async function redactComment(id) {
  return Comment.findByIdAndUpdate(id, { redacted: true }, { new: true });
}

module.exports = {
  createComment,
  getCommentsByBlog,
  updateComment,
  redactComment,
  getAllComments
};

================
File: portfolio.node/src/services/counterService.js
================
const Counter = require("../models/Counters");

/**
 * Get the next unique vectorId in a multi-user safe way.
 * Uses MongoDB's atomic `$inc` operation to prevent race conditions.
 *
 * @param {string} name - The counter name (e.g., "vectorId")
 * @returns {Promise<number>} - The next incremented value
 */
async function getNextVectorId(name = "vectorId") {
  const counter = await Counter.findOneAndUpdate(
    { Name: name },  // Find by counter name
    { $inc: { Value: 1 } },  // Atomically increment the counter
    { new: true, upsert: true } // Create if not exists
  );

  return counter.Value;
}

module.exports = { getNextVectorId };

================
File: portfolio.node/src/services/embeddingService.js
================
const EMBEDDING_SERVICE = process.env.EMBEDDING_SERVICE?.toLowerCase() || "ollama"; // Default to Ollama
const EMBEDDING_MODEL = process.env.EMBEDDING_MODEL || "mistral"; // Default model for Ollama
const VECTOR_SIZE = parseInt(process.env.VECTOR_SIZE, 10) || (EMBEDDING_SERVICE === "openai" ? 1536 : 4096);
const OLLAMA_API_URL = process.env.OLLAMA_API_URL || "http://localhost:11434";
const OPENAI_API_URL = "https://api.openai.com/v1";
const OPENAI_API_KEY = process.env.OPENAI_API_KEY; // Ensure API key is set for OpenAI

async function generateEmbeddings(text) {
  if (EMBEDDING_SERVICE === "openai") {
    if (!OPENAI_API_KEY) {
      throw new Error("OpenAI API key is missing. Set OPENAI_API_KEY in your .env file.");
    }
    return generateOpenAIEmbeddings(text);
  }
  return generateOllamaEmbeddings(text); // Default to Ollama
}

async function generateOllamaEmbeddings(text) {
  try {
    const response = await fetch(`${OLLAMA_API_URL}/api/embeddings`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        model: EMBEDDING_MODEL, // Dynamically set from .env
        prompt: text,
      }),
    });

    if (!response.ok) {
      throw new Error(`Ollama API Error: ${response.statusText}`);
    }

    const data = await response.json();
    if (data.embedding.length !== VECTOR_SIZE) {
      throw new Error(`Expected vector size ${VECTOR_SIZE}, but got ${data.embedding.length}`);
    }
    return data.embedding;
  } catch (error) {
    console.error("Error generating embeddings with Ollama:", error);
    throw new Error("Failed to generate embeddings with Ollama.");
  }
}

async function generateOpenAIEmbeddings(text) {
  try {
    const response = await fetch(`${OPENAI_API_URL}/embeddings`, {
      method: "POST",
      headers: {
        Authorization: `Bearer ${OPENAI_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "text-embedding-ada-002", // Ensure correct OpenAI model
        input: text,
      }),
    });

    if (!response.ok) {
      throw new Error(`OpenAI API Error: ${response.statusText}`);
    }

    const data = await response.json();
    if (data.data[0].embedding.length !== VECTOR_SIZE) {
      throw new Error(`Expected vector size ${VECTOR_SIZE}, but got ${data.data[0].embedding.length}`);
    }
    return data.data[0].embedding;
  } catch (error) {
    console.error("Error generating embeddings with OpenAI:", error);
    throw new Error("Failed to generate embeddings with OpenAI.");
  }
}

module.exports = {
  generateEmbeddings,
};

================
File: portfolio.node/src/services/ollamaService.js
================
// portfolio.node/src/services/ollamaService.js

const OLLAMA_URL = process.env.OLLAMA_URL || "http://10.0.0.42:11434";
const PROMPT_MODEL = process.env.PROMPT_MODEL || "mistral";

/**
 * Sends a structured prompt to the Ollama AI model and retrieves a response.
 * @param {string} prompt - The structured prompt with context and user query.
 * @returns {Promise<{ response: string }>} - AI-generated response.
 */
async function generateResponse(prompt) {
  try {
    const response = await fetch(`${OLLAMA_URL}/api/generate`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        model: PROMPT_MODEL,
        prompt: prompt,
        max_tokens: 200,
        temperature: 0.7,
      }),
    });

    if (!response.ok) {
      throw new Error(`Ollama API returned an error: ${response.statusText}`);
    }

    // Read the response as a stream
    const reader = response.body.getReader();
    let fullResponse = "";

    while (true) {
      const { done, value } = await reader.read();
      if (done) break;

      // Convert chunk to string
      const chunk = new TextDecoder().decode(value);
      
      // Process each JSON object (one per line)
      chunk.split("\n").forEach((line) => {
        if (line.trim()) {
          try {
            const parsed = JSON.parse(line);
            if (parsed.response) {
              fullResponse += parsed.response; // Append each part of the response
            }
          } catch (err) {
            console.warn("Skipping invalid JSON chunk:", line);
          }
        }
      });
    }

    return { response: fullResponse.trim() || "No response generated." };
  } catch (error) {
    console.error("Error communicating with Ollama:", error);
    return { response: "I'm having trouble generating a response right now. Try again later." };
  }
}

async function generateResponseStream(prompt) {

  const url = `${OLLAMA_URL}/api/generate`;
  // console.log("calling ollama", url);
    const response = await fetch(url, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        model: "mistral",
        prompt: prompt,
        max_tokens: 200,
        temperature: 0.7,
      }),
    });
  
    const reader = response.body.getReader();
    
    return new ReadableStream({
      async start(controller) {
        let accumulatedResponse = "";
  
        while (true) {
          const { done, value } = await reader.read();
          if (done) {
            controller.close();
            break;
          }
  
          const chunk = new TextDecoder().decode(value);
  
          // Process streamed JSON lines
          chunk.split("\n").forEach((line) => {
            if (line.trim()) {
              try {
                const parsed = JSON.parse(line);
                if (parsed.response) {
                  accumulatedResponse += parsed.response;
                  controller.enqueue(parsed.response); // Send each chunk immediately
                }
              } catch (err) {
                console.warn("Skipping invalid JSON chunk:", line);
              }
            }
          });
        }
      }
    });
  }
  

module.exports = { generateResponse, generateResponseStream };

================
File: portfolio.node/src/services/projectService.js
================
const Project = require("../models/Project");
const { storeEmbedding, generateEmbedding, searchQdrant } = require("../services/qdrantService");
const {getNextVectorId} = require("../services/counterService");

/**
 * Creates a new project.
 * @param {Object} data - Project data.
 * @returns {Promise<Object>} - The created project.
 */
async function createProject(data) {
  const project = new Project(data);
  await project.save();

  const textToEmbed = `${project.title} ${project.description} ${project.tags.join(" ")} ${project.industry}`;
  const embedding = await generateEmbedding(textToEmbed);

  if (embedding) {
    await storeEmbedding(project._id, textToEmbed, embedding);
  }

  return project;
}

/**
 * Retrieves all projects.
 * @returns {Promise<Array>} - Array of projects.
 */
async function getAllProjects(filter = {}) {
  return Project.find(filter);
}

/**
 * Retrieves a project by its ID.
 * @param {string} id - The project ID.
 * @returns {Promise<Object|null>} - The found project or null.
 */
async function getProjectById(id) {
  return Project.findById(id);
}

/**
 * Updates a project by its ID.
 * @param {string} id - The project ID.
 * @param {Object} data - Data to update.
 * @returns {Promise<Object|null>} - The updated project or null.
 */
async function updateProject(id, data) {
  return Project.findByIdAndUpdate(id, data, { new: true });
}

/**
 * Deletes a project by its ID.
 * @param {string} id - The project ID.
 * @returns {Promise<Object|null>} - The deleted project or null.
 */
async function deleteProject(id) {
  return Project.findByIdAndDelete(id);
}


async function generateEmbeddingsAndStore(project) {
  const text = `${project.title} ${project.description} ${project.tags.join(" ")} ${project.industry}`;
  
  if (!project.vectorId) {
    project.vectorId = await getNextVectorId("vectorId");  // ✅ Assign unique, thread-safe Qdrant ID
    await project.save();
  }

  // 1️⃣ Generate the embedding vector
  const vector = await generateEmbedding(text);
  
  if (!vector) {
    console.error(`❌ Failed to generate embedding for project: ${project._id}`);
    return;
  }

  // 2️⃣ Store the embedding in Qdrant
  await storeEmbedding(project.vectorId, text, vector);  
}

/**
 * Search the project collection
 * @param {string} search - search text
 * @returns {Promise<Object|null>} - The search response
 */
async function searchProjects(search) {
  const { query } = req.body;

  if (!query) return res.status(400).json({ message: "Query is required" });

  const embedding = await generateEmbedding(query);
  if (!embedding) return res.status(500).json({ message: "Failed to generate query embedding" });

  const results = await searchQdrant(embedding, "projects");  // ✅ Always searches in "projects"
  res.json(results);
}


module.exports = {
  createProject,
  getAllProjects,
  getProjectById,
  updateProject,
  deleteProject,
  generateEmbeddingsAndStore,
  searchProjects
};

================
File: portfolio.node/src/services/promptService.js
================
const Prompt = require("../models/Prompt");

/**
 * Retrieves all stored prompts.
 */
async function getAllPrompts() {
    return await Prompt.find();
}

/**
 * Retrieves a specific prompt by ID.
 */
async function getPromptById(id) {
    const prompt = await Prompt.findById(id);
    if (!prompt) {
        throw new Error("Prompt not found.");
    }
    return prompt;
}

/**
 * Creates a new AI prompt.
 */
async function createPrompt({ name, template, metadata = {} }) {
    if (await Prompt.findOne({ name })) {
        throw new Error("A prompt with this name already exists.");
    }
    
    return await Prompt.create({ name, template, metadata });
}

/**
 * Updates an existing prompt.
 */
async function updatePrompt(id, { name, template, metadata }) {
    const prompt = await Prompt.findByIdAndUpdate(id, { name, template, metadata }, { new: true });
    if (!prompt) {
        throw new Error("Prompt not found.");
    }
    return prompt;
}

/**
 * Deletes a prompt by ID.
 */
async function deletePrompt(id) {
    const prompt = await Prompt.findByIdAndDelete(id);
    if (!prompt) {
        throw new Error("Prompt not found.");
    }
    return prompt;
}

module.exports = {
    getAllPrompts,
    getPromptById,
    createPrompt,
    updatePrompt,
    deletePrompt
};

================
File: portfolio.node/src/services/providerConfigService.js
================
// portfolio.node/src/services/providerConfigService.js
const ProviderConfig = require("../models/ProviderConfig");

async function getAllConfigs() {
  return ProviderConfig.find({});
}

async function getConfigByProvider(provider) {
    return ProviderConfig.findOne({
        provider: { $regex: '^' + provider + '$', $options: 'i' }
      });
}

async function updateConfig(provider, configData) {
  // Upsert: if a config for the provider exists, update it; otherwise, create it.
  return ProviderConfig.findOneAndUpdate({ provider }, configData, { new: true, upsert: true });
}

async function prepopulateDefaultConfigs() {
    const count = await ProviderConfig.countDocuments();
    if (count === 0) {
      const defaultConfigs = [];
  
      // Pre-populate for Google if env vars are provided.
      if (process.env.GOOGLE_CLIENT_ID && process.env.GOOGLE_CLIENT_SECRET && process.env.GOOGLE_CALLBACK_URL) {
        defaultConfigs.push({
          provider: "google",
          clientId: process.env.GOOGLE_CLIENT_ID,
          clientSecret: process.env.GOOGLE_CLIENT_SECRET,
          callbackURL: process.env.GOOGLE_CALLBACK_URL,
        });
      }
      // Similarly for Facebook
      if (process.env.FACEBOOK_CLIENT_ID && process.env.FACEBOOK_CLIENT_SECRET && process.env.FACEBOOK_CALLBACK_URL) {
        defaultConfigs.push({
          provider: "facebook",
          clientId: process.env.FACEBOOK_CLIENT_ID,
          clientSecret: process.env.FACEBOOK_CLIENT_SECRET,
          callbackURL: process.env.FACEBOOK_CALLBACK_URL,
        });
      }
      // GitHub
      if (process.env.GITHUB_CLIENT_ID && process.env.GITHUB_CLIENT_SECRET && process.env.GITHUB_CALLBACK_URL) {
        defaultConfigs.push({
          provider: "github",
          clientId: process.env.GITHUB_CLIENT_ID,
          clientSecret: process.env.GITHUB_CLIENT_SECRET,
          callbackURL: process.env.GITHUB_CALLBACK_URL,
        });
      }
      // Microsoft
      if (process.env.MICROSOFT_CLIENT_ID && process.env.MICROSOFT_CLIENT_SECRET && process.env.MICROSOFT_CALLBACK_URL) {
        defaultConfigs.push({
          provider: "microsoft",
          clientId: process.env.MICROSOFT_CLIENT_ID,
          clientSecret: process.env.MICROSOFT_CLIENT_SECRET,
          callbackURL: process.env.MICROSOFT_CALLBACK_URL,
        });
      }
      if (defaultConfigs.length > 0) {
        await ProviderConfig.insertMany(defaultConfigs);
        console.log("Default provider configurations have been pre-populated.");
      }
    }
  }

  async function getAIConfig() {
    let config = await ProviderConfig.findOne();
    if (!config) {
      config = new ProviderConfig({ provider: "ollama" });
      await config.save();
    }
    return config;
  }
  
module.exports = {
  getAIConfig,
  getAllConfigs,
  getConfigByProvider,
  updateConfig,
  prepopulateDefaultConfigs
};

================
File: portfolio.node/src/services/qdrantService.js
================
require("dotenv").config();
const { QdrantClient } = require("@qdrant/js-client-rest");
const Embedding = require("../models/Embedding");
const NodeCache = require("node-cache");
const searchCache = new NodeCache({ stdTTL: 300 });
const counterService = require("../services/counterService");
const QDRANT_URL = process.env.QDRANT_URL || "http://10.0.0.42:6333";
const QDRANT_API_KEY = process.env.QDRANT_API_KEY || "";
const OLLAMA_URL = process.env.OLLAMA_URL || "http://10.0.0.42:11434";
const COLLECTION_NAME = "projects";
const VECTOR_SIZE = parseInt(process.env.VECTOR_SIZE, 10) || 1536; // Default to OpenAI size if not set

const qdrantClient = new QdrantClient({
    url: QDRANT_URL,
    apiKey: QDRANT_API_KEY,
});
  
/**
 * Initializes the Qdrant collection if it does not exist.
 */
async function initCollection() {
    try {
        await qdrantClient.getCollection(COLLECTION_NAME);
        console.log(`✅ Qdrant collection "${COLLECTION_NAME}" already exists.`);
    } catch (error) {
        console.log(`⚠️ Qdrant collection "${COLLECTION_NAME}" not found. Creating...`);

        await qdrantClient.createCollection(COLLECTION_NAME, {
            vectors: {
                size: VECTOR_SIZE, 
                distance: "Cosine"
            }
        });

        console.log(`✅ Qdrant collection "${COLLECTION_NAME}" created.`);
    }
}

/**
 * Stores an embedding in Qdrant and MongoDB.
 * @param {string} filePath - Path of the file being embedded.
 * @param {string} content - File content for embedding generation.
 * @param {object} metadata - Additional metadata related to the embedding.
 */
async function storeEmbedding(filePath, content, metadata = {}) {
    try {
        const vector = await generateEmbedding(content);
        if (!vector) {
            throw new Error("Failed to generate embedding.");
        }

        // Validate vector
        if (!Array.isArray(vector) || vector.length !== VECTOR_SIZE || vector.some(isNaN)) {
            throw new Error(`Invalid embedding vector received.`);
        }

        // Store in MongoDB
        const id = await counterService.getNextVectorId("embedding");
        const embeddingEntry = await Embedding.create({ filePath, metadata, externalId: id });

        // Store in Qdrant
        await qdrantClient.upsert(COLLECTION_NAME, {
            points: [
                {
                    id: id,
                    vector,
                    payload: { filePath, metadata },
                },
            ],
        });

        console.log(`✅ Stored embedding for file: ${filePath}`);
        return embeddingEntry;
    } catch (error) {
        console.error(`❌ Qdrant Error:`, error.message);
        return null;
    }
}

/**
 * Updates metadata for an embedding entry in MongoDB and Qdrant.
 * @param {object} payload - The embedding document by id or name and the metadata.
 */
async function updateEmbeddingMetadata({ id = null, filePath = null, metadata }) {
    try {
        let embeddings;

        if (id) {
            // ✅ Update a single embedding by ID
            embeddings = await Embedding.find({ externalId: id });
            if (embeddings.length === 0) throw new Error("Embedding not found.");
        } else if (filePath) {
            // ✅ Update all embeddings for a filePath
            embeddings = await Embedding.find({ filePath });
            if (embeddings.length === 0) throw new Error("No embeddings found for file.");
        } else {
            throw new Error("Either id or filePath must be provided.");
        }

        // ✅ Update metadata in MongoDB
        await Embedding.updateMany({ _id: { $in: embeddings.map(e => e._id) } }, { metadata });

        // ✅ Update in Qdrant
        await qdrantClient.updatePayload(COLLECTION_NAME, {
            points: embeddings.map(e => e.externalId), // Ensure IDs are updated correctly
            payload: { metadata },
        });

        console.log(`✅ Updated metadata for ${embeddings.length} embeddings.`);
        return embeddings;
    } catch (error) {
        console.error(`❌ Error updating metadata:`, error.message);
        return null;
    }
}

async function updateEmbedding(filePath, newContent, metadata) {
    try {
        // ✅ Find existing embedding by filePath
        const embedding = await Embedding.findOne({ filePath });
        if (!embedding) {
            throw new Error("Embedding not found for file.");
        }

        // ✅ Generate a new vector (since content changed)
        const newVector = await generateEmbedding(newContent);
        if (!newVector) {
            throw new Error("Failed to generate new embedding.");
        }

        // ✅ Validate vector
        if (!Array.isArray(newVector) || newVector.length !== VECTOR_SIZE || newVector.some(isNaN)) {
            throw new Error("Invalid embedding vector.");
        }

        // ✅ Update vector + metadata in Qdrant
        await qdrantClient.upsert(COLLECTION_NAME, {
            points: [
                {
                    id: embedding.externalId, // Keep the same ID
                    vector: newVector, // ✅ Overwrite vector
                    payload: { filePath, metadata }, // ✅ Overwrite metadata
                },
            ],
        });

        // ✅ Update metadata in MongoDB
        await Embedding.updateOne({ filePath }, { metadata });

        console.log(`✅ Updated embedding & metadata for file: ${filePath}`);
        return embedding;
    } catch (error) {
        console.error(`❌ Error updating embedding:`, error.message);
        return null;
    }
}


/**
 * Retrieves all stored embeddings from MongoDB.
 */
async function listEmbeddings() {
    try {
        return await Embedding.find();
    } catch (error) {
        console.error("❌ Error fetching embeddings:", error.message);
        return [];
    }
}

/**
 * Performs a semantic search in Qdrant.
 * @param {number[]} queryVector - The query embedding.
 * @param {string} collection - The collection to search.
 * @param {number} topK - Number of results to retrieve.
 * @param {number} minScore - filter out if score is below this value.
 * @returns {Promise<object[]>} - List of matching projects.
 */
async function searchQdrant(queryVector, collection = "projects", topK = 5, minScore = 0.5, useCache = false) {
    try {

        const cacheKey = `${collection}:${queryVector.slice(0, 5).join(",")}:${topK}:${minScore}`;
        const cachedResults = useCache ? searchCache.get(cacheKey) : null;
        if (cachedResults) {
            console.log(`🔄 Returning cached search results for query.`);
            return cachedResults;
        }

        console.log(`📡 Searching Qdrant in collection "${collection}" with topK=${topK}`);

        // Perform vector search in Qdrant
        const response = await qdrantClient.search(collection, {
            vector: queryVector,
            limit: topK * 2, // Retrieve extra results to allow filtering
            with_payload: true,
            score_threshold: minScore, // Ignore low-score results
        });

        if (!response || response.length === 0) {
            console.log("⚠️ No relevant search results found.");
            return [];
        }

        // Sort results by score (descending) and take only the top K results
        const sortedResults = response
            .filter(doc => doc.score >= minScore) // Remove low-quality matches
            .sort((a, b) => b.score - a.score) // Sort by highest relevance
            .slice(0, topK); // Limit to top K results

        searchCache.set(cacheKey, sortedResults); // Store results in cache

        console.log(`✅ Retrieved ${sortedResults.length} relevant results from Qdrant.`);
        return sortedResults;
    } catch (error) {
        console.error(`❌ Qdrant Search Error: ${error.message}`);
        return [];
    }
}


/**
 * Generates an embedding using Ollama.
 * @param {string} text - The text content to generate an embedding for.
 * @returns {Promise<number[]>} - The generated embedding vector.
 */
async function generateEmbedding(text) {
    try {
        // console.log(`📡 Requesting embedding from Ollama for text: "${text.slice(0, 50)}..."`);

        const response = await fetch(`${OLLAMA_URL}/api/embeddings`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ model: "mistral", prompt: text }),
        });

        const data = await response.json();
        
        // Log the full response for debugging
        // console.log("🔍 Ollama Response:", JSON.stringify(data, null, 2));

        if (!data || !data.embedding || !Array.isArray(data.embedding)) {
            throw new Error("Embedding data is missing or invalid");
        }

        return data.embedding;
    } catch (error) {
        console.error(`❌ Error generating embedding: ${error.message}`);
        return null;
    }
}

async function deleteEmbedding(filePath) {
    try {
        const embedding = await Embedding.findOne({ filePath });
        if (!embedding) {
            throw new Error("Embedding not found.");
        }

        // ✅ Remove from Qdrant
        await qdrantClient.delete(COLLECTION_NAME, {
            points: [embedding.externalId],
        });

        // ✅ Remove from MongoDB
        await Embedding.deleteOne({ filePath });

        console.log(`✅ Deleted embedding for file: ${filePath}`);
        return true;
    } catch (error) {
        console.error(`❌ Error deleting embedding:`, error.message);
        return false;
    }
}


/**
 * Deletes the entire Qdrant collection.
 */
async function dropCollection() {
    try {
        await qdrantClient.deleteCollection(COLLECTION_NAME);
        console.log(`✅ Dropped Qdrant collection "${COLLECTION_NAME}"`);
    } catch (error) {
        console.error(`❌ Error dropping collection: ${error.message}`);
    }
}

module.exports = {
    initCollection,
    storeEmbedding,
    updateEmbeddingMetadata,
    updateEmbedding,
    listEmbeddings,
    generateEmbedding,
    deleteEmbedding,
    dropCollection,
    searchQdrant
};

================
File: portfolio.node/src/services/userService.js
================
const User = require("../models/User");

/**
 * Creates a new user.
 * 
 * @param {Object} userData - An object containing user details.
 * @param {string} userData.username - The username.
 * @param {string} userData.password - The plain-text password.
 * @returns {Promise<Object>} - The newly created user.
 * @throws {Error} - If username or password is missing or if the user already exists.
 */
async function createUser({ username, password, isAdmin = false }) {
    if (!username || !password) {
      throw new Error("Username and password are required");
    }
  
    // Check for an existing user with the same username.
    const existingUser = await User.findOne({ username });
    if (existingUser) {
      throw new Error("User already exists");
    }
  
    // Create the user instance.
    // The User model's pre-save hook will hash the password automatically.
    const newUser = new User({ username, passwordHash: password, isAdmin });
    await newUser.save();
    return newUser;
  }

/**
 * Retrieves all users.
 * @returns {Promise<Array>} - Array of user.
 */
async function getAllUsers() {
  return User.find();
}

/**
 * Retrieves a users by its ID.
 * @param {string} id - The user ID.
 * @returns {Promise<Object|null>} - The found user  or null.
 */
async function getUserById(id) {
  return User.findById(id);
}

/**
 * Updates a user by its ID.
 * @param {string} id - The user ID.
 * @param {Object} data - Data to update.
 * @returns {Promise<Object|null>} - The updated user or null.
 */
async function updateUser(id, data) {
  return User.findByIdAndUpdate(id, data, { new: true });
}

/**
 * Deletes a user by its ID.
 * @param {string} id - The user ID.
 * @returns {Promise<Object|null>} - The deleted user or null.
 */
async function deleteUser(id) {
  return User.findByIdAndDelete(id);
}

module.exports = {
  createUser,
  getAllUsers,
  getUserById,
  updateUser,
  deleteUser,
};

================
File: portfolio.node/src/services/wsChatService.js
================
const WebSocket = require("ws");
const ChatMessage = require("../models/ChatMessage");
const { generatePrompt } = require("../utils/generatePrompt");
const ollamaService = require("../services/ollamaService");

const setupWebSocketServer = (server) => {
    const wss = new WebSocket.Server({ server });

    wss.on("connection", (ws) => {
        console.log("New WebSocket connection established.");

        ws.on("message", async (message) => {
            try {
                const { sessionId, query, history, webContext } = JSON.parse(message);
                if (!sessionId || !query) {
                    ws.send(JSON.stringify({ error: "sessionId and query are required." }));
                    return;
                }

                // Generate AI prompt
                const { formattedPrompt, sources } = await generatePrompt(query, history, webContext);

                // Stream AI response
                const responseStream = await ollamaService.generateResponseStream(formattedPrompt);

                // Send streamed data
                for await (const chunk of responseStream) {
                    ws.send(JSON.stringify({ response: chunk }));
                }

                ws.send(JSON.stringify({ done: true }));

                // Store messages in database
                await ChatMessage.create({ sessionId, role: "user", text: query });
                await ChatMessage.create({ sessionId, role: "ai", text: formattedPrompt });

            } catch (error) {
                console.error("WebSocket error:", error);
                ws.send(JSON.stringify({ error: "An error occurred while processing your request." }));
            }
        });

        ws.on("close", () => {
            console.log("WebSocket connection closed.");
        });
    });

    return wss;
};

module.exports = { setupWebSocketServer };

================
File: portfolio.node/src/tracing.js
================
// portfolio.node/src/tracing.js
'use strict';

const { NodeSDK } = require('@opentelemetry/sdk-node');
const { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node');
const { OTLPTraceExporter } = require('@opentelemetry/exporter-trace-otlp-http');

// Configure the OTLP Trace Exporter.
const traceExporter = new OTLPTraceExporter({
  // Configure the exporter URL if needed.
});

// Create the NodeSDK instance.
const sdk = new NodeSDK({
  traceExporter,
  instrumentations: [getNodeAutoInstrumentations()],
});

// Start the SDK.
const startResult = sdk.start();
if (startResult && typeof startResult.then === 'function') {
  startResult
    .then(() => {
      console.log('Tracing initialized');
    })
    .catch((error) => {
      console.error('Error initializing tracing', error);
    });
} else {
  // If start() is synchronous.
  console.log('Tracing initialized (synchronously)');
}

// Handle graceful shutdown.
process.on('SIGTERM', () => {
  sdk.shutdown()
    .then(() => console.log('Tracing terminated'))
    .catch((error) => console.log('Error terminating tracing', error))
    .finally(() => process.exit(0));
});

================
File: portfolio.node/src/utils/generatePrompt.js
================
const Prompt = require("../models/Prompt");
const { generateEmbedding, searchQdrant } = require("../services/qdrantService");
const projectService = require("../services/projectService");
const blogService = require("../services/blogService");

/**
 * Generates a structured AI prompt based on user input, retrieved context, and history.
 * @param {string} query - The user's question.
 * @param {array} history - Previous chat messages.
 * @param {string} webContext - Extracted web page content.
 * @returns {Promise<{ formattedPrompt: string, sources: string[] }>} - AI prompt and sources.
 */
async function generatePrompt(query, history = [], webContext = "") {
    try {
        // Fetch the AI prompt template dynamically
        const promptEntry = await Prompt.findOne({ name: "default_chat" });
        let promptTemplate = promptEntry ? promptEntry.template : getDefaultTemplate();

        // Generate embeddings and search for relevant documents
        const vectors = await generateEmbedding(query);
        const relatedDocs = await searchQdrant(vectors, "projects", 5, 0.3);

        // Format context from retrieved documents
        let context = "";
        let sources = [];
        let projectContext = "";
        let blogEntries = "";

        if (relatedDocs.length > 0) {
            context = relatedDocs.map((doc) => doc.payload.text).join("\n");
            sources = relatedDocs.map((doc) => doc.source || "Unknown source");
        } else {

            const projects = await projectService.getAllProjects();
            const blogs = await blogService.getAllBlogEntries();

            projectContext = JSON.stringify(projects);
            blogEntries = JSON.stringify(blogs);

            console.log(`⚠️ No relevant documents found for query: "${query}".`);
            context = "No directly related documents were found, but I'll still do my best to help.";
        }

        // Format WebContext for AI, if available
        const formattedWebContext = webContext
            ? `If the web context is provided, this is what the user currently sees, and can be used if the prompt is related:\n${webContext}`
            : "";

        // Replace placeholders in the prompt
        const formattedPrompt = promptTemplate
            .replace("{{query}}", query)
            .replace("{{history}}", formatChatHistory(history))
            .replace("{{webContext}}", formattedWebContext)
            .replace("{{context}}", context)
            .replace("{{projects}}", projectContext)
            .replace("{{blogs}}", blogEntries);

        return { formattedPrompt, sources };
    } catch (error) {
        console.error(`❌ Error generating AI prompt:`, error.message);
        return { formattedPrompt: "Sorry, an error occurred while generating the prompt.", sources: [] };
    }
}

/**
 * Formats the chat history into a structured string.
 * @param {array} history - Array of past chat messages.
 * @returns {string} - Formatted chat history.
 */
function formatChatHistory(history) {
    if (!history || history.length === 0) return "";
    return history.map(msg => `${msg.role === "user" ? "User" : "AI"}: ${msg.text}`).join("\n");
}

function getDefaultTemplate(){
    return  `
    # AI Role
    AI assistant helping showcase a developer's portfolio. 
    The user is someone accessing the developer's site who is interested in that developer knowledge, skill and/or backgroudn.
    The AI ONLY use the provided context to answer questions.
    If a question is about projects, focus specifically on projects in the provided context.
    If the question is unrelated to context, you can answer unless:
    - it is illegal
    - dangerous
    - is outside the concept of the portfolio showcasing a developer's background and skills.
    
    ### Context:
    {{context}}

    ### Projects:
    {{projects}}

    ### Blogs:
    {{blogs}}

    ### WebContext:
    {{webContext}} 

    ### Discussion History:
    {{history}}

    ### User Question:
    {{query}}
    
    ### AI Response:
    `.trim();
}
module.exports = { generatePrompt };

================
File: portfolio.node/src/validators/blogValidator.js
================
// portfolio.node/src/validators/blogValidator.js
const Joi = require('joi');

const createBlogSchema = Joi.object({
  title: Joi.string().min(3).max(255).required(),
  publishAt: Joi.string().isoDate().required(),
  isDraft: Joi.boolean().required(),
  excerpt: Joi.string().max(500).required(),
  body: Joi.string().required(),
  tags: Joi.array().required(),
});

module.exports = {
  createBlogSchema,
};

================
File: README.md
================
# 🚀 My Portfolio & Blog

Welcome to my self-hosted, Dockerized, and fully custom-built portfolio & blog! 🎉  
No more WordPress headaches—just a lean, mean, modern web stack.

## ✨ Stack
- **Frontend:** Next.js (React, TypeScript, TailwindCSS)
- **Backend:** Node.js, Express, MongoDB (Mongoose)
- **Authentication:** Cookie-based auth
- **Hosting:** Self-hosted with **Docker** + **Nginx Reverse Proxy**

## 🏗️ Setup & Run
### Prerequisites
- **Docker** installed and running  
- **Node.js** (for local development)

### Development
```sh
git clone https://github.com/your-username/your-repo.git
cd your-repo
npm install
npm run dev
```
### Running with Docker
```sh
docker-compose up --build
```
## Features
- ✅ Blog system with Markdown rendering
- ✅ Admin panel for managing content
- ✅ Fully containerized (Docker)
- ✅ Dark mode (because why not?)
- ✅ No bloated CMS—just speed!

## 📸 Screenshots
🚧 Coming soon...



================================================================
End of Codebase
================================================================
