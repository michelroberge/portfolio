This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.gitignore
docker-compose.yml
docs/1. gap-analysis.md
docs/2. development-plan.md
LICENSE
portfolio.next/__tests__/apiServices.test.ts
portfolio.next/__tests__/blogServices.test.ts
portfolio.next/Dockerfile
portfolio.next/eslint.config.mjs
portfolio.next/jest.config.js
portfolio.next/middleware.ts
portfolio.next/next-env.d.ts
portfolio.next/next.config.ts
portfolio.next/package.json
portfolio.next/postcss.config.mjs
portfolio.next/public/file.svg
portfolio.next/public/globe.svg
portfolio.next/public/next.svg
portfolio.next/public/vercel.svg
portfolio.next/public/window.svg
portfolio.next/README.md
portfolio.next/src/app/admin/blog/new/page.tsx
portfolio.next/src/app/admin/login/page.tsx
portfolio.next/src/app/admin/page.tsx
portfolio.next/src/app/blogs/[slug]/page.tsx
portfolio.next/src/app/globals.css
portfolio.next/src/app/layout.tsx
portfolio.next/src/app/page.tsx
portfolio.next/src/components/Footer.tsx
portfolio.next/src/components/Header.tsx
portfolio.next/src/services/apiService.ts
portfolio.next/src/services/blogService.ts
portfolio.next/tailwind.config.ts
portfolio.next/tsconfig.json
portfolio.next/tsconfig.test.json
portfolio.node/__tests__/app.test.js
portfolio.node/__tests__/authServices.test.js
portfolio.node/__tests__/blogService.test.js
portfolio.node/__tests__/blogValidation.test.js
portfolio.node/__tests__/jest-setup.test.js
portfolio.node/__tests__/projectServices.test.js
portfolio.node/__tests__/server.test.js
portfolio.node/__tests__/userService.test.js
portfolio.node/.env.test
portfolio.node/Dockerfile
portfolio.node/jest.config.js
portfolio.node/jest.setup.js
portfolio.node/package.json
portfolio.node/src/app.js
portfolio.node/src/cache.js
portfolio.node/src/config/db.js
portfolio.node/src/middlewares/auth.js
portfolio.node/src/middlewares/validate.js
portfolio.node/src/models/BlogEntry.js
portfolio.node/src/models/Project.js
portfolio.node/src/models/User.js
portfolio.node/src/routes/authRoutes.js
portfolio.node/src/routes/blogRoutes.js
portfolio.node/src/routes/projectRoutes.js
portfolio.node/src/routes/userRoutes.js
portfolio.node/src/server.js
portfolio.node/src/services/authService.js
portfolio.node/src/services/blogService.js
portfolio.node/src/services/projectService.js
portfolio.node/src/services/userService.js
portfolio.node/src/validators/blogValidator.js
README.md

================================================================
Files
================================================================

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

================
File: docker-compose.yml
================
version: "3.8"
services:
  frontend:
    build: ./portfolio.next
    ports:
      - "3000:3000"
    depends_on:
      - backend

  backend:
    build: ./portfolio.node
    ports:
      - "5000:5000"

================
File: docs/1. gap-analysis.md
================
# Gap Analysis Document

## Overview
This project is a personal portfolio website intended for distribution and reuse by developers—with future enhancements to make it accessible to non-coders. The system is built as a full-stack application with a Next.js frontend and a Node.js/Express backend using MongoDB (via Mongoose) for storage. It is deployed via Docker Compose.

## Current Architecture
- **Frontend (portfolio.next/):**
  - Built with Next.js and TypeScript.
  - Uses Tailwind CSS for responsive design (supports large vs. small screens).
  - Implements basic pages for the blog, projects, admin dashboard, and user authentication.
  - Includes light in-memory caching for performance.
- **Backend (portfolio.node/):**
  - An Express.js application managing authentication, blog CRUD, project CRUD, and comment data.
  - Uses Mongoose for MongoDB models (users, blog posts, projects, etc.).
- **Deployment:**
  - Docker Compose is used for containerized deployment of both frontend and backend services.
- **Existing Features:**
  - Admin login and first-level authentication.
  - Basic blog and project management.
  - A simple admin dashboard.
  - Responsive design and some caching mechanisms.

## Identified Gaps & Future Requirements
1. **Customization & Configurability**
   - **Site Settings:** Allow admins to easily update site title, description, and theme settings via configuration files.
   - **Theme Customization:**
     - Support for light/dark mode for end-users with their preferences stored in the database.
     - Admin-driven theme customization via Tailwind configuration (using current best practices).

2. **Authentication Enhancements**
   - **Consumer Authentication:** Extend authentication to support OAuth2/OpenID Connect for users leaving comments.
   - **Admin Authentication:** Maintain local auth for administrators, with a first-time setup flow and subsequent admin additions only via existing admins.

3. **Comment System Improvements**
   - **Threaded Comments:** Enable nested replies.
   - **Moderation:** Allow admins to mark comments as "redacted" instead of deleting them.
   - **Security:** Implement rate limiting (handled by Nginx), and support user and email domain blocking.
   - **Storage:** Use MongoDB/Mongoose for storing comments.

4. **Content Management Enhancements**
   - **Drafts & Scheduling:** Allow blog posts and projects to be saved as drafts or scheduled for future publication.
   - **Content Format:** Transition blog post content to Markdown, rendered to HTML dynamically.
   - **Editability:** Enable updates to published content, with updates reflecting on the “last updated” date.

5. **Admin Panel Enhancements**
   - **Content & Comment Management:** Expand the admin interface to manage comments (including redaction and blocking), blog posts, and projects.
   - **OAuth2/OIDC Provider Configuration:** Allow admins to configure external identity providers.
   - **Telemetry & Analytics:** Collect and display basic statistics—such as number of users, sessions, and page hits—using a telemetry schema stored in MongoDB.
   - **Admin Onboarding:** Implement a first-time setup flow for creating the initial admin account, with subsequent admin additions managed by existing admins.

6. **Search Functionality**
   - **Basic Text Search:** Implement MongoDB full-text search across blog posts and projects (title, description, and body).

7. **Non-Functional Requirements**
   - **SEO:** Enhance SEO with meta tags, structured data, and an SEO-friendly layout.
   - **Accessibility:** Ensure accessibility by adhering to HTML/React standards.
   - **Internationalization:** Prepare the system for future translations (e.g., support for French).
   - **Performance:** Maintain a fast and lightweight application through in-memory caching and optimized code.

8. **Deployment**
   - **Docker-Compose:** Continue using a Docker Compose file as the sole deployment mechanism.

## Conclusion
The gap analysis highlights the need to expand configuration and content management capabilities, enhance the comment and authentication systems, and provide additional admin panel features. In parallel, non-functional aspects like SEO, accessibility, internationalization, and performance must be addressed to create a robust, distributable personal portfolio platform ready for both developer and non-developer audiences.

================
File: docs/2. development-plan.md
================
# Development Plan Summary

## Objective

Enhance the portfolio & blog platform by addressing gaps in configuration, authentication, comments, content management, admin features, search functionality, and non-functional requirements using a Test-Driven Development approach.

## Phases:
### 1. Testing Infrastructure & Refactoring:
   - Setup Jest (backend and frontend) & Supertest.
   - Refactor code for dependency injection and modularity.

### 2. Authentication Enhancements:
   - Implement first-time admin setup flow.
   - Add consumer OAuth2/OIDC endpoints.
   - Write comprehensive unit/integration tests.

### 3. Comment System Improvements:
   - Create a Comment model (with nested replies and redaction flag).
   - Develop REST endpoints for comment CRUD.
   - Write tests for validation, authorization, and edge cases.

### 4. Content Management Enhancements:
   - Extend models to support drafts, scheduling, and last-updated timestamps.
   - Integrate Markdown to HTML conversion.
   - Write tests for state transitions and content rendering.

### 5. Admin Panel Enhancements:
   - Expand admin UI to manage comments, posts, projects, and telemetry.
   - Implement admin onboarding wizard.
   - Write integration and E2E tests for admin flows.

### 6. Search Functionality:
   - Implement full-text search on blog posts and projects.
   - Create API endpoints and write search tests.

### 7. Non-Functional Improvements:
   - Enhance SEO with dynamic meta tags and structured data.
   - Improve accessibility and prepare for internationalization.
   - Optimize caching and monitor performance.
   - Write tests/audits for SEO and accessibility.

### 8. Deployment:
   - Maintain Docker Compose deployment.
   - Update Dockerfiles and write integration tests for container startup.

## Outcome:
A robust, test-covered, modular, and enhanced portfolio & blog platform ready for both developer and non-developer audiences, with clear documentation and automated tests ensuring future maintainability.

================
File: LICENSE
================
GNU GENERAL PUBLIC LICENSE
                       Version 3, 29 June 2007

 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

                            Preamble

  The GNU General Public License is a free, copyleft license for
software and other kinds of works.

  The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

  To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

  For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

  Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

  For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

  Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users' freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable.  Therefore, we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.

  Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

  The precise terms and conditions for copying, distribution and
modification follow.

                       TERMS AND CONDITIONS

  0. Definitions.

  "This License" refers to version 3 of the GNU General Public License.

  "Copyright" also means copyright-like laws that apply to other kinds of
works, such as semiconductor masks.

  "The Program" refers to any copyrightable work licensed under this
License.  Each licensee is addressed as "you".  "Licensees" and
"recipients" may be individuals or organizations.

  To "modify" a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of an
exact copy.  The resulting work is called a "modified version" of the
earlier work or a work "based on" the earlier work.

  A "covered work" means either the unmodified Program or a work based
on the Program.

  To "propagate" a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy.  Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.

  To "convey" a work means any kind of propagation that enables other
parties to make or receive copies.  Mere interaction with a user through
a computer network, with no transfer of a copy, is not conveying.

  An interactive user interface displays "Appropriate Legal Notices"
to the extent that it includes a convenient and prominently visible
feature that (1) displays an appropriate copyright notice, and (2)
tells the user that there is no warranty for the work (except to the
extent that warranties are provided), that licensees may convey the
work under this License, and how to view a copy of this License.  If
the interface presents a list of user commands or options, such as a
menu, a prominent item in the list meets this criterion.

  1. Source Code.

  The "source code" for a work means the preferred form of the work
for making modifications to it.  "Object code" means any non-source
form of a work.

  A "Standard Interface" means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that
is widely used among developers working in that language.

  The "System Libraries" of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that
Major Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form.  A
"Major Component", in this context, means a major essential component
(kernel, window system, and so on) of the specific operating system
(if any) on which the executable work runs, or a compiler used to
produce the work, or an object code interpreter used to run it.

  The "Corresponding Source" for a work in object code form means all
the source code needed to generate, install, and (for an executable
work) run the object code and to modify the work, including scripts to
control those activities.  However, it does not include the work's
System Libraries, or general-purpose tools or generally available free
programs which are used unmodified in performing those activities but
which are not part of the work.  For example, Corresponding Source
includes interface definition files associated with source files for
the work, and the source code for shared libraries and dynamically
linked subprograms that the work is specifically designed to require,
such as by intimate data communication or control flow between those
subprograms and other parts of the work.

  The Corresponding Source need not include anything that users
can regenerate automatically from other parts of the Corresponding
Source.

  The Corresponding Source for a work in source code form is that
same work.

  2. Basic Permissions.

  All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met.  This License explicitly affirms your unlimited
permission to run the unmodified Program.  The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work.  This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.

  You may make, run and propagate covered works that you do not
convey, without conditions so long as your license otherwise remains
in force.  You may convey covered works to others for the sole purpose
of having them make modifications exclusively for you, or provide you
with facilities for running those works, provided that you comply with
the terms of this License in conveying all material for which you do
not control copyright.  Those thus making or running the covered works
for you must do so exclusively on your behalf, under your direction
and control, on terms that prohibit them from making any copies of
your copyrighted material outside their relationship with you.

  Conveying under any other circumstances is permitted solely under
the conditions stated below.  Sublicensing is not allowed; section 10
makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

  No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article
11 of the WIPO copyright treaty adopted on 20 December 1996, or
similar laws prohibiting or restricting circumvention of such
measures.

  When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such circumvention
is effected by exercising rights under this License with respect to
the covered work, and you disclaim any intention to limit operation or
modification of the work as a means of enforcing, against the work's
users, your or third parties' legal rights to forbid circumvention of
technological measures.

  4. Conveying Verbatim Copies.

  You may convey verbatim copies of the Program's source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice;
keep intact all notices stating that this License and any
non-permissive terms added in accord with section 7 apply to the code;
keep intact all notices of the absence of any warranty; and give all
recipients a copy of this License along with the Program.

  You may charge any price or no price for each copy that you convey,
and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

  You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the
terms of section 4, provided that you also meet all of these conditions:

    a) The work must carry prominent notices stating that you modified
    it, and giving a relevant date.

    b) The work must carry prominent notices stating that it is
    released under this License and any conditions added under section
    7.  This requirement modifies the requirement in section 4 to
    "keep intact all notices".

    c) You must license the entire work, as a whole, under this
    License to anyone who comes into possession of a copy.  This
    License will therefore apply, along with any applicable section 7
    additional terms, to the whole of the work, and all its parts,
    regardless of how they are packaged.  This License gives no
    permission to license the work in any other way, but it does not
    invalidate such permission if you have separately received it.

    d) If the work has interactive user interfaces, each must display
    Appropriate Legal Notices; however, if the Program has interactive
    interfaces that do not display Appropriate Legal Notices, your
    work need not make them do so.

  A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work,
and which are not combined with it such as to form a larger program,
in or on a volume of a storage or distribution medium, is called an
"aggregate" if the compilation and its resulting copyright are not
used to limit the access or legal rights of the compilation's users
beyond what the individual works permit.  Inclusion of a covered work
in an aggregate does not cause this License to apply to the other
parts of the aggregate.

  6. Conveying Non-Source Forms.

  You may convey a covered work in object code form under the terms
of sections 4 and 5, provided that you also convey the
machine-readable Corresponding Source under the terms of this License,
in one of these ways:

    a) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by the
    Corresponding Source fixed on a durable physical medium
    customarily used for software interchange.

    b) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by a
    written offer, valid for at least three years and valid for as
    long as you offer spare parts or customer support for that product
    model, to give anyone who possesses the object code either (1) a
    copy of the Corresponding Source for all the software in the
    product that is covered by this License, on a durable physical
    medium customarily used for software interchange, for a price no
    more than your reasonable cost of physically performing this
    conveying of source, or (2) access to copy the
    Corresponding Source from a network server at no charge.

    c) Convey individual copies of the object code with a copy of the
    written offer to provide the Corresponding Source.  This
    alternative is allowed only occasionally and noncommercially, and
    only if you received the object code with such an offer, in accord
    with subsection 6b.

    d) Convey the object code by offering access from a designated
    place (gratis or for a charge), and offer equivalent access to the
    Corresponding Source in the same way through the same place at no
    further charge.  You need not require recipients to copy the
    Corresponding Source along with the object code.  If the place to
    copy the object code is a network server, the Corresponding Source
    may be on a different server (operated by you or a third party)
    that supports equivalent copying facilities, provided you maintain
    clear directions next to the object code saying where to find the
    Corresponding Source.  Regardless of what server hosts the
    Corresponding Source, you remain obligated to ensure that it is
    available for as long as needed to satisfy these requirements.

    e) Convey the object code using peer-to-peer transmission, provided
    you inform other peers where the object code and Corresponding
    Source of the work are being offered to the general public at no
    charge under subsection 6d.

  A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be
included in conveying the object code work.

  A "User Product" is either (1) a "consumer product", which means any
tangible personal property which is normally used for personal, family,
or household purposes, or (2) anything designed or sold for incorporation
into a dwelling.  In determining whether a product is a consumer product,
doubtful cases shall be resolved in favor of coverage.  For a particular
product received by a particular user, "normally used" refers to a
typical or common use of that class of product, regardless of the status
of the particular user or of the way in which the particular user
actually uses, or expects or is expected to use, the product.  A product
is a consumer product regardless of whether the product has substantial
commercial, industrial or non-consumer uses, unless such uses represent
the only significant mode of use of the product.

  "Installation Information" for a User Product means any methods,
procedures, authorization keys, or other information required to install
and execute modified versions of a covered work in that User Product from
a modified version of its Corresponding Source.  The information must
suffice to ensure that the continued functioning of the modified object
code is in no case prevented or interfered with solely because
modification has been made.

  If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied
by the Installation Information.  But this requirement does not apply
if neither you nor any third party retains the ability to install
modified object code on the User Product (for example, the work has
been installed in ROM).

  The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or updates
for a work that has been modified or installed by the recipient, or for
the User Product in which it has been modified or installed.  Access to a
network may be denied when the modification itself materially and
adversely affects the operation of the network or violates the rules and
protocols for communication across the network.

  Corresponding Source conveyed, and Installation Information provided,
in accord with this section must be in a format that is publicly
documented (and with an implementation available to the public in
source code form), and must require no special password or key for
unpacking, reading or copying.

  7. Additional Terms.

  "Additional permissions" are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law.  If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by
this License without regard to the additional permissions.

  When you convey a copy of a covered work, you may at your option
remove any additional permissions from that copy, or from any part of
it.  (Additional permissions may be written to require their own
removal in certain cases when you modify the work.)  You may place
additional permissions on material, added by you to a covered work,
for which you have or can give appropriate copyright permission.

  Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders of
that material) supplement the terms of this License with terms:

    a) Disclaiming warranty or limiting liability differently from the
    terms of sections 15 and 16 of this License; or

    b) Requiring preservation of specified reasonable legal notices or
    author attributions in that material or in the Appropriate Legal
    Notices displayed by works containing it; or

    c) Prohibiting misrepresentation of the origin of that material, or
    requiring that modified versions of such material be marked in
    reasonable ways as different from the original version; or

    d) Limiting the use for publicity purposes of names of licensors or
    authors of the material; or

    e) Declining to grant rights under trademark law for use of some
    trade names, trademarks, or service marks; or

    f) Requiring indemnification of licensors and authors of that
    material by anyone who conveys the material (or modified versions of
    it) with contractual assumptions of liability to the recipient, for
    any liability that these contractual assumptions directly impose on
    those licensors and authors.

  All other non-permissive additional terms are considered "further
restrictions" within the meaning of section 10.  If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term.  If a license document contains
a further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms
of that license document, provided that the further restriction does
not survive such relicensing or conveying.

  If you add terms to a covered work in accord with this section, you
must place, in the relevant source files, a statement of the
additional terms that apply to those files, or a notice indicating
where to find the applicable terms.

  Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions;
the above requirements apply either way.

  8. Termination.

  You may not propagate or modify a covered work except as expressly
provided under this License.  Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).

  However, if you cease all violation of this License, then your
license from a particular copyright holder is reinstated (a)
provisionally, unless and until the copyright holder explicitly and
finally terminates your license, and (b) permanently, if the copyright
holder fails to notify you of the violation by some reasonable means
prior to 60 days after the cessation.

  Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

  Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.

  9. Acceptance Not Required for Having Copies.

  You are not required to accept this License in order to receive or
run a copy of the Program.  Ancillary propagation of a covered work
occurring solely as a consequence of using peer-to-peer transmission
to receive a copy likewise does not require acceptance.  However,
nothing other than this License grants you permission to propagate or
modify any covered work.  These actions infringe copyright if you do
not accept this License.  Therefore, by modifying or propagating a
covered work, you indicate your acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

  Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License.  You are not responsible
for enforcing compliance by third parties with this License.

  An "entity transaction" is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations.  If propagation of a covered
work results from an entity transaction, each party to that
transaction who receives a copy of the work also receives whatever
licenses to the work the party's predecessor in interest had or could
give under the previous paragraph, plus a right to possession of the
Corresponding Source of the work from the predecessor in interest, if
the predecessor has it or can get it with reasonable efforts.

  You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License.  For example, you may
not impose a license fee, royalty, or other charge for exercise of
rights granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that
any patent claim is infringed by making, using, selling, offering for
sale, or importing the Program or any portion of it.

  11. Patents.

  A "contributor" is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based.  The
work thus licensed is called the contributor's "contributor version".

  A contributor's "essential patent claims" are all patent claims
owned or controlled by the contributor, whether already acquired or
hereafter acquired, that would be infringed by some manner, permitted
by this License, of making, using, or selling its contributor version,
but do not include claims that would be infringed only as a
consequence of further modification of the contributor version.  For
purposes of this definition, "control" includes the right to grant
patent sublicenses in a manner consistent with the requirements of
this License.

  Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor's essential patent claims, to
make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.

  In the following three paragraphs, a "patent license" is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement).  To "grant" such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.

  If you convey a covered work, knowingly relying on a patent license,
and the Corresponding Source of the work is not available for anyone
to copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients.  "Knowingly relying" means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient's use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.

  If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify
or convey a specific copy of the covered work, then the patent license
you grant is automatically extended to all recipients of the covered
work and works based on it.

  A patent license is "discriminatory" if it does not include within
the scope of its coverage, prohibits the exercise of, or is
conditioned on the non-exercise of one or more of the rights that are
specifically granted under this License.  You may not convey a covered
work if you are a party to an arrangement with a third party that is
in the business of distributing software, under which you make payment
to the third party based on the extent of your activity of conveying
the work, and under which the third party grants, to any of the
parties who would receive the covered work from you, a discriminatory
patent license (a) in connection with copies of the covered work
conveyed by you (or copies made from those copies), or (b) primarily
for and in connection with specific products or compilations that
contain the covered work, unless you entered into that arrangement,
or that patent license was granted, prior to 28 March 2007.

  Nothing in this License shall be construed as excluding or limiting
any implied license or other defenses to infringement that may
otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

  If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot convey a
covered work so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you may
not convey it at all.  For example, if you agree to terms that obligate you
to collect a royalty for further conveying from those to whom you convey
the Program, the only way you could satisfy both those terms and this
License would be to refrain entirely from conveying the Program.

  13. Use with the GNU Affero General Public License.

  Notwithstanding any other provision of this License, you have
permission to link or combine any covered work with a work licensed
under version 3 of the GNU Affero General Public License into a single
combined work, and to convey the resulting work.  The terms of this
License will continue to apply to the part which is the covered work,
but the special requirements of the GNU Affero General Public License,
section 13, concerning interaction through a network will apply to the
combination as such.

  14. Revised Versions of this License.

  The Free Software Foundation may publish revised and/or new versions of
the GNU General Public License from time to time.  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

  Each version is given a distinguishing version number.  If the
Program specifies that a certain numbered version of the GNU General
Public License "or any later version" applies to it, you have the
option of following the terms and conditions either of that numbered
version or of any later version published by the Free Software
Foundation.  If the Program does not specify a version number of the
GNU General Public License, you may choose any version ever published
by the Free Software Foundation.

  If the Program specifies that a proxy can decide which future
versions of the GNU General Public License can be used, that proxy's
public statement of acceptance of a version permanently authorizes you
to choose that version for the Program.

  Later license versions may give you additional or different
permissions.  However, no additional obligations are imposed on any
author or copyright holder as a result of your choosing to follow a
later version.

  15. Disclaimer of Warranty.

  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

  If the disclaimer of warranty and limitation of liability provided
above cannot be given local legal effect according to their terms,
reviewing courts shall apply local law that most closely approximates
an absolute waiver of all civil liability in connection with the
Program, unless a warranty or assumption of liability accompanies a
copy of the Program in return for a fee.

                     END OF TERMS AND CONDITIONS

            How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

Also add information on how to contact you by electronic and paper mail.

  If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

    <program>  Copyright (C) <year>  <name of author>
    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
    This is free software, and you are welcome to redistribute it
    under certain conditions; type `show c' for details.

The hypothetical commands `show w' and `show c' should show the appropriate
parts of the General Public License.  Of course, your program's commands
might be different; for a GUI interface, you would use an "about box".

  You should also get your employer (if you work as a programmer) or school,
if any, to sign a "copyright disclaimer" for the program, if necessary.
For more information on this, and how to apply and follow the GNU GPL, see
<https://www.gnu.org/licenses/>.

  The GNU General Public License does not permit incorporating your program
into proprietary programs.  If your program is a subroutine library, you
may consider it more useful to permit linking proprietary applications with
the library.  If this is what you want to do, use the GNU Lesser General
Public License instead of this License.  But first, please read
<https://www.gnu.org/licenses/why-not-lgpl.html>.

================
File: portfolio.next/__tests__/apiServices.test.ts
================
// portfolio.next/__tests__/apiService.test.ts
import { fetchBlogEntries, fetchProjects } from "@/services/apiService";
global.fetch = jest.fn();

describe("API Service", () => {
  beforeEach(() => {
    (fetch as jest.Mock).mockClear();
  });

  it("fetchBlogEntries should return blog data", async () => {
    const fakeData = [{ title: "Test Blog", excerpt: "Test excerpt" }];
    (fetch as jest.Mock).mockResolvedValueOnce({
      ok: true,
      json: async () => fakeData,
    });

    const data = await fetchBlogEntries();
    expect(data).toEqual(fakeData);
    expect(fetch).toHaveBeenCalledWith(`${process.env.NEXT_PUBLIC_API_URL}/api/blogs`);
  });

  it("fetchProjects should return project data", async () => {
    const fakeData = [{ title: "Test Project", description: "Test description" }];
    (fetch as jest.Mock).mockResolvedValueOnce({
      ok: true,
      json: async () => fakeData,
    });

    const data = await fetchProjects();
    expect(data).toEqual(fakeData);
    expect(fetch).toHaveBeenCalledWith(`${process.env.NEXT_PUBLIC_API_URL}/api/projects`);
  });

  it("should throw an error if fetchBlogEntries response is not ok", async () => {
    (fetch as jest.Mock).mockResolvedValueOnce({
      ok: false,
      statusText: "Not Found",
    });

    await expect(fetchBlogEntries()).rejects.toThrow("Error fetching blog entries: Not Found");
  });
});

================
File: portfolio.next/__tests__/blogServices.test.ts
================
// portfolio.next/__tests__/blogService.test.ts
/// <reference types="jest" />
import { getBlog, BlogEntry } from "@/services/blogService";

global.fetch = jest.fn();

describe("Blog Service (Next.js)", () => {
  beforeEach(() => {
    (fetch as jest.Mock).mockClear();
  });

  it("should fetch a blog entry successfully", async () => {
    const fakeBlog: BlogEntry = {
      id: 1,
      title: "Test Blog",
      date: "2025-02-22",
      body: "<p>Test body</p>",
      link: "test-blog-1",
    };

    (fetch as jest.Mock).mockResolvedValueOnce({
      ok: true,
      json: async () => fakeBlog,
    });

    const blog = await getBlog("1");
    expect(blog).toEqual(fakeBlog);
    expect(fetch).toHaveBeenCalledWith(`${process.env.NEXT_PUBLIC_API_URL}/api/blogs/1`);
  });

  it("should return null if response is not ok", async () => {
    (fetch as jest.Mock).mockResolvedValueOnce({
      ok: false,
      statusText: "Not Found",
    });

    const blog = await getBlog("1");
    expect(blog).toBeNull();
  });

  it("should return null if an error occurs", async () => {
    (fetch as jest.Mock).mockRejectedValueOnce(new Error("Network Error"));
    const blog = await getBlog("1");
    expect(blog).toBeNull();
  });
});

================
File: portfolio.next/Dockerfile
================
# Use official Node.js 22 image as a base
FROM node:22-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package.json and package-lock.json
COPY package.json package-lock.json ./

# Install dependencies
RUN npm install --production

# Copy the entire source code from `src/`
COPY src ./src

# Build the Next.js app
RUN npm run build --workspace=src

# Use a smaller base image for production
FROM node:22-alpine

# Set working directory
WORKDIR /app

# Copy only necessary files from the builder stage
COPY --from=builder /app/package.json ./
COPY --from=builder /app/src/.next ./.next
COPY --from=builder /app/src/public ./public
COPY --from=builder /app/src/node_modules ./node_modules

# Set environment variables
ENV NODE_ENV=production
ENV PORT=3000

# Expose the port
EXPOSE 3000

# Start the Next.js server
CMD ["npm", "start", "--workspace=src"]

================
File: portfolio.next/eslint.config.mjs
================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;

================
File: portfolio.next/jest.config.js
================
module.exports = {
    preset: 'ts-jest',
    testEnvironment: 'jsdom',
    testMatch: ['**/__tests__/**/*.test.{ts,tsx}'],
    setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],
    moduleNameMapper: {
      "^@/(.*)$": "<rootDir>/src/$1"
    },
  };

================
File: portfolio.next/middleware.ts
================
import { NextRequest, NextResponse } from "next/server";

export function middleware(req: NextRequest) {
  // Example: Redirect users trying to access /admin if not authenticated
  const authToken = req.cookies.get("auth-token")?.value;
  if (!authToken && req.nextUrl.pathname.startsWith("/admin")) {
    return NextResponse.redirect(new URL("/login", req.url));
  }

  return NextResponse.next();
}

export const config = {
  matcher: ["/admin/:path*"], // Define which routes should trigger this middleware
};

================
File: portfolio.next/next-env.d.ts
================
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.

================
File: portfolio.next/next.config.ts
================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;

================
File: portfolio.next/package.json
================
{
  "name": "portfolio.next",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "test": "jest",
    "test:watch": "jest --watch"
  },
  "dependencies": {
    "jest-environment-jsdom": "^29.7.0",
    "next": "^15.1.7",
    "react": "^19.0.0",
    "react-dom": "^19.0.0"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.2.0",
    "@types/jest": "^29.5.14",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.1.7",
    "jest": "^29.7.0",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "ts-jest": "^29.2.5",
    "typescript": "^5"
  }
}

================
File: portfolio.next/postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: portfolio.next/public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: portfolio.next/public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: portfolio.next/public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: portfolio.next/public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: portfolio.next/public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: portfolio.next/README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: portfolio.next/src/app/admin/blog/new/page.tsx
================
"use client";

import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import Header from "@/components/Header";

export default function CreateBlogEntry() {
  const [title, setTitle] = useState("");
  const [excerpt, setExcerpt] = useState("");
  const [body, setBody] = useState("");
  const router = useRouter();

    const [authenticated, setAuthenticated] = useState(false);
  
    useEffect(() => {
      async function checkAuth() {
        const res = await fetch("http://localhost:5000/api/auth/check", {
          credentials: "include",
        });
  
        if (res.ok) {
          setAuthenticated(true);
        } else {
          router.push("/admin/login");
        }
      }
  
      checkAuth();
    }, []);
  
    if (!authenticated) return <p>You are not authenticated.</p>;

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    const response = await fetch("http://localhost:5000/api/blogs", {
      method: "POST",
      credentials: "include",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ title, excerpt, body }),
    });

    if (response.ok) {
      router.push("/admin");
    } else {
      alert("Failed to create blog entry");
    }
  };

  return (
    <>
    <Header />
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-2xl font-bold mb-4">Create a New Blog Entry</h1>
      <form onSubmit={handleSubmit} className="space-y-4">
        <input
          type="text"
          placeholder="Title"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          className="w-full p-2 border rounded"
          required
        />
        <input
          type="text"
          placeholder="Excerpt"
          value={excerpt}
          onChange={(e) => setExcerpt(e.target.value)}
          className="w-full p-2 border rounded"
          required
        />
        <textarea
          placeholder="Body (HTML allowed)"
          value={body}
          onChange={(e) => setBody(e.target.value)}
          className="w-full p-2 border rounded h-40"
          required
        />
        <button type="submit" className="px-4 py-2 bg-blue-500 text-white rounded">
          Submit
        </button>
      </form>
    </div>
    </>
  );
}

================
File: portfolio.next/src/app/admin/login/page.tsx
================
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";

export default function AdminLogin() {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const router = useRouter();

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");

    const res = await fetch("http://localhost:5000/api/auth/login", {
      method: "POST",
      credentials: "include", // Ensure the cookie is stored
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ username, password }),
    });

    if (res.ok) {
      router.push("/admin");
    } else {
      setError("Invalid credentials");
    }
  };

  return (
    <div className="flex min-h-screen justify-center items-center bg-gray-100">
      <form onSubmit={handleLogin} className="bg-white p-6 rounded-lg shadow-md">
        <h2 className="text-2xl font-semibold mb-4">Admin Login</h2>
        {error && <p className="text-red-500">{error}</p>}
        <input
          type="text"
          placeholder="Username"
          value={username}
          onChange={(e) => setUsername(e.target.value)}
          className="border p-2 w-full mb-2"
        />
        <input
          type="password"
          placeholder="Password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          className="border p-2 w-full mb-4"
        />
        <button type="submit" className="bg-blue-500 text-white px-4 py-2 rounded">
          Login
        </button>
      </form>
    </div>
  );
}

================
File: portfolio.next/src/app/admin/page.tsx
================
"use client";

import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import Header from "@/components/Header";
import Footer from "@/components/Footer";

export default function AdminDashboard() {
  const [authenticated, setAuthenticated] = useState(false);
  const router = useRouter();

  useEffect(() => {
    async function checkAuth() {
      const res = await fetch("http://localhost:5000/api/auth/check", {
        credentials: "include",
      });

      if (res.ok) {
        setAuthenticated(true);
      } else {
        router.push("/admin/login");
      }
    }

    checkAuth();
  }, []);

  if (!authenticated) return <p>You are not authenticated.</p>;

  return (
    <>
    <Header />
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-4">Admin Dashboard</h1>
      <p className="mb-6">Welcome to the admin panel! You can now manage your blog and projects.</p>

      <div className="flex gap-4">
        {/* New Blog Entry Button */}
        <button
          onClick={() => router.push("/admin/blog/new")}
          className="bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-4 rounded-lg transition"
        >
          New Blog Entry
        </button>

        {/* New Project Button */}
        <button
          onClick={() => router.push("/admin/projects/new")}
          className="bg-green-500 hover:bg-green-600 text-white font-semibold py-2 px-4 rounded-lg transition"
        >
          New Project
        </button>

        {/* Logout Button */}
        <a
          href="http://localhost:5000/api/auth/logout"
          className="bg-red-500 hover:bg-red-600 text-white font-semibold py-2 px-4 rounded-lg transition"
        >
          Logout
        </a>
      </div>
    </div>
    <Footer />
    </>
  );
}

================
File: portfolio.next/src/app/blogs/[slug]/page.tsx
================
// portfolio.next/src/app/blogs/[slug]/page.tsx
import { notFound } from "next/navigation";
import Header from "@/components/Header";
import Footer from "@/components/Footer";
import { getBlog } from "@/services/blogService";

interface BlogEntry {
  id: number;
  title: string;
  date: string;
  body: string;
  excerpt?: string;
  link: string;
}

type Props = {
  params: Promise<{ slug: string }>;
};

export default async function BlogPage({ params }: Props) {
  const { slug } = await params;

  if (!slug) return notFound();

  // Extract the last number after '-' in the slug as the id.
  const id = slug.split("-").pop();
  if (!id) return notFound();

  const blog = await getBlog(id);

  if (!blog) return notFound();

  return (
    <>
      <Header />
      <main className="container mx-auto px-6 py-10 flex flex-col lg:flex-row lg:gap-8 flex-1">
        <h1 className="text-3xl font-bold">{blog.title}</h1>
        <p className="text-gray-500">{blog.date}</p>
        <div className="mt-4" dangerouslySetInnerHTML={{ __html: blog.body }} />
      </main>
      <Footer />
    </>
  );
}

================
File: portfolio.next/src/app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
}

================
File: portfolio.next/src/app/layout.tsx
================
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}

================
File: portfolio.next/src/app/page.tsx
================
"use client";

import { useState, useEffect } from "react";
import Header from "@/components/Header";
import Footer from "@/components/Footer";
import { fetchBlogEntries, fetchProjects } from "@/services/apiService";

interface Project {
  _id: string;
  title: string;
  description: string;
  image: string;
  link: string;
}

interface BlogEntry {
  _id: string;
  title: string;
  date: string;
  excerpt: string;
  link: string;
}

export default function Home() {
  const [projects, setProjects] = useState<Project[]>([]);
  const [blogEntries, setBlogEntries] = useState<BlogEntry[]>([]);
  const [activeTab, setActiveTab] = useState<"blog" | "portfolio">("blog");
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    async function loadData() {
      try {
        const blogs = await fetchBlogEntries();
        setBlogEntries(blogs);
      } catch (error) {
        setError((error as Error).message);
        console.error("Error fetching blog entries:", error);
      }

      // If you wish to fetch projects from API instead of using mock data, uncomment:
      // try {
      //   const projectsData = await fetchProjects();
      //   setProjects(projectsData);
      // } catch (error) {
      //   console.error("Error fetching projects:", error);
      // }
    }
    loadData();
  }, []);

  return (
    <div className="flex flex-col min-h-screen">
      <Header />

      <main className="container mx-auto px-6 py-10 flex flex-col lg:flex-row lg:gap-8 flex-1">
        {/* Blog Section */}
        <section className="lg:flex-1">
          <h2 className="text-2xl font-semibold mb-6">Latest Posts</h2>
          {error && <p className="text-red-500">Error: {error}</p>}
          <div className="space-y-4">
            {blogEntries.map((entry) => (
              <a
                key={`blog_${entry._id}`}
                href={`blogs/${entry.link}`}
                className="block bg-gray-100 p-4 rounded-sm hover:bg-gray-200 transition"
              >
                <h3 className="text-lg font-semibold">{entry.title}</h3>
                <p className="text-sm text-gray-500">{entry.date}</p>
                <p className="text-gray-600">{entry.excerpt}</p>
              </a>
            ))}
          </div>
        </section>

        {/* Projects Sidebar */}
        <aside className="hidden lg:block lg:w-1/3 bg-white rounded-sm shadow-md p-4 h-fit">
          <h2 className="text-xl font-semibold mb-4">Projects</h2>
          <div className="space-y-3">
            {projects.map((project) => (
              <a
                key={`project${project._id}`}
                href={`${process.env.NEXT_PUBLIC_API_URL}/api/projects/${project._id}`}
                className="block p-3 bg-gray-100 rounded-sm hover:bg-gray-200 transition"
              >
                <h3 className="text-lg font-semibold">{project.title}</h3>
                <p className="text-sm text-gray-500">{project.description}</p>
              </a>
            ))}
          </div>
        </aside>
      </main>

      <Footer />
    </div>
  );
}

================
File: portfolio.next/src/components/Footer.tsx
================
export default function Footer (){
    return (
        <footer className="bg-gray-800 text-white text-center py-4 mt-6">
            <p>&copy; {new Date().getFullYear()} michel-roberge.com. All Rights Reserved.</p>
        </footer>
    );
}

================
File: portfolio.next/src/components/Header.tsx
================
import Link from "next/link";

export default function Header() {
  return (
    <header className="bg-gray-800 text-white py-6 text-center">
      <Link href="/" className="block">
        <h1 className="text-3xl font-bold hover:text-gray-300 transition">
          Curious Coder: A Portfolio
        </h1>
        <p className="text-lg">a.k.a. michel-roberge.com</p>
        <p className="text-xs">(the Northern Developer)</p>
      </Link>
    </header>
  );
}

================
File: portfolio.next/src/services/apiService.ts
================
// portfolio.next/src/services/apiService.ts

/**
 * Fetches blog entries from the API.
 * @returns {Promise<any>} - The parsed JSON response.
 */
export async function fetchBlogEntries() {
    const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/blogs`);
    if (!response.ok) {
      throw new Error(`Error fetching blog entries: ${response.statusText}`);
    }
    return response.json();
  }
  
  /**
   * Fetches projects from the API.
   * @returns {Promise<any>} - The parsed JSON response.
   */
  export async function fetchProjects() {
    const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/projects`);
    if (!response.ok) {
      throw new Error(`Error fetching projects: ${response.statusText}`);
    }
    return response.json();
  }

================
File: portfolio.next/src/services/blogService.ts
================
// portfolio.next/src/services/blogService.ts
export interface BlogEntry {
    id: number;
    title: string;
    date: string;
    body: string;
    excerpt?: string;
    link: string;
  }
  
  /**
   * Fetches a single blog entry by its ID.
   * @param id - The blog entry identifier.
   * @returns A BlogEntry object if successful, or null otherwise.
   */
  export async function getBlog(id: string): Promise<BlogEntry | null> {
    try {
      const url = `${process.env.NEXT_PUBLIC_API_URL}/api/blogs/${id}`;
      const response = await fetch(url);
      if (!response.ok) return null;
      const data: BlogEntry = await response.json();
      return data;
    } catch (error) {
      console.error("Error fetching blog:", error);
      return null;
    }
  }

================
File: portfolio.next/tailwind.config.ts
================
import type { Config } from "tailwindcss";

export default {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        background: "var(--background)",
        foreground: "var(--foreground)",
      },
    },
  },
  plugins: [],
} satisfies Config;

================
File: portfolio.next/tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    },
    "types": ["jest", "node"]
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts", "jest.config.js"],
  "exclude": ["node_modules"]
}

================
File: portfolio.next/tsconfig.test.json
================
{
    "compilerOptions": {
      "target": "ES2017",
      "lib": ["dom", "dom.iterable", "esnext"],
      "allowJs": true,
      "skipLibCheck": true,
      "strict": true,
      "noEmit": true,
      "esModuleInterop": true,
      "module": "esnext",
      "moduleResolution": "bundler",
      "resolveJsonModule": true,
      "isolatedModules": true,
      "jsx": "react-jsx", // <-- Changed from "preserve" to "react-jsx"
      "incremental": true,
      "plugins": [
        {
          "name": "next"
        }
      ],
      "paths": {
        "@/*": ["./src/*"]
      },
      "types": ["jest", "node"]
    },
    "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts", "jest.config.js"],
    "exclude": ["node_modules"]
  }

================
File: portfolio.node/__tests__/app.test.js
================
// portfolio.node/__tests__/app.test.js
jest.setTimeout(30000); // Increase timeout for database operations

const request = require("supertest");
const mongoose = require("mongoose");
const { MongoMemoryServer } = require("mongodb-memory-server");
const { createApp } = require("../src/app");

let mongoServer;
let app;

beforeAll(async () => {
  // Start in-memory MongoDB instance
  mongoServer = await MongoMemoryServer.create();
  const uri = mongoServer.getUri();
  // Set the environment variable so that connectDB uses the in-memory DB URI.
  process.env.MONGO_URI = uri;
  
  // Create our app; createApp() will call connectDB() using process.env.MONGO_URI.
  app = await createApp();
});

afterAll(async () => {
  await mongoose.connection.dropDatabase();
  await mongoose.disconnect();
  await mongoServer.stop();
});

describe("Express App", () => {
  it("should respond to GET /api/auth/check without token", async () => {
    const res = await request(app).get("/api/auth/check");
    // Since no token is provided, expect a 401 response.
    expect(res.statusCode).toBe(401);
  });
});

================
File: portfolio.node/__tests__/authServices.test.js
================
// portfolio.node/__tests__/authService.test.js
jest.setTimeout(30000); // Extend timeout for database operations

const mongoose = require('mongoose');
const { MongoMemoryServer } = require('mongodb-memory-server');
const authService = require('../src/services/authService');
const User = require('../src/models/User');

let mongoServer;

beforeAll(async () => {
  // Start an in-memory MongoDB instance
  mongoServer = await MongoMemoryServer.create();
  const uri = mongoServer.getUri();
  await mongoose.connect(uri);
});

afterAll(async () => {
  // Drop the database and disconnect
  await mongoose.connection.dropDatabase();
  await mongoose.disconnect();
  await mongoServer.stop();
});

describe('Auth Service', () => {
  it('should register a new user', async () => {
    const user = await authService.registerUser({ username: 'testuser', password: 'testpass' });
    expect(user.username).toBe('testuser');
  });

  it('should not allow duplicate user registration', async () => {
    // Register a user first
    await authService.registerUser({ username: 'dupuser', password: 'testpass' });
    // Attempt duplicate registration should throw an error
    await expect(
      authService.registerUser({ username: 'dupuser', password: 'testpass' })
    ).rejects.toThrow('User already exists');
  });

  it('should login a user and return a token', async () => {
    await authService.registerUser({ username: 'loginuser', password: 'testpass' });
    const token = await authService.loginUser({ username: 'loginuser', password: 'testpass' });
    expect(token).toBeDefined();
    expect(typeof token).toBe('string');
  });

  it('should throw an error for invalid login credentials', async () => {
    await expect(
      authService.loginUser({ username: 'nonexistent', password: 'testpass' })
    ).rejects.toThrow('Invalid credentials');
  });

  it('should verify a valid token', async () => {
    await authService.registerUser({ username: 'verifyuser', password: 'testpass' });
    const token = await authService.loginUser({ username: 'verifyuser', password: 'testpass' });
    const decoded = authService.verifyToken(token);
    expect(decoded.username).toBe('verifyuser');
  });

  it('should throw an error for an invalid token', () => {
    expect(() => authService.verifyToken('invalidtoken')).toThrow('Invalid token');
  });
});

================
File: portfolio.node/__tests__/blogService.test.js
================
// portfolio.node/__tests__/blogService.test.js
const mongoose = require("mongoose");
const { MongoMemoryServer } = require("mongodb-memory-server");
const BlogEntry = require("../src/models/BlogEntry");
const blogService = require("../src/services/blogService");

beforeAll(async () => {
    // Create an in-memory MongoDB instance
    mongoServer = await MongoMemoryServer.create();
    const uri = mongoServer.getUri();
    await mongoose.connect(uri);
  });
  
afterAll(async () => {
    // Drop the test database and disconnect
    await mongoose.connection.dropDatabase();
    await mongoose.disconnect();
    await mongoServer.stop();
});
  
describe("Blog Service", () => {
  it("should create a new blog entry", async () => {
    const data = {
      title: "Test Blog",
      date: "2025-02-22",
      excerpt: "Test excerpt",
      body: "Test body content",
    };
    const blogEntry = await blogService.createBlogEntry(data);
    expect(blogEntry.title).toBe("Test Blog");
    expect(blogEntry.excerpt).toBe("Test excerpt");
  });

  // Additional tests for getAllBlogEntries, getBlogEntryById, etc.
});

================
File: portfolio.node/__tests__/blogValidation.test.js
================
// portfolio.node/__tests__/blogValidation.test.js
const request = require("supertest");
const express = require("express");
const bodyParser = require("express").json;
const validate = require("../src/middlewares/validate");
const { createBlogSchema } = require("../src/validators/blogValidator");

const app = express();
app.use(bodyParser());
// Set up a dummy endpoint that uses the validation middleware.
app.post("/test", validate(createBlogSchema), (req, res) => {
  res.status(200).json({ success: true });
});

describe("Blog Validation Middleware", () => {
  it("should pass validation for valid data", async () => {
    const validData = {
      title: "A Valid Blog Title",
      date: "2025-02-22T00:00:00.000Z",
      excerpt: "This is a valid excerpt.",
      body: "This is the body of the blog.",
    };

    const res = await request(app).post("/test").send(validData);
    expect(res.statusCode).toBe(200);
    expect(res.body.success).toBe(true);
  });

  it("should fail validation for invalid data", async () => {
    const invalidData = {
      title: "No", // Too short
      date: "invalid-date",
      excerpt: "x".repeat(600), // Too long
      body: "", // Empty body
    };

    const res = await request(app).post("/test").send(invalidData);
    expect(res.statusCode).toBe(400);
    expect(res.body.error).toBeDefined();
  });
});

================
File: portfolio.node/__tests__/jest-setup.test.js
================
describe('Environment Variables', () => {
    it('should load MONGO_URI from .env.test', () => {
      expect(process.env.MONGO_URI).toBeDefined();
      // Optionally, you can check for a specific value
      expect(process.env.MONGO_URI).toBe('mongodb://10.0.0.151:27017/portfolio-test');
    });
  });

================
File: portfolio.node/__tests__/projectServices.test.js
================
const mongoose = require("mongoose");
const { MongoMemoryServer } = require("mongodb-memory-server");
const projectService = require("../src/services/projectService");
const Project = require("../src/models/Project");

let mongoServer;

beforeAll(async () => {
  // Start in-memory MongoDB instance
  mongoServer = await MongoMemoryServer.create();
  const uri = mongoServer.getUri();
  await mongoose.connect(uri);
});

afterAll(async () => {
  // Clean up and disconnect
  await mongoose.connection.dropDatabase();
  await mongoose.disconnect();
  await mongoServer.stop();
});

describe("Project Service", () => {
  it("should create a new project", async () => {
    const data = {
      title: "Test Project",
      description: "A test project",
      image: "test.jpg",
      link: "http://example.com",
    };
    const project = await projectService.createProject(data);
    expect(project.title).toBe("Test Project");
    expect(project.description).toBe("A test project");
  });

  it("should get all projects", async () => {
    // Create two projects first
    const data1 = {
      title: "Project 1",
      description: "Description 1",
      image: "image1.jpg",
      link: "http://project1.com",
    };
    const data2 = {
      title: "Project 2",
      description: "Description 2",
      image: "image2.jpg",
      link: "http://project2.com",
    };
    await projectService.createProject(data1);
    await projectService.createProject(data2);

    const projects = await projectService.getAllProjects();
    expect(projects.length).toBeGreaterThanOrEqual(2);
  });

  it("should get a project by id", async () => {
    const data = {
      title: "GetById Project",
      description: "Test get project by id",
      image: "getbyid.jpg",
      link: "http://getbyid.com",
    };
    const createdProject = await projectService.createProject(data);
    const foundProject = await projectService.getProjectById(createdProject._id);
    expect(foundProject).not.toBeNull();
    expect(foundProject.title).toBe("GetById Project");
  });

  it("should update a project", async () => {
    const data = {
      title: "Old Project Title",
      description: "Old description",
      image: "old.jpg",
      link: "http://old.com",
    };
    const createdProject = await projectService.createProject(data);

    const updateData = {
      title: "New Project Title",
      description: "New description",
    };
    const updatedProject = await projectService.updateProject(createdProject._id, updateData);
    expect(updatedProject.title).toBe("New Project Title");
    expect(updatedProject.description).toBe("New description");
  });

  it("should delete a project", async () => {
    const data = {
      title: "Project to delete",
      description: "This project will be deleted",
      image: "delete.jpg",
      link: "http://delete.com",
    };
    const createdProject = await projectService.createProject(data);
    const deletedProject = await projectService.deleteProject(createdProject._id);
    expect(deletedProject).not.toBeNull();

    // Confirm deletion by trying to retrieve the project
    const shouldBeNull = await projectService.getProjectById(createdProject._id);
    expect(shouldBeNull).toBeNull();
  });
});

================
File: portfolio.node/__tests__/server.test.js
================
const request = require('supertest');
const express = require('express');
const cookieParser = require('cookie-parser');

// Create a simple Express app for testing purposes.
const app = express();
app.use(express.json());
app.use(cookieParser());

// Define a simple test route.
app.get('/api/test', (req, res) => res.status(200).json({ message: 'Test endpoint works' }));

describe('GET /api/test', () => {
  it('should return a JSON object with a success message', async () => {
    const response = await request(app).get('/api/test');
    expect(response.statusCode).toBe(200);
    expect(response.body.message).toBe('Test endpoint works');
  });
});

================
File: portfolio.node/__tests__/userService.test.js
================
jest.setTimeout(30000); // Increase timeout for database operations

const mongoose = require("mongoose");
const { MongoMemoryServer } = require("mongodb-memory-server");
const userService = require("../src/services/userService");
const User = require("../src/models/User");

let mongoServer;

beforeAll(async () => {
  mongoServer = await MongoMemoryServer.create();
  const uri = mongoServer.getUri();
  process.env.MONGO_URI = uri;
  await mongoose.connect(uri);
});

afterAll(async () => {
  await mongoose.connection.dropDatabase();
  await mongoose.disconnect();
  await mongoServer.stop();
});

describe("User Service", () => {
  it("should create a new user", async () => {
    const userData = { username: "testuser", password: "testpass" };
    const user = await userService.createUser(userData);
    expect(user.username).toBe("testuser");
  });

  it("should throw an error if username or password is missing", async () => {
    await expect(userService.createUser({ username: "", password: "testpass" }))
      .rejects.toThrow("Username and password are required");
  });

  it("should throw an error if the user already exists", async () => {
    const userData = { username: "duplicateUser", password: "testpass" };
    // Create the user the first time.
    await userService.createUser(userData);
    // Try creating the same user again.
    await expect(userService.createUser(userData))
      .rejects.toThrow("User already exists");
  });
});

================
File: portfolio.node/.env.test
================
MONGO_URI=mongodb://10.0.0.151:27017/portfolio-test
PORT=5000

================
File: portfolio.node/Dockerfile
================
FROM node:22
WORKDIR /app
COPY ./src .
RUN npm install
CMD ["node", "server.js"]

================
File: portfolio.node/jest.config.js
================
module.exports = {
    testEnvironment: 'node',
    testMatch: ['**/__tests__/**/*.test.js'],
    verbose: true,
    setupFiles: ['./jest.setup.js'], 
  };

================
File: portfolio.node/jest.setup.js
================
require('dotenv').config({ path: '.env.test' });
jest.setTimeout(10000); // Increase the global timeout to 10 seconds

================
File: portfolio.node/package.json
================
{
  "name": "portfolio.node",
  "version": "1.0.0",
  "description": "",
  "main": "src/server.js",
  "scripts": {
    "start": "node src/server.js",
    "dev": "nodemon src/server.js",
    "test": "jest",
    "test:watch": "jest --watch"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "type": "commonjs",
  "dependencies": {
    "bcrypt": "^5.1.1",
    "cookie-parser": "^1.4.7",
    "cors": "^2.8.5",
    "dotenv": "^16.4.7",
    "express": "^4.21.2",
    "joi": "^17.13.3",
    "jsonwebtoken": "^9.0.2",
    "mongoose": "^8.10.1"
  },
  "devDependencies": {
    "@types/jest": "^29.5.14",
    "@types/supertest": "^6.0.2",
    "jest": "^29.7.0",
    "mongodb-memory-server": "^10.1.4",
    "nodemon": "^3.1.9",
    "supertest": "^7.0.0"
  }
}

================
File: portfolio.node/src/app.js
================
// portfolio.node/src/app.js
require("dotenv").config();
const express = require("express");
const cookieParser = require("cookie-parser");
const cors = require("cors");
const connectDB = require("./config/db");

const authRoutes = require("./routes/authRoutes");
const projectRoutes = require("./routes/projectRoutes");
const blogRoutes = require("./routes/blogRoutes");

async function createApp() {
  // Connect to the database
  await connectDB();

  const app = express();

  app.use(cors({
    origin: "http://localhost:3000",
    credentials: true, // Allow cookies to be sent
  }));
  app.use(express.json());
  app.use(express.urlencoded({ extended: true }));
  app.use(cookieParser());

  // Set up routes
  app.use("/api/auth", authRoutes);
  app.use("/api/projects", projectRoutes);
  app.use("/api/blogs", blogRoutes);

  return app;
}

module.exports = { createApp };

================
File: portfolio.node/src/cache.js
================
const cache = {
    blogs: {},
    projects: {},
    "blogs-timestamp": 0,
    "projects-timestamp": 0,
  };
  
  const CACHE_TTL = 5 * 60 * 1000; // 5 minutes
  
  // ✅ Check if cache is valid based on timestamp
  function isCacheValid(key) {
    return Date.now() - cache[`${key}-timestamp`] < CACHE_TTL;
  }
  
  // ✅ Get all cached data or fetch if expired
  async function getAllCached(key, fetchFunction) {
    if (isCacheValid(key)) {
      console.log(`Using cached ${key} data`);
      return Object.values(cache[key]); // Return all cached items
    }
  
    console.log(`Refreshing ${key} cache`);
    const data = await fetchFunction();
    cache[key] = {}; // Reset key storage
  
    data.forEach((item) => {
      cache[key][item._id] = item; // Store by ID
    });
  
    cache[`${key}-timestamp`] = Date.now();
    return data;
  }
  
  // ✅ Get a single item from cache or fetch if missing
  async function getCachedById(key, id, fetchFunction) {
    if (cache[key][id]) {
      console.log(`Using cached ${key} entry: ${id}`);
      return cache[key][id];
    }
  
    console.log(`Fetching ${key} entry: ${id} from DB`);
    const item = await fetchFunction(id);
    if (item) {
      cache[key][id] = item;
    }
    return item;
  }
  
  // ✅ Add a new item to cache
  function addToCache(key, item) {
    cache[key][item._id] = item;
  }
  
  // ✅ Reset cache manually (useful for updates/deletes)
  function clearCache(key) {
    cache[key] = {};
    cache[`${key}-timestamp`] = 0;
  }
  
  module.exports = { getAllCached, getCachedById, addToCache, clearCache };

================
File: portfolio.node/src/config/db.js
================
const mongoose = require("mongoose");

const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGO_URI);
    console.log("MongoDB Connected");
  } catch (error) {
    console.error("MongoDB Connection Failed", error);
    process.exit(1);
  }
};

module.exports = connectDB;

================
File: portfolio.node/src/middlewares/auth.js
================
module.exports = (req, res, next) => {
    if (!req.cookies.session) return res.status(401).json({ message: "Unauthorized" });
    next();
  };

================
File: portfolio.node/src/middlewares/validate.js
================
// portfolio.node/src/middleware/validate.js
module.exports = (schema) => {
    return (req, res, next) => {
      const { error } = schema.validate(req.body);
      if (error) {
        return res.status(400).json({ error: error.details[0].message });
      }
      next();
    };
  };

================
File: portfolio.node/src/models/BlogEntry.js
================
const mongoose = require("mongoose");

const BlogEntrySchema = new mongoose.Schema({
  title: String,
  date: String,
  excerpt: String,
  body: String,
  link: String,
});

BlogEntrySchema.pre('save', function(next) {
  // Generate slug from title - convert to lowercase, replace spaces with hyphens,
  // remove special characters
  const slug = this.title
    .toLowerCase()
    .replace(/[^\w\s-]/g, '') // Remove special chars
    .replace(/\s+/g, '-')     // Replace spaces with hyphens
    .replace(/-+/g, '-');     // Remove consecutive hyphens
  
  // Option 1: Just use the slug
  this.link = `${slug}-${this._id}`;
  
  // Option 2: Include date for better organization (YYYY-MM-DD format)
  // Assuming date is stored as a string in format that can be parsed by Date
  // const dateObj = new Date(this.date);
  // const formattedDate = dateObj.toISOString().split('T')[0]; // YYYY-MM-DD
  // this.link = `/blogs/${formattedDate}-${slug}-${this._id}`;
  
  next();
});

module.exports = mongoose.model("BlogEntry", BlogEntrySchema);

================
File: portfolio.node/src/models/Project.js
================
const mongoose = require("mongoose");

const ProjectSchema = new mongoose.Schema({
  title: String,
  description: String,
  image: String,
  link: String,
});

module.exports = mongoose.model("Project", ProjectSchema);

================
File: portfolio.node/src/models/User.js
================
const mongoose = require("mongoose");
const bcrypt = require("bcrypt");

const UserSchema = new mongoose.Schema({
  username: { type: String, required: true, unique: true },
  passwordHash: { type: String, required: true },
});

// Hash password before saving
UserSchema.pre("save", async function (next) {
  if (!this.isModified("passwordHash")) return next();
  const salt = await bcrypt.genSalt(10);
  this.passwordHash = await bcrypt.hash(this.passwordHash, salt);
  next();
});

// Compare password for login
UserSchema.methods.validatePassword = async function (password) {
  return bcrypt.compare(password, this.passwordHash);
};

module.exports = mongoose.model("User", UserSchema);

================
File: portfolio.node/src/routes/authRoutes.js
================
const express = require("express");
const authService = require("../services/authService");
const router = express.Router();

// Register a new user using the auth service
router.post("/register", async (req, res) => {
  try {
    const { username, password } = req.body;
    await authService.registerUser({ username, password });
    res.status(201).json({ message: "User created successfully" });
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
});

// Login a user using the auth service
router.post("/login", async (req, res) => {
  try {
    const { username, password } = req.body;
    const token = await authService.loginUser({ username, password });
    
    // Set the token in an HTTP-only cookie
    res.cookie("auth-token", token, {
      httpOnly: true,
      secure: process.env.NODE_ENV === "production",
      sameSite: "Strict",
      maxAge: 3600000, // 1 hour
    });
    
    res.json({ message: "Login successful" });
  } catch (error) {
    res.status(401).json({ message: error.message });
  }
});

// Check authentication using the auth service
router.get("/check", (req, res) => {
  const token = req.cookies["auth-token"];
  if (!token) {
    return res.status(401).json({ authenticated: false, message: "No token provided" });
  }
  try {
    const decoded = authService.verifyToken(token);
    res.json({ authenticated: true, user: decoded });
  } catch (error) {
    res.status(401).json({ authenticated: false, message: error.message });
  }
});

// Logout by clearing the token cookie
router.get("/logout", (req, res) => {
  res.clearCookie("auth-token");
  res.json({ message: "Logged out" });
});

module.exports = router;

================
File: portfolio.node/src/routes/blogRoutes.js
================
// portfolio.node/src/routes/blogRoutes.js
const express = require("express");
const authMiddleware = require("../middlewares/auth");
const blogService = require("../services/blogService");
const router = express.Router();
const validate = require("../middlewares/validate");
const { createBlogSchema } = require("../validators/blogValidator");


// Create a new blog entry using the service module
router.post("/", authMiddleware, validate(createBlogSchema), async (req, res) => {
  try {
    const newEntry = await blogService.createBlogEntry(req.body);
    res.status(201).json(newEntry);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Get all blog entries using the service module
router.get("/", async (req, res) => {
  try {
    const blogs = await blogService.getAllBlogEntries();
    res.json(blogs);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Get a single blog entry by ID using the service module
router.get("/:id", async (req, res) => {
  try {
    const blog = await blogService.getBlogEntryById(req.params.id);
    if (!blog) return res.status(404).json({ error: "Entry not found" });
    res.json(blog);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Update a blog entry by ID using the service module
router.put("/:id", authMiddleware, validate(createBlogSchema), async (req, res) => {
  try {
    const updatedEntry = await blogService.updateBlogEntry(req.params.id, req.body);
    if (!updatedEntry) return res.status(404).json({ error: "Entry not found" });
    res.json(updatedEntry);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Delete a blog entry by ID using the service module
router.delete("/:id", authMiddleware, async (req, res) => {
  try {
    const deletedEntry = await blogService.deleteBlogEntry(req.params.id);
    if (!deletedEntry) return res.status(404).json({ error: "Entry not found" });
    res.json({ message: "Entry deleted successfully" });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

module.exports = router;

================
File: portfolio.node/src/routes/projectRoutes.js
================
const express = require("express");
const authMiddleware = require("../middlewares/auth");
const projectService = require("../services/projectService");
const router = express.Router();

// Create a new project using the service module
router.post("/", authMiddleware, async (req, res) => {
  try {
    const newProject = await projectService.createProject(req.body);
    res.status(201).json(newProject);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Get all projects using the service module
router.get("/", async (req, res) => {
  try {
    const projects = await projectService.getAllProjects();
    res.json(projects);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Get a single project by ID using the service module
router.get("/:id", async (req, res) => {
  try {
    const project = await projectService.getProjectById(req.params.id);
    if (!project) return res.status(404).json({ error: "Project not found" });
    res.json(project);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Update a project by ID using the service module
router.put("/:id", authMiddleware, async (req, res) => {
  try {
    const updatedProject = await projectService.updateProject(req.params.id, req.body);
    if (!updatedProject) return res.status(404).json({ error: "Project not found" });
    res.json(updatedProject);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Delete a project by ID using the service module
router.delete("/:id", authMiddleware, async (req, res) => {
  try {
    const deletedProject = await projectService.deleteProject(req.params.id);
    if (!deletedProject) return res.status(404).json({ error: "Project not found" });
    res.json({ message: "Project deleted successfully" });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

module.exports = router;

================
File: portfolio.node/src/routes/userRoutes.js
================
const express = require("express");
const userService = require("../services/userService");

const router = express.Router();

// Endpoint for user registration
router.post("/", async (req, res) => {
  try {
    const { username, password } = req.body;

    // Delegate the creation to the user service.
    const newUser = await userService.createUser({ username, password });
    console.log("New User Created:", newUser.username);
    res.status(201).json({ message: "User created successfully" });
  } catch (error) {
    console.error("Error creating user:", error);
    // Use 400 for client errors (e.g., missing fields or duplicate user)
    res.status(error.message === "User already exists" || error.message === "Username and password are required" ? 400 : 500)
       .json({ error: error.message });
  }
});

// A simple GET endpoint that serves a registration form.
router.get("/create", async (req, res) => {
  res.send(`
        <html>
        <head><title>Create User</title></head>
        <body>
            <h2>Create a New User</h2>
                <form action="/api/users" method="POST">
                <label>Username: <input type="text" name="username" required /></label><br/>
                <label>Password: <input type="password" name="password" required /></label><br/>
                <button type="submit">Create</button>
            </form>
        </body>
        </html>
    `);
});

module.exports = router;

================
File: portfolio.node/src/server.js
================
// portfolio.node/src/server.js
const { createApp } = require("./app");

const PORT = process.env.PORT || 5000;

createApp()
  .then(app => {
    app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
  })
  .catch(err => {
    console.error("Failed to create app:", err);
  });

================
File: portfolio.node/src/services/authService.js
================
const User = require("../models/User");
const jwt = require("jsonwebtoken");

// Use SECRET_KEY from environment variables or fallback
const SECRET_KEY = process.env.SECRET_KEY || "your_secret_key";

/**
 * Registers a new user.
 * @param {Object} param0 - Contains username and password.
 * @returns {Promise<Object>} - The created user.
 */
async function registerUser({ username, password }) {
  const existingUser = await User.findOne({ username });
  if (existingUser) {
    throw new Error("User already exists");
  }
  // Create a new user; the pre-save hook in User model will hash the password.
  const user = new User({ username, passwordHash: password });
  await user.save();
  return user;
}

/**
 * Logs in a user by validating credentials and returning a JWT.
 * @param {Object} param0 - Contains username and password.
 * @returns {Promise<string>} - JWT token.
 */
async function loginUser({ username, password }) {
  const user = await User.findOne({ username });
  if (!user || !(await user.validatePassword(password))) {
    throw new Error("Invalid credentials");
  }
  const token = jwt.sign({ id: user.id, username: user.username }, SECRET_KEY, {
    expiresIn: "1h",
  });
  return token;
}

/**
 * Verifies a JWT token.
 * @param {string} token - The JWT token.
 * @returns {Object} - Decoded token information.
 */
function verifyToken(token) {
  try {
    const decoded = jwt.verify(token, SECRET_KEY);
    return decoded;
  } catch (error) {
    throw new Error("Invalid token");
  }
}

module.exports = {
  registerUser,
  loginUser,
  verifyToken,
};

================
File: portfolio.node/src/services/blogService.js
================
// portfolio.node/src/services/blogService.js
const BlogEntry = require("../models/BlogEntry");
const { addToCache, clearCache } = require("../cache");

/**
 * Creates a new blog entry and adds it to the cache.
 * @param {Object} data - Blog entry data.
 * @returns {Promise<Object>} - The saved blog entry.
 */
async function createBlogEntry(data) {
  const newEntry = new BlogEntry(data);
  await newEntry.save();
  addToCache("blogs", newEntry);
  return newEntry;
}

/**
 * Retrieves all blog entries sorted by creation date.
 * @returns {Promise<Array>} - Array of blog entries.
 */
async function getAllBlogEntries() {
  // Optionally, you could integrate caching here as well.
  const blogs = await BlogEntry.find().sort({ createdAt: -1 });
  return blogs;
}

/**
 * Retrieves a single blog entry by its ID.
 * @param {string} id - The blog entry ID.
 * @returns {Promise<Object|null>} - The found blog entry or null.
 */
async function getBlogEntryById(id) {
  const blog = await BlogEntry.findById(id);
  return blog;
}

/**
 * Updates a blog entry by its ID.
 * @param {string} id - The blog entry ID.
 * @param {Object} data - Data to update.
 * @returns {Promise<Object|null>} - The updated blog entry or null.
 */
async function updateBlogEntry(id, data) {
  const updatedEntry = await BlogEntry.findByIdAndUpdate(id, data, { new: true });
  return updatedEntry;
}

/**
 * Deletes a blog entry by its ID and clears the related cache.
 * @param {string} id - The blog entry ID.
 * @returns {Promise<Object|null>} - The deleted blog entry or null.
 */
async function deleteBlogEntry(id) {
  const deletedEntry = await BlogEntry.findByIdAndDelete(id);
  clearCache("blogs");
  return deletedEntry;
}

module.exports = {
  createBlogEntry,
  getAllBlogEntries,
  getBlogEntryById,
  updateBlogEntry,
  deleteBlogEntry,
};

================
File: portfolio.node/src/services/projectService.js
================
const Project = require("../models/Project");

/**
 * Creates a new project.
 * @param {Object} data - Project data.
 * @returns {Promise<Object>} - The created project.
 */
async function createProject(data) {
  const project = new Project(data);
  await project.save();
  return project;
}

/**
 * Retrieves all projects.
 * @returns {Promise<Array>} - Array of projects.
 */
async function getAllProjects() {
  return Project.find();
}

/**
 * Retrieves a project by its ID.
 * @param {string} id - The project ID.
 * @returns {Promise<Object|null>} - The found project or null.
 */
async function getProjectById(id) {
  return Project.findById(id);
}

/**
 * Updates a project by its ID.
 * @param {string} id - The project ID.
 * @param {Object} data - Data to update.
 * @returns {Promise<Object|null>} - The updated project or null.
 */
async function updateProject(id, data) {
  return Project.findByIdAndUpdate(id, data, { new: true });
}

/**
 * Deletes a project by its ID.
 * @param {string} id - The project ID.
 * @returns {Promise<Object|null>} - The deleted project or null.
 */
async function deleteProject(id) {
  return Project.findByIdAndDelete(id);
}

module.exports = {
  createProject,
  getAllProjects,
  getProjectById,
  updateProject,
  deleteProject,
};

================
File: portfolio.node/src/services/userService.js
================
const User = require("../models/User");

/**
 * Creates a new user.
 * 
 * @param {Object} userData - An object containing user details.
 * @param {string} userData.username - The username.
 * @param {string} userData.password - The plain-text password.
 * @returns {Promise<Object>} - The newly created user.
 * @throws {Error} - If username or password is missing or if the user already exists.
 */
async function createUser({ username, password }) {
    if (!username || !password) {
      throw new Error("Username and password are required");
    }
  
    // Check for an existing user with the same username.
    const existingUser = await User.findOne({ username });
    if (existingUser) {
      throw new Error("User already exists");
    }
  
    // Create the user instance.
    // The User model's pre-save hook will hash the password automatically.
    const newUser = new User({ username, passwordHash: password });
    await newUser.save();
    return newUser;
  }

/**
 * Retrieves all users.
 * @returns {Promise<Array>} - Array of user.
 */
async function getAllUsers() {
  return User.find();
}

/**
 * Retrieves a users by its ID.
 * @param {string} id - The user ID.
 * @returns {Promise<Object|null>} - The found user  or null.
 */
async function getUserById(id) {
  return User.findById(id);
}

/**
 * Updates a user by its ID.
 * @param {string} id - The user ID.
 * @param {Object} data - Data to update.
 * @returns {Promise<Object|null>} - The updated user or null.
 */
async function updateUser(id, data) {
  return User.findByIdAndUpdate(id, data, { new: true });
}

/**
 * Deletes a user by its ID.
 * @param {string} id - The user ID.
 * @returns {Promise<Object|null>} - The deleted user or null.
 */
async function deleteUser(id) {
  return User.findByIdAndDelete(id);
}

module.exports = {
  createUser,
  getAllUsers,
  getUserById,
  updateUser,
  deleteUser,
};

================
File: portfolio.node/src/validators/blogValidator.js
================
// portfolio.node/src/validators/blogValidator.js
const Joi = require('joi');

const createBlogSchema = Joi.object({
  title: Joi.string().min(3).max(255).required(),
  date: Joi.string().isoDate().required(),
  excerpt: Joi.string().max(500).required(),
  body: Joi.string().required(),
});

module.exports = {
  createBlogSchema,
};

================
File: README.md
================
# 🚀 My Portfolio & Blog

Welcome to my self-hosted, Dockerized, and fully custom-built portfolio & blog! 🎉  
No more WordPress headaches—just a lean, mean, modern web stack.

## ✨ Stack
- **Frontend:** Next.js (React, TypeScript, TailwindCSS)
- **Backend:** Node.js, Express, MongoDB (Mongoose)
- **Authentication:** Cookie-based auth
- **Hosting:** Self-hosted with **Docker** + **Nginx Reverse Proxy**

## 🏗️ Setup & Run
### Prerequisites
- **Docker** installed and running  
- **Node.js** (for local development)

### Development
```sh
git clone https://github.com/your-username/your-repo.git
cd your-repo
npm install
npm run dev
```
### Running with Docker
```sh
docker-compose up --build
```
## Features
- ✅ Blog system with Markdown rendering
- ✅ Admin panel for managing content
- ✅ Fully containerized (Docker)
- ✅ Dark mode (because why not?)
- ✅ No bloated CMS—just speed!

## 📸 Screenshots
🚧 Coming soon...



================================================================
End of Codebase
================================================================
